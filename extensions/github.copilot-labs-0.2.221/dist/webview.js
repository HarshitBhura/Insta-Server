(()=>{"use strict";var __webpack_modules__={701:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(935);\n;// CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.js\nfunction n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(false){ var i, o; }throw Error("[Immer] minified error nr: "+n+(t.length?" "+t.map((function(n){return"\'"+n+"\'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(n){return!!n&&!!n[Q]}function t(n){return!!n&&(function(n){if(!n||"object"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return t===Object||"function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n(2)}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return true||0,U}function j(n,r){r&&(b("Patches"),n.u=[],n.s=[],n.v=r)}function O(n){g(n),n.p.forEach(S),n.p=null}function g(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b("ES5").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b("Patches").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b("Patches").R(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s){if( false&&0,r(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!r(v))return;e.m=!1}if(t(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function R(n,r,t){var e=s(r)?b("MapSet").N(r,t):v(r)?b("MapSet").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b("ES5").J(r,t);return(t?t.A:_()).p.push(e),e}function D(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1}else e=F(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return false&&0,en.get(r,n)},set:function(r){var t=this[Q]; false&&0,en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.O&&n(3,JSON.stringify(p(r)))}var s={};m("ES5",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&"object"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function T(){function e(n){if(!t(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return u(n,L)&&(r[L]=n[L]),r}function f(n){return r(n)?e(n):n}var c="add";m("Patches",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=o(f),p=""+i[s];0!==v&&1!==v||"__proto__"!==p&&"constructor"!==p||n(24),"function"==typeof f&&"prototype"===p&&n(24),"object"!=typeof(f=a(f,p))&&n(15,i.join("/"))}var l=o(f),d=e(t.value),h=i[i.length-1];switch(u){case"replace":switch(l){case 2:return f.set(h,d);case 3:n(16);default:return f[h]=d}case c:switch(l){case 1:return"-"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case"remove":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:n(17,u)}})),r},R:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;i(n.D,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?"replace":c:"remove";if(v!==p||"replace"!==l){var d=r.concat(n);t.push("remove"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:"remove",path:d}:"remove"===l?{op:c,path:d,value:f(v)}:{op:"replace",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.D,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:"replace",path:p,value:f(u[v])}),e.push({op:"replace",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:"replace",path:r.concat(["length"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:"remove",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:"remove",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:"replace",path:[],value:r===H?void 0:r}),e.push({op:"replace",path:[],value:n})}})}function C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.D=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(t(r)){var e=R(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.O&&n(3,JSON.stringify(p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[Q]={i:2,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,D:void 0,t:n,k:this,C:!1,O:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,"size",{get:function(){return p(this[Q]).size}}),o.has=function(n){return p(this[Q]).has(n)},o.set=function(n,r){var t=this[Q];return u(t),p(t).has(n)&&p(t).get(n)===r||(e(t),k(t),t.D.set(n,!0),t.o.set(n,r),t.D.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),e(r),k(r),r.t.has(n)?r.D.set(n,!1):r.D.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[Q];u(n),p(n).size&&(e(n),k(n),n.D=new Map,i(n.t,(function(r){n.D.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;p(this[Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[Q];u(r);var i=p(r).get(n);if(r.I||!t(i))return i;if(i!==r.t.get(n))return i;var o=R(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return p(this[Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[Q]={i:3,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,O:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,"size",{get:function(){return p(this[Q]).size}}),t.has=function(n){var r=this[Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[Q];return u(r),this.has(n)||(o(r),k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),o(r),k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[Q];u(n),p(n).size&&(o(n),k(n),n.o.clear())},t.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();m("MapSet",{N:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function J(){N(),C(),T()}function K(n){return n}function $(n){return n}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",V="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the \'length\' property",15:function(n){return"Cannot apply patch, path doesn\'t resolve: "+n},16:\'Sets cannot have "replace" patches.\',17:function(n){return"Unsupported patch operation: "+n},18:function(n){return"The plugin for \'"+n+"\' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with \'[immerable]: true\'. Got \'"+n+"\'"},22:function(n){return"\'current\' expects a draft, got: "+n},23:function(n){return"\'original\' expects a draft, got: "+n},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&"number"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return false&&0,on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return false&&0,en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n(6),void 0!==o&&"function"!=typeof o&&n(7),t(r)){var c=w(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?O(c):g(c)}return"undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||"object"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d(f,!0),o){var p=[],l=[];b("Patches").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if("function"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var e=r&&r[Q]; false&&(0);var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b("Patches").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);/* harmony default export */ const immer_esm = (fn);\n//# sourceMappingURL=immer.esm.js.map\n\n;// CONCATENATED MODULE: ./node_modules/zustand/esm/index.js\n\n\nfunction createStore(createState) {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === "function" ? partial(state) : partial;\n    if (nextState !== state) {\n      const previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");\n    let currentSlice = selector(state);\n    function listenerToAdd() {\n      const nextSlice = selector(state);\n      if (!equalityFn(currentSlice, nextSlice)) {\n        const previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, previousSlice);\n      }\n    }\n    listeners.add(listenerToAdd);\n    return () => listeners.delete(listenerToAdd);\n  };\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => listeners.clear();\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nconst isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? react.useEffect : react.useLayoutEffect;\nfunction create(createState) {\n  const api = typeof createState === "function" ? createStore(createState) : createState;\n  const useStore = (selector = api.getState, equalityFn = Object.is) => {\n    const [, forceUpdate] = (0,react.useReducer)((c) => c + 1, 0);\n    const state = api.getState();\n    const stateRef = (0,react.useRef)(state);\n    const selectorRef = (0,react.useRef)(selector);\n    const equalityFnRef = (0,react.useRef)(equalityFn);\n    const erroredRef = (0,react.useRef)(false);\n    const currentSliceRef = (0,react.useRef)();\n    if (currentSliceRef.current === void 0) {\n      currentSliceRef.current = selector(state);\n    }\n    let newStateSlice;\n    let hasNewStateSlice = false;\n    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    }\n    useIsomorphicLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n      stateRef.current = state;\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    const stateBeforeSubscriptionRef = (0,react.useRef)(state);\n    useIsomorphicLayoutEffect(() => {\n      const listener = () => {\n        try {\n          const nextState = api.getState();\n          const nextStateSlice = selectorRef.current(nextState);\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            stateRef.current = nextState;\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n      const unsubscribe = api.subscribe(listener);\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener();\n      }\n      return unsubscribe;\n    }, []);\n    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n    (0,react.useDebugValue)(sliceToReturn);\n    return sliceToReturn;\n  };\n  Object.assign(useStore, api);\n  useStore[Symbol.iterator] = function() {\n    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");\n    const items = [useStore, api];\n    return {\n      next() {\n        const done = items.length <= 0;\n        return { value: items.shift(), done };\n      }\n    };\n  };\n  return useStore;\n}\n\n\n\n;// CONCATENATED MODULE: ./src/sidebar/store.ts\n\n\n\nvar immer = function immer(config) {\n  return function (set, get, api) {\n    return config(function (fn) {\n      return set(immer_esm(fn));\n    }, get, api);\n  };\n};\n\nvar useStore = create(immer(function (set) {\n  return {\n    isLoading: true,\n    startingLine: 1,\n    selectedText: null,\n    highlightText: null,\n    language: null,\n    prompt: \'\',\n    stop: [],\n    isAnalyzing: false,\n    modelResponse: null,\n    error: null,\n    update: function update(fn) {\n      set(fn);\n    }\n  };\n}));\n;// CONCATENATED MODULE: ./src/sidebar/VSCodeAPI.tsx\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nvar VSCodeWrapper = /*#__PURE__*/function () {\n  function VSCodeWrapper() {\n    _classCallCheck(this, VSCodeWrapper);\n\n    this.vscodeApi = acquireVsCodeApi();\n  }\n  /**\n   * Send message to the extension framework.\n   * @param message\n   */\n\n\n  _createClass(VSCodeWrapper, [{\n    key: "postWebViewMessage",\n    value: function postWebViewMessage(message) {\n      this.vscodeApi.postMessage(message);\n    }\n    /**\n     * Add listener for messages from extension framework.\n     * @param callback called when the extension sends a message\n     * @returns function to clean up the message eventListener.\n     */\n\n  }, {\n    key: "onMessage",\n    value: function onMessage(callback) {\n      window.addEventListener(\'message\', callback);\n      return function () {\n        return window.removeEventListener(\'message\', callback);\n      };\n    }\n  }]);\n\n  return VSCodeWrapper;\n}(); // Singleton to prevent multiple fetches of VsCodeAPI.\n\n\nvar VSCodeAPI = new VSCodeWrapper();\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(795);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(569);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(565);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(216);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(589);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/highlight.js/styles/vs2015.css\nvar vs2015 = __webpack_require__(40);\n;// CONCATENATED MODULE: ./node_modules/highlight.js/styles/vs2015.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(vs2015/* default */.Z, options);\n\n\n\n\n       /* harmony default export */ const styles_vs2015 = (vs2015/* default */.Z && vs2015/* default.locals */.Z.locals ? vs2015/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/sidebar/components/CodeSyntax.tsx\n\n\nfunction CodeSyntax(props) {\n  return react.createElement("div", {\n    className: "relative group overflow-hidden overflow-y-auto",\n    style: {\n      maxHeight: \'20em\'\n    }\n  }, react.createElement("div", {\n    className: "text-xs font-mono whitespace-pre p-4 bg-vscode-input-background overflow-y-auto",\n    dangerouslySetInnerHTML: {\n      __html: props.htmlText\n    }\n  }));\n}\n;// CONCATENATED MODULE: ./src/sidebar/components/ResponseText.tsx\n\nfunction ResponseText(props) {\n  return react.createElement("div", {\n    className: "relative group overflow-hidden text-base pb-4"\n  }, react.createElement("div", {\n    className: "mt-2 mb-4 text-xs uppercase tracking-widest text-vscode-foreground"\n  }, "Result"), props.text ? react.createElement("div", {\n    className: "whitespace-pre-wrap text-sm ".concat(props.isError ? \'text-vscode-debugConsole-errorForeground\' : \'text-vscode-foreground\')\n  }, props.text) : props.text === \'\' ? react.createElement("div", {\n    className: "italic opacity-50 text-sm text-vscode-debugConsole-errorForeground"\n  }, "No response provided") : null);\n}\n;// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/iconsManifest.js\nvar IconsManifest = [\n  {\n    "id": "fa",\n    "name": "Font Awesome",\n    "projectUrl": "https://fontawesome.com/",\n    "license": "CC BY 4.0 License",\n    "licenseUrl": "https://creativecommons.org/licenses/by/4.0/"\n  },\n  {\n    "id": "io",\n    "name": "Ionicons 4",\n    "projectUrl": "https://ionicons.com/",\n    "license": "MIT",\n    "licenseUrl": "https://github.com/ionic-team/ionicons/blob/master/LICENSE"\n  },\n  {\n    "id": "io5",\n    "name": "Ionicons 5",\n    "projectUrl": "https://ionicons.com/",\n    "license": "MIT",\n    "licenseUrl": "https://github.com/ionic-team/ionicons/blob/master/LICENSE"\n  },\n  {\n    "id": "md",\n    "name": "Material Design icons",\n    "projectUrl": "http://google.github.io/material-design-icons/",\n    "license": "Apache License Version 2.0",\n    "licenseUrl": "https://github.com/google/material-design-icons/blob/master/LICENSE"\n  },\n  {\n    "id": "ti",\n    "name": "Typicons",\n    "projectUrl": "http://s-ings.com/typicons/",\n    "license": "CC BY-SA 3.0",\n    "licenseUrl": "https://creativecommons.org/licenses/by-sa/3.0/"\n  },\n  {\n    "id": "go",\n    "name": "Github Octicons icons",\n    "projectUrl": "https://octicons.github.com/",\n    "license": "MIT",\n    "licenseUrl": "https://github.com/primer/octicons/blob/master/LICENSE"\n  },\n  {\n    "id": "fi",\n    "name": "Feather",\n    "projectUrl": "https://feathericons.com/",\n    "license": "MIT",\n    "licenseUrl": "https://github.com/feathericons/feather/blob/master/LICENSE"\n  },\n  {\n    "id": "gi",\n    "name": "Game Icons",\n    "projectUrl": "https://game-icons.net/",\n    "license": "CC BY 3.0",\n    "licenseUrl": "https://creativecommons.org/licenses/by/3.0/"\n  },\n  {\n    "id": "wi",\n    "name": "Weather Icons",\n    "projectUrl": "https://erikflowers.github.io/weather-icons/",\n    "license": "SIL OFL 1.1",\n    "licenseUrl": "http://scripts.sil.org/OFL"\n  },\n  {\n    "id": "di",\n    "name": "Devicons",\n    "projectUrl": "https://vorillaz.github.io/devicons/",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "ai",\n    "name": "Ant Design Icons",\n    "projectUrl": "https://github.com/ant-design/ant-design-icons",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "bs",\n    "name": "Bootstrap Icons",\n    "projectUrl": "https://github.com/twbs/icons",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "ri",\n    "name": "Remix Icon",\n    "projectUrl": "https://github.com/Remix-Design/RemixIcon",\n    "license": "Apache License Version 2.0",\n    "licenseUrl": "http://www.apache.org/licenses/"\n  },\n  {\n    "id": "fc",\n    "name": "Flat Color Icons",\n    "projectUrl": "https://github.com/icons8/flat-color-icons",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "gr",\n    "name": "Grommet-Icons",\n    "projectUrl": "https://github.com/grommet/grommet-icons",\n    "license": "Apache License Version 2.0",\n    "licenseUrl": "http://www.apache.org/licenses/"\n  },\n  {\n    "id": "hi",\n    "name": "Heroicons",\n    "projectUrl": "https://github.com/tailwindlabs/heroicons",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "si",\n    "name": "Simple Icons",\n    "projectUrl": "https://simpleicons.org/",\n    "license": "CC0 1.0 Universal",\n    "licenseUrl": "https://creativecommons.org/publicdomain/zero/1.0/"\n  },\n  {\n    "id": "im",\n    "name": "IcoMoon Free",\n    "projectUrl": "https://github.com/Keyamoon/IcoMoon-Free",\n    "license": "CC BY 4.0 License"\n  },\n  {\n    "id": "bi",\n    "name": "BoxIcons",\n    "projectUrl": "https://github.com/atisawd/boxicons",\n    "license": "CC BY 4.0 License"\n  },\n  {\n    "id": "cg",\n    "name": "css.gg",\n    "projectUrl": "https://github.com/astrit/css.gg",\n    "license": "MIT",\n    "licenseUrl": "https://opensource.org/licenses/MIT"\n  },\n  {\n    "id": "vsc",\n    "name": "VS Code Icons",\n    "projectUrl": "https://github.com/microsoft/vscode-codicons",\n    "license": "CC BY 4.0",\n    "licenseUrl": "https://creativecommons.org/licenses/by/4.0/"\n  }\n]\n;// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/iconContext.js\n\nvar DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nvar IconContext = react.createContext && react.createContext(DefaultContext);\n;// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/iconBase.js\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\n\n\n\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return react.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\n\nfunction iconBase_GenIcon(data) {\n  return function (props) {\n    return react.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nfunction IconBase(props) {\n  var elem = function (conf) {\n    var attr = props.attr,\n        size = props.size,\n        title = props.title,\n        svgProps = __rest(props, ["attr", "size", "title"]);\n\n    var computedSize = size || conf.size || "1em";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + \' \' : \'\') + props.className;\n    return react.createElement("svg", __assign({\n      stroke: "currentColor",\n      fill: "currentColor",\n      strokeWidth: "0"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: "http://www.w3.org/2000/svg"\n    }), title && react.createElement("title", null, title), props.children);\n  };\n\n  return IconContext !== undefined ? react.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}\n;// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/index.js\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-icons/vsc/index.esm.js\n// THIS FILE IS AUTO GENERATED\n\nfunction VscAccount (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M16 7.992C16 3.58 12.416 0 8 0S0 3.58 0 7.992c0 2.43 1.104 4.62 2.832 6.09.016.016.032.016.032.032.144.112.288.224.448.336.08.048.144.111.224.175A7.98 7.98 0 0 0 8.016 16a7.98 7.98 0 0 0 4.48-1.375c.08-.048.144-.111.224-.16.144-.111.304-.223.448-.335.016-.016.032-.016.032-.032 1.696-1.487 2.8-3.676 2.8-6.106zm-8 7.001c-1.504 0-2.88-.48-4.016-1.279.016-.128.048-.255.08-.383a4.17 4.17 0 0 1 .416-.991c.176-.304.384-.576.64-.816.24-.24.528-.463.816-.639.304-.176.624-.304.976-.4A4.15 4.15 0 0 1 8 10.342a4.185 4.185 0 0 1 2.928 1.166c.368.368.656.8.864 1.295.112.288.192.592.24.911A7.03 7.03 0 0 1 8 14.993zm-2.448-7.4a2.49 2.49 0 0 1-.208-1.024c0-.351.064-.703.208-1.023.144-.32.336-.607.576-.847.24-.24.528-.431.848-.575.32-.144.672-.208 1.024-.208.368 0 .704.064 1.024.208.32.144.608.336.848.575.24.24.432.528.576.847.144.32.208.672.208 1.023 0 .368-.064.704-.208 1.023a2.84 2.84 0 0 1-.576.848 2.84 2.84 0 0 1-.848.575 2.715 2.715 0 0 1-2.064 0 2.84 2.84 0 0 1-.848-.575 2.526 2.526 0 0 1-.56-.848zm7.424 5.306c0-.032-.016-.048-.016-.08a5.22 5.22 0 0 0-.688-1.406 4.883 4.883 0 0 0-1.088-1.135 5.207 5.207 0 0 0-1.04-.608 2.82 2.82 0 0 0 .464-.383 4.2 4.2 0 0 0 .624-.784 3.624 3.624 0 0 0 .528-1.934 3.71 3.71 0 0 0-.288-1.47 3.799 3.799 0 0 0-.816-1.199 3.845 3.845 0 0 0-1.2-.8 3.72 3.72 0 0 0-1.472-.287 3.72 3.72 0 0 0-1.472.288 3.631 3.631 0 0 0-1.2.815 3.84 3.84 0 0 0-.8 1.199 3.71 3.71 0 0 0-.288 1.47c0 .352.048.688.144 1.007.096.336.224.64.4.927.16.288.384.544.624.784.144.144.304.271.48.383a5.12 5.12 0 0 0-1.04.624c-.416.32-.784.703-1.088 1.119a4.999 4.999 0 0 0-.688 1.406c-.016.032-.016.064-.016.08C1.776 11.636.992 9.91.992 7.992.992 4.14 4.144.991 8 .991s7.008 3.149 7.008 7.001a6.96 6.96 0 0 1-2.032 4.907z"}}]})(props);\n};\nfunction VscActivateBreakpoints (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 5.5a4.394 4.394 0 0 1-4 4.5 2.955 2.955 0 0 0-.2-1A3.565 3.565 0 0 0 14 5.5a3.507 3.507 0 0 0-7-.3A3.552 3.552 0 0 0 6 5a4.622 4.622 0 0 1 4.5-4A4.481 4.481 0 0 1 15 5.5zM5.5 6a4.5 4.5 0 1 0 0 9.001 4.5 4.5 0 0 0 0-9z"}}]})(props);\n};\nfunction VscAdd (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 7v1H8v6H7V8H1V7h6V1h1v6h6z"}}]})(props);\n};\nfunction VscArchive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 1h-13l-.5.5v3l.5.5H2v8.5l.5.5h11l.5-.5V5h.5l.5-.5v-3l-.5-.5zm-1 3H2V2h12v2h-.5zM3 13V5h10v8H3zm8-6H5v1h6V7z"}}]})(props);\n};\nfunction VscArrowBoth (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3 9l2.146 2.146-.707.708-3-3v-.708l3-3 .707.708L3 8h10l-2.146-2.146.707-.708 3 3v.708l-3 3-.707-.707L13 9H3z"}}]})(props);\n};\nfunction VscArrowDown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.147 9l5 5h.707l5-5-.707-.707L9 12.439V2H8v10.44L3.854 8.292 3.147 9z"}}]})(props);\n};\nfunction VscArrowLeft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7 3.093l-5 5V8.8l5 5 .707-.707-4.146-4.147H14v-1H3.56L7.708 3.8 7 3.093z"}}]})(props);\n};\nfunction VscArrowRight (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9 13.887l5-5V8.18l-5-5-.707.707 4.146 4.147H2v1h10.44L8.292 13.18l.707.707z"}}]})(props);\n};\nfunction VscArrowSmallDown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.7 8.64l-2.5 2.5h-.7L5 8.64l.7-.71 1.65 1.64V4h1v5.57L10 7.92l.7.72z"}}]})(props);\n};\nfunction VscArrowSmallLeft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6.5 10.7L4 8.2v-.7L6.5 5l.71.7-1.64 1.65h5.57v1H5.57L7.22 10l-.72.7z"}}]})(props);\n};\nfunction VscArrowSmallRight (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.64 5l2.5 2.5v.7l-2.5 2.5-.71-.7 1.64-1.65H4v-1h5.57L7.92 5.7l.72-.7z"}}]})(props);\n};\nfunction VscArrowSmallUp (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5 6.5L7.5 4h.7l2.5 2.5-.7.71-1.65-1.64v5.57h-1V5.57L5.7 7.22 5 6.5z"}}]})(props);\n};\nfunction VscArrowSwap (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.207 15.061L1 11.854v-.707L4.207 7.94l.707.707-2.353 2.354H15v1H2.56l2.354 2.353-.707.707zm7.586-7L15 4.854v-.707L11.793.94l-.707.707L13.439 4H1v1h12.44l-2.354 2.354.707.707z"}}]})(props);\n};\nfunction VscArrowUp (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.854 7l-5-5h-.707l-5 5 .707.707L8 3.561V14h1V3.56l4.146 4.147.708-.707z"}}]})(props);\n};\nfunction VscAzure (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15.3702 13.6799L11.3702 1.67989C11.3006 1.47291 11.1652 1.29438 10.9846 1.17159C10.804 1.0488 10.5882 0.988513 10.3702 0.999896H5.63017C5.42052 0.999354 5.21598 1.0647 5.04551 1.18672C4.87504 1.30875 4.74724 1.48127 4.68015 1.67989L0.630165 13.6799C0.577646 13.8346 0.56382 13.9998 0.589943 14.1611C0.616066 14.3225 0.681335 14.4749 0.780007 14.6052C0.878678 14.7354 1.00778 14.8395 1.15598 14.9083C1.30419 14.9771 1.46699 15.0086 1.63017 14.9999H4.56016C4.76809 14.9984 4.97035 14.932 5.13883 14.8101C5.30731 14.6883 5.43363 14.5169 5.50016 14.3199L6.11015 12.5399L9.11015 14.8099C9.28448 14.9362 9.49495 15.0028 9.71018 14.9999H14.3902C14.5517 15.0052 14.7121 14.9712 14.8576 14.901C15.0032 14.8307 15.1295 14.7263 15.2259 14.5965C15.3222 14.4668 15.3856 14.3156 15.4107 14.156C15.4359 13.9963 15.422 13.833 15.3702 13.6799ZM9.75016 14.3399C9.67748 14.3399 9.60693 14.3153 9.55015 14.2699L3.90018 10.0799L3.81016 10.0099H6.81016L6.89017 9.79988L7.89017 7.26988L10.1302 13.8999C10.1482 13.9555 10.1515 14.0148 10.1399 14.072C10.1283 14.1293 10.1022 14.1826 10.064 14.2269C10.0258 14.2711 9.97689 14.3047 9.92191 14.3245C9.86694 14.3443 9.80778 14.3496 9.75016 14.3399V14.3399ZM14.4201 14.3399H10.7002C10.7749 14.1262 10.7749 13.8935 10.7002 13.6799L6.65018 1.67989H10.3702C10.4408 1.68024 10.5095 1.70258 10.5669 1.74379C10.6242 1.78501 10.6673 1.84308 10.6902 1.9099L14.7402 13.9099C14.7538 13.9597 14.756 14.012 14.7464 14.0628C14.7369 14.1136 14.7159 14.1615 14.6851 14.203C14.6542 14.2444 14.6144 14.2783 14.5685 14.302C14.5226 14.3257 14.4718 14.3387 14.4201 14.3399V14.3399Z"}}]})(props);\n};\nfunction VscBeakerStop (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.99994 15.006H8.00746C7.62983 14.7234 7.29348 14.3888 7.00908 14.0126L2.99994 14.017L4.54094 11.006H5.99997L5.99997 11C5.99997 10.6597 6.03398 10.3273 6.09878 10.006H5.04894L6.89294 6.408L6.99994 6.193V2.036L8.99994 2.012V6.007V6.249L9.07058 6.38584C9.38043 6.25613 9.7061 6.15672 10.0439 6.09131L9.99994 6.006V2.006H10.9999V1.006H9.99394V1L9.53794 1.005H4.99994V2H5.99994V5.952L2.10594 13.561C2.03023 13.7133 1.99465 13.8825 2.00254 14.0524C2.01044 14.2224 2.06156 14.3875 2.15106 14.5321C2.24057 14.6768 2.3655 14.7962 2.51404 14.8792C2.66258 14.9621 2.82982 15.0057 2.99994 15.006ZM8.77769 7.67407C9.43548 7.23455 10.2089 7 11 7C12.0608 7 13.0782 7.42149 13.8283 8.17163C14.5785 8.92178 15 9.93913 15 11C15 11.7911 14.7654 12.5645 14.3259 13.2223C13.8864 13.8801 13.2616 14.3928 12.5307 14.6956C11.7998 14.9983 10.9955 15.0774 10.2196 14.9231C9.44366 14.7688 8.73102 14.3878 8.17161 13.8284C7.6122 13.269 7.23122 12.5563 7.07688 11.7804C6.92254 11.0045 7.00167 10.2001 7.30442 9.46924C7.60717 8.73833 8.11989 8.1136 8.77769 7.67407ZM8.87864 13.1213C9.44125 13.6839 10.2043 14 11 14C11.623 14.0018 12.2312 13.8095 12.74 13.45L8.55003 9.26001C8.19046 9.76883 7.99818 10.377 7.99998 11C7.99998 11.7956 8.31603 12.5587 8.87864 13.1213ZM9.25999 8.55005L13.4499 12.74C13.8095 12.2312 14.0018 11.623 14 11C14 10.2044 13.6839 9.44127 13.1213 8.87866C12.5587 8.31605 11.7956 8 11 8C10.3769 7.9982 9.7688 8.19048 9.25999 8.55005Z"}}]})(props);\n};\nfunction VscBeaker (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.893 13.558L10 6.006v-4h1v-1H9.994V1l-.456.005H5V2h1v3.952l-3.894 7.609A1 1 0 0 0 3 15.006h10a1 1 0 0 0 .893-1.448zm-7-7.15L7 6.193V2.036l2-.024v4.237l.11.215 1.827 3.542H5.049l1.844-3.598zM3 14.017l1.54-3.011h6.916l1.547 3L3 14.017z"}}]})(props);\n};\nfunction VscBellDot (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13 8.9c.1.6.2 1.1.4 1.7l.6 1.7-.5.7H10c0 .5-.2 1-.6 1.4-.4.4-.9.6-1.4.6-.5 0-1.1-.2-1.4-.6-.4-.4-.6-.9-.6-1.4H2.5l-.5-.7.6-1.7c.2-.8.4-1.6.4-2.4V6c0-.7.1-1.4.4-2 .3-.7.7-1.2 1.2-1.7s1.1-.8 1.8-1C6.9 1.1 7.5 1 8 1c-.2.3-.4.7-.6 1.1-.2 0-.4 0-.7.2-.5.1-1 .4-1.4.8-.4.3-.8.8-1 1.3-.2.5-.3 1-.3 1.6v2.2c0 .9-.2 1.8-.4 2.7L3.2 12h9.6l-.4-1.1c-.175-.526-.274-1.13-.363-1.674L12 9c.4 0 .7 0 1-.1zM8 14c.2 0 .5-.1.7-.3.2-.2.3-.4.3-.7H7c0 .3.1.5.3.7.2.2.5.3.7.3zm7-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"}}]})(props);\n};\nfunction VscBell (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.377 10.573a7.63 7.63 0 0 1-.383-2.38V6.195a5.115 5.115 0 0 0-1.268-3.446 5.138 5.138 0 0 0-3.242-1.722c-.694-.072-1.4 0-2.07.227-.67.215-1.28.574-1.794 1.053a4.923 4.923 0 0 0-1.208 1.675 5.067 5.067 0 0 0-.431 2.022v2.2a7.61 7.61 0 0 1-.383 2.37L2 12.343l.479.658h3.505c0 .526.215 1.04.586 1.412.37.37.885.586 1.412.586.526 0 1.04-.215 1.411-.586s.587-.886.587-1.412h3.505l.478-.658-.586-1.77zm-4.69 3.147a.997.997 0 0 1-.705.299.997.997 0 0 1-.706-.3.997.997 0 0 1-.3-.705h1.999a.939.939 0 0 1-.287.706zm-5.515-1.71l.371-1.114a8.633 8.633 0 0 0 .443-2.691V6.004c0-.563.12-1.113.347-1.616.227-.514.55-.969.969-1.34.419-.382.91-.67 1.436-.837.538-.18 1.1-.24 1.65-.18a4.147 4.147 0 0 1 2.597 1.4 4.133 4.133 0 0 1 1.004 2.776v2.01c0 .909.144 1.818.443 2.691l.371 1.113h-9.63v-.012z"}}]})(props);\n};\nfunction VscBold (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5 13V3h3.362c1.116 0 1.954.224 2.515.673.565.449.848 1.113.848 1.992 0 .467-.137.881-.41 1.243-.273.357-.645.634-1.116.831.556.151.993.44 1.314.865.325.422.487.925.487 1.511 0 .898-.299 1.603-.897 2.116-.598.513-1.443.769-2.536.769H5zm1.356-4.677v3.599h2.24c.63 0 1.127-.158 1.49-.474.367-.32.55-.76.55-1.319 0-1.204-.673-1.806-2.02-1.806h-2.26zm0-1.058h2.049c.593 0 1.066-.144 1.42-.433.357-.288.536-.68.536-1.174 0-.55-.165-.948-.494-1.195-.33-.252-.831-.378-1.505-.378H6.356v3.18z"}}]})(props);\n};\nfunction VscBook (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 2H9l-.35.15-.65.64-.65-.64L7 2H1.5l-.5.5v10l.5.5h5.29l.86.85h.7l.86-.85h5.29l.5-.5v-10l-.5-.5zm-7 10.32l-.18-.17L7 12H2V3h4.79l.74.74-.03 8.58zM14 12H9l-.35.15-.14.13V3.7l.7-.7H14v9zM6 5H3v1h3V5zm0 4H3v1h3V9zM3 7h3v1H3V7zm10-2h-3v1h3V5zm-3 2h3v1h-3V7zm0 2h3v1h-3V9z"}}]})(props);\n};\nfunction VscBookmark (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M12.5 1h-9l-.5.5v13l.872.335L8 10.247l4.128 4.588L13 14.5v-13l-.5-.5zM12 13.2L8.372 9.165h-.744L4 13.2V2h8v11.2z"}}]})(props);\n};\nfunction VscBracketDot (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 2.97184V2.98361H5.91083C5.71113 2.98361 5.5238 3.02427 5.34802 3.10513C5.17461 3.18275 5.02193 3.28942 4.89086 3.42437C4.76421 3.55475 4.66135 3.71034 4.58238 3.89205C4.50833 4.07152 4.47134 4.26019 4.47134 4.45902C4.47134 4.68725 4.4753 4.9134 4.48321 5.13749C4.49125 5.36105 4.49127 5.58262 4.48324 5.80219C4.47914 6.01973 4.46082 6.2333 4.42826 6.44285C4.39513 6.65175 4.33913 6.85263 4.26039 7.04464C4.18091 7.23843 4.07258 7.42254 3.93616 7.59702C3.82345 7.74119 3.68538 7.87538 3.52283 8C3.68538 8.12462 3.82345 8.25881 3.93616 8.40298C4.07258 8.57746 4.18091 8.76157 4.26039 8.95536C4.33921 9.14757 4.39513 9.35024 4.42823 9.56312C4.46084 9.76883 4.47914 9.98246 4.48324 10.2039C4.49127 10.4195 4.49125 10.6411 4.48321 10.8686C4.4753 11.0885 4.47134 11.3127 4.47134 11.541C4.47134 11.744 4.50838 11.9346 4.58223 12.1137C4.66104 12.2911 4.76386 12.4469 4.89086 12.5818C5.02194 12.7126 5.17396 12.8191 5.34763 12.9008C5.52346 12.9777 5.71095 13.0164 5.91083 13.0164H6V13.2V14H5.91083C5.59743 14 5.29407 13.9384 5.00128 13.8153C4.70818 13.692 4.44942 13.5153 4.22578 13.285C4.00311 13.0558 3.83793 12.805 3.73283 12.5323L3.73232 12.531C3.63387 12.265 3.56819 11.9903 3.53535 11.7072L3.53516 11.7055C3.50677 11.4215 3.4987 11.1316 3.51084 10.8357C3.52272 10.5462 3.52866 10.2567 3.52866 9.96721C3.52866 9.76883 3.48986 9.58047 3.41201 9.40108L3.41129 9.39942C3.33659 9.21871 3.23428 9.0637 3.10412 8.93352L3.10221 8.93161C2.97577 8.79762 2.82457 8.69157 2.64742 8.61396L2.64601 8.61334C2.47001 8.53238 2.28465 8.4918 2.08917 8.4918H2V8.4V7.6V7.5082H2.08917C2.28497 7.5082 2.4706 7.46954 2.64672 7.3925C2.82466 7.31055 2.97644 7.20405 3.10317 7.07359C3.23423 6.93866 3.33687 6.78296 3.4116 6.60601L3.412 6.60507C3.48974 6.42594 3.52866 6.23556 3.52866 6.03279C3.52866 5.74329 3.52272 5.45379 3.51084 5.16428C3.4987 4.86844 3.50678 4.5805 3.53519 4.30053L3.53533 4.29917C3.56814 4.01201 3.63382 3.7352 3.73233 3.46898L3.73282 3.46766C3.83792 3.19498 4.00311 2.94422 4.22578 2.71498C4.44942 2.48474 4.70818 2.30798 5.00128 2.18473C5.29407 2.06161 5.59743 2 5.91083 2H6V2.97184ZM13.9232 8.4918H14V8.4V7.6V7.5082H13.9108C13.7153 7.5082 13.53 7.46762 13.354 7.38666L13.3526 7.38604C13.1754 7.30844 13.0242 7.20238 12.8978 7.06839L12.8959 7.06648C12.7657 6.9363 12.6634 6.78129 12.5887 6.60058L12.588 6.59892C12.5101 6.41953 12.4713 6.23117 12.4713 6.03279C12.4713 5.74329 12.4773 5.45379 12.4892 5.16428C12.5013 4.86842 12.4932 4.57848 12.4648 4.29454L12.4646 4.29285C12.4318 4.00971 12.3661 3.73502 12.2677 3.46897L12.2672 3.46766C12.1621 3.19499 11.9969 2.94422 11.7742 2.71498C11.5506 2.48474 11.2918 2.30798 10.9987 2.18473C10.7059 2.06161 10.4026 2 10.0892 2H10V2.8V2.98361H10.0892C10.2891 2.98361 10.4765 3.0223 10.6524 3.09917C10.826 3.18092 10.9781 3.28736 11.1091 3.41823C11.2361 3.55305 11.339 3.70889 11.4178 3.88628C11.4916 4.0654 11.5287 4.25596 11.5287 4.45902C11.5287 4.68727 11.5247 4.91145 11.5168 5.13142C11.5088 5.35894 11.5087 5.58049 11.5168 5.79605C11.5209 6.01754 11.5392 6.23117 11.5718 6.43688C11.6049 6.64976 11.6608 6.85243 11.7396 7.04464C11.8191 7.23843 11.9274 7.42254 12.0638 7.59702C12.1765 7.74119 12.3146 7.87538 12.4772 8C12.4666 8.00814 12.456 8.01632 12.4456 8.02455C12.9764 8.08338 13.4758 8.24605 13.9232 8.4918Z"}},{"tag":"path","attr":{"d":"M12 9C11.4067 9 10.8266 9.17595 10.3333 9.50559C9.83994 9.83524 9.45543 10.3038 9.22836 10.8519C9.0013 11.4001 8.94189 12.0033 9.05765 12.5853C9.1734 13.1672 9.45912 13.7018 9.87868 14.1213C10.2982 14.5409 10.8328 14.8266 11.4147 14.9424C11.9967 15.0581 12.5999 14.9987 13.1481 14.7716C13.6962 14.5446 14.1648 14.1601 14.4944 13.6667C14.8241 13.1734 15 12.5933 15 12C14.999 11.2047 14.6826 10.4422 14.1202 9.87976C13.5578 9.31736 12.7954 9.00098 12 9Z"}}]})(props);\n};\nfunction VscBracketError (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 2.97184V2.98361H5.91083C5.71113 2.98361 5.5238 3.02427 5.34802 3.10513C5.17461 3.18275 5.02193 3.28942 4.89086 3.42437C4.76421 3.55475 4.66135 3.71034 4.58238 3.89205C4.50833 4.07152 4.47134 4.26019 4.47134 4.45902C4.47134 4.68725 4.4753 4.9134 4.48321 5.13749C4.49125 5.36105 4.49127 5.58262 4.48324 5.80219C4.47914 6.01973 4.46082 6.2333 4.42826 6.44285C4.39513 6.65175 4.33913 6.85263 4.26039 7.04464C4.18091 7.23843 4.07258 7.42254 3.93616 7.59702C3.82345 7.74119 3.68538 7.87538 3.52283 8C3.68538 8.12462 3.82345 8.25881 3.93616 8.40298C4.07258 8.57746 4.18091 8.76157 4.26039 8.95536C4.33921 9.14757 4.39513 9.35024 4.42823 9.56312C4.46084 9.76883 4.47914 9.98246 4.48324 10.2039C4.49127 10.4195 4.49125 10.6411 4.48321 10.8686C4.4753 11.0885 4.47134 11.3127 4.47134 11.541C4.47134 11.744 4.50838 11.9346 4.58223 12.1137C4.66104 12.2911 4.76386 12.4469 4.89086 12.5818C5.02194 12.7126 5.17396 12.8191 5.34763 12.9008C5.52346 12.9777 5.71095 13.0164 5.91083 13.0164H6V13.2V14H5.91083C5.59743 14 5.29407 13.9384 5.00128 13.8153C4.70818 13.692 4.44942 13.5153 4.22578 13.285C4.00311 13.0558 3.83793 12.805 3.73283 12.5323L3.73232 12.531C3.63387 12.265 3.56819 11.9903 3.53535 11.7072L3.53516 11.7055C3.50677 11.4215 3.4987 11.1316 3.51084 10.8357C3.52272 10.5462 3.52866 10.2567 3.52866 9.96721C3.52866 9.76883 3.48986 9.58047 3.41201 9.40108L3.41129 9.39942C3.33659 9.21871 3.23428 9.0637 3.10412 8.93352L3.10221 8.93161C2.97577 8.79762 2.82457 8.69157 2.64742 8.61396L2.64601 8.61334C2.47001 8.53238 2.28465 8.4918 2.08917 8.4918H2V8.4V7.6V7.5082H2.08917C2.28497 7.5082 2.4706 7.46954 2.64672 7.3925C2.82466 7.31055 2.97644 7.20405 3.10317 7.07359C3.23423 6.93866 3.33687 6.78296 3.4116 6.60601L3.412 6.60507C3.48974 6.42594 3.52866 6.23556 3.52866 6.03279C3.52866 5.74329 3.52272 5.45379 3.51084 5.16428C3.4987 4.86844 3.50678 4.5805 3.53519 4.30053L3.53533 4.29917C3.56814 4.01201 3.63382 3.7352 3.73233 3.46898L3.73282 3.46766C3.83792 3.19498 4.00311 2.94422 4.22578 2.71498C4.44942 2.48474 4.70818 2.30798 5.00128 2.18473C5.29407 2.06161 5.59743 2 5.91083 2H6V2.97184ZM13.9232 8.4918H14V8.4V7.6V7.5082H13.9108C13.7153 7.5082 13.53 7.46762 13.354 7.38666L13.3526 7.38604C13.1754 7.30844 13.0242 7.20238 12.8978 7.06839L12.8959 7.06648C12.7657 6.9363 12.6634 6.78129 12.5887 6.60058L12.588 6.59892C12.5101 6.41953 12.4713 6.23117 12.4713 6.03279C12.4713 5.74329 12.4773 5.45379 12.4892 5.16428C12.5013 4.86842 12.4932 4.57848 12.4648 4.29454L12.4646 4.29285C12.4318 4.00971 12.3661 3.73502 12.2677 3.46897L12.2672 3.46766C12.1621 3.19499 11.9969 2.94422 11.7742 2.71498C11.5506 2.48474 11.2918 2.30798 10.9987 2.18473C10.7059 2.06161 10.4026 2 10.0892 2H10V2.8V2.98361H10.0892C10.2891 2.98361 10.4765 3.0223 10.6524 3.09917C10.826 3.18092 10.9781 3.28736 11.1091 3.41823C11.2361 3.55305 11.339 3.70889 11.4178 3.88628C11.4916 4.0654 11.5287 4.25596 11.5287 4.45902C11.5287 4.68727 11.5247 4.91145 11.5168 5.13142C11.5088 5.35894 11.5087 5.58049 11.5168 5.79605C11.5209 6.01754 11.5392 6.23117 11.5718 6.43688C11.6049 6.64976 11.6608 6.85243 11.7396 7.04464C11.8191 7.23843 11.9274 7.42254 12.0638 7.59702C12.1765 7.74119 12.3146 7.87538 12.4772 8L12.4456 8.02455C12.9764 8.08338 13.4758 8.24605 13.9232 8.4918Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.3333 9.50559C10.8266 9.17595 11.4067 9 12 9C12.7954 9.00098 13.5578 9.31736 14.1202 9.87976C14.6826 10.4422 14.999 11.2047 15 12C15 12.5933 14.8241 13.1734 14.4944 13.6667C14.1648 14.1601 13.6962 14.5446 13.1481 14.7716C12.5999 14.9987 11.9967 15.0581 11.4147 14.9424C10.8328 14.8266 10.2982 14.5409 9.87868 14.1213C9.45912 13.7018 9.1734 13.1672 9.05765 12.5853C8.94189 12.0033 9.0013 11.4001 9.22836 10.8519C9.45543 10.3038 9.83994 9.83524 10.3333 9.50559ZM13.1464 10.1464L12 11.2929L10.8536 10.1464L10.1465 10.8535L11.2929 12L10.1464 13.1464L10.8536 13.8536L12 12.7071L13.1465 13.8535L13.8536 13.1464L12.7071 12L13.8536 10.8536L13.1464 10.1464Z"}}]})(props);\n};\nfunction VscBriefcase (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 4H11V2.5l-.5-.5h-5l-.5.5V4H1.5l-.5.5v8l.5.5h13l.5-.5v-8l-.5-.5zM6 3h4v1H6V3zm8 2v.76L10 8v-.5L9.51 7h-3L6 7.5V8L2 5.71V5h12zM9 8v1H7V8h2zm-7 4V6.86l4 2.29v.35l.5.5h3l.5-.5v-.31l4-2.28V12H2z"}}]})(props);\n};\nfunction VscBroadcast (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4.667 2.011A6 6 0 0 1 8 1a6.007 6.007 0 0 1 6 6 6 6 0 0 1-3.996 5.655v-.044c.016-.014.031-.03.046-.045a1.48 1.48 0 0 0 .434-1.046v-.137A5.042 5.042 0 0 0 12.19 4.2a5.04 5.04 0 1 0-6.69 7.176v.144a1.48 1.48 0 0 0 .48 1.09v.04A5.999 5.999 0 0 1 4.667 2.01z"}},{"tag":"path","attr":{"d":"M9.343 11.86a.48.48 0 0 1-.34.14v2.52a.48.48 0 0 1-.48.48H7.46c.011 0-.004-.004-.034-.012-.075-.02-.241-.064-.305-.129a.48.48 0 0 1-.141-.34V12a.48.48 0 0 1-.48-.48V9.5a1 1 0 0 1 1-1h.984a1 1 0 0 1 1 1v2.02a.48.48 0 0 1-.137.335l-.004.004z"}},{"tag":"path","attr":{"d":"M10.64 7c0 .525-.157 1.034-.445 1.465.183.302.289.656.289 1.035v.106a3.596 3.596 0 0 0 .06-5.15A3.6 3.6 0 1 0 5.5 9.59V9.5c0-.384.108-.743.296-1.047A2.64 2.64 0 1 1 10.64 7z"}},{"tag":"path","attr":{"d":"M9 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"}}]})(props);\n};\nfunction VscBrowser (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v12l-.5.5h-13l-.5-.5v-12l.5-.5zM2 5v8h12V5H2zm0-1h12V2H2v2z"}}]})(props);\n};\nfunction VscBug (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.877 4.5v-.582a2.918 2.918 0 1 0-5.836 0V4.5h-.833L2.545 2.829l-.593.59 1.611 1.619-.019.049a8.03 8.03 0 0 0-.503 2.831c0 .196.007.39.02.58l.003.045H1v.836h2.169l.006.034c.172.941.504 1.802.954 2.531l.034.055L2.2 13.962l.592.592 1.871-1.872.058.066c.868.992 2.002 1.589 3.238 1.589 1.218 0 2.336-.579 3.199-1.544l.057-.064 1.91 1.92.593-.591-1.996-2.006.035-.056c.467-.74.81-1.619.986-2.583l.006-.034h2.171v-.836h-2.065l.003-.044a8.43 8.43 0 0 0 .02-.58 8.02 8.02 0 0 0-.517-2.866l-.019-.05 1.57-1.57-.592-.59L11.662 4.5h-.785zm-5 0v-.582a2.082 2.082 0 1 1 4.164 0V4.5H5.878zm5.697.837l.02.053c.283.753.447 1.61.447 2.528 0 1.61-.503 3.034-1.274 4.037-.77 1.001-1.771 1.545-2.808 1.545-1.036 0-2.037-.544-2.807-1.545-.772-1.003-1.275-2.427-1.275-4.037 0-.918.164-1.775.448-2.528l.02-.053h7.229z"}}]})(props);\n};\nfunction VscCalendar (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 2H13V1h-1v1H4V1H3v1H1.5l-.5.5v12l.5.5h13l.5-.5v-12l-.5-.5zM14 14H2V5h12v9zm0-10H2V3h12v1zM4 8H3v1h1V8zm-1 2h1v1H3v-1zm1 2H3v1h1v-1zm2-4h1v1H6V8zm1 2H6v1h1v-1zm-1 2h1v1H6v-1zm1-6H6v1h1V6zm2 2h1v1H9V8zm1 2H9v1h1v-1zm-1 2h1v1H9v-1zm1-6H9v1h1V6zm2 2h1v1h-1V8zm1 2h-1v1h1v-1zm-1-4h1v1h-1V6z"}}]})(props);\n};\nfunction VscCallIncoming (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.547 9.328a1.567 1.567 0 0 0-.594-.117 1.202 1.202 0 0 0-.555.101 2.762 2.762 0 0 0-.43.258 2.166 2.166 0 0 0-.359.328c-.104.12-.205.23-.304.329a2.409 2.409 0 0 1-.29.25.534.534 0 0 1-.695-.063 32.17 32.17 0 0 1-.328-.312c-.14-.136-.312-.3-.515-.493A61.776 61.776 0 0 1 7.844 9l-.68-.664a25.847 25.847 0 0 1-1.21-1.266 5.312 5.312 0 0 1-.391-.484c-.094-.135-.141-.234-.141-.297a.46.46 0 0 1 .101-.312c.073-.094.16-.19.258-.29.1-.098.209-.203.328-.312.12-.11.23-.227.329-.352.098-.125.182-.268.25-.43.067-.16.101-.343.101-.546a1.567 1.567 0 0 0-.453-1.102 7.604 7.604 0 0 1-.531-.578 6.487 6.487 0 0 0-.617-.64 4.207 4.207 0 0 0-.696-.516A1.46 1.46 0 0 0 3.742 1a1.567 1.567 0 0 0-1.101.453c-.271.271-.508.513-.711.727a4.006 4.006 0 0 0-.516.664 2.63 2.63 0 0 0-.312.765A4.39 4.39 0 0 0 1 4.625c0 .552.089 1.125.266 1.719.177.593.416 1.185.718 1.773.302.589.67 1.167 1.102 1.735.432.567.901 1.106 1.406 1.617.505.51 1.042.982 1.61 1.414.567.432 1.148.805 1.742 1.117.593.313 1.19.557 1.789.734a6.157 6.157 0 0 0 1.75.266 4.696 4.696 0 0 0 1.008-.11 2.59 2.59 0 0 0 .773-.312c.23-.14.45-.312.664-.515.214-.204.453-.438.719-.704A1.568 1.568 0 0 0 15 12.257a2.009 2.009 0 0 0-.102-.515 1.674 1.674 0 0 0-.257-.484 7.24 7.24 0 0 0-.368-.445 5.381 5.381 0 0 0-.421-.422 91.549 91.549 0 0 0-.43-.383 8.277 8.277 0 0 1-.367-.344 1.516 1.516 0 0 0-.508-.336zm-.367 4.586a3.13 3.13 0 0 1-.797.086 5.526 5.526 0 0 1-1.516-.242 8.362 8.362 0 0 1-1.586-.664 13.205 13.205 0 0 1-3.047-2.297 17.15 17.15 0 0 1-1.289-1.461 10.502 10.502 0 0 1-1.03-1.578 9.12 9.12 0 0 1-.673-1.61A5.308 5.308 0 0 1 2 4.602a3.34 3.34 0 0 1 .094-.79c.057-.218.143-.414.258-.585.114-.172.255-.339.421-.5.167-.162.357-.35.57-.563a.542.542 0 0 1 .4-.164c.062-.005.158.036.288.125.13.089.271.195.422.32a7.058 7.058 0 0 1 .899.899c.125.15.229.289.312.414.083.125.125.221.125.289a.429.429 0 0 1-.101.312c-.073.084-.16.18-.258.29-.1.109-.209.213-.328.312-.12.099-.23.216-.329.351a2.266 2.266 0 0 0-.25.438 1.345 1.345 0 0 0-.101.54c.005.213.047.413.125.6.078.188.19.355.336.5l3.726 3.727a1.527 1.527 0 0 0 1.102.46 1.2 1.2 0 0 0 .547-.1 2.414 2.414 0 0 0 .789-.586c.11-.12.21-.23.305-.329.093-.098.19-.182.289-.25a.545.545 0 0 1 .312-.101c.073 0 .172.042.297.125.125.083.263.19.414.32.151.13.307.274.469.43.161.156.305.312.43.469.124.156.229.297.312.422.083.125.125.22.125.289a.533.533 0 0 1-.164.39c-.224.219-.414.41-.57.57a3.159 3.159 0 0 1-.5.422 1.93 1.93 0 0 1-.586.266zM15 1.704l-4.64 4.648h3.288v1h-5v-5h1V5.64L14.297 1l.703.703z"}}]})(props);\n};\nfunction VscCallOutgoing (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.648 6.648L13.29 2H10V1h5v5h-1V2.71L9.352 7.353l-.704-.704zm3.305 2.563a1.567 1.567 0 0 1 1.102.453c.11.11.232.224.367.344l.43.383c.15.135.291.276.421.421.13.146.253.295.368.446.114.15.2.312.257.484.058.172.092.344.102.516a1.568 1.568 0 0 1-.453 1.101c-.266.266-.505.5-.719.704a4.006 4.006 0 0 1-.664.515c-.23.14-.487.245-.773.313a4.696 4.696 0 0 1-1.008.109 6.157 6.157 0 0 1-1.75-.266A9.819 9.819 0 0 1 7.843 14a12.445 12.445 0 0 1-1.741-1.117 15.329 15.329 0 0 1-1.61-1.414c-.505-.51-.974-1.05-1.406-1.617a11.64 11.64 0 0 1-1.102-1.735 10.38 10.38 0 0 1-.718-1.773A6.005 6.005 0 0 1 1 4.625c0-.396.034-.734.102-1.016a2.63 2.63 0 0 1 .312-.765c.14-.23.313-.45.516-.664.203-.214.44-.456.71-.727A1.567 1.567 0 0 1 3.743 1c.26 0 .51.07.75.21.24.142.472.313.696.517.223.203.43.416.617.64.187.224.364.417.53.578a1.567 1.567 0 0 1 .453 1.102 1.4 1.4 0 0 1-.1.547 1.824 1.824 0 0 1-.25.43 2.983 2.983 0 0 1-.329.351c-.12.11-.229.214-.328.313a3.128 3.128 0 0 0-.258.289.46.46 0 0 0-.101.312c0 .063.047.162.14.297a5.3 5.3 0 0 0 .391.484 24.386 24.386 0 0 0 1.211 1.266c.234.23.461.45.68.664.218.214.43.417.633.61.203.192.375.356.515.492.14.135.25.24.328.312a.534.534 0 0 0 .696.063c.093-.068.19-.152.289-.25.099-.1.2-.209.304-.329.104-.12.224-.229.36-.328.135-.099.278-.185.43-.258a1.21 1.21 0 0 1 .554-.101zM11.383 14c.318 0 .583-.029.797-.086a1.93 1.93 0 0 0 .586-.266c.177-.12.343-.26.5-.421.156-.162.346-.352.57-.57.11-.11.164-.24.164-.391 0-.068-.042-.164-.125-.29a6.122 6.122 0 0 0-.313-.421 5.01 5.01 0 0 0-.43-.47c-.16-.155-.317-.299-.468-.429a4.322 4.322 0 0 0-.414-.32c-.125-.083-.224-.125-.297-.125a.545.545 0 0 0-.312.101 1.801 1.801 0 0 0-.29.25c-.093.1-.195.209-.304.329-.11.12-.23.229-.36.328-.13.099-.273.185-.43.258a1.208 1.208 0 0 1-.546.101 1.527 1.527 0 0 1-1.102-.46L4.883 7.39a1.537 1.537 0 0 1-.336-.5 1.655 1.655 0 0 1-.125-.602c0-.203.034-.383.101-.539.068-.156.151-.302.25-.438.1-.135.209-.252.329-.351.12-.099.229-.203.328-.313.099-.109.185-.205.258-.289a.429.429 0 0 0 .101-.312c0-.068-.042-.164-.125-.29a5.085 5.085 0 0 0-.312-.413 6.791 6.791 0 0 0-.43-.469 6.787 6.787 0 0 0-.469-.43 5.674 5.674 0 0 0-.422-.32c-.13-.089-.226-.13-.289-.125a.542.542 0 0 0-.398.164 65.24 65.24 0 0 1-.57.563 3.073 3.073 0 0 0-.422.5 1.9 1.9 0 0 0-.258.586A3.377 3.377 0 0 0 2 4.601c0 .5.08 1.015.242 1.546a9.12 9.12 0 0 0 .672 1.61c.287.541.63 1.068 1.031 1.578.401.51.831.997 1.29 1.46a13.205 13.205 0 0 0 3.046 2.298 8.37 8.37 0 0 0 1.586.664 5.526 5.526 0 0 0 1.516.242z"}}]})(props);\n};\nfunction VscCaseSensitive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.495 9.052l.891 2.35h1.091L6.237 3h-1.02L2 11.402h1.095l.838-2.35h3.562zM5.811 4.453l.044.135 1.318 3.574H4.255l1.307-3.574.044-.135.038-.156.032-.152.021-.126h.023l.024.126.029.152.038.156zm7.984 6.011v.936h.96V7.498c0-.719-.18-1.272-.539-1.661-.359-.389-.889-.583-1.588-.583-.199 0-.401.019-.606.056a4.875 4.875 0 0 0-1.078.326 2.081 2.081 0 0 0-.343.188v.984c.266-.23.566-.411.904-.54a2.927 2.927 0 0 1 1.052-.193c.188 0 .358.028.513.085a.98.98 0 0 1 .396.267c.109.121.193.279.252.472.059.193.088.427.088.7l-1.811.252c-.344.047-.64.126-.888.237a1.947 1.947 0 0 0-.615.419 1.6 1.6 0 0 0-.36.58 2.134 2.134 0 0 0-.117.721c0 .246.042.475.124.688.082.213.203.397.363.551.16.154.36.276.598.366.238.09.513.135.826.135.402 0 .76-.092 1.075-.278.315-.186.572-.454.771-.806h.023zm-2.128-1.743c.176-.064.401-.114.674-.149l1.465-.205v.609c0 .246-.041.475-.123.688a1.727 1.727 0 0 1-.343.557 1.573 1.573 0 0 1-.524.372 1.63 1.63 0 0 1-.668.135c-.187 0-.353-.025-.495-.076a1.03 1.03 0 0 1-.357-.211.896.896 0 0 1-.22-.316A1.005 1.005 0 0 1 11 9.732a1.6 1.6 0 0 1 .055-.44.739.739 0 0 1 .202-.334 1.16 1.16 0 0 1 .41-.237z"}}]})(props);\n};\nfunction VscCheckAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15.62 3.596L7.815 12.81l-.728-.033L4 8.382l.754-.53 2.744 3.907L14.917 3l.703.596z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.234 8.774l4.386-5.178L10.917 3l-4.23 4.994.547.78zm-1.55.403l.548.78-.547-.78zm-1.617 1.91l.547.78-.799.943-.728-.033L0 8.382l.754-.53 2.744 3.907.57-.672z"}}]})(props);\n};\nfunction VscCheck (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z"}}]})(props);\n};\nfunction VscChecklist (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.75 4.48h-.71L2 3.43l.71-.7.69.68L4.81 2l.71.71-1.77 1.77zM6.99 3h8v1h-8V3zm0 3h8v1h-8V6zm8 3h-8v1h8V9zm-8 3h8v1h-8v-1zM3.04 7.48h.71l1.77-1.77-.71-.7L3.4 6.42l-.69-.69-.71.71 1.04 1.04zm.71 3.01h-.71L2 9.45l.71-.71.69.69 1.41-1.42.71.71-1.77 1.77zm-.71 3.01h.71l1.77-1.77-.71-.71-1.41 1.42-.69-.69-.71.7 1.04 1.05z"}}]})(props);\n};\nfunction VscChevronDown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z"}}]})(props);\n};\nfunction VscChevronLeft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.928 7.976l4.357 4.357-.618.62L5 8.284v-.618L9.667 3l.618.619-4.357 4.357z"}}]})(props);\n};\nfunction VscChevronRight (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.072 8.024L5.715 3.667l.618-.62L11 7.716v.618L6.333 13l-.618-.619 4.357-4.357z"}}]})(props);\n};\nfunction VscChevronUp (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.024 5.928l-4.357 4.357-.62-.618L7.716 5h.618L13 9.667l-.619.618-4.357-4.357z"}}]})(props);\n};\nfunction VscChromeClose (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884 8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z"}}]})(props);\n};\nfunction VscChromeMaximize (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3 3v10h10V3H3zm9 9H4V4h8v8z"}}]})(props);\n};\nfunction VscChromeMinimize (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 8v1H3V8h11z"}}]})(props);\n};\nfunction VscChromeRestore (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3 5v9h9V5H3zm8 8H4V6h7v7z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 5h1V4h7v7h-1v1h2V3H5v2z"}}]})(props);\n};\nfunction VscCircleFilled (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031 3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062 0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765 4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062 3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"}}]})(props);\n};\nfunction VscCircleLargeFilled (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z"}}]})(props);\n};\nfunction VscCircleLargeOutline (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.588 2.215A5.808 5.808 0 0 0 8 2c-.554 0-1.082.073-1.588.215l-.006.002c-.514.141-.99.342-1.432.601A6.156 6.156 0 0 0 2.82 4.98l-.002.004A5.967 5.967 0 0 0 2.21 6.41 5.986 5.986 0 0 0 2 8c0 .555.07 1.085.21 1.591a6.05 6.05 0 0 0 1.548 2.651c.37.365.774.677 1.216.94a6.1 6.1 0 0 0 1.435.609A6.02 6.02 0 0 0 8 14c.555 0 1.085-.07 1.591-.21.515-.145.99-.348 1.426-.607l.004-.002a6.16 6.16 0 0 0 2.161-2.155 5.85 5.85 0 0 0 .6-1.432l.003-.006A5.807 5.807 0 0 0 14 8c0-.554-.072-1.082-.215-1.588l-.002-.006a5.772 5.772 0 0 0-.6-1.423l-.002-.004a5.9 5.9 0 0 0-.942-1.21l-.008-.008a5.902 5.902 0 0 0-1.21-.942l-.004-.002a5.772 5.772 0 0 0-1.423-.6l-.006-.002zm4.455 9.32a7.157 7.157 0 0 1-2.516 2.508 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674z"}}]})(props);\n};\nfunction VscCircleOutline (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm2.61-4a2.61 2.61 0 1 1-5.22 0 2.61 2.61 0 0 1 5.22 0zM8 5.246z"}}]})(props);\n};\nfunction VscCircleSlash (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 1a7 7 0 1 1-7 7 7.008 7.008 0 0 1 7-7zM2 8c0 1.418.504 2.79 1.423 3.87l8.447-8.447A5.993 5.993 0 0 0 2 8zm12 0c0-1.418-.504-2.79-1.423-3.87L4.13 12.577A5.993 5.993 0 0 0 14 8z"}}]})(props);\n};\nfunction VscCircuitBoard (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 1h-13l-.5.5v13l.5.5h13l.5-.5v-13l-.5-.5zM14 14H5v-2h2.3c.3.6 1 1 1.7 1 1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2H4v3H2V2h2v2.3c-.6.3-1 1-1 1.7 0 1.1.9 2 2 2s2-.9 2-2h2c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2c-.7 0-1.4.4-1.7 1H6.7c-.3-.6-1-1-1.7-1V2h9v12zm-6-3c0-.6.4-1 1-1s1 .4 1 1-.4 1-1 1-1-.4-1-1zM5 5c.6 0 1 .4 1 1s-.4 1-1 1-1-.4-1-1 .4-1 1-1zm6 0c.6 0 1 .4 1 1s-.4 1-1 1-1-.4-1-1 .4-1 1-1z"}}]})(props);\n};\nfunction VscClearAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10 12.6l.7.7 1.6-1.6 1.6 1.6.8-.7L13 11l1.7-1.6-.8-.8-1.6 1.7-1.6-1.7-.7.8 1.6 1.6-1.6 1.6zM1 4h14V3H1v1zm0 3h14V6H1v1zm8 2.5V9H1v1h8v-.5zM9 13v-1H1v1h8z"}}]})(props);\n};\nfunction VscClippy (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7 13.992H4v-9h8v2h1v-2.5l-.5-.5H11v-1h-1a2 2 0 0 0-4 0H4.94v1H3.5l-.5.5v10l.5.5H7v-1zm0-11.2a1 1 0 0 1 .8-.8 1 1 0 0 1 .58.06.94.94 0 0 1 .45.36 1 1 0 1 1-1.75.94 1 1 0 0 1-.08-.56zm7.08 9.46L13 13.342v-5.35h-1v5.34l-1.08-1.08-.71.71 1.94 1.93h.71l1.93-1.93-.71-.71zm-5.92-4.16h.71l1.93 1.93-.71.71-1.08-1.08v5.34h-1v-5.35l-1.08 1.09-.71-.71 1.94-1.93z"}}]})(props);\n};\nfunction VscCloseAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.621 8.086l-.707-.707L6.5 8.793 5.086 7.379l-.707.707L5.793 9.5l-1.414 1.414.707.707L6.5 10.207l1.414 1.414.707-.707L7.207 9.5l1.414-1.414z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 3l1-1h7l1 1v7l-1 1h-2v2l-1 1H3l-1-1V6l1-1h2V3zm1 2h4l1 1v4h2V3H6v2zm4 1H3v7h7V6z"}}]})(props);\n};\nfunction VscClose (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z"}}]})(props);\n};\nfunction VscCloudDownload (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.957 6h.05a2.99 2.99 0 0 1 2.116.879 3.003 3.003 0 0 1 0 4.242 2.99 2.99 0 0 1-2.117.879v-1a2.002 2.002 0 0 0 0-4h-.914l-.123-.857a2.49 2.49 0 0 0-2.126-2.122A2.478 2.478 0 0 0 6.231 5.5l-.333.762-.809-.189A2.49 2.49 0 0 0 4.523 6c-.662 0-1.297.263-1.764.732A2.503 2.503 0 0 0 4.523 11h.498v1h-.498a3.486 3.486 0 0 1-2.628-1.16 3.502 3.502 0 0 1 1.958-5.78 3.462 3.462 0 0 1 1.468.04 3.486 3.486 0 0 1 3.657-2.06A3.479 3.479 0 0 1 11.957 6zm-5.25 5.121l1.314 1.314V7h.994v5.4l1.278-1.279.707.707-2.146 2.147h-.708L6 11.829l.707-.708z"}}]})(props);\n};\nfunction VscCloudUpload (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.956 6h.05a2.99 2.99 0 0 1 2.117.879 3.003 3.003 0 0 1 0 4.242 2.99 2.99 0 0 1-2.117.879h-1.995v-1h1.995a2.002 2.002 0 0 0 0-4h-.914l-.123-.857a2.49 2.49 0 0 0-2.126-2.122A2.478 2.478 0 0 0 6.23 5.5l-.333.762-.809-.189A2.49 2.49 0 0 0 4.523 6c-.662 0-1.297.263-1.764.732A2.503 2.503 0 0 0 4.523 11h2.494v1H4.523a3.486 3.486 0 0 1-2.628-1.16 3.502 3.502 0 0 1-.4-4.137A3.497 3.497 0 0 1 3.853 5.06c.486-.09.987-.077 1.468.041a3.486 3.486 0 0 1 3.657-2.06A3.479 3.479 0 0 1 11.956 6zm-1.663 3.853L8.979 8.54v5.436h-.994v-5.4L6.707 9.854 6 9.146 8.146 7h.708L11 9.146l-.707.707z"}}]})(props);\n};\nfunction VscCloud (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.957 6h.05a2.99 2.99 0 0 1 2.116.879 3.003 3.003 0 0 1 0 4.242 2.99 2.99 0 0 1-2.117.879v-.013L12 12H4.523a3.486 3.486 0 0 1-2.628-1.16 3.502 3.502 0 0 1 1.958-5.78 3.462 3.462 0 0 1 1.468.04 3.486 3.486 0 0 1 3.657-2.06A3.479 3.479 0 0 1 11.957 6zM5 11h7.01a1.994 1.994 0 0 0 1.992-2 2.002 2.002 0 0 0-1.996-2h-.914l-.123-.857a2.49 2.49 0 0 0-2.126-2.122A2.478 2.478 0 0 0 6.231 5.5l-.333.762-.809-.189A2.49 2.49 0 0 0 4.523 6c-.662 0-1.297.263-1.764.732A2.503 2.503 0 0 0 4.523 11H5z"}}]})(props);\n};\nfunction VscCode (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4.708 5.578L2.061 8.224l2.647 2.646-.708.708-3-3V7.87l3-3 .708.708zm7-.708L11 5.578l2.647 2.646L11 10.87l.708.708 3-3V7.87l-3-3zM4.908 13l.894.448 5-10L9.908 3l-5 10z"}}]})(props);\n};\nfunction VscCollapseAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9 9H4v1h5V9z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 3l1-1h7l1 1v7l-1 1h-2v2l-1 1H3l-1-1V6l1-1h2V3zm1 2h4l1 1v4h2V3H6v2zm4 1H3v7h7V6z"}}]})(props);\n};\nfunction VscColorMode (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm0 13V2a6 6 0 1 1 0 12z"}}]})(props);\n};\nfunction VscCombine (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1l-.5.5v3l.5.5h3l.5-.5v-3L4.5 1h-3zM2 4V2h2v2H2zm-.5 2l-.5.5v3l.5.5h3l.5-.5v-3L4.5 6h-3zM2 9V7h2v2H2zm-1 2.5l.5-.5h3l.5.5v3l-.5.5h-3l-.5-.5v-3zm1 .5v2h2v-2H2zm10.5-7l-.5.5v6l.5.5h3l.5-.5v-6l-.5-.5h-3zM15 8h-2V6h2v2zm0 3h-2V9h2v2zM9.1 8H6v1h3.1l-1 1 .7.6 1.8-1.8v-.7L8.8 6.3l-.7.7 1 1z"}}]})(props);\n};\nfunction VscCommentDiscussion (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 11.29l1-1v1.42l-1.15 1.14L3 12.5V10H1.5L1 9.5v-8l.5-.5h12l.5.5V6h-1V2H2v7h1.5l.5.5v1.79zM10.29 13l1.86 1.85.85-.35V13h1.5l.5-.5v-5l-.5-.5h-8l-.5.5v5l.5.5h3.79zm.21-1H7V8h7v4h-1.5l-.5.5v.79l-1.15-1.14-.35-.15z"}}]})(props);\n};\nfunction VscComment (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 2h-13l-.5.5v9l.5.5H4v2.5l.854.354L7.707 12H14.5l.5-.5v-9l-.5-.5zm-.5 9H7.5l-.354.146L5 13.293V11.5l-.5-.5H2V3h12v8z"}}]})(props);\n};\nfunction VscCompassActive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.10146 13.8991C8.90419 13.9357 8.70353 13.9627 8.49999 13.9795V13H7.49999V13.9795C4.57233 13.7379 2.24067 11.3945 2.0175 8.46167H3V7.46167H2.02382C2.28141 4.56475 4.59788 2.25996 7.49999 2.02054V3H8.49999V2.02054C11.4149 2.26101 13.739 4.5851 13.9795 7.5H13V8.5H13.9795C13.9627 8.70354 13.9357 8.90419 13.8991 9.10146C14.2338 9.17833 14.5524 9.29718 14.8492 9.45217C14.948 8.98368 15 8.49791 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C8.49791 15 8.98368 14.948 9.45217 14.8492C9.29718 14.5524 9.17833 14.2338 9.10146 13.8991ZM9.90369 10.4675L6.99115 9.00874L4.96667 4.96655L9.00885 6.99103L10.4676 9.90359C10.2614 10.0724 10.0725 10.2613 9.90369 10.4675ZM9.43542 9.4353L8.48073 7.51916L6.56458 6.56447L7.51927 8.48062L9.43542 9.4353Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.3333 10.5056C11.8266 10.1759 12.4067 10 13 10C13.7954 10.001 14.5578 10.3174 15.1202 10.8798C15.6826 11.4422 15.999 12.2046 16 13C16 13.5933 15.8241 14.1734 15.4944 14.6667C15.1648 15.1601 14.6962 15.5446 14.1481 15.7716C13.5999 15.9987 12.9967 16.0581 12.4147 15.9424C11.8328 15.8266 11.2982 15.5409 10.8787 15.1213C10.4591 14.7018 10.1734 14.1672 10.0576 13.5853C9.94189 13.0033 10.0013 12.4001 10.2284 11.8519C10.4554 11.3038 10.8399 10.8352 11.3333 10.5056ZM13.0315 14.3226L14.8213 11.9363L14.0213 11.3363L12.541 13.3099L11.6655 12.6095L11.0408 13.3903L12.3192 14.413L13.0315 14.3226Z"}}]})(props);\n};\nfunction VscCompassDot (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.10146 13.8991C8.90419 13.9357 8.70353 13.9627 8.49999 13.9795V13H7.49999V13.9795C4.57233 13.7379 2.24067 11.3945 2.0175 8.46167H3V7.46167H2.02382C2.28141 4.56475 4.59788 2.25996 7.49999 2.02054V3H8.49999V2.02054C11.4149 2.26101 13.739 4.5851 13.9795 7.5H13V8.5H13.9795C13.9627 8.70354 13.9357 8.90419 13.8991 9.10146C14.2338 9.17833 14.5524 9.29718 14.8492 9.45217C14.948 8.98368 15 8.49791 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C8.49791 15 8.98368 14.948 9.45217 14.8492C9.29718 14.5524 9.17833 14.2338 9.10146 13.8991ZM9.90369 10.4675L6.99115 9.00874L4.96667 4.96655L9.00885 6.99103L10.4676 9.90359C10.2614 10.0724 10.0725 10.2613 9.90369 10.4675ZM9.43542 9.4353L8.48073 7.51916L6.56458 6.56447L7.51927 8.48062L9.43542 9.4353Z"}},{"tag":"circle","attr":{"cx":"13","cy":"13","r":"3"}}]})(props);\n};\nfunction VscCompass (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9.00885 6.99103L11.0333 11.0332L6.99114 9.00874L4.96666 4.96655L9.00885 6.99103ZM9.43541 9.4353L8.48072 7.51916L6.56458 6.56447L7.51926 8.48062L9.43541 9.4353Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.9795 8.5C13.739 11.4149 11.4149 13.739 8.49999 13.9795V13H7.49999V13.9795C4.57233 13.7379 2.24067 11.3945 2.0175 8.46167H3V7.46167H2.02382C2.28141 4.56475 4.59788 2.25996 7.49999 2.02054V3H8.49999V2.02054C11.4149 2.26101 13.739 4.5851 13.9795 7.5H13V8.5H13.9795ZM8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z"}}]})(props);\n};\nfunction VscCopy (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 4l1-1h5.414L14 6.586V14l-1 1H5l-1-1V4zm9 3l-3-3H5v10h8V7z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3 1L2 2v10l1 1V2h6.414l-1-1H3z"}}]})(props);\n};\nfunction VscCreditCard (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14 5v1H2V5h12zM2 7h12v5H2V7zm12-3H2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1zm-3 6h2v1h-2v-1z"}}]})(props);\n};\nfunction VscDash (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5 8h6v1H5z"}}]})(props);\n};\nfunction VscDashboard (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.889 2.095a6.5 6.5 0 1 1 7.222 10.81A6.5 6.5 0 0 1 3.89 2.094zm.555 9.978A5.5 5.5 0 0 0 7.5 13 5.506 5.506 0 0 0 13 7.5a5.5 5.5 0 1 0-8.556 4.573zM10.294 4l.706.707-2.15 2.15a1.514 1.514 0 1 1-.707-.707L10.293 4zM7.221 7.916a.5.5 0 1 0 .556-.832.5.5 0 0 0-.556.832zm4.286-2.449l-.763.763c.166.403.253.834.255 1.27a3.463 3.463 0 0 1-.5 1.777l.735.735a4.477 4.477 0 0 0 .274-4.545h-.001zM8.733 4.242A3.373 3.373 0 0 0 7.5 4 3.5 3.5 0 0 0 4 7.5a3.46 3.46 0 0 0 .5 1.777l-.734.735A4.5 4.5 0 0 1 9.5 3.473l-.767.769z"}}]})(props);\n};\nfunction VscDatabase (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13 3.5C13 2.119 10.761 1 8 1S3 2.119 3 3.5c0 .04.02.077.024.117H3v8.872l.056.357C3.336 14.056 5.429 15 8 15c2.571 0 4.664-.944 4.944-2.154l.056-.357V3.617h-.024c.004-.04.024-.077.024-.117zM8 2.032c2.442 0 4 .964 4 1.468s-1.558 1.468-4 1.468S4 4 4 3.5s1.558-1.468 4-1.468zm4 10.458l-.03.131C11.855 13.116 10.431 14 8 14s-3.855-.884-3.97-1.379L4 12.49v-7.5A7.414 7.414 0 0 0 8 6a7.414 7.414 0 0 0 4-1.014v7.504z"}}]})(props);\n};\nfunction VscDebugAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M7.29333 9.00631L6.41333 9.88552C6.27949 9.34717 5.96917 8.86905 5.53181 8.52735C5.09445 8.18564 4.55521 8 4 8C3.44479 8 2.90555 8.18564 2.46819 8.52735C2.03083 8.86905 1.72051 9.34717 1.58667 9.88552L0.706667 9.00631L0 9.71234L1.14667 10.858L1 11.0045V12.0036H0V13.0027H1V13.056C1.051 13.3815 1.14283 13.6993 1.27333 14.0018L0 15.294L0.706667 16L1.80667 14.901C2.06838 15.2346 2.40078 15.5062 2.78001 15.6962C3.15924 15.8862 3.57587 15.99 4 16C4.42413 15.99 4.84076 15.8862 5.21999 15.6962C5.59922 15.5062 5.93162 15.2346 6.19333 14.901L7.29333 16L8 15.294L6.72667 14.0018C6.85879 13.6929 6.95065 13.3683 7 13.036V12.9694H8V12.0036H7V11.0045L6.85333 10.858L8 9.71234L7.29333 9.00631ZM4 9.00631C4.39782 9.00631 4.77936 9.16421 5.06066 9.44526C5.34196 9.72631 5.5 10.1075 5.5 10.505H2.5C2.5 10.1075 2.65804 9.72631 2.93934 9.44526C3.22064 9.16421 3.60218 9.00631 4 9.00631ZM6 13.0027C5.95116 13.5161 5.72476 13.9965 5.35974 14.3612C4.99472 14.7259 4.5139 14.9521 4 15.0009C3.4861 14.9521 3.00528 14.7259 2.64026 14.3612C2.27524 13.9965 2.04884 13.5161 2 13.0027V11.5041H6V13.0027Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.77951 2L2.99951 2.41V7H3.99951V3.35L11.5995 8.42L9 10.1507V11.3497L12.7795 8.83V8L3.77951 2ZM9 13.3497V12.1482L14.5995 8.42006L6.99951 3.35006V2.14673L15.7795 8.00006V8.83006L9 13.3497Z"}}]})(props);\n};\nfunction VscDebugAltSmall (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M7.293 9.006l-.88.88A2.484 2.484 0 0 0 4 8a2.488 2.488 0 0 0-2.413 1.886l-.88-.88L0 9.712l1.147 1.146-.147.146v1H0v.999h1v.053c.051.326.143.643.273.946L0 15.294.707 16l1.1-1.099A2.873 2.873 0 0 0 4 16a2.875 2.875 0 0 0 2.193-1.099L7.293 16 8 15.294l-1.273-1.292A3.92 3.92 0 0 0 7 13.036v-.067h1v-.965H7v-1l-.147-.146L8 9.712l-.707-.706zM4 9.006a1.5 1.5 0 0 1 1.5 1.499h-3A1.498 1.498 0 0 1 4 9.006zm2 3.997A2.217 2.217 0 0 1 4 15a2.22 2.22 0 0 1-2-1.998v-1.499h4v1.499z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 2.41L5.78 2l9 6v.83L9 12.683v-1.2l4.6-3.063L6 3.35V7H5V2.41z"}}]})(props);\n};\nfunction VscDebugAlt (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.94 13.5l-1.32 1.32a3.73 3.73 0 0 0-7.24 0L1.06 13.5 0 14.56l1.72 1.72-.22.22V18H0v1.5h1.5v.08c.077.489.214.966.41 1.42L0 22.94 1.06 24l1.65-1.65A4.308 4.308 0 0 0 6 24a4.31 4.31 0 0 0 3.29-1.65L10.94 24 12 22.94 10.09 21c.198-.464.336-.951.41-1.45v-.1H12V18h-1.5v-1.5l-.22-.22L12 14.56l-1.06-1.06zM6 13.5a2.25 2.25 0 0 1 2.25 2.25h-4.5A2.25 2.25 0 0 1 6 13.5zm3 6a3.33 3.33 0 0 1-3 3 3.33 3.33 0 0 1-3-3v-2.25h6v2.25zm14.76-9.9v1.26L13.5 17.37V15.6l8.5-5.37L9 2v9.46a5.07 5.07 0 0 0-1.5-.72V.63L8.64 0l15.12 9.6z"}}]})(props);\n};\nfunction VscDebugBreakpointConditionalUnverified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.778 4.674a4 4 0 1 1 4.444 6.652 4 4 0 0 1-4.444-6.652zm.694 5.612a2.75 2.75 0 1 0 3.056-4.572 2.75 2.75 0 0 0-3.056 4.572zM9.5 6.5h-3v1h3v-1zm0 2h-3v1h3v-1z"}}]})(props);\n};\nfunction VscDebugBreakpointConditional (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm2 5v1H6V9h4zm0-3v1H6V6h4z"}}]})(props);\n};\nfunction VscDebugBreakpointDataUnverified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9.931 4h-4.62l-2.31 4 2.31 4h4.62l2.31-4-2.31-4zm-.75 6.7h-3.12L4.501 8l1.56-2.7h3.12l1.56 2.7-1.56 2.7z"}}]})(props);\n};\nfunction VscDebugBreakpointData (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M12.238 8l-2.31 4H5.31L3 8l2.31-4h4.618l2.31 4z"}}]})(props);\n};\nfunction VscDebugBreakpointFunctionUnverified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 11h8L8 4l-4 7zm2.154-1.25h3.692L8 6.52 6.154 9.75z"}}]})(props);\n};\nfunction VscDebugBreakpointFunction (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 4l4 6.905H4L8 4z"}}]})(props);\n};\nfunction VscDebugBreakpointLogUnverified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.02 7.98L8 3l4.98 4.98L8 12.96 3.02 7.98zM8 10.77l2.79-2.79L8 5.19 5.21 7.98 8 10.77z"}}]})(props);\n};\nfunction VscDebugBreakpointLog (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 3l5 5-5 5-5-5 5-5z"}}]})(props);\n};\nfunction VscDebugBreakpointUnsupported (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.326 10.222a4 4 0 1 0-6.653-4.444 4 4 0 0 0 6.653 4.444zM8.65 10H7.4v1h1.25v-1zM7.4 9V5h1.25v4H7.4z"}}]})(props);\n};\nfunction VscDebugConsole (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.04 1.361l.139-.057H21.32l.14.057 1.178 1.179.057.139V16.82l-.057.14-1.179 1.178-.139.057H14V18a1.99 1.99 0 0 0-.548-1.375h7.673V2.875H7.375v7.282a5.73 5.73 0 0 0-1.571-.164V2.679l.057-.14L7.04 1.362zm9.531 9.452l-2.809 2.8a2 2 0 0 0-.348-.467l-.419-.42 2.236-2.235-3.606-3.694.813-.833 4.133 4.133v.716zM9.62 14.82l1.32-1.32L12 14.56l-1.72 1.72.22.22V18H12v1.45h-1.5v.1a5.888 5.888 0 0 1-.41 1.45L12 22.94 10.94 24l-1.65-1.65A4.308 4.308 0 0 1 6 24a4.31 4.31 0 0 1-3.29-1.65L1.06 24 0 22.94 1.91 21a5.889 5.889 0 0 1-.41-1.42v-.08H0V18h1.5v-1.5l.22-.22L0 14.56l1.06-1.06 1.32 1.32a3.73 3.73 0 0 1 7.24 0zm-2.029-.661A2.25 2.25 0 0 0 3.75 15.75h4.5a2.25 2.25 0 0 0-.659-1.591zm.449 7.38A3.33 3.33 0 0 0 9 19.5v-2.25H3v2.25a3.33 3.33 0 0 0 3 3 3.33 3.33 0 0 0 2.04-.96z"}}]})(props);\n};\nfunction VscDebugContinueSmall (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 2H3V14H4V2ZM7.29062 2.59314L6.5 3.00001V13L7.29062 13.4069L14.2906 8.40687V7.59314L7.29062 2.59314ZM13.1398 8.00001L7.5 12.0284V3.9716L13.1398 8.00001Z"}}]})(props);\n};\nfunction VscDebugContinue (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.5 2H4v12H2.5V2zm4.936.39L6.25 3v10l1.186.61 7-5V7.39l-7-5zM12.71 8l-4.96 3.543V4.457L12.71 8z"}}]})(props);\n};\nfunction VscDebugCoverage (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 2.41L5.78 2L14.78 8V8.83L9 12.6833V11.4826L13.6 8.42L6 3.35V7H5V2.41Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6.13041 12.1236C5.94796 12.3032 5.80777 12.503 5.70927 12.7232C5.61337 12.9427 5.56516 13.181 5.56516 13.4389V14.3007C5.56516 14.3973 5.54694 14.4886 5.51016 14.5741C5.4738 14.6587 5.42387 14.7328 5.36036 14.7961C5.29687 14.8594 5.2225 14.9091 5.13774 14.9453C5.05203 14.9819 4.96049 15 4.86366 15H3.9988C3.90197 15 3.81043 14.9819 3.72472 14.9453C3.63996 14.9091 3.5656 14.8594 3.5021 14.7961C3.4386 14.7328 3.38866 14.6587 3.3523 14.5741C3.31552 14.4886 3.2973 14.3973 3.2973 14.3007V13.4389C3.2973 13.1811 3.248 12.9428 3.1499 12.7234C3.05368 12.5033 2.91448 12.3031 2.73205 12.1236C2.49791 11.8926 2.31713 11.6346 2.19041 11.35C2.0633 11.0644 2 10.7552 2 10.4228C2 10.2005 2.02876 9.98586 2.08641 9.77906C2.14392 9.57279 2.22565 9.38 2.33166 9.20087C2.43754 9.01972 2.56419 8.85567 2.71156 8.70884C2.85886 8.56206 3.02231 8.4359 3.20182 8.33042C3.38373 8.22488 3.57848 8.14334 3.78542 8.08606C3.99288 8.02865 4.2082 8 4.43123 8C4.65426 8 4.86959 8.02865 5.07704 8.08606C5.28398 8.14334 5.4774 8.22475 5.65714 8.33035C5.8389 8.43582 6.00353 8.56199 6.15091 8.70884C6.29827 8.85567 6.42492 9.01972 6.53079 9.20086C6.63681 9.37999 6.71854 9.57278 6.77605 9.77906C6.8337 9.98586 6.86246 10.2005 6.86246 10.4228C6.86246 10.7552 6.79916 11.0644 6.67206 11.35C6.54533 11.6346 6.36456 11.8926 6.13041 12.1236ZM5.02703 13.1154H3.83544V14.3007C3.83544 14.3443 3.8508 14.3814 3.88401 14.4145C3.91724 14.4476 3.95465 14.4631 3.9988 14.4631H4.86366C4.90781 14.4631 4.94523 14.4476 4.97845 14.4145C5.01166 14.3814 5.02703 14.3443 5.02703 14.3007V13.1154Z"}}]})(props);\n};\nfunction VscDebugDisconnect (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.617 3.844a2.87 2.87 0 0 0-.451-.868l1.354-1.36L13.904 1l-1.36 1.354a2.877 2.877 0 0 0-.868-.452 3.073 3.073 0 0 0-2.14.075 3.03 3.03 0 0 0-.991.664L7 4.192l4.327 4.328 1.552-1.545c.287-.287.508-.618.663-.992a3.074 3.074 0 0 0 .075-2.14zm-.889 1.804a2.15 2.15 0 0 1-.471.705l-.93.93-3.09-3.09.93-.93a2.15 2.15 0 0 1 .704-.472 2.134 2.134 0 0 1 1.689.007c.264.114.494.271.69.472.2.195.358.426.472.69a2.134 2.134 0 0 1 .007 1.688zm-4.824 4.994l1.484-1.545-.616-.622-1.49 1.551-1.86-1.859 1.491-1.552L6.291 6 4.808 7.545l-.616-.615-1.551 1.545a3 3 0 0 0-.663.998 3.023 3.023 0 0 0-.233 1.169c0 .332.05.656.15.97.105.31.258.597.459.862L1 13.834l.615.615 1.36-1.353c.265.2.552.353.862.458.314.1.638.15.97.15.406 0 .796-.077 1.17-.232.378-.155.71-.376.998-.663l1.545-1.552-.616-.615zm-2.262 2.023a2.16 2.16 0 0 1-.834.164c-.301 0-.586-.057-.855-.17a2.278 2.278 0 0 1-.697-.466 2.28 2.28 0 0 1-.465-.697 2.167 2.167 0 0 1-.17-.854 2.16 2.16 0 0 1 .642-1.545l.93-.93 3.09 3.09-.93.93a2.22 2.22 0 0 1-.711.478z"}}]})(props);\n};\nfunction VscDebugLineByLine (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6 10V9h9v1H6zm4-4h5v1h-5V6zm5-3v1H6V3h9zm-9 9v1h9v-1H6z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 2.795l.783-.419 5.371 3.581v.838l-5.371 3.581L1 9.957V2.795zm1.007.94v5.281l3.96-2.64-3.96-2.64z"}}]})(props);\n};\nfunction VscDebugPause (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4.5 3H6v10H4.5V3zm7 0v10H10V3h1.5z"}}]})(props);\n};\nfunction VscDebugRerun (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.167 12a3 3 0 0 1-5.74 1.223l-.928.376A4.001 4.001 0 1 0 1 9.556V8.333H0V11l.5.5h2.333v-1H1.568A3 3 0 0 1 7.167 12z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 2.41L5.78 2l9 6v.83L10 12.017v-1.2l3.6-2.397L6 3.35V7H5V2.41z"}}]})(props);\n};\nfunction VscDebugRestartFrame (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 10V9h5.207a5.48 5.48 0 0 0-.185 1H1zm6.257-3a5.54 5.54 0 0 1 1.08-1H1v1h6.257zM6.6 13a5.465 5.465 0 0 1-.393-1H1v1h5.6zM15 3v1H1V3h14zm-3.36 10.031a2.531 2.531 0 1 0-2.192-3.797h1.068v.844h-1.97l-.421-.422v-2.25h.844v1.032a3.375 3.375 0 1 1-.423 3.412l.782-.318a2.532 2.532 0 0 0 2.313 1.5z"}}]})(props);\n};\nfunction VscDebugRestart (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.75 8a4.5 4.5 0 0 1-8.61 1.834l-1.391.565A6.001 6.001 0 0 0 14.25 8 6 6 0 0 0 3.5 4.334V2.5H2v4l.75.75h3.5v-1.5H4.352A4.5 4.5 0 0 1 12.75 8z"}}]})(props);\n};\nfunction VscDebugReverseContinue (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.5 2H12v12h1.5V2zm-4.936.39L9.75 3v10l-1.186.61-7-5V7.39l7-5zM3.29 8l4.96 3.543V4.457L3.29 8z"}}]})(props);\n};\nfunction VscDebugStackframeActive (props) {\n  return GenIcon({"tag":"svg","attr":{"fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"}},{"tag":"path","attr":{"d":"M14.5 7.15l-4.26-4.74L9.31 2H4.25L3 3.25v9.48l1.25 1.25h5.06l.93-.42 4.26-4.74V7.15zm-5.19 5.58H4.25V3.25h5.06l4.26 4.73-4.26 4.75z"}}]})(props);\n};\nfunction VscDebugStackframeDot (props) {\n  return GenIcon({"tag":"svg","attr":{"fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"}}]})(props);\n};\nfunction VscDebugStackframe (props) {\n  return GenIcon({"tag":"svg","attr":{"fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 7.15l-4.26-4.74L9.31 2H4.25L3 3.25v9.48l1.25 1.25h5.06l.93-.42 4.26-4.74V7.15zm-5.19 5.58H4.25V3.25h5.06l4.26 4.73-4.26 4.75z"}}]})(props);\n};\nfunction VscDebugStart (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.25 3l1.166-.624 8 5.333v1.248l-8 5.334-1.166-.624V3zm1.5 1.401v7.864l5.898-3.932L5.75 4.401z"}}]})(props);\n};\nfunction VscDebugStepBack (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.75 5.75v-4h1.5v2.542c1.145-1.359 2.911-2.209 4.84-2.209 3.177 0 5.92 2.307 6.16 5.398l.02.269h-1.5l-.022-.226c-.212-2.195-2.202-3.94-4.656-3.94-1.736 0-3.244.875-4.05 2.166h2.83v1.5H2.707l-.961-.975V5.75h.003zM8 14a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"}}]})(props);\n};\nfunction VscDebugStepInto (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 9.532h.542l3.905-3.905-1.061-1.06-2.637 2.61V1H7.251v6.177l-2.637-2.61-1.061 1.06 3.905 3.905H8zm1.956 3.481a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"}}]})(props);\n};\nfunction VscDebugStepOut (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 1h-.542L3.553 4.905l1.061 1.06 2.637-2.61v6.177h1.498V3.355l2.637 2.61 1.061-1.06L8.542 1H8zm1.956 12.013a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"}}]})(props);\n};\nfunction VscDebugStepOver (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.25 5.75v-4h-1.5v2.542c-1.145-1.359-2.911-2.209-4.84-2.209-3.177 0-5.92 2.307-6.16 5.398l-.02.269h1.501l.022-.226c.212-2.195 2.202-3.94 4.656-3.94 1.736 0 3.244.875 4.05 2.166h-2.83v1.5h4.163l.962-.975V5.75h-.004zM8 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"}}]})(props);\n};\nfunction VscDebugStop (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M2 2v12h12V2H2zm10.75 10.75h-9.5v-9.5h9.5v9.5z"}}]})(props);\n};\nfunction VscDebug (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3.463 12.86l-.005-.07.005.07zm7.264.69l-3.034-3.049 1.014-1.014 3.209 3.225 3.163-3.163 1.014 1.014-3.034 3.034 3.034 3.05-1.014 1.014-3.209-3.225L8.707 17.6l-1.014-1.014 3.034-3.034z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M16.933 5.003V6h1.345l2.843-2.842 1.014 1.014-2.692 2.691.033.085a13.75 13.75 0 0 1 .885 4.912c0 .335-.011.667-.034.995l-.005.075h3.54v1.434h-3.72l-.01.058c-.303 1.653-.891 3.16-1.692 4.429l-.06.094 3.423 3.44-1.017 1.012-3.274-3.29-.099.11c-1.479 1.654-3.395 2.646-5.483 2.646-2.12 0-4.063-1.023-5.552-2.723l-.098-.113-3.209 3.208-1.014-1.014 3.366-3.365-.059-.095c-.772-1.25-1.34-2.725-1.636-4.34l-.01-.057H0V12.93h3.538l-.005-.075a14.23 14.23 0 0 1-.034-.995c0-1.743.31-3.39.863-4.854l.032-.084-2.762-2.776L2.65 3.135 5.5 6h1.427v-.997a5.003 5.003 0 0 1 10.006 0zm-8.572 0V6H15.5v-.997a3.569 3.569 0 0 0-7.138 0zm9.8 2.522l-.034-.09H5.733l-.034.09a12.328 12.328 0 0 0-.766 4.335c0 2.76.862 5.201 2.184 6.92 1.32 1.716 3.036 2.649 4.813 2.649 1.777 0 3.492-.933 4.813-2.65 1.322-1.718 2.184-4.16 2.184-6.919 0-1.574-.28-3.044-.766-4.335z"}}]})(props);\n};\nfunction VscDesktopDownload (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 15v-1c2 0 2-.6 2-1H1.5l-.5-.5v-10l.5-.5h13l.5.5v9.24l-1-1V3H2v9h5.73l-.5.5 2.5 2.5H4zm7.86 0l2.5-2.5-.71-.7L12 13.45V7h-1v6.44l-1.64-1.65-.71.71 2.5 2.5h.71z"}}]})(props);\n};\nfunction VscDeviceCameraVideo (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.25 4.74L11 6.62V4.5l-.5-.5h-9l-.5.5v7l.5.5h9l.5-.5v-2l3.25 1.87.75-.47V5.18l-.75-.44zM10 11H2V5h8v6zm4-1l-3-1.7v-.52L14 6v4z"}}]})(props);\n};\nfunction VscDeviceCamera (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.707 3H14.5l.5.5v9l-.5.5h-13l-.5-.5v-9l.5-.5h3.793l.853-.854L6.5 2h3l.354.146.853.854zM2 12h12V4h-3.5l-.354-.146L9.293 3H6.707l-.853.854L5.5 4H2v8zm1.5-7a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1zM8 6a2 2 0 1 1 0 4 2 2 0 0 1 0-4zm0-1a3 3 0 1 0 0 6 3 3 0 0 0 0-6z"}}]})(props);\n};\nfunction VscDeviceMobile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.5 1h8l.5.5v13l-.5.5h-8l-.5-.5v-13l.5-.5zM5 14h7V2H5v12zm2.5-2h2v1h-2v-1z"}}]})(props);\n};\nfunction VscDiffAdded (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h12l.5.5v12l-.5.5h-12l-.5-.5v-12l.5-.5zM2 13h11V2H2v11z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 4H7v3H4v1h3v3h1V8h3V7H8V4z"}}]})(props);\n};\nfunction VscDiffIgnored (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v13l-.5.5h-13l-.5-.5v-13l.5-.5zM2 14h12V2H2v12zm8-10h2v2l-6 6H4v-2l6-6z"}}]})(props);\n};\nfunction VscDiffModified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v13l-.5.5h-13l-.5-.5v-13l.5-.5zM2 2v12h12V2H2zm6 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"}}]})(props);\n};\nfunction VscDiffRemoved (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10 7v1H5V7h5z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h12l.5.5v12l-.5.5h-12l-.5-.5v-12l.5-.5zM2 13h11V2H2v11z"}}]})(props);\n};\nfunction VscDiffRenamed (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v13l-.5.5h-13l-.5-.5v-13l.5-.5zM2 14h12V2H2v12zm2-5h3v3l5-4-5-4v3H4v2z"}}]})(props);\n};\nfunction VscDiff (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 3.5l.5-.5h5l.5.5v9l-.5.5h-5l-.5-.5v-9zM3 12h4V6H3v6zm0-7h4V4H3v1zm6.5-2h5l.5.5v9l-.5.5h-5l-.5-.5v-9l.5-.5zm.5 9h4v-2h-4v2zm0-4h4V4h-4v4z"}}]})(props);\n};\nfunction VscDiscard (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.5 2v3.5L4 6h3.5V5H4.979l.941-.941a3.552 3.552 0 1 1 5.023 5.023L5.746 14.28l.72.72 5.198-5.198A4.57 4.57 0 0 0 5.2 3.339l-.7.7V2h-1z"}}]})(props);\n};\nfunction VscEdit (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.23 1h-1.46L3.52 9.25l-.16.22L1 13.59 2.41 15l4.12-2.36.22-.16L15 4.23V2.77L13.23 1zM2.41 13.59l1.51-3 1.45 1.45-2.96 1.55zm3.83-2.06L4.47 9.76l8-8 1.77 1.77-8 8z"}}]})(props);\n};\nfunction VscEditorLayout (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 6.5l-.47-.5H7V1.47L6.53 1H1.47L1 1.47v8.06l.47.47H4v4.53l.47.47h10.06l.47-.47V6.5zM2 9V3h4v6H2zm12 5H5v-4h1.53L7 9.53V8.013h7V14z"}}]})(props);\n};\nfunction VscEllipsis (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm5 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm5 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"}}]})(props);\n};\nfunction VscEmptyWindow (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 4h3v1H4v3H3V5H0V4h3V1h1v3zM1 14.5V9h1v5h12V7H8V6h6V4H8V3h6.5l.5.5v11l-.5.5h-13l-.5-.5z"}}]})(props);\n};\nfunction VscError (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6zM7.9 7.5L10.3 5l.7.7-2.4 2.5 2.4 2.5-.7.7-2.4-2.5-2.4 2.5-.7-.7 2.4-2.5-2.4-2.5.7-.7 2.4 2.5z"}}]})(props);\n};\nfunction VscExclude (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.412 1H6.588l-.484 2.423-2.056-1.37-1.996 1.995 1.37 2.056L1 6.588v2.824l2.423.484-1.37 2.056 1.995 1.996 2.056-1.37L6.588 15h2.083a4.526 4.526 0 0 1-.917-1.005h-.342l-.288-1.441a4.473 4.473 0 0 1-.067-.334l-.116-.583-.764-.316-2 1.334-.832-.831L4.68 9.823l-.316-.764-2.358-.471V7.412l2.358-.471.316-.764-1.334-2 .831-.832 2 1.335.764-.316.471-2.358h1.176l.471 2.358.764.316 2-1.334.832.831-1.334 2.001.316.764.582.116c.113.018.225.04.335.067l1.441.288v.342c.38.254.719.563 1.005.917V6.588l-2.422-.484 1.37-2.056-1.996-1.996-2.056 1.37L9.412 1zM8 6a2 2 0 0 1 1.875 1.302 4.46 4.46 0 0 0-.9.473 1 1 0 1 0-1.2 1.2 4.46 4.46 0 0 0-.473.9A2 2 0 0 1 8 6zm1.28 2.795a3.5 3.5 0 1 1 4.44 5.41 3.5 3.5 0 0 1-4.44-5.41zM9 11v1h5v-1H9z"}}]})(props);\n};\nfunction VscExpandAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9 9H4v1h5V9z"}},{"tag":"path","attr":{"d":"M7 12V7H6v5h1z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 3l1-1h7l1 1v7l-1 1h-2v2l-1 1H3l-1-1V6l1-1h2V3zm1 2h4l1 1v4h2V3H6v2zm4 1H3v7h7V6z"}}]})(props);\n};\nfunction VscExport (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.086 7l-2.39-2.398.702-.704L15 7.5l-3.602 3.602-.703-.704 2.383-2.382V8H3V7h10.086zM1 4h1v7H1V4z"}}]})(props);\n};\nfunction VscExtensions (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.5 1.5L15 0h7.5L24 1.5V9l-1.5 1.5H15L13.5 9V1.5zm1.5 0V9h7.5V1.5H15zM0 15V6l1.5-1.5H9L10.5 6v7.5H18l1.5 1.5v7.5L18 24H1.5L0 22.5V15zm9-1.5V6H1.5v7.5H9zM9 15H1.5v7.5H9V15zm1.5 7.5H18V15h-7.5v7.5z"}}]})(props);\n};\nfunction VscEyeClosed (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 2c-1.5 0-2.8.4-3.9 1.2l.8.7C5.8 3.3 6.8 3 8 3c3.3 0 6 2.7 6 6h1c0-3.9-3.1-7-7-7zM1 3l1.6 1.5C1.6 5.7 1 7.3 1 9h1c0-1.5.5-2.8 1.4-3.8l2.2 2C5.2 7.7 5 8.3 5 9c0 1.7 1.3 3 3 3 .8 0 1.5-.3 2-.8l3 2.8.7-.7-12-11L1 3zm5.3 4.9l2.9 2.7c-.3.2-.7.4-1.2.4-1.1 0-2-.9-2-2 0-.4.1-.8.3-1.1zM11 9.5l-1-.9c-.2-.8-.9-1.5-1.8-1.6l-1-.9c.3-.1.5-.1.8-.1 1.7 0 3 1.3 3 3v.5z"}}]})(props);\n};\nfunction VscEye (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 10c0-3.9 3.1-7 7-7s7 3.1 7 7h-1c0-3.3-2.7-6-6-6s-6 2.7-6 6H1zm4 0c0-1.7 1.3-3 3-3s3 1.3 3 3-1.3 3-3 3-3-1.3-3-3zm1 0c0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2-2 .9-2 2z"}}]})(props);\n};\nfunction VscFeedback (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M7.549 10.078c.46.182.88.424 1.258.725.378.3.701.65.97 1.046a4.829 4.829 0 0 1 .848 2.714V15H9.75v-.438a3.894 3.894 0 0 0-1.155-2.782 4.054 4.054 0 0 0-1.251-.84 3.898 3.898 0 0 0-1.532-.315A3.894 3.894 0 0 0 3.03 11.78a4.06 4.06 0 0 0-.84 1.251c-.206.474-.31.985-.315 1.531V15H1v-.438a4.724 4.724 0 0 1 .848-2.713 4.918 4.918 0 0 1 2.229-1.77 2.994 2.994 0 0 1-.555-.493 3.156 3.156 0 0 1-.417-.602 2.942 2.942 0 0 1-.26-.683 3.345 3.345 0 0 1-.095-.739c0-.423.08-.82.24-1.189a3.095 3.095 0 0 1 1.626-1.627 3.067 3.067 0 0 1 2.386-.007 3.095 3.095 0 0 1 1.627 1.627 3.067 3.067 0 0 1 .157 1.928c-.06.237-.148.465-.266.684a3.506 3.506 0 0 1-.417.608c-.16.187-.345.35-.554.492zM5.812 9.75c.301 0 .584-.057.848-.17a2.194 2.194 0 0 0 1.162-1.163c.119-.269.178-.554.178-.854a2.138 2.138 0 0 0-.643-1.538 2.383 2.383 0 0 0-.697-.472 2.048 2.048 0 0 0-.848-.178c-.3 0-.583.057-.847.17a2.218 2.218 0 0 0-1.17 1.17c-.113.264-.17.547-.17.848 0 .3.057.583.17.847.115.264.27.497.466.697a2.168 2.168 0 0 0 1.552.643zM15 1v7h-1.75l-2.625 2.625V8H9.75v-.875h1.75v1.388l1.388-1.388h1.237v-5.25h-8.75v1.572a7.255 7.255 0 0 0-.438.069 2.62 2.62 0 0 0-.437.123V1H15z"}}]})(props);\n};\nfunction VscFileBinary (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM3 2v12h10V5l-3-3H3zm1.46 4.052c0 1.287.458 1.93 1.374 1.93.457 0 .807-.173 1.05-.52.246-.348.368-.847.368-1.499C7.252 4.654 6.805 4 5.91 4c-.471 0-.831.175-1.08.526-.247.35-.37.858-.37 1.526zm.862-.022c0-.922.183-1.383.55-1.383.344 0 .516.448.516 1.343s-.176 1.343-.527 1.343c-.36 0-.54-.434-.54-1.303zm3.187 1.886h2.435v-.672h-.792V4l-1.665.336v.687l.82-.177v2.398h-.798v.672zm-1.337 5H4.736v-.672h.798V9.846l-.82.177v-.687L6.38 9v3.244h.792v.671zm1.035-1.931c0 1.287.458 1.93 1.375 1.93.457 0 .807-.173 1.05-.52.245-.348.368-.847.368-1.499 0-1.309-.448-1.963-1.343-1.963-.47 0-.83.175-1.08.526-.246.35-.37.858-.37 1.526zm.862-.022c0-.922.184-1.383.55-1.383.344 0 .516.448.516 1.343s-.175 1.343-.526 1.343c-.36 0-.54-.434-.54-1.303z"}}]})(props);\n};\nfunction VscFileCode (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM3 2v12h10V6H9.5L9 5.5V2H3zm2.062 7.533l1.817-1.828L6.17 7 4 9.179v.707l2.171 2.174.707-.707-1.816-1.82zM8.8 7.714l.7-.709 2.189 2.175v.709L9.5 12.062l-.705-.709 1.831-1.82L8.8 7.714z"}}]})(props);\n};\nfunction VscFileMedia (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 2h6v3.5l.5.5H12v1h1V4.8l-.15-.36-3.28-3.3L9.22 1H1.5l-.5.5v13l.5.5H5v-1H2V2zm7 0l3 3H9V2zm5.5 6h-8l-.5.5v6l.5.5h8l.5-.5v-6l-.5-.5zM14 9v4l-1.63-1.6h-.71l-1.16 1.17-2.13-2.13h-.71L7 11.1V9h7zm-2.8 4.27l.81-.81L13.55 14h-1.62l-.73-.73zM7 14v-1.49l1-1L10.52 14H7zm5.5-3.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z"}}]})(props);\n};\nfunction VscFilePdf (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.85 4.44l-3.28-3.3-.35-.14H2.5l-.5.5V7h1V2h6v3.5l.5.5H13v1h1V4.8l-.15-.36zM10 5V2l3 3h-3zM2.5 8l-.5.5v6l.5.5h11l.5-.5v-6l-.5-.5h-11zM13 13v1H3V9h10v4zm-8-1h-.32v1H4v-3h1.06c.75 0 1.13.36 1.13 1a.94.94 0 0 1-.32.72A1.33 1.33 0 0 1 5 12zm-.06-1.45h-.26v.93h.26c.36 0 .54-.16.54-.47 0-.31-.18-.46-.54-.46zM9 12.58a1.48 1.48 0 0 0 .44-1.12c0-1-.53-1.46-1.6-1.46H6.78v3h1.06A1.6 1.6 0 0 0 9 12.58zm-1.55-.13v-1.9h.33a.94.94 0 0 1 .7.25.91.91 0 0 1 .25.67 1 1 0 0 1-.25.72.94.94 0 0 1-.69.26h-.34zm4.45-.61h-.97V13h-.68v-3h1.74v.55h-1.06v.74h.97v.55z"}}]})(props);\n};\nfunction VscFileSubmodule (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 11h1V6.99H2V11zm1-5.01V5.5l.5-.5h4.43l.43.25.43.75h5.71l.5.5v8l-.5.5h-11l-.5-.5V12H1.5l-.5-.5v-9l.5-.5h4.42l.44.25.43.75h5.71l.5.5V6l-1-.03V4H6.5l-.43-.25L5.64 3H2v2.99h1zm5.07.76L7.64 6H4v3h3.15l.41-.74L8 8h6V7H8.5l-.43-.25zM7.45 10H4v4h10V9H8.3l-.41.74-.44.26z"}}]})(props);\n};\nfunction VscFileSymlinkDirectory (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.71 3h6.79l.51.5v10l-.5.5h-13l-.5-.5v-11l.5-.5h5l.35.15.85.85zm6.28 10v-1.51l.01-4v-1.5H7.7l-.86.86-.35.15H2v6h11.99zm-6.5-8h6.5l.01-.99H7.5l-.36-.15-.85-.85H2v3h4.28l.86-.86.35-.15zm2.29 4.07L8.42 7.7l.74-.69 2.22 2.22v.71l-2.29 2.21-.7-.72 1.4-1.35H8.42a2 2 0 0 0-1.35.61A1.8 1.8 0 0 0 6.54 12h-1a2.76 2.76 0 0 1 .81-2 3 3 0 0 1 2-.93h1.43z"}}]})(props);\n};\nfunction VscFileSymlinkFile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5H10v-1h3V6H9.5L9 5.5V2H3v4H2V1.5l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM8.5 7h-7l-.5.5v7l.5.5h7l.5-.5v-7L8.5 7zM8 14H2V8h6v6zM7 9.5v3H6v-1.793l-2.646 2.647-.708-.708L5.293 10H3.53V9H6.5l.5.5z"}}]})(props);\n};\nfunction VscFileZip (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.5 1h11l.5.5v5l-.15.35-.85.86v6.79l-.5.5h-10l-.5-.5v-13l.5-.5zM6 2H5v2h1V2zm0 12h4V7.68l-.85-.85L9 6.47V2H7v2.5l-.5.5H6v1H5V5h-.5L4 4.5V2H3v12h2v-1h1v1zm0-2v1h1v-1H6zm0-1v1H5v-1h1zm0-1h1v1H6v-1zm0-1v1H5V9h1zm0-1h1v1H6V8zm0-1v1H5V7h1zm0 0h1V6H6v1zm6.15.15l.85-.86V2h-3v4.27l.85.85.15.35V14h1V7.5l.15-.35z"}}]})(props);\n};\nfunction VscFile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.71 4.29l-3-3L10 1H4L3 2v12l1 1h9l1-1V5l-.29-.71zM13 14H4V2h5v4h4v8zm-3-9V2l3 3h-3z"}}]})(props);\n};\nfunction VscFiles (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M17.5 0h-9L7 1.5V6H2.5L1 7.5v15.07L2.5 24h12.07L16 22.57V18h4.7l1.3-1.43V4.5L17.5 0zm0 2.12l2.38 2.38H17.5V2.12zm-3 20.38h-12v-15H7v9.07L8.5 18h6v4.5zm6-6h-12v-15H16V6h4.5v10.5z"}}]})(props);\n};\nfunction VscFilterFilled (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15 2v1.67l-5 4.759V14H6V8.429l-5-4.76V2h14z"}}]})(props);\n};\nfunction VscFilter (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15 2v1.67l-5 4.759V14H6V8.429l-5-4.76V2h14zM7 8v5h2V8l5-4.76V3H2v.24L7 8z"}}]})(props);\n};\nfunction VscFlame (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9.13 15l-.53-.77a1.85 1.85 0 0 0-.28-2.54 3.51 3.51 0 0 1-1.19-2c-1.56 2.23-.75 3.46 0 4.55l-.55.76A4.4 4.4 0 0 1 3 10.46S2.79 8.3 5.28 6.19c0 0 2.82-2.61 1.84-4.54L7.83 1a6.57 6.57 0 0 1 2.61 6.94 2.57 2.57 0 0 0 .56-.81l.87-.07c.07.12 1.84 2.93.89 5.3A4.72 4.72 0 0 1 9.13 15zm-2-6.95l.87.39a3 3 0 0 0 .92 2.48 2.64 2.64 0 0 1 1 2.8A3.241 3.241 0 0 0 11.8 12a4.87 4.87 0 0 0-.41-3.63 1.85 1.85 0 0 1-1.84.86l-.35-.68a5.31 5.31 0 0 0-.89-5.8C8.17 4.87 6 6.83 5.93 6.94 3.86 8.7 4 10.33 4 10.4a3.47 3.47 0 0 0 1.59 3.14C5 12.14 5 10.46 7.16 8.05h-.03z"}}]})(props);\n};\nfunction VscFoldDown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.207 1.707L13.5 1l-6 6-6-6-.707.707 6.353 6.354h.708l6.353-6.354zm0 6L13.5 7l-6 6-6-6-.707.707 6.353 6.354h.708l6.353-6.354z"}}]})(props);\n};\nfunction VscFoldUp (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1 7.4l.7.7 6-6 6 6 .7-.7L8.1 1h-.7L1 7.4zm0 6l.7.7 6-6 6 6 .7-.7L8.1 7h-.7L1 13.4z"}}]})(props);\n};\nfunction VscFold (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.952 2.381L7.976 6.357 4 2.381 3.38 3l4.286 4.285h.619L12.57 3l-.618-.619zM3.904 14l4.072-4.072L12.047 14l.62-.619L8.284 9h-.619l-4.381 4.381.619.619z"}}]})(props);\n};\nfunction VscFolderActive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.71 3h6.79l.51.5v4.507A4.997 4.997 0 0 0 14 7.416V5.99H7.69l-.86.86-.35.15H1.99v6H7.1c.07.348.177.682.316 1H1.51l-.5-.5v-11l.5-.5h5l.35.15.85.85zm-.22 2h6.5l.01-.99H7.5l-.36-.15-.85-.85H2v3h4.28l.86-.86.35-.15z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.778 8.674a4 4 0 1 1 4.444 6.652 4 4 0 0 1-4.444-6.652zm2.13 4.99l2.387-3.182-.8-.6-2.077 2.769-1.301-1.041-.625.78 1.704 1.364.713-.09z"}}]})(props);\n};\nfunction VscFolderLibrary (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.70996 3H14.5L15.01 3.5V7H14V5.98999H7.68994L6.82996 6.84998L6.47998 7H1.98999V7.48999V11.49V13H7V14H1.51001L1.01001 13.5V6.5V2.5L1.51001 2H6.51001L6.85999 2.15002L7.70996 3ZM7.48999 5H13.99L14 4.01001H7.5L7.14001 3.85999L6.29004 3.01001H2V6.01001H6.28003L7.14001 5.15002L7.48999 5Z"}},{"tag":"rect","attr":{"x":"8","y":"8","width":"1","height":"6"}},{"tag":"rect","attr":{"x":"10","y":"8","width":"1","height":"6"}},{"tag":"rect","attr":{"x":"12.0041","y":"8.35193","width":"1","height":"6","transform":"rotate(-20 12.0041 8.35193)"}}]})(props);\n};\nfunction VscFolderOpened (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1.5 14h11l.48-.37 2.63-7-.48-.63H14V3.5l-.5-.5H7.71l-.86-.85L6.5 2h-5l-.5.5v11l.5.5zM2 3h4.29l.86.85.35.15H13v2H8.5l-.35.15-.86.85H3.5l-.47.34-1 3.08L2 3zm10.13 10H2.19l1.67-5H7.5l.35-.15.86-.85h5.79l-2.37 6z"}}]})(props);\n};\nfunction VscFolder (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 3H7.71l-.85-.85L6.51 2h-5l-.5.5v11l.5.5h13l.5-.5v-10L14.5 3zm-.51 8.49V13h-12V7h4.49l.35-.15.86-.86H14v1.5l-.01 4zm0-6.49h-6.5l-.35.15-.86.86H2v-3h4.29l.85.85.36.15H14l-.01.99z"}}]})(props);\n};\nfunction VscGear (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9.1 4.4L8.6 2H7.4l-.5 2.4-.7.3-2-1.3-.9.8 1.3 2-.2.7-2.4.5v1.2l2.4.5.3.8-1.3 2 .8.8 2-1.3.8.3.4 2.3h1.2l.5-2.4.8-.3 2 1.3.8-.8-1.3-2 .3-.8 2.3-.4V7.4l-2.4-.5-.3-.8 1.3-2-.8-.8-2 1.3-.7-.2zM9.4 1l.5 2.4L12 2.1l2 2-1.4 2.1 2.4.4v2.8l-2.4.5L14 12l-2 2-2.1-1.4-.5 2.4H6.6l-.5-2.4L4 13.9l-2-2 1.4-2.1L1 9.4V6.6l2.4-.5L2.1 4l2-2 2.1 1.4.4-2.4h2.8zm.6 7c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zM8 9c.6 0 1-.4 1-1s-.4-1-1-1-1 .4-1 1 .4 1 1 1z"}}]})(props);\n};\nfunction VscGift (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.5 4h-1.6c.1-.4.1-.8.1-1.2-.1-.3-.2-.6-.4-.9-.2-.3-.4-.5-.7-.6-.3-.1-.6-.3-.9-.3-.3 0-.6 0-.9.2-.7.2-1.2.7-1.6 1.3-.4-.6-.9-1.1-1.6-1.3-.3-.1-.6-.2-.9-.2-.3 0-.6.1-.9.3-.3.1-.5.3-.7.6-.2.2-.3.6-.4.9 0 .4 0 .8.1 1.2H1.5l-.5.5v9l.5.5h12l.5-.5v-9l-.5-.5zM7 13H2V5h5v8zm0-9H4v-.2c-.1-.3-.1-.5-.1-.8.1-.2.1-.4.3-.5.1-.2.3-.3.5-.4.1-.1.3-.1.5-.1s.4 0 .6.1c.3.1.6.3.8.6.2.3.4.6.4 1V4zm1-.3c0-.4.2-.7.4-1 .2-.3.5-.5.8-.6.2-.1.4-.1.6-.1.2 0 .4 0 .6.1.2.1.3.2.5.4.1.1.1.3.2.5 0 .3 0 .5-.1.8 0 .1 0 .1-.1.2H8v-.3zm5 9.3H8V5h5v8z"}}]})(props);\n};\nfunction VscGistSecret (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3 14h4v.91l.09.09H2.5l-.5-.5v-13l.5-.5h7.72l.35.14 3.28 3.3.15.36v2.54a3.1 3.1 0 0 0-1-.94V6H9.5L9 5.5V2H3v12zm10-9l-3-3v3h3zm.5 4v1h1l.5.5v4l-.5.5h-6l-.5-.5v-4l.5-.5h1V9a2 2 0 0 1 4 0zm-2.707-.707A1 1 0 0 0 10.5 9v1h2V9a1 1 0 0 0-1.707-.707zM9 11v3h5v-3H9z"}}]})(props);\n};\nfunction VscGist (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM3 2v12h10V6H9.5L9 5.5V2H3zm2.062 7.533l1.817-1.828L6.17 7 4 9.179v.707l2.171 2.174.707-.707-1.816-1.82zM8.8 7.714l.7-.709 2.189 2.175v.709L9.5 12.062l-.705-.709 1.831-1.82L8.8 7.714z"}}]})(props);\n};\nfunction VscGitCommit (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.979 5a3.42 3.42 0 0 0-2-1V0h-1v4a3.5 3.5 0 0 0-.18 6.89h.18v4h1v-4a3.08 3.08 0 0 0 .84-.23 3.42 3.42 0 0 0 1.57-1.29 3.46 3.46 0 0 0-.41-4.37zm-.7 4.24a2.51 2.51 0 0 1-3.159.31 2.5 2.5 0 0 1-.92-1.12 2.49 2.49 0 0 1 1.82-3.41 2.72 2.72 0 0 1 .49 0 2.5 2.5 0 0 1 2.54 2.5 2.51 2.51 0 0 1-.8 1.75l.03-.03z"}}]})(props);\n};\nfunction VscGitCompare (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.389 12.99l-1.27-1.27.67-.7 2.13 2.13v.7l-2.13 2.13-.71-.71L7.349 14h-1.85a2.49 2.49 0 0 1-2.5-2.5V5.95a2.59 2.59 0 0 1-1.27-.68 2.52 2.52 0 0 1-.54-2.73A2.5 2.5 0 0 1 3.499 1a2.45 2.45 0 0 1 1 .19 2.48 2.48 0 0 1 1.35 1.35c.133.317.197.658.19 1a2.5 2.5 0 0 1-2 2.45v5.5a1.5 1.5 0 0 0 1.5 1.5h1.85zm-4.68-8.25a1.5 1.5 0 0 0 2.08-2.08 1.55 1.55 0 0 0-.68-.56 1.49 1.49 0 0 0-.86-.08 1.49 1.49 0 0 0-1.18 1.18 1.49 1.49 0 0 0 .08.86c.117.277.311.513.56.68zm10.33 6.3c.48.098.922.335 1.27.68a2.51 2.51 0 0 1 .31 3.159 2.5 2.5 0 1 1-3.47-3.468c.269-.182.571-.308.89-.37V5.49a1.5 1.5 0 0 0-1.5-1.5h-1.85l1.27 1.27-.71.71-2.13-2.13v-.7l2.13-2.13.71.71-1.27 1.27h1.85a2.49 2.49 0 0 1 2.5 2.5v5.55zm-.351 3.943a1.5 1.5 0 0 0 1.1-2.322 1.55 1.55 0 0 0-.68-.56 1.49 1.49 0 0 0-.859-.08 1.49 1.49 0 0 0-1.18 1.18 1.49 1.49 0 0 0 .08.86 1.5 1.5 0 0 0 1.539.922z"}}]})(props);\n};\nfunction VscGitMerge (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.273 7.73a2.51 2.51 0 0 0-3.159-.31 2.5 2.5 0 0 0-.921 1.12 2.23 2.23 0 0 0-.13.44 4.52 4.52 0 0 1-4-4 2.23 2.23 0 0 0 .44-.13 2.5 2.5 0 0 0 1.54-2.31 2.45 2.45 0 0 0-.19-1A2.48 2.48 0 0 0 5.503.19a2.45 2.45 0 0 0-1-.19 2.5 2.5 0 0 0-2.31 1.54 2.52 2.52 0 0 0 .54 2.73c.35.343.79.579 1.27.68v5.1a2.411 2.411 0 0 0-.89.37 2.5 2.5 0 1 0 3.47 3.468 2.5 2.5 0 0 0 .42-1.387 2.45 2.45 0 0 0-.19-1 2.48 2.48 0 0 0-1.81-1.49v-2.4a5.52 5.52 0 0 0 2 1.73 5.65 5.65 0 0 0 2.09.6 2.5 2.5 0 0 0 4.95-.49 2.51 2.51 0 0 0-.77-1.72zm-8.2 3.38c.276.117.512.312.68.56a1.5 1.5 0 0 1-2.08 2.08 1.55 1.55 0 0 1-.56-.68 1.49 1.49 0 0 1-.08-.86 1.49 1.49 0 0 1 1.18-1.18 1.49 1.49 0 0 1 .86.08zM4.503 4a1.5 1.5 0 0 1-1.39-.93 1.49 1.49 0 0 1-.08-.86 1.49 1.49 0 0 1 1.18-1.18 1.49 1.49 0 0 1 .86.08A1.5 1.5 0 0 1 4.503 4zm8.06 6.56a1.5 1.5 0 0 1-2.45-.49 1.49 1.49 0 0 1-.08-.86 1.49 1.49 0 0 1 1.18-1.18 1.49 1.49 0 0 1 .86.08 1.499 1.499 0 0 1 .49 2.45z"}}]})(props);\n};\nfunction VscGitPullRequestClosed (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.61594 4.92769C5.34304 5.33899 4.95319 5.66062 4.49705 5.8497C4.34891 5.91013 4.03897 5.9881 4.03897 5.9881V10.9958C4.19686 11.027 4.35086 11.0738 4.499 11.1362C4.95513 11.3272 5.34304 11.6469 5.61789 12.0582C5.89079 12.4695 6.03699 12.9529 6.03699 13.4461C6.04478 13.7891 5.98046 14.1303 5.84791 14.446C5.72315 14.7482 5.53992 15.023 5.30796 15.255C5.07794 15.487 4.80114 15.6702 4.499 15.7949C4.18322 15.9275 3.84209 15.9918 3.49902 15.984C3.00585 15.986 2.52243 15.8398 2.11113 15.5649C1.69983 15.292 1.3782 14.9022 1.18912 14.446C1.00198 13.988 0.953253 13.485 1.04877 12.9997C1.14428 12.5143 1.38015 12.0679 1.72907 11.717C2.07799 11.374 2.51853 11.1381 2.99805 11.0367V5.94911C2.52048 5.8458 2.07994 5.61189 1.72907 5.26881C1.38015 4.91794 1.14428 4.47155 1.04877 3.98618C0.951304 3.50081 1.00004 2.99789 1.18912 2.53981C1.3782 2.08368 1.69983 1.69382 2.11113 1.42092C2.52048 1.14607 3.0039 0.999877 3.49902 0.999877C3.84014 0.99403 4.18127 1.05836 4.49705 1.18896C4.79919 1.31371 5.07404 1.49695 5.30601 1.72891C5.53797 1.96087 5.7212 2.23767 5.84596 2.53981C5.97851 2.8556 6.04284 3.19672 6.03504 3.5398C6.03699 4.03296 5.89079 4.51639 5.61594 4.92769ZM4.85962 12.7892C4.73097 12.5494 4.53994 12.3486 4.30797 12.2102C4.07601 12.0699 3.80896 11.9958 3.538 11.9997C3.24171 11.9997 2.95322 12.0855 2.70761 12.2492C2.46005 12.4168 2.26512 12.6527 2.14816 12.9295C2.03706 13.2024 2.00977 13.5006 2.06824 13.7891C2.12477 14.0796 2.26707 14.3486 2.47759 14.5591C2.68812 14.7696 2.95517 14.9119 3.24756 14.9685C3.53606 15.0269 3.8343 14.9996 4.1072 14.8885C4.38399 14.7716 4.61986 14.5766 4.7875 14.3291C4.93759 14.103 5.02336 13.8398 5.037 13.5689C5.0487 13.2979 4.98827 13.0289 4.85962 12.7892ZM2.70761 4.74056C2.95517 4.90235 3.24366 4.99006 3.538 4.99006C3.80896 4.99006 4.07601 4.91599 4.30797 4.77954C4.53994 4.63919 4.73097 4.44037 4.85962 4.2006C4.98827 3.96084 5.05065 3.69184 5.037 3.42089C5.02336 3.14994 4.93759 2.88679 4.7875 2.66067C4.61986 2.41311 4.38399 2.21818 4.1072 2.10122C3.8343 1.99011 3.53606 1.96282 3.24756 2.0213C2.95712 2.07783 2.68812 2.22013 2.47759 2.43065C2.26707 2.64118 2.12477 2.90823 2.06824 3.20062C2.00977 3.48911 2.03706 3.78735 2.14816 4.06025C2.26512 4.33705 2.46005 4.57292 2.70761 4.74056ZM13.0368 11.0368C13.5164 11.1342 13.9588 11.372 14.3058 11.7171C14.7717 12.1868 15.0348 12.8243 15.0309 13.4831C15.0329 13.9763 14.8867 14.4597 14.6119 14.871C14.339 15.2823 13.9491 15.6039 13.493 15.793C13.0368 15.984 12.532 16.0347 12.0466 15.9392C11.5612 15.8437 11.1148 15.6059 10.764 15.255C10.415 14.9041 10.1753 14.4578 10.0798 13.9724C9.98425 13.487 10.0349 12.9841 10.226 12.526C10.4189 12.0738 10.7386 11.6839 11.146 11.4071C11.4131 11.2239 11.7172 11.0991 12.0349 11.0368V7.4891H13.0368V11.0368ZM13.5943 14.5455C13.8399 14.3018 13.992 13.9802 14.0271 13.6352C14.0622 13.2921 13.9764 12.9451 13.7854 12.6566C13.6177 12.4091 13.3819 12.2141 13.1051 12.0972C12.8322 11.9861 12.5339 11.9588 12.2454 12.0173C11.955 12.0738 11.686 12.2161 11.4755 12.4266C11.2649 12.6371 11.1226 12.9042 11.0661 13.1966C11.0076 13.4851 11.0349 13.7833 11.146 14.0562C11.263 14.333 11.4579 14.5689 11.7055 14.7365C11.994 14.9275 12.339 15.0133 12.684 14.9782C13.0271 14.9431 13.3507 14.7911 13.5943 14.5455Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.6876 3.40036L10 5.088L10.7071 5.7951L12.3947 4.10747L14.0824 5.7951L14.7895 5.088L13.1019 3.40036L14.7895 1.71272L14.0824 1.00562L12.3947 2.69325L10.7071 1.00562L10 1.71272L11.6876 3.40036Z"}}]})(props);\n};\nfunction VscGitPullRequestCreate (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.616 4.928a2.487 2.487 0 0 1-1.119.922c-.148.06-.458.138-.458.138v5.008a2.51 2.51 0 0 1 1.579 1.062c.273.412.419.895.419 1.388.008.343-.057.684-.19 1A2.485 2.485 0 0 1 3.5 15.984a2.482 2.482 0 0 1-1.388-.419A2.487 2.487 0 0 1 1.05 13c.095-.486.331-.932.68-1.283.349-.343.79-.579 1.269-.68V5.949a2.6 2.6 0 0 1-1.269-.68 2.503 2.503 0 0 1-.68-1.283 2.487 2.487 0 0 1 1.06-2.565A2.49 2.49 0 0 1 3.5 1a2.504 2.504 0 0 1 1.807.729 2.493 2.493 0 0 1 .729 1.81c.002.494-.144.978-.42 1.389zm-.756 7.861a1.5 1.5 0 0 0-.552-.579 1.45 1.45 0 0 0-.77-.21 1.495 1.495 0 0 0-1.47 1.79 1.493 1.493 0 0 0 1.18 1.179c.288.058.586.03.86-.08.276-.117.512-.312.68-.56.15-.226.235-.49.249-.76a1.51 1.51 0 0 0-.177-.78zM2.708 4.741c.247.161.536.25.83.25.271 0 .538-.075.77-.211a1.514 1.514 0 0 0 .729-1.359 1.513 1.513 0 0 0-.25-.76 1.551 1.551 0 0 0-.68-.56 1.49 1.49 0 0 0-.86-.08 1.494 1.494 0 0 0-1.179 1.18c-.058.288-.03.586.08.86.117.276.312.512.56.68zM13.037 7h-1.002V5.49a1.5 1.5 0 0 0-1.5-1.5H8.687l1.269 1.27-.71.709L7.117 3.84v-.7l2.13-2.13.71.711-1.269 1.27h1.85a2.484 2.484 0 0 1 2.312 1.541c.125.302.189.628.187.957V7zM13 16h-1v-3H9v-1h3V9h1v3h3v1h-3v3z"}}]})(props);\n};\nfunction VscGitPullRequestDraft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4.49705 5.8497C4.95319 5.66062 5.34304 5.33899 5.61594 4.92769C5.89079 4.51639 6.03699 4.03296 6.03504 3.5398C6.04284 3.19672 5.97851 2.8556 5.84596 2.53981C5.7212 2.23767 5.53797 1.96087 5.30601 1.72891C5.07404 1.49695 4.79919 1.31371 4.49705 1.18896C4.18127 1.05836 3.84014 0.99403 3.49902 0.999877C3.0039 0.999877 2.52048 1.14607 2.11113 1.42092C1.69983 1.69382 1.3782 2.08368 1.18912 2.53981C1.00004 2.99789 0.951304 3.50081 1.04877 3.98618C1.14428 4.47155 1.38015 4.91794 1.72907 5.26881C2.07994 5.61189 2.52048 5.8458 2.99805 5.94911V11.0367C2.51853 11.1381 2.07799 11.374 1.72907 11.717C1.38015 12.0679 1.14428 12.5143 1.04877 12.9997C0.953253 13.485 1.00198 13.988 1.18912 14.446C1.3782 14.9022 1.69983 15.292 2.11113 15.5649C2.52243 15.8398 3.00585 15.986 3.49902 15.984C3.84209 15.9918 4.18322 15.9275 4.499 15.7949C4.80114 15.6702 5.07794 15.487 5.30796 15.255C5.53992 15.023 5.72315 14.7482 5.84791 14.446C5.98046 14.1303 6.04478 13.7891 6.03699 13.4461C6.03699 12.9529 5.89079 12.4695 5.61789 12.0582C5.34304 11.6469 4.95513 11.3272 4.499 11.1362C4.35086 11.0738 4.19686 11.027 4.03897 10.9958V5.9881C4.03897 5.9881 4.34891 5.91013 4.49705 5.8497ZM4.30797 12.2102C4.53994 12.3486 4.73097 12.5494 4.85962 12.7892C4.98827 13.0289 5.0487 13.2979 5.037 13.5689C5.02336 13.8398 4.93759 14.103 4.7875 14.3291C4.61986 14.5766 4.38399 14.7716 4.1072 14.8885C3.8343 14.9996 3.53606 15.0269 3.24756 14.9685C2.95517 14.9119 2.68812 14.7696 2.47759 14.5591C2.26707 14.3486 2.12477 14.0796 2.06824 13.7891C2.00977 13.5006 2.03706 13.2024 2.14816 12.9295C2.26512 12.6527 2.46005 12.4168 2.70761 12.2492C2.95322 12.0855 3.24171 11.9997 3.538 11.9997C3.80896 11.9958 4.07601 12.0699 4.30797 12.2102ZM3.538 4.99006C3.24366 4.99006 2.95517 4.90235 2.70761 4.74056C2.46005 4.57292 2.26512 4.33705 2.14816 4.06025C2.03706 3.78735 2.00977 3.48911 2.06824 3.20062C2.12477 2.90823 2.26707 2.64118 2.47759 2.43065C2.68812 2.22013 2.95712 2.07783 3.24756 2.0213C3.53606 1.96282 3.8343 1.99011 4.1072 2.10122C4.38399 2.21818 4.61986 2.41311 4.7875 2.66067C4.93759 2.88679 5.02336 3.14994 5.037 3.42089C5.05065 3.69184 4.98827 3.96084 4.85962 4.2006C4.73097 4.44037 4.53994 4.63919 4.30797 4.77954C4.07601 4.91599 3.80896 4.99006 3.538 4.99006Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15.0543 13.5C15.0543 14.8807 13.935 16 12.5543 16C11.1736 16 10.0543 14.8807 10.0543 13.5C10.0543 12.1193 11.1736 11 12.5543 11C13.935 11 15.0543 12.1193 15.0543 13.5ZM12.5543 15C13.3827 15 14.0543 14.3284 14.0543 13.5C14.0543 12.6716 13.3827 12 12.5543 12C11.7258 12 11.0543 12.6716 11.0543 13.5C11.0543 14.3284 11.7258 15 12.5543 15Z"}},{"tag":"circle","attr":{"cx":"12.5543","cy":"7.75073","r":"1"}},{"tag":"circle","attr":{"cx":"12.5543","cy":"3.50146","r":"1"}}]})(props);\n};\nfunction VscGitPullRequest (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.616 4.928a2.487 2.487 0 0 1-1.119.922c-.148.06-.458.138-.458.138v5.008a2.51 2.51 0 0 1 1.579 1.062c.273.412.419.895.419 1.388.008.343-.057.684-.19 1A2.485 2.485 0 0 1 3.5 15.984a2.482 2.482 0 0 1-1.388-.419A2.487 2.487 0 0 1 1.05 13c.095-.486.331-.932.68-1.283.349-.343.79-.579 1.269-.68V5.949a2.6 2.6 0 0 1-1.269-.68 2.503 2.503 0 0 1-.68-1.283 2.487 2.487 0 0 1 1.06-2.565A2.49 2.49 0 0 1 3.5 1a2.504 2.504 0 0 1 1.807.729 2.493 2.493 0 0 1 .729 1.81c.002.494-.144.978-.42 1.389zm-.756 7.861a1.5 1.5 0 0 0-.552-.579 1.45 1.45 0 0 0-.77-.21 1.495 1.495 0 0 0-1.47 1.79 1.493 1.493 0 0 0 1.18 1.179c.288.058.586.03.86-.08.276-.117.512-.312.68-.56.15-.226.235-.49.249-.76a1.51 1.51 0 0 0-.177-.78zM2.708 4.741c.247.161.536.25.83.25.271 0 .538-.075.77-.211a1.514 1.514 0 0 0 .729-1.359 1.513 1.513 0 0 0-.25-.76 1.551 1.551 0 0 0-.68-.56 1.49 1.49 0 0 0-.86-.08 1.494 1.494 0 0 0-1.179 1.18c-.058.288-.03.586.08.86.117.276.312.512.56.68zm10.329 6.296c.48.097.922.335 1.269.68.466.47.729 1.107.725 1.766.002.493-.144.977-.42 1.388a2.499 2.499 0 0 1-4.532-.899 2.5 2.5 0 0 1 1.067-2.565c.267-.183.571-.308.889-.37V5.489a1.5 1.5 0 0 0-1.5-1.499H8.687l1.269 1.27-.71.709L7.117 3.84v-.7l2.13-2.13.71.711-1.269 1.27h1.85a2.484 2.484 0 0 1 2.312 1.541c.125.302.189.628.187.957v5.548zm.557 3.509a1.493 1.493 0 0 0 .191-1.89 1.552 1.552 0 0 0-.68-.559 1.49 1.49 0 0 0-.86-.08 1.493 1.493 0 0 0-1.179 1.18 1.49 1.49 0 0 0 .08.86 1.496 1.496 0 0 0 2.448.49z"}}]})(props);\n};\nfunction VscGithubAction (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.04 10h2.58l.65 1H2.54l-.5-.5v-9l.5-.5h12l.5.5v4.77l-1-1.75V2h-11v8zm5.54 1l-1.41 3.47h2.2L15 8.7 14.27 7h-1.63l.82-1.46L12.63 4H9.76l-.92.59-2.28 5L7.47 11h1.11zm1.18-6h2.87l-1.87 3h3.51l-5.76 5.84L10.2 10H7.47l2.29-5zM6.95 7H4.04V6H7.4l-.45 1zm-.9 2H4.04V8H6.5l-.45 1z"}}]})(props);\n};\nfunction VscGithubAlt (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M21.035 5.257c.91 1.092 1.364 2.366 1.364 3.822 0 5.277-3.002 6.824-5.823 7.279.364.637.455 1.365.455 2.093v3.73c0 .455-.273.728-.637.728a.718.718 0 0 1-.728-.728v-3.73a2.497 2.497 0 0 0-.728-2.093l.455-1.183c2.821-.364 5.733-1.274 5.733-6.187 0-1.183-.455-2.275-1.274-3.185l-.182-.727a4.04 4.04 0 0 0 .09-2.73c-.454.09-1.364.273-2.91 1.365l-.547.09a13.307 13.307 0 0 0-6.55 0l-.547-.09C7.57 2.71 6.66 2.437 6.204 2.437c-.273.91-.273 1.91.09 2.73l-.181.727c-.91.91-1.365 2.093-1.365 3.185 0 4.822 2.73 5.823 5.732 6.187l.364 1.183c-.546.546-.819 1.274-.728 2.002v3.821a.718.718 0 0 1-.728.728.718.718 0 0 1-.728-.728V20.18c-3.002.637-4.185-.91-5.095-2.092-.455-.546-.819-1.001-1.274-1.092-.09-.091-.364-.455-.273-.819.091-.364.455-.637.82-.455.91.182 1.455.91 2 1.547.82 1.092 1.639 2.092 4.095 1.547v-.364c-.09-.728.091-1.456.455-2.093-2.73-.546-5.914-2.093-5.914-7.279 0-1.456.455-2.73 1.365-3.822-.273-1.273-.182-2.638.273-3.73l.455-.364C5.749 1.073 7.023.8 9.66 2.437a13.673 13.673 0 0 1 6.642 0C18.851.708 20.216.98 20.398 1.072l.455.364c.455 1.274.546 2.548.182 3.821z"}}]})(props);\n};\nfunction VscGithubInverted (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.976 0A7.977 7.977 0 0 0 0 7.976c0 3.522 2.3 6.507 5.431 7.584.392.049.538-.196.538-.392v-1.37c-2.201.49-2.69-1.076-2.69-1.076-.343-.93-.881-1.175-.881-1.175-.734-.489.048-.489.048-.489.783.049 1.224.832 1.224.832.734 1.223 1.859.88 2.3.685.048-.538.293-.88.489-1.076-1.762-.196-3.621-.881-3.621-3.964 0-.88.293-1.566.832-2.153-.05-.147-.343-.978.098-2.055 0 0 .685-.196 2.201.832.636-.196 1.322-.245 2.007-.245s1.37.098 2.006.245c1.517-1.027 2.202-.832 2.202-.832.44 1.077.146 1.908.097 2.104a3.16 3.16 0 0 1 .832 2.153c0 3.083-1.86 3.719-3.62 3.915.293.244.538.733.538 1.467v2.202c0 .196.146.44.538.392A7.984 7.984 0 0 0 16 7.976C15.951 3.572 12.38 0 7.976 0z"}}]})(props);\n};\nfunction VscGithub (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm3.163 21.783h-.093a.513.513 0 0 1-.382-.14.513.513 0 0 1-.14-.372v-1.406c.006-.467.01-.94.01-1.416a3.693 3.693 0 0 0-.151-1.028 1.832 1.832 0 0 0-.542-.875 8.014 8.014 0 0 0 2.038-.471 4.051 4.051 0 0 0 1.466-.964c.407-.427.71-.943.885-1.506a6.77 6.77 0 0 0 .3-2.13 4.138 4.138 0 0 0-.26-1.476 3.892 3.892 0 0 0-.795-1.284 2.81 2.81 0 0 0 .162-.582c.033-.2.05-.402.05-.604 0-.26-.03-.52-.09-.773a5.309 5.309 0 0 0-.221-.763.293.293 0 0 0-.111-.02h-.11c-.23.002-.456.04-.674.111a5.34 5.34 0 0 0-.703.26 6.503 6.503 0 0 0-.661.343c-.215.127-.405.249-.573.362a9.578 9.578 0 0 0-5.143 0 13.507 13.507 0 0 0-.572-.362 6.022 6.022 0 0 0-.672-.342 4.516 4.516 0 0 0-.705-.261 2.203 2.203 0 0 0-.662-.111h-.11a.29.29 0 0 0-.11.02 5.844 5.844 0 0 0-.23.763c-.054.254-.08.513-.081.773 0 .202.017.404.051.604.033.199.086.394.16.582A3.888 3.888 0 0 0 5.702 10a4.142 4.142 0 0 0-.263 1.476 6.871 6.871 0 0 0 .292 2.12c.181.563.483 1.08.884 1.516.415.422.915.75 1.466.964.653.25 1.337.41 2.033.476a1.828 1.828 0 0 0-.452.633 2.99 2.99 0 0 0-.2.744 2.754 2.754 0 0 1-1.175.27 1.788 1.788 0 0 1-1.065-.3 2.904 2.904 0 0 1-.752-.824 3.1 3.1 0 0 0-.292-.382 2.693 2.693 0 0 0-.372-.343 1.841 1.841 0 0 0-.432-.24 1.2 1.2 0 0 0-.481-.101c-.04.001-.08.005-.12.01a.649.649 0 0 0-.162.02.408.408 0 0 0-.13.06.116.116 0 0 0-.06.1.33.33 0 0 0 .14.242c.093.074.17.131.232.171l.03.021c.133.103.261.214.382.333.112.098.213.209.3.33.09.119.168.246.231.381.073.134.15.288.231.463.188.474.522.875.954 1.145.453.243.961.364 1.476.351.174 0 .349-.01.522-.03.172-.028.343-.057.515-.091v1.743a.5.5 0 0 1-.533.521h-.062a10.286 10.286 0 1 1 6.324 0v.005z"}}]})(props);\n};\nfunction VscGlobe (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.5 1a6.5 6.5 0 1 1 0 13 6.5 6.5 0 0 1 0-13zm4.894 4a5.527 5.527 0 0 0-3.053-2.676c.444.84.765 1.74.953 2.676h2.1zm.582 2.995A5.11 5.11 0 0 0 14 7.5a5.464 5.464 0 0 0-.213-1.5h-2.342c.032.331.055.664.055 1a10.114 10.114 0 0 1-.206 2h2.493c.095-.329.158-.665.19-1.005zm-3.535 0l.006-.051A9.04 9.04 0 0 0 10.5 7a8.994 8.994 0 0 0-.076-1H6.576A8.82 8.82 0 0 0 6.5 7a8.98 8.98 0 0 0 .233 2h3.534c.077-.332.135-.667.174-1.005zM10.249 5a8.974 8.974 0 0 0-1.255-2.97C8.83 2.016 8.666 2 8.5 2a3.62 3.62 0 0 0-.312.015l-.182.015L8 2.04A8.97 8.97 0 0 0 6.751 5h3.498zM5.706 5a9.959 9.959 0 0 1 .966-2.681A5.527 5.527 0 0 0 3.606 5h2.1zM3.213 6A5.48 5.48 0 0 0 3 7.5 5.48 5.48 0 0 0 3.213 9h2.493A10.016 10.016 0 0 1 5.5 7c0-.336.023-.669.055-1H3.213zm2.754 4h-2.36a5.515 5.515 0 0 0 3.819 2.893A10.023 10.023 0 0 1 5.967 10zM8.5 12.644A8.942 8.942 0 0 0 9.978 10H7.022A8.943 8.943 0 0 0 8.5 12.644zM11.033 10a10.024 10.024 0 0 1-1.459 2.893A5.517 5.517 0 0 0 13.393 10h-2.36z"}}]})(props);\n};\nfunction VscGoToFile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 5.914l2.06-2.06v-.708L5.915 1l-.707.707.043.043.25.25 1 1h-3a2.5 2.5 0 0 0 0 5H4V7h-.5a1.5 1.5 0 1 1 0-3h3L5.207 5.293 5.914 6 6 5.914zM11 2H8.328l-1-1H12l.71.29 3 3L16 5v9l-1 1H6l-1-1V6.5l1 .847V14h9V6h-4V2zm1 0v3h3l-3-3z"}}]})(props);\n};\nfunction VscGrabber (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M15 6H1v1h14V6zm0 3H1v1h14V9z"}}]})(props);\n};\nfunction VscGraphLeft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.119 4L3 4.881l-.619.619L.715 3.833v-.618L2.38 1.548l.62.619L2.167 3H15v1H2.119zM4 14.546V5.455L4.5 5h2l.5.455v9.09L6.5 15h-2l-.5-.454zm2-.455V5.909H5v8.182h1zm2-1.535V5.444L8.5 5h2l.5.444v7.112l-.5.444h-2l-.5-.444zm2-.445V5.89H9v6.222h1zm2-6.682v5.143l.5.428h2l.5-.428V5.429L14.5 5h-2l-.5.429zm2 .428v4.286h-1V5.857h1z"}}]})(props);\n};\nfunction VscGraphLine (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 13V14H1.5L1 13.5V0H2V13H15Z"}},{"tag":"path","attr":{"d":"M13 3.20714L7.85353 8.35359H7.14642L5.49998 6.70714L1.85353 10.3536L1.14642 9.64648L5.14642 5.64648H5.85353L7.49998 7.29293L12.6464 2.14648H13.3535L15.3535 4.14648L14.6464 4.85359L13 3.20714Z"}}]})(props);\n};\nfunction VscGraphScatter (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 13V14H1.5L1 13.5V0H2V13H15Z"}},{"tag":"rect","attr":{"x":"5","y":"2","width":"2","height":"2"}},{"tag":"rect","attr":{"x":"12","y":"1","width":"2","height":"2"}},{"tag":"rect","attr":{"x":"8","y":"5","width":"2","height":"2"}},{"tag":"rect","attr":{"x":"5","y":"9","width":"2","height":"2"}},{"tag":"rect","attr":{"x":"12","y":"8","width":"2","height":"2"}}]})(props);\n};\nfunction VscGraph (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 14H15v-1H2V0H1v13.5l.5.5zM3 11.5v-8l.5-.5h2l.5.5v8l-.5.5h-2l-.5-.5zm2-.5V4H4v7h1zm6-9.5v10l.5.5h2l.5-.5v-10l-.5-.5h-2l-.5.5zm2 .5v9h-1V2h1zm-6 9.5v-6l.5-.5h2l.5.5v6l-.5.5h-2l-.5-.5zm2-.5V6H8v5h1z"}}]})(props);\n};\nfunction VscGripper (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z"}}]})(props);\n};\nfunction VscGroupByRefType (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h2v1H2v12h1.5v1h-2l-.5-.5v-13l.5-.5zm6 6h-2L5 6.5v-2l.5-.5h2l.5.5v2l-.5.5zM6 6h1V5H6v1zm7.5 1h-3l-.5-.5v-3l.5-.5h3l.5.5v3l-.5.5zM11 6h2V4h-2v2zm-3.5 6h-2l-.5-.5v-2l.5-.5h2l.5.5v2l-.5.5zM6 11h1v-1H6v1zm7.5 2h-3l-.5-.5v-3l.5-.5h3l.5.5v3l-.5.5zM11 12h2v-2h-2v2zm-1-2H8v1h2v-1zm0-5H8v1h2V5z"}}]})(props);\n};\nfunction VscHeart (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.88 4.78a3.489 3.489 0 0 0-.37-.9 3.24 3.24 0 0 0-.6-.79 3.78 3.78 0 0 0-1.21-.81 3.74 3.74 0 0 0-2.84 0 4 4 0 0 0-1.16.75l-.05.06-.65.65-.65-.65-.05-.06a4 4 0 0 0-1.16-.75 3.74 3.74 0 0 0-2.84 0 3.78 3.78 0 0 0-1.21.81 3.55 3.55 0 0 0-.97 1.69 3.75 3.75 0 0 0-.12 1c0 .317.04.633.12.94a4 4 0 0 0 .36.89 3.8 3.8 0 0 0 .61.79L8 14.31l5.91-5.91c.237-.233.44-.5.6-.79A3.578 3.578 0 0 0 15 5.78a3.747 3.747 0 0 0-.12-1zm-1 1.63a2.69 2.69 0 0 1-.69 1.21l-5.21 5.2-5.21-5.2a2.9 2.9 0 0 1-.44-.57 3 3 0 0 1-.27-.65 3.25 3.25 0 0 1-.08-.69A3.36 3.36 0 0 1 2.06 5a2.8 2.8 0 0 1 .27-.65c.12-.21.268-.4.44-.57a2.91 2.91 0 0 1 .89-.6 2.8 2.8 0 0 1 2.08 0c.33.137.628.338.88.59l1.36 1.37 1.36-1.37a2.72 2.72 0 0 1 .88-.59 2.8 2.8 0 0 1 2.08 0c.331.143.633.347.89.6.174.165.32.357.43.57a2.69 2.69 0 0 1 .35 1.34 2.6 2.6 0 0 1-.06.72h-.03z"}}]})(props);\n};\nfunction VscHistory (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.507 12.324a7 7 0 0 0 .065-8.56A7 7 0 0 0 2 4.393V2H1v3.5l.5.5H5V5H2.811a6.008 6.008 0 1 1-.135 5.77l-.887.462a7 7 0 0 0 11.718 1.092zm-3.361-.97l.708-.707L8 7.792V4H7v4l.146.354 3 3z"}}]})(props);\n};\nfunction VscHome (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.36 1.37l6.36 5.8-.71.71L13 6.964v6.526l-.5.5h-3l-.5-.5v-3.5H7v3.5l-.5.5h-3l-.5-.5V6.972L2 7.88l-.71-.71 6.35-5.8h.72zM4 6.063v6.927h2v-3.5l.5-.5h3l.5.5v3.5h2V6.057L8 2.43 4 6.063z"}}]})(props);\n};\nfunction VscHorizontalRule (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6.432 10h.823V4h-.823v2.61h-2.61V4H3v6h.823V7.394h2.61V10zm5.668 0h.9l-1.28-2.63c.131-.058.26-.134.389-.23a1.666 1.666 0 0 0 .585-.797c.064-.171.096-.364.096-.58a1.77 1.77 0 0 0-.082-.557 1.644 1.644 0 0 0-.22-.446 1.504 1.504 0 0 0-.31-.341 1.864 1.864 0 0 0-.737-.373A1.446 1.446 0 0 0 11.1 4H8.64v6h.824V7.518h1.467L12.1 10zm-.681-3.32a.874.874 0 0 1-.293.055H9.463V4.787h1.663a.87.87 0 0 1 .576.24.956.956 0 0 1 .306.737c0 .168-.029.314-.087.437a.91.91 0 0 1-.503.479zM13 12H3v1h10v-1z"}}]})(props);\n};\nfunction VscHubot (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.48 4h4l.5.5v2.03h.52l.5.5V8l-.5.5h-.52v3l-.5.5H9.36l-2.5 2.76L6 14.4V12H3.5l-.5-.64V8.5h-.5L2 8v-.97l.5-.5H3V4.36L3.53 4h4V2.86A1 1 0 0 1 7 2a1 1 0 0 1 2 0 1 1 0 0 1-.52.83V4zM12 8V5H4v5.86l2.5.14H7v2.19l1.8-2.04.35-.15H12V8zm-2.12.51a2.71 2.71 0 0 1-1.37.74v-.01a2.71 2.71 0 0 1-2.42-.74l-.7.71c.34.34.745.608 1.19.79.45.188.932.286 1.42.29a3.7 3.7 0 0 0 2.58-1.07l-.7-.71zM6.49 6.5h-1v1h1v-1zm3 0h1v1h-1v-1z"}}]})(props);\n};\nfunction VscInbox (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 14h13l.5-.5V9l-2.77-7.66-.47-.34H4.27l-.47.33L1 8.74v4.76l.5.5zM14 13H2v-2.98h2.55l.74 1.25.43.24h4.57l.44-.26.69-1.23H14V13zm-.022-3.98H11.12l-.43.26-.69 1.23H6.01l-.75-1.25-.43-.24H2V9l2.62-7h6.78l2.578 7.02z"}}]})(props);\n};\nfunction VscInfo (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.568 1.031A6.8 6.8 0 0 1 12.76 3.05a7.06 7.06 0 0 1 .46 9.39 6.85 6.85 0 0 1-8.58 1.74 7 7 0 0 1-3.12-3.5 7.12 7.12 0 0 1-.23-4.71 7 7 0 0 1 2.77-3.79 6.8 6.8 0 0 1 4.508-1.149zM9.04 13.88a5.89 5.89 0 0 0 3.41-2.07 6.07 6.07 0 0 0-.4-8.06 5.82 5.82 0 0 0-7.43-.74 6.06 6.06 0 0 0 .5 10.29 5.81 5.81 0 0 0 3.92.58zM7.375 6h1.25V5h-1.25v1zm1.25 1v4h-1.25V7h1.25z"}}]})(props);\n};\nfunction VscInspect (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z"}}]})(props);\n};\nfunction VscIssueDraft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"circle","attr":{"cx":"7.50002","cy":"7.5","r":"1"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.6835 9.50931L12.7324 9.20047C12.9058 8.66624 13 8.0951 13 7.5C13 6.9049 12.9058 6.33376 12.7324 5.79953L13.6835 5.49069C13.889 6.12344 14 6.79875 14 7.5C14 8.20125 13.889 8.87656 13.6835 9.50931ZM13.2928 4.54842L12.4021 5.00313C11.8748 3.9702 11.0298 3.12523 9.99687 2.59787L10.4516 1.70723C11.6721 2.33037 12.6696 3.3279 13.2928 4.54842ZM9.50931 1.31652L9.20047 2.26763C8.66624 2.09415 8.0951 2 7.5 2C6.9049 2 6.33376 2.09415 5.79953 2.26763L5.49069 1.31652C6.12344 1.11105 6.79875 1 7.5 1C8.20125 1 8.87656 1.11105 9.50931 1.31652ZM4.54842 1.70723L5.00313 2.59787C3.9702 3.12523 3.12523 3.9702 2.59787 5.00313L1.70723 4.54842C2.33037 3.3279 3.3279 2.33037 4.54842 1.70723ZM1.31652 5.49069C1.11105 6.12344 1 6.79875 1 7.5C1 8.20125 1.11105 8.87656 1.31652 9.50931L2.26763 9.20047C2.09415 8.66624 2 8.0951 2 7.5C2 6.9049 2.09415 6.33376 2.26763 5.79953L1.31652 5.49069ZM1.70723 10.4516L2.59787 9.99687C3.12523 11.0298 3.9702 11.8748 5.00313 12.4021L4.54842 13.2928C3.3279 12.6696 2.33037 11.6721 1.70723 10.4516ZM5.49069 13.6835L5.79953 12.7324C6.33376 12.9058 6.9049 13 7.5 13C8.0951 13 8.66624 12.9058 9.20047 12.7324L9.50931 13.6835C8.87656 13.889 8.20125 14 7.5 14C6.79875 14 6.12344 13.889 5.49069 13.6835ZM10.4516 13.2928L9.99687 12.4021C11.0298 11.8748 11.8748 11.0298 12.4021 9.99687L13.2928 10.4516C12.6696 11.6721 11.6721 12.6696 10.4516 13.2928Z"}}]})(props);\n};\nfunction VscIssueReopened (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.28 5.65556L2 7.00556L1.34 6.74556L0 3.50556L0.92 3.12556L1.73 5.07556C2.27376 3.71475 3.2627 2.57844 4.53544 1.85207C5.80817 1.1257 7.28953 0.852174 8.73774 1.07614C10.1859 1.3001 11.5155 2.00832 12.5093 3.08521C13.5032 4.1621 14.1027 5.54407 14.21 7.00556H13.21C13.0956 5.75683 12.5564 4.58511 11.6824 3.68594C10.8083 2.78677 9.65237 2.21456 8.40739 2.06478C7.1624 1.91501 5.90371 2.19674 4.84137 2.86297C3.77903 3.52919 2.97731 4.53959 2.57 5.72556L4.89 4.72556L5.28 5.65556ZM14.14 8.33562L15.48 11.5656L14.56 12.0056L13.74 10.0056C13.1919 11.3718 12.1958 12.511 10.9149 13.2364C9.63412 13.9618 8.14476 14.2302 6.69127 13.9977C5.23779 13.7651 3.90654 13.0454 2.91599 11.9566C1.92544 10.8678 1.33445 9.47455 1.24001 8.00562H2.24001V7.50562C2.24281 8.79308 2.69801 10.0386 3.52602 11.0245C4.35404 12.0104 5.5022 12.6739 6.76983 12.899C8.03745 13.1242 9.34388 12.8967 10.4608 12.2563C11.5777 11.6159 12.434 10.6033 12.88 9.39562L10.63 10.3256L10.24 9.40561L13.49 8.05562L14.14 8.33562Z"}},{"tag":"circle","attr":{"cx":"7.74001","cy":"7.53955","r":"1"}}]})(props);\n};\nfunction VscIssues (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M7.50002 1C6.21445 1 4.95774 1.38123 3.88882 2.09546C2.8199 2.80969 1.98674 3.82485 1.49478 5.01257C1.00281 6.20029 0.874098 7.50719 1.1249 8.76807C1.37571 10.0289 1.99479 11.1872 2.90383 12.0962C3.81287 13.0052 4.97108 13.6243 6.23196 13.8751C7.49283 14.1259 8.79973 13.9972 9.98745 13.5052C11.1752 13.0133 12.1903 12.1801 12.9046 11.1112C13.6188 10.0423 14 8.78558 14 7.5C14 5.77609 13.3152 4.1228 12.0962 2.90381C10.8772 1.68482 9.22393 1 7.50002 1ZM7.50002 13C6.41223 13 5.34883 12.6775 4.44436 12.0731C3.53989 11.4688 2.83501 10.6097 2.41873 9.60474C2.00244 8.59974 1.89352 7.4939 2.10574 6.427C2.31796 5.36011 2.8418 4.38015 3.61099 3.61096C4.38018 2.84177 5.36013 2.31793 6.42703 2.10571C7.49392 1.89349 8.59977 2.00242 9.60476 2.4187C10.6098 2.83498 11.4688 3.53987 12.0731 4.44434C12.6775 5.34881 13 6.4122 13 7.5C13 8.95869 12.4205 10.3576 11.3891 11.389C10.3576 12.4205 8.95871 13 7.50002 13Z"}},{"tag":"circle","attr":{"cx":"7.50002","cy":"7.5","r":"1"}}]})(props);\n};\nfunction VscItalic (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M9.001 13.593l-.097.325H4l.123-.325c.492-.012.817-.053.976-.123.257-.1.448-.238.57-.413.194-.276.394-.768.599-1.477l2.074-7.19c.176-.597.263-1.048.263-1.353a.643.643 0 0 0-.114-.387.683.683 0 0 0-.351-.237c-.153-.059-.454-.088-.906-.088L7.34 2h4.605l-.096.325c-.375-.006-.654.035-.835.123a1.358 1.358 0 0 0-.607.501c-.134.217-.31.697-.527 1.442l-2.066 7.19c-.187.661-.28 1.083-.28 1.265 0 .146.034.272.105.378.076.1.193.178.351.237.164.053.501.097 1.011.132z"}}]})(props);\n};\nfunction VscJersey (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M11.91 14.22H4.06l-.5-.5V7.06H2.15l-.48-.38L1 4l.33-.6L5.59 2l.64.32a2.7 2.7 0 0 0 .21.44c.071.103.152.2.24.29.168.169.369.302.59.39a1.82 1.82 0 0 0 1.43 0 1.74 1.74 0 0 0 .59-.39c.09-.095.173-.195.25-.3l.15-.29a1.21 1.21 0 0 0 .05-.14l.64-.32 4.26 1.42L15 4l-.66 2.66-.49.38h-1.44v6.66l-.5.52zm-7.35-1h6.85V6.56l.5-.5h1.52l.46-1.83-3.4-1.14a1.132 1.132 0 0 1-.12.21c-.11.161-.233.312-.37.45a2.75 2.75 0 0 1-.91.61 2.85 2.85 0 0 1-2.22 0A2.92 2.92 0 0 1 6 3.75a2.17 2.17 0 0 1-.36-.44l-.13-.22-3.43 1.14.46 1.83h1.52l.5.5v6.66z"}}]})(props);\n};\nfunction VscJson (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 2.984V2h-.09c-.313 0-.616.062-.909.185a2.33 2.33 0 0 0-.775.53 2.23 2.23 0 0 0-.493.753v.001a3.542 3.542 0 0 0-.198.83v.002a6.08 6.08 0 0 0-.024.863c.012.29.018.58.018.869 0 .203-.04.393-.117.572v.001a1.504 1.504 0 0 1-.765.787 1.376 1.376 0 0 1-.558.115H2v.984h.09c.195 0 .38.04.556.121l.001.001c.178.078.329.184.455.318l.002.002c.13.13.233.285.307.465l.001.002c.078.18.117.368.117.566 0 .29-.006.58-.018.869-.012.296-.004.585.024.87v.001c.033.283.099.558.197.824v.001c.106.273.271.524.494.753.223.23.482.407.775.53.293.123.596.185.91.185H6v-.984h-.09c-.2 0-.387-.038-.563-.115a1.613 1.613 0 0 1-.457-.32 1.659 1.659 0 0 1-.309-.467c-.074-.18-.11-.37-.11-.573 0-.228.003-.453.011-.672.008-.228.008-.45 0-.665a4.639 4.639 0 0 0-.055-.64 2.682 2.682 0 0 0-.168-.609A2.284 2.284 0 0 0 3.522 8a2.284 2.284 0 0 0 .738-.955c.08-.192.135-.393.168-.602.033-.21.051-.423.055-.64.008-.22.008-.442 0-.666-.008-.224-.012-.45-.012-.678a1.47 1.47 0 0 1 .877-1.354 1.33 1.33 0 0 1 .563-.121H6zm4 10.032V14h.09c.313 0 .616-.062.909-.185.293-.123.552-.3.775-.53.223-.23.388-.48.493-.753v-.001c.1-.266.165-.543.198-.83v-.002c.028-.28.036-.567.024-.863-.012-.29-.018-.58-.018-.869 0-.203.04-.393.117-.572v-.001a1.502 1.502 0 0 1 .765-.787 1.38 1.38 0 0 1 .558-.115H14v-.984h-.09c-.196 0-.381-.04-.557-.121l-.001-.001a1.376 1.376 0 0 1-.455-.318l-.002-.002a1.415 1.415 0 0 1-.307-.465v-.002a1.405 1.405 0 0 1-.118-.566c0-.29.006-.58.018-.869a6.174 6.174 0 0 0-.024-.87v-.001a3.537 3.537 0 0 0-.197-.824v-.001a2.23 2.23 0 0 0-.494-.753 2.331 2.331 0 0 0-.775-.53 2.325 2.325 0 0 0-.91-.185H10v.984h.09c.2 0 .387.038.562.115.174.082.326.188.457.32.127.134.23.29.309.467.074.18.11.37.11.573 0 .228-.003.452-.011.672-.008.228-.008.45 0 .665.004.222.022.435.055.64.033.214.089.416.168.609a2.285 2.285 0 0 0 .738.955 2.285 2.285 0 0 0-.738.955 2.689 2.689 0 0 0-.168.602c-.033.21-.051.423-.055.64a9.15 9.15 0 0 0 0 .666c.008.224.012.45.012.678a1.471 1.471 0 0 1-.877 1.354 1.33 1.33 0 0 1-.563.121H10z"}}]})(props);\n};\nfunction VscKebabVertical (props) {\n  return GenIcon({"tag":"svg","attr":{"fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.444 13.832a1 1 0 1 0 1.111-1.663 1 1 0 0 0-1.11 1.662zM8 9a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0-5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"}}]})(props);\n};\nfunction VscKey (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.351 1.091a4.528 4.528 0 0 1 3.44 3.16c.215.724.247 1.49.093 2.23a4.583 4.583 0 0 1-4.437 3.6c-.438 0-.874-.063-1.293-.19l-.8.938-.379.175H7v1.5l-.5.5H5v1.5l-.5.5h-3l-.5-.5v-2.307l.146-.353L6.12 6.87a4.464 4.464 0 0 1-.2-1.405 4.528 4.528 0 0 1 5.431-4.375zm1.318 7.2a3.568 3.568 0 0 0 1.239-2.005l.004.005A3.543 3.543 0 0 0 9.72 2.08a3.576 3.576 0 0 0-2.8 3.4c-.01.456.07.908.239 1.33l-.11.543L2 12.404v1.6h2v-1.5l.5-.5H6v-1.5l.5-.5h1.245l.876-1.016.561-.14a3.47 3.47 0 0 0 1.269.238 3.568 3.568 0 0 0 2.218-.795zm-.838-2.732a1 1 0 1 0-1.662-1.11 1 1 0 0 0 1.662 1.11z"}}]})(props);\n};\nfunction VscLaw (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.63 7L13 3h1V2H9V1H8v1H3v1h1L2.38 7H2v1h.15c.156.498.473.93.9 1.23a2.47 2.47 0 0 0 2.9 0A2.44 2.44 0 0 0 6.86 8H7V7h-.45L4.88 3H8v8H6l-.39.18-2 2.51.39.81h9l.39-.81-2-2.51L11 11H9V3h3.13l-1.67 4H10v1h.15a2.48 2.48 0 0 0 4.71 0H15V7h-.37zM5.22 8.51a1.52 1.52 0 0 1-.72.19 1.45 1.45 0 0 1-.71-.19A1.47 1.47 0 0 1 3.25 8h2.5a1.52 1.52 0 0 1-.53.51zM5.47 7h-2l1-2.4 1 2.4zm5.29 5L12 13.5H5L6.24 12h4.52zm1.78-7.38l1 2.4h-2l1-2.4zm.68 3.91a1.41 1.41 0 0 1-.72.19 1.35 1.35 0 0 1-.71-.19 1.55 1.55 0 0 1-.54-.53h2.5a1.37 1.37 0 0 1-.53.53z"}}]})(props);\n};\nfunction VscLayersActive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.18535 1.08325L7.62706 1.08717L1.71796 5.12422L1.72152 5.95233L7.63062 9.91528L8.1818 9.91912L14.2727 5.95617L14.2762 5.1203L8.18535 1.08325ZM2.89198 5.53323L7.91335 2.10268L13.0891 5.5332L7.91329 8.90079L2.89198 5.53323ZM7.63059 12.4153L1.79257 8.5H3.58794L7.91326 11.4008L12.3716 8.5H14.2053L13.4056 9.02031C13.2722 9.00688 13.1369 9 13 9C11.224 9 9.71839 10.1574 9.19622 11.7591L8.18177 12.4191L7.63059 12.4153ZM9.00447 13.1908L7.91326 13.9008L3.58794 11H1.79257L7.63059 14.9153L8.18177 14.9191L9.20113 14.2559C9.08965 13.9185 9.02187 13.5612 9.00447 13.1908Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.3333 10.5056C11.8266 10.1759 12.4067 10 13 10C13.7954 10.001 14.5578 10.3174 15.1202 10.8798C15.6826 11.4422 15.999 12.2046 16 13C16 13.5933 15.8241 14.1734 15.4944 14.6667C15.1648 15.1601 14.6962 15.5446 14.1481 15.7716C13.5999 15.9987 12.9967 16.0581 12.4147 15.9424C11.8328 15.8266 11.2982 15.5409 10.8787 15.1213C10.4591 14.7018 10.1734 14.1672 10.0576 13.5853C9.94189 13.0033 10.0013 12.4001 10.2284 11.8519C10.4554 11.3038 10.8399 10.8352 11.3333 10.5056ZM13.0315 14.3226L14.8213 11.9363L14.0213 11.3363L12.541 13.3099L11.6655 12.6095L11.0408 13.3903L12.3192 14.413L13.0315 14.3226Z"}}]})(props);\n};\nfunction VscLayersDot (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.18535 1.08325L7.62706 1.08717L1.71796 5.12422L1.72152 5.95233L7.63062 9.91528L8.1818 9.91912L14.2727 5.95617L14.2762 5.1203L8.18535 1.08325ZM2.89198 5.53323L7.91335 2.10268L13.0891 5.5332L7.91329 8.90079L2.89198 5.53323ZM7.63059 12.4153L1.79257 8.5H3.58794L7.91326 11.4008L12.3716 8.5H14.2053L13.4056 9.02031C13.2722 9.00688 13.1369 9 13 9C11.224 9 9.71839 10.1574 9.19622 11.7591L8.18177 12.4191L7.63059 12.4153ZM9.00447 13.1908L7.91326 13.9008L3.58794 11H1.79257L7.63059 14.9153L8.18177 14.9191L9.20113 14.2559C9.08965 13.9185 9.02187 13.5612 9.00447 13.1908Z"}},{"tag":"circle","attr":{"cx":"13","cy":"13","r":"3"}}]})(props);\n};\nfunction VscLayers (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.62706 1.08717L8.18535 1.08325L14.2762 5.1203L14.2727 5.95617L8.1818 9.91912L7.63062 9.91528L1.72152 5.95233L1.71796 5.12422L7.62706 1.08717ZM7.91335 2.10268L2.89198 5.53323L7.91329 8.90079L13.0891 5.5332L7.91335 2.10268ZM1.79257 8.5L7.63059 12.4153L8.18177 12.4191L14.2053 8.5H12.3716L7.91326 11.4008L3.58794 8.5H1.79257ZM7.63059 14.9153L1.79257 11H3.58794L7.91326 13.9008L12.3716 11H14.2053L8.18177 14.9191L7.63059 14.9153Z"}}]})(props);\n};\nfunction VscLibrary (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 2.5l.5-.5h2l.5.5v11l-.5.5h-2l-.5-.5v-11zM6 3v10h1V3H6zm3.171.345l.299-.641 1.88-.684.64.299 3.762 10.336-.299.641-1.879.684-.64-.299L9.17 3.345zm1.11.128l3.42 9.396.94-.341-3.42-9.397-.94.342zM1 2.5l.5-.5h2l.5.5v11l-.5.5h-2l-.5-.5v-11zM2 3v10h1V3H2z"}}]})(props);\n};\nfunction VscLightbulbAutofix (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6zm1.31 5L12 13l-1.3 1 .5-1.53-1.2-.83h1.47L12 10l.54 1.64H14l-1.2.83.51 1.53z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.17 8.085A3.979 3.979 0 0 0 8.288 10.5H6.409v2.201c0 .081.028.15.09.212a.29.29 0 0 0 .213.09h1.413c.089.348.223.678.396.982-.066.01-.134.015-.203.015H6.712a1.285 1.285 0 0 1-.922-.379 1.303 1.303 0 0 1-.38-.92v-1.6c0-.479-.092-.921-.274-1.329a3.556 3.556 0 0 0-.776-1.114 4.689 4.689 0 0 1-1.006-1.437A4.187 4.187 0 0 1 3 5.5a4.432 4.432 0 0 1 .616-2.27c.197-.336.432-.64.705-.914a4.6 4.6 0 0 1 .911-.702c.338-.196.7-.348 1.084-.454a4.45 4.45 0 0 1 1.2-.16 4.476 4.476 0 0 1 2.276.614 4.475 4.475 0 0 1 1.622 1.616 4.438 4.438 0 0 1 .616 2.27c0 .617-.117 1.191-.353 1.721a4.537 4.537 0 0 1-.506.864z"}}]})(props);\n};\nfunction VscLightbulb (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.67 8.658a3.661 3.661 0 0 0-.781 1.114 3.28 3.28 0 0 0-.268 1.329v1.6a1.304 1.304 0 0 1-.794 1.197 1.282 1.282 0 0 1-.509.102H7.712a1.285 1.285 0 0 1-.922-.379 1.303 1.303 0 0 1-.38-.92v-1.6c0-.479-.092-.921-.274-1.329a3.556 3.556 0 0 0-.776-1.114 4.689 4.689 0 0 1-1.006-1.437A4.187 4.187 0 0 1 4 5.5a4.432 4.432 0 0 1 .616-2.27c.197-.336.432-.64.705-.914a4.6 4.6 0 0 1 .911-.702c.338-.196.7-.348 1.084-.454a4.45 4.45 0 0 1 1.2-.16 4.476 4.476 0 0 1 2.276.614 4.475 4.475 0 0 1 1.622 1.616 4.438 4.438 0 0 1 .616 2.27c0 .617-.117 1.191-.353 1.721a4.69 4.69 0 0 1-1.006 1.437zM9.623 10.5H7.409v2.201c0 .081.028.15.09.212a.29.29 0 0 0 .213.09h1.606a.289.289 0 0 0 .213-.09.286.286 0 0 0 .09-.212V10.5z"}}]})(props);\n};\nfunction VscLinkExternal (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1.5 1H6v1H2v12h12v-4h1v4.5l-.5.5h-13l-.5-.5v-13l.5-.5z"}},{"tag":"path","attr":{"d":"M15 1.5V8h-1V2.707L7.243 9.465l-.707-.708L13.293 2H8V1h6.5l.5.5z"}}]})(props);\n};\nfunction VscLink (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.4 3h3.085a3.4 3.4 0 0 1 3.4 3.4v.205A3.4 3.4 0 0 1 7.485 10H7V9h.485A2.4 2.4 0 0 0 9.88 6.61V6.4A2.4 2.4 0 0 0 7.49 4H4.4A2.4 2.4 0 0 0 2 6.4v.205A2.394 2.394 0 0 0 4 8.96v1a3.4 3.4 0 0 1-3-3.35V6.4A3.405 3.405 0 0 1 4.4 3zM12 7.04v-1a3.4 3.4 0 0 1 3 3.36v.205A3.405 3.405 0 0 1 11.605 13h-3.09A3.4 3.4 0 0 1 5.12 9.61V9.4A3.4 3.4 0 0 1 8.515 6H9v1h-.485A2.4 2.4 0 0 0 6.12 9.4v.205A2.4 2.4 0 0 0 8.515 12h3.09A2.4 2.4 0 0 0 14 9.61V9.4a2.394 2.394 0 0 0-2-2.36z"}}]})(props);\n};\nfunction VscListFilter (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6 12v-1h4v1H6zM4 7h8v1H4V7zm10-4v1H2V3h12z"}}]})(props);\n};\nfunction VscListFlat (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M2 10V9h12v1H2zm0-4h12v1H2V6zm12-3v1H2V3h12zM2 12v1h12v-1H2z"}}]})(props);\n};\nfunction VscListOrdered (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.287 2.326L2.692 2h.677v3h-.708V2.792l-.374.281v-.747zM5 3h10v1H5V3zm0 4h10v1H5V7zm10 4H5v1h10v-1zM3.742 7.626l.029-.039.065-.09a.84.84 0 0 0 .156-.507c0-.12-.02-.24-.057-.354a.848.848 0 0 0-.492-.529 1.123 1.123 0 0 0-.452-.082 1.094 1.094 0 0 0-.458.087.867.867 0 0 0-.479.522A1.038 1.038 0 0 0 2 6.957v.05h.81v-.05a.3.3 0 0 1 .046-.157.174.174 0 0 1 .057-.054.19.19 0 0 1 .172 0 .188.188 0 0 1 .056.06.24.24 0 0 1 .031.081.445.445 0 0 1-.036.29 1.309 1.309 0 0 1-.12.182l-1 1.138-.012.013v.54h1.988v-.7h-.9l.65-.724zm-.037 3.817c.046.032.086.07.12.114a.841.841 0 0 1 .167.55c0 .107-.017.213-.05.314a.792.792 0 0 1-.487.5 1.288 1.288 0 0 1-.48.079c-.115 0-.23-.016-.341-.049a.94.94 0 0 1-.258-.123.751.751 0 0 1-.182-.177 1.063 1.063 0 0 1-.116-.2A1.038 1.038 0 0 1 2 12.078v-.049h.814v.049c0 .027.003.055.009.082a.207.207 0 0 0 .03.074.14.14 0 0 0 .053.052.2.2 0 0 0 .157.008.159.159 0 0 0 .056-.039.22.22 0 0 0 .042-.075.417.417 0 0 0 .017-.126.483.483 0 0 0-.022-.163.2.2 0 0 0-.051-.08.138.138 0 0 0-.06-.029.537.537 0 0 0-.077-.007h-.161v-.645h.168a.241.241 0 0 0 .069-.011.164.164 0 0 0 .065-.034.175.175 0 0 0 .048-.067.286.286 0 0 0 .021-.121.28.28 0 0 0-.016-.1.166.166 0 0 0-.097-.099.2.2 0 0 0-.156.007.164.164 0 0 0-.055.053.344.344 0 0 0-.04.156v.049H2v-.049a.987.987 0 0 1 .18-.544.8.8 0 0 1 .179-.186.87.87 0 0 1 .262-.133c.114-.036.234-.053.354-.051.116-.001.231.01.344.036.092.021.18.055.263.1a.757.757 0 0 1 .32.318.73.73 0 0 1 .09.347.81.81 0 0 1-.167.528.562.562 0 0 1-.12.114z"}}]})(props);\n};\nfunction VscListSelection (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1 12v-1h9v1H1zm0-5h14v1H1V7zm11-4v1H1V3h11z"}}]})(props);\n};\nfunction VscListTree (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 3v1H2V3h12zm-1 3v1H6V6h7zm0 3v1H5V9h8zm0 3v1H5v-1h8z"}},{"tag":"path","attr":{"d":"M5 4h1v9H5z"}}]})(props);\n};\nfunction VscListUnordered (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 3H1v1h1V3zm0 3H1v1h1V6zM1 9h1v1H1V9zm1 3H1v1h1v-1zm2-9h11v1H4V3zm11 3H4v1h11V6zM4 9h11v1H4V9zm11 3H4v1h11v-1z"}}]})(props);\n};\nfunction VscLiveShare (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.735 1.694L15.178 1l8.029 6.328v1.388l-8.029 6.072-1.443-.694v-2.776h-.59c-4.06-.02-6.71.104-10.61 5.163l-1.534-.493a8.23 8.23 0 0 1 .271-2.255 11.026 11.026 0 0 1 3.92-6.793 11.339 11.339 0 0 1 7.502-2.547h1.04v-2.7zm1.804 7.917v2.776l5.676-4.281-5.648-4.545v2.664h-2.86A9.299 9.299 0 0 0 5.77 8.848a10.444 10.444 0 0 0-2.401 4.122c3.351-3.213 6.19-3.359 9.798-3.359h2.373zm-7.647 5.896a4.31 4.31 0 1 1 4.788 7.166 4.31 4.31 0 0 1-4.788-7.166zm.955 5.728a2.588 2.588 0 1 0 2.878-4.302 2.588 2.588 0 0 0-2.878 4.302z"}}]})(props);\n};\nfunction VscLoading (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.917 7A6.002 6.002 0 0 0 2.083 7H1.071a7.002 7.002 0 0 1 13.858 0h-1.012z"}}]})(props);\n};\nfunction VscLocation (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.832 2.688A4.056 4.056 0 0 0 8.02 1.5h-.04a4.056 4.056 0 0 0-4 4c-.013.75.198 1.487.606 2.117L7.734 14h.533l3.147-6.383c.409-.63.62-1.367.606-2.117a4.056 4.056 0 0 0-1.188-2.812zM7.925 2.5l.082.01.074-.01a3.075 3.075 0 0 1 2.941 3.037 2.74 2.74 0 0 1-.467 1.568l-.02.034-.017.035L8 12.279l-2.517-5.1-.017-.039-.02-.034a2.74 2.74 0 0 1-.467-1.568A3.074 3.074 0 0 1 7.924 2.5zm.612 2.169a1 1 0 1 0-1.112 1.663 1 1 0 0 0 1.112-1.663zM6.87 3.837a2 2 0 1 1 2.22 3.326 2 2 0 0 1-2.22-3.326z"}}]})(props);\n};\nfunction VscLock (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13 7h-1V5a4 4 0 1 0-8 0v2H3L2 8v6l1 1h10l1-1V8l-1-1zM5 5a3 3 0 1 1 6 0v2H5V5zm8 9H3V8h10v6z"}}]})(props);\n};\nfunction VscMagnet (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 1.5c-3.9 0-7 3.1-7 7v5l1 1h3l1-1v-5c0-1.1.9-2 2-2s2 .9 2 2v5l1 1h3l1-1v-5c0-3.9-3.1-7-7-7zm-3 12H2v-3h3v3zm9 0h-3v-3h3v3zm-3-4v-1c0-1.7-1.3-3-3-3-1.6 0-2.9 1.3-3 2.8v1.2H2v-1c0-3.3 2.7-6 6-6s6 2.7 6 6v1h-3z"}}]})(props);\n};\nfunction VscMailRead (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.25 1.57h-.51L1 5.56v7.94l.5.5h13l.5-.5V5.56L8.25 1.57zM8 2.58l5.63 3.32-1.37 1.59H3.74L2.43 5.9 8 2.58zM14 13H2V6.92L3.11 8.3l.39.19h9l.39-.19L14 6.92V13z"}}]})(props);\n};\nfunction VscMail (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 3.5l.5-.5h13l.5.5v9l-.5.5h-13l-.5-.5v-9zm1 1.035V12h12V4.536L8.31 8.9H7.7L2 4.535zM13.03 4H2.97L8 7.869 13.03 4z"}}]})(props);\n};\nfunction VscMarkdown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6.345 5h2.1v6.533H6.993l.055-5.31-1.774 5.31H4.072l-1.805-5.31c.04.644.06 5.31.06 5.31H1V5h2.156s1.528 4.493 1.577 4.807L6.345 5zm6.71 3.617v-3.5H11.11v3.5H9.166l2.917 2.916L15 8.617h-1.945z"}}]})(props);\n};\nfunction VscMegaphone (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 6.77l12.33-3.43.67.53v8.6l-.67.53-6.089-1.595a2.16 2.16 0 1 1-4.178-1.095L2 9.77l-.42-.53V7.3L2 6.77zm3.006 3.787a1.13 1.13 0 0 0-.04.242 1.17 1.17 0 0 0 2.288.347l-2.248-.589zM2.58 8.82L14 11.83V4.5L2.58 7.72v1.1z"}}]})(props);\n};\nfunction VscMention (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.465 12.36a5.516 5.516 0 0 1-3.053.736 4.262 4.262 0 0 1-4.57-4.543 5.381 5.381 0 0 1 5.391-5.571c2.377 0 4.413 1.375 4.413 4.006 0 2.182-1.292 3.66-2.9 3.66-.676 0-1.1-.274-1.126-.917a2.012 2.012 0 0 1-1.756.913c-.969 0-1.629-.645-1.629-1.923 0-1.763 1.148-3.4 2.62-3.4a1.314 1.314 0 0 1 1.427.93l.211-.809h.9L9.6 8.646c-.226.916-.13 1.215.342 1.215.984 0 1.833-1.21 1.833-2.825 0-2.068-1.445-3.265-3.61-3.265-2.643 0-4.374 2.132-4.382 4.786a3.443 3.443 0 0 0 3.686 3.717c.973.04 1.94-.179 2.8-.634l.196.72zM6.217 8.639c0 .788.307 1.206.913 1.206.758 0 1.38-.6 1.683-1.831C9.136 6.746 8.85 6.1 7.94 6.1c-1.04 0-1.723 1.339-1.723 2.539z"}}]})(props);\n};\nfunction VscMenu (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M16 5H0V4h16v1zm0 8H0v-1h16v1zm0-4.008H0V8h16v.992z"}}]})(props);\n};\nfunction VscMerge (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.5 4.646L8.354 2.5h-.707L5.5 4.646l.707.707L7.3 4.261V5.28h-.02v.456l.025.001.006.319c.004.187.02.379.05.574.03.195.069.39.117.586.048.195.114.404.2.627.155.379.343.722.565 1.031.221.309.46.598.715.867.255.27.508.535.76.797.25.262.478.541.681.838.203.297.368.621.494.973.125.351.188.755.188 1.213v.884H12.5v-.884a5.991 5.991 0 0 0-.166-1.39 4.638 4.638 0 0 0-.427-1.1 5.875 5.875 0 0 0-.604-.897c-.222-.27-.453-.527-.693-.774-.24-.246-.471-.492-.693-.738a6.39 6.39 0 0 1-.604-.785 3.794 3.794 0 0 1-.433-.914 3.676 3.676 0 0 1-.16-1.13V5.28h-.001v-1l1.074 1.074.707-.708zM7.042 9.741a8.19 8.19 0 0 0 .329-.369 6.06 6.06 0 0 1-.62-1.15L6.744 8.2a7.26 7.26 0 0 1-.095-.263c-.17.256-.359.498-.565.726-.222.246-.453.492-.693.738-.24.247-.47.504-.693.774-.221.27-.423.568-.604.896a4.643 4.643 0 0 0-.427 1.102 5.995 5.995 0 0 0-.166 1.389v.884h1.42v-.884c0-.457.062-.862.188-1.213.125-.352.29-.676.493-.973.203-.297.43-.576.682-.838.251-.262.504-.527.76-.797z"}}]})(props);\n};\nfunction VscMilestone (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 1H7v2H1.5l-.5.5v4l.5.5H7v7h1V8h4.49l.34-.13 2.18-2v-.74l-2.18-2L12.5 3H8V1zm4.29 6H2V4h10.29l1.63 1.5L12.29 7zM5 5h5v1H5V5z"}}]})(props);\n};\nfunction VscMirror (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.57 1l6.2 4 .23.38v9.2l-.76.42L8 11l-6.24 4-.76-.42v-9.2L1.23 5l6.2-4h1.14zm-.06 9.13L14 13.67V5.65l-5.49-3.5V5h-1V2.13L2 5.67v8l5.51-3.56v.02h1zm.9-4.78l.71-.7 2.47 2.48v.71l-2.46 2.46-.7-.7L11.02 8h-6L6.6 9.6l-.7.7-2.46-2.46v-.71l2.48-2.48.7.7L4.98 7h6.08L9.41 5.35z"}}]})(props);\n};\nfunction VscMortarBoard (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 5.66L8.18 3h-.36L1 5.66V12h1V7l2.31.9a4.35 4.35 0 0 0-.79 2.48c-.01.11-.01.22 0 .33v.11l.28.4L7.78 13h.41l3.94-1.81.28-.4v-.44a4.39 4.39 0 0 0-.78-2.47L15 6.57v-.91zm-3.52 4.68v.07L8 12l-3.5-1.6a.13.13 0 0 1 0-.06 3.44 3.44 0 0 1 .75-2.12l2.58 1h.36l2.56-1a3.4 3.4 0 0 1 .73 2.12zM8 8.25L2.52 6.12 8 4l5.48 2.14L8 8.25z"}}]})(props);\n};\nfunction VscMove (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.232 10.707L8.5 12.44V9h-1v3.44l-1.732-1.733-.707.707L7.646 14h.708l2.585-2.586-.707-.707zM5.061 3.586l.707.707L7.5 2.56V6h1V2.56l1.732 1.733.707-.707L8.354 1h-.708L5.061 3.586zm-.268 1.682L3.06 7H6.5v1H3.06l1.733 1.732-.707.707L1.5 7.854v-.708l2.586-2.585.707.707zM9.5 7h3.44l-1.733-1.732.707-.707L14.5 7.146v.708l-2.586 2.585-.707-.707L12.94 8H9.5V7z"}}]})(props);\n};\nfunction VscMultipleWindows (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 1.5l.5-.5h8l.5.5v7l-.5.5H12V8h2V4H7v1H6V1.5zM7 2v1h7V2H7zM1.5 7l-.5.5v7l.5.5h8l.5-.5v-7L9.5 7h-8zM2 9V8h7v1H2zm0 1h7v4H2v-4z"}}]})(props);\n};\nfunction VscMute (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 5h2.79l3.86-3.83.85.35v13l-.85.33L4.29 11H1.5l-.5-.5v-5l.5-.5zm3.35 5.17L8 13.31V2.73L4.85 5.85 4.5 6H2v4h2.5l.35.17zm9.381-4.108l.707.707L13.207 8.5l1.731 1.732-.707.707L12.5 9.207l-1.732 1.732-.707-.707L11.793 8.5 10.06 6.77l.707-.707 1.733 1.73 1.731-1.731z"}}]})(props);\n};\nfunction VscNewFile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.5 1.1l3.4 3.5.1.4v2h-1V6H8V2H3v11h4v1H2.5l-.5-.5v-12l.5-.5h6.7l.3.1zM9 2v3h2.9L9 2zm4 14h-1v-3H9v-1h3V9h1v3h3v1h-3v3z"}}]})(props);\n};\nfunction VscNewFolder (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 2H7.71l-.85-.85L6.51 1h-5l-.5.5v11l.5.5H7v-1H1.99V6h4.49l.35-.15.86-.86H14v1.5l-.001.51h1.011V2.5L14.5 2zm-.51 2h-6.5l-.35.15-.86.86H2v-3h4.29l.85.85.36.15H14l-.01.99zM13 16h-1v-3H9v-1h3V9h1v3h3v1h-3v3z"}}]})(props);\n};\nfunction VscNoNewline (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.333 5.506a3 3 0 1 1 3.334 4.989 3 3 0 0 1-3.334-4.99zm2.677.777A1.986 1.986 0 0 0 2 8.009c.004.353.102.698.283 1.001L5.01 6.283zM2.99 9.717A1.986 1.986 0 0 0 6 7.991a1.988 1.988 0 0 0-.283-1.001L2.99 9.717zM14 5v1.984a.5.5 0 0 1-.5.5H9.367L11 5.851l-.707-.707-2.121 2.121-.423.423v.568l2.544 2.544.707-.707-1.61-1.609h4.11a1.5 1.5 0 0 0 1.5-1.5V5h-1z"}}]})(props);\n};\nfunction VscNote (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5v10l-.5.5h-13l-.5-.5v-10l.5-.5zM2 3v9h12V3H2zm2 2h8v1H4V5zm6 2H4v1h6V7zM4 9h4v1H4V9z"}}]})(props);\n};\nfunction VscNotebookTemplate (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1 5H0V4h1v1zm0 2H0V6h1v1zm0 2H0V8h1v1zm0 2H0v-1h1v1zm0 2H0v-1h1v1zm0 1v1H0v-1h1zm0 1h1v1H1v-1zm2 0h1v1H3v-1zM1 1H0V0h1v1zm2 0H2V0h1v1zm1-1h1v1H4V0zm3 1H6V0h1v1zm2 0H8V0h1v1zm2 0h-1V0h1v1zm0 1V1h1v1h-1zm1 2h-1V3h1v1zM1 3H0V2h1v1z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 6l1-1h7l1 1v9l-1 1H6l-1-1V6zm1 0v9h7V6H6z"}},{"tag":"path","attr":{"d":"M15 7h1v2h-1V7zm0 3h1v2h-1v-2zm0 3h1v2h-1v-2zM7 8h5v1H7z"}}]})(props);\n};\nfunction VscNotebook (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 2l1-1h9l1 1v12l-1 1H3l-1-1V2zm1 0v12h9V2H3zm1 2l1-1h5l1 1v1l-1 1H5L4 5V4zm1 0v1h5V4H5zm10 1h-1v2h1V5zm-1 3h1v2h-1V8zm1 3h-1v2h1v-2z"}}]})(props);\n};\nfunction VscOctoface (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.863 5.673c.113-.28.48-1.392-.114-2.897 0 0-.919-.288-3.01 1.138-.875-.245-1.812-.28-2.739-.28-.928 0-1.864.035-2.739.28-2.091-1.435-3.01-1.138-3.01-1.138-.595 1.505-.227 2.617-.113 2.897C1.428 6.433 1 7.413 1 8.603c0 4.507 2.914 5.522 6.982 5.522 4.07 0 7.018-1.015 7.018-5.521 0-1.19-.429-2.17-1.137-2.931zM8 13.268c-2.888 0-5.232-.132-5.232-2.932 0-.665.332-1.295.892-1.811.936-.857 2.537-.402 4.34-.402 1.811 0 3.395-.455 4.34.402.569.516.893 1.138.893 1.811 0 2.791-2.346 2.931-5.233 2.931zM5.804 8.883c-.578 0-1.05.7-1.05 1.557 0 .858.472 1.566 1.05 1.566.577 0 1.05-.7 1.05-1.566 0-.866-.473-1.557-1.05-1.557zm4.392 0c-.577 0-1.05.691-1.05 1.557s.473 1.566 1.05 1.566c.578 0 1.05-.7 1.05-1.566 0-.866-.463-1.557-1.05-1.557z"}}]})(props);\n};\nfunction VscOpenPreview (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3 1h11l1 1v5.3a3.21 3.21 0 0 0-1-.3V2H9v10.88L7.88 14H3l-1-1V2l1-1zm0 12h5V2H3v11zm10.379-4.998a2.53 2.53 0 0 0-1.19.348h-.03a2.51 2.51 0 0 0-.799 3.53L9 14.23l.71.71 2.35-2.36c.325.22.7.358 1.09.4a2.47 2.47 0 0 0 1.14-.13 2.51 2.51 0 0 0 1-.63 2.46 2.46 0 0 0 .58-1 2.63 2.63 0 0 0 .07-1.15 2.53 2.53 0 0 0-1.35-1.81 2.53 2.53 0 0 0-1.211-.258zm.24 3.992a1.5 1.5 0 0 1-.979-.244 1.55 1.55 0 0 1-.56-.68 1.49 1.49 0 0 1-.08-.86 1.49 1.49 0 0 1 1.18-1.18 1.49 1.49 0 0 1 .86.08c.276.117.512.311.68.56a1.5 1.5 0 0 1-1.1 2.324z"}}]})(props);\n};\nfunction VscOrganization (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.111 4.663A2 2 0 1 1 6.89 1.337a2 2 0 0 1 2.222 3.326zm-.555-2.494A1 1 0 1 0 7.444 3.83a1 1 0 0 0 1.112-1.66zm2.61.03a1.494 1.494 0 0 1 1.895.188 1.513 1.513 0 0 1-.487 2.46 1.492 1.492 0 0 1-1.635-.326 1.512 1.512 0 0 1 .228-2.321zm.48 1.61a.499.499 0 1 0 .705-.708.509.509 0 0 0-.351-.15.499.499 0 0 0-.5.503.51.51 0 0 0 .146.356zM3.19 12.487H5v1.005H3.19a1.197 1.197 0 0 1-.842-.357 1.21 1.21 0 0 1-.348-.85v-1.81a.997.997 0 0 1-.71-.332A1.007 1.007 0 0 1 1 9.408V7.226c.003-.472.19-.923.52-1.258.329-.331.774-.52 1.24-.523H4.6a2.912 2.912 0 0 0-.55 1.006H2.76a.798.798 0 0 0-.54.232.777.777 0 0 0-.22.543v2.232h1v2.826a.202.202 0 0 0 .05.151.24.24 0 0 0 .14.05zm7.3-6.518a1.765 1.765 0 0 0-1.25-.523H6.76a1.765 1.765 0 0 0-1.24.523c-.33.335-.517.786-.52 1.258v3.178a1.06 1.06 0 0 0 .29.734 1 1 0 0 0 .71.332v2.323a1.202 1.202 0 0 0 .35.855c.18.168.407.277.65.312h2a1.15 1.15 0 0 0 1-1.167V11.47a.997.997 0 0 0 .71-.332 1.006 1.006 0 0 0 .29-.734V7.226a1.8 1.8 0 0 0-.51-1.258zM10 10.454H9v3.34a.202.202 0 0 1-.06.14.17.17 0 0 1-.14.06H7.19a.21.21 0 0 1-.2-.2v-3.34H6V7.226c0-.203.079-.398.22-.543a.798.798 0 0 1 .54-.232h2.48a.778.778 0 0 1 .705.48.748.748 0 0 1 .055.295v3.228zm2.81 3.037H11v-1.005h1.8a.24.24 0 0 0 .14-.05.2.2 0 0 0 .06-.152V9.458h1V7.226a.777.777 0 0 0-.22-.543.798.798 0 0 0-.54-.232h-1.29a2.91 2.91 0 0 0-.55-1.006h1.84a1.77 1.77 0 0 1 1.24.523c.33.335.517.786.52 1.258v2.182c0 .273-.103.535-.289.733-.186.199-.44.318-.711.333v1.81c0 .319-.125.624-.348.85a1.197 1.197 0 0 1-.842.357zM4 1.945a1.494 1.494 0 0 0-1.386.932A1.517 1.517 0 0 0 2.94 4.52 1.497 1.497 0 0 0 5.5 3.454c0-.4-.158-.784-.44-1.067A1.496 1.496 0 0 0 4 1.945zm0 2.012a.499.499 0 0 1-.5-.503.504.504 0 0 1 .5-.503.509.509 0 0 1 .5.503.504.504 0 0 1-.5.503z"}}]})(props);\n};\nfunction VscOutput (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M19.5 0v1.5L21 3v19.5L19.5 24h-15L3 22.5V3l1.5-1.5V0H6v1.5h3V0h1.5v1.5h3V0H15v1.5h3V0h1.5zm-15 22.5h15V3h-15v19.5zM7.5 6h9v1.5h-9V6zm9 6h-9v1.5h9V12zm-9 6h9v1.5h-9V18z"}}]})(props);\n};\nfunction VscPackage (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.61 3l5.74 1.53L15 5v6.74l-.37.48-6.13 1.69-6.14-1.69-.36-.48V5l.61-.47L8.34 3h.27zm-.09 1l-4 1 .55.2 3.43.9 3-.81.95-.29-3.93-1zM3 11.36l5 1.37V7L3 5.66v5.7zM9 7v5.73l5-1.37V5.63l-2.02.553V8.75l-1 .26V6.457L9 7z"}}]})(props);\n};\nfunction VscPaintcan (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.54 11.811l-1.14-3.12v-.06l-4.91-4.91v-1.24a1.66 1.66 0 0 0-.11-.58 1.48 1.48 0 0 0-.83-.8 1.42 1.42 0 0 0-.58-.1 1.47 1.47 0 0 0-1.48 1.48v3.26l-3.06 3a1.52 1.52 0 0 0 0 2.12l3.63 3.63c.14.141.307.253.49.33a1.53 1.53 0 0 0 1.14 0 1.51 1.51 0 0 0 .49-.33l4.93-4.92-.66 2.2a1.19 1.19 0 0 0 0 .46c.033.152.098.296.19.42.098.121.216.223.35.3.14.07.294.11.45.12a1 1 0 0 0 .48-.09 1.14 1.14 0 0 0 .39-.29.98.98 0 0 0 .22-.44c.032-.145.035-.294.01-.44zm-8-9.33a.46.46 0 0 1 0-.2.52.52 0 0 1 .12-.17.64.64 0 0 1 .18-.1.5.5 0 0 1 .21 0 .5.5 0 0 1 .32.15.5.5 0 0 1 .12.33v1.26l-1 1 .05-2.27zm1 11.35a.36.36 0 0 1-.16.11.47.47 0 0 1-.38 0 .361.361 0 0 1-.16-.11l-3.63-3.62a.5.5 0 0 1 0-.71l4.35-4.35v2.85a.74.74 0 0 0-.24.55.75.75 0 1 0 1.17-.55v-2.83l3.85 3.87-4.8 4.79z"}}]})(props);\n};\nfunction VscPassFilled (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm-1.02-4.13h-.71L4 8.6l.71-.71 1.92 1.92 4.2-4.21.71.71-4.56 4.56z"}}]})(props);\n};\nfunction VscPass (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z"}}]})(props);\n};\nfunction VscPersonAdd (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13 10h-1v2h-2v1h2v2h1v-2h2v-1h-2v-2zM8.556 2.169a1 1 0 1 0-1.112 1.663 1 1 0 0 0 1.112-1.663zm-1.667-.832A2 2 0 1 1 9.11 4.663a2 2 0 0 1-2.22-3.326zM6.77 5.49h2.46A1.77 1.77 0 0 1 11 7.26V8h-1v-.74a.76.76 0 0 0-.77-.77H6.77a.76.76 0 0 0-.77.77V10h1v3.31a.2.2 0 0 0 .2.2H8v1.02h-.8a1.2 1.2 0 0 1-1.2-1.2V11a1.06 1.06 0 0 1-1-1.1V7.26a1.77 1.77 0 0 1 1.77-1.77z"}}]})(props);\n};\nfunction VscPerson (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 2a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm0-1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm1.23 4.49H6.77A1.77 1.77 0 0 0 5 7.26V9.9A1.06 1.06 0 0 0 6 11v2.33a1.2 1.2 0 0 0 1.2 1.2h1.6a1.2 1.2 0 0 0 1.2-1.24V11a1.06 1.06 0 0 0 1-1.1V7.26a1.77 1.77 0 0 0-1.77-1.77zM6 10V7.26a.76.76 0 0 1 .77-.77h2.46a.76.76 0 0 1 .77.77V10H9v3.31a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V10H6z"}}]})(props);\n};\nfunction VscPieChart (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10 6H13.9C13.5023 4.04087 11.9591 2.4977 10 2.10002V6ZM10 1.08296C12.5125 1.50448 14.4955 3.4875 14.917 6C14.9716 6.32521 15 6.65929 15 7H9V1C9.34071 1 9.67479 1.0284 10 1.08296ZM7 8.00003L8 9.00003H12.9C12.4367 11.2823 10.4189 13 8 13C5.23858 13 3 10.7614 3 8C3 5.58104 4.71776 3.56329 7 3.10002V8.00003ZM8 14C10.973 14 13.4409 11.8377 13.917 9.00003C13.9716 8.67482 14 8.34074 14 8.00003H8V2C7.65929 2 7.32521 2.0284 7 2.08296C4.16229 2.55904 2 5.027 2 8C2 11.3137 4.68629 14 8 14Z"}}]})(props);\n};\nfunction VscPin (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 5v7h-.278c-.406 0-.778-.086-1.117-.258A2.528 2.528 0 0 1 11.73 11H8.87a3.463 3.463 0 0 1-.546.828 3.685 3.685 0 0 1-.735.633c-.27.177-.565.31-.882.398a3.875 3.875 0 0 1-.985.141h-.5V9H2l-1-.5L2 8h3.222V4h.5c.339 0 .664.047.977.14.312.094.607.227.883.4A3.404 3.404 0 0 1 8.87 6h2.859a2.56 2.56 0 0 1 .875-.734c.338-.172.71-.26 1.117-.266H14zm-.778 1.086a1.222 1.222 0 0 0-.32.156 1.491 1.491 0 0 0-.43.461L12.285 7H8.183l-.117-.336a2.457 2.457 0 0 0-.711-1.047C7.027 5.331 6.427 5.09 6 5v7c.427-.088 1.027-.33 1.355-.617.328-.287.565-.636.71-1.047L8.184 10h4.102l.18.297c.057.094.122.177.195.25.073.073.153.143.242.21.088.069.195.12.32.157V6.086z"}}]})(props);\n};\nfunction VscPinnedDirty (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 2h7v.278c0 .406-.086.778-.258 1.117-.172.339-.42.63-.742.875v2.86c.307.145.583.328.828.546a3.7 3.7 0 0 1 .54.598 4.92 4.92 0 0 0-.896.412l-.007.004-.03.018a2.456 2.456 0 0 0-1.099-.774L9 7.817V3.715l.297-.18c.094-.057.177-.122.25-.195a2.28 2.28 0 0 0 .21-.242.968.968 0 0 0 .157-.32H5.086c.042.125.094.232.156.32a1.494 1.494 0 0 0 .461.43L6 3.715v4.102l-.336.117c-.411.146-.76.383-1.047.711C4.331 8.973 4.09 9.573 4 10h5.002a5.025 5.025 0 0 0-.481.778H8V14l-.5 1-.5-1v-3.222H3v-.5c0-.339.047-.664.14-.977.094-.312.227-.607.4-.883A3.404 3.404 0 0 1 5 7.13V4.27a2.561 2.561 0 0 1-.734-.875A2.505 2.505 0 0 1 4 2.278V2zm7.485 8.41a2.924 2.924 0 0 1 .718-.302c.256-.072.522-.108.797-.108s.541.036.797.108a2.956 2.956 0 0 1 1.321.773 2.956 2.956 0 0 1 .774 1.322c.072.256.108.522.108.797s-.036.541-.108.797a2.953 2.953 0 0 1-.774 1.324 3.013 3.013 0 0 1-1.321.774c-.256.07-.522.105-.797.105s-.541-.035-.797-.105a3.037 3.037 0 0 1-1.324-.774 3.037 3.037 0 0 1-.773-1.324A2.994 2.994 0 0 1 10 13c0-.275.035-.541.105-.797a3.013 3.013 0 0 1 .883-1.425c.154-.14.32-.262.497-.368z"}}]})(props);\n};\nfunction VscPinned (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4 2h7v.278c0 .406-.086.778-.258 1.117-.172.339-.42.63-.742.875v2.86c.307.145.583.328.828.546.245.219.456.464.633.735.177.27.31.565.398.882.089.318.136.646.141.985v.5H8V14l-.5 1-.5-1v-3.222H3v-.5c0-.339.047-.664.14-.977.094-.312.227-.607.4-.883A3.404 3.404 0 0 1 5 7.13V4.27a2.561 2.561 0 0 1-.734-.875A2.505 2.505 0 0 1 4 2.278V2zm1.086.778c.042.125.094.232.156.32a1.494 1.494 0 0 0 .461.43L6 3.715v4.102l-.336.117c-.411.146-.76.383-1.047.711C4.331 8.973 4.09 9.573 4 10h7c-.088-.427-.33-1.027-.617-1.355a2.456 2.456 0 0 0-1.047-.71L9 7.816V3.715l.297-.18c.094-.057.177-.122.25-.195a2.28 2.28 0 0 0 .21-.242.968.968 0 0 0 .157-.32H5.086z"}}]})(props);\n};\nfunction VscPlayCircle (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 5l.777-.416 4.5 3v.832l-4.5 3L6 11V5zm1 .934v4.132L10.099 8 7 5.934z"}}]})(props);\n};\nfunction VscPlay (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3.78 2L3 2.41v12l.78.42 9-6V8l-9-6zM4 13.48V3.35l7.6 5.07L4 13.48z"}}]})(props);\n};\nfunction VscPlug (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7 1H6v3H4.5l-.5.5V8a4 4 0 0 0 3.5 3.969V15h1v-3.031A4 4 0 0 0 12 8V4.5l-.5-.5H10V1H9v3H7V1zm3.121 9.121A3 3 0 0 1 5 8V5h6v3a3 3 0 0 1-.879 2.121z"}}]})(props);\n};\nfunction VscPreserveCase (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.534 12.467H7.436l-.897-2.373h-3.59l-.845 2.373H1L4.248 4h1.027l3.26 8.467zm-2.32-3.265L4.885 5.594a3.454 3.454 0 0 1-.13-.567h-.023c-.04.24-.085.43-.136.567L3.279 9.202h2.935zm3.572 3.265V4h2.41c.732 0 1.312.18 1.741.537.43.359.644.825.644 1.4 0 .48-.13.897-.39 1.252-.26.354-.618.606-1.075.755v.024c.571.067 1.028.283 1.37.65.343.362.514.834.514 1.417 0 .724-.26 1.31-.78 1.76-.519.448-1.174.672-1.966.672H9.786zm.992-7.57v2.734h1.016c.543 0 .97-.13 1.281-.39.311-.263.466-.633.466-1.11 0-.822-.54-1.233-1.623-1.233h-1.14zm0 3.626v3.047h1.346c.583 0 1.034-.138 1.353-.414.322-.275.484-.653.484-1.133 0-1-.681-1.5-2.043-1.5h-1.14z"}}]})(props);\n};\nfunction VscPreview (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 2h12l1 1v10l-1 1H2l-1-1V3l1-1zm0 11h12V3H2v10zm11-9H3v3h10V4zm-1 2H4V5h8v1zm-3 6h4V8H9v4zm1-3h2v2h-2V9zM7 8H3v1h4V8zm-4 3h4v1H3v-1z"}}]})(props);\n};\nfunction VscPrimitiveSquare (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.5 4l.5-.5h8l.5.5v8l-.5.5H4l-.5-.5V4zm1 .5v7h7v-7h-7z"}}]})(props);\n};\nfunction VscProject (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v13l-.5.5h-13l-.5-.5v-13l.5-.5zM2 14h12V2H2v12zM3 3h2v10H3V3zm6 0H7v6h2V3zm2 0h2v8h-2V3z"}}]})(props);\n};\nfunction VscPulse (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M11.8 9L10 3H9L7.158 9.64 5.99 4.69h-.97L3.85 9H1v.99h3.23l.49-.37.74-2.7L6.59 12h1.03l1.87-7.04 1.46 4.68.48.36H15V9h-3.2z"}}]})(props);\n};\nfunction VscQuestion (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.5 1a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13zm0 12a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11zm1.55-8.42a1.84 1.84 0 0 0-.61-.42A2.25 2.25 0 0 0 7.53 4a2.16 2.16 0 0 0-.88.17c-.239.1-.45.254-.62.45a1.89 1.89 0 0 0-.38.62 3 3 0 0 0-.15.72h1.23a.84.84 0 0 1 .506-.741.72.72 0 0 1 .304-.049.86.86 0 0 1 .27 0 .64.64 0 0 1 .22.14.6.6 0 0 1 .16.22.73.73 0 0 1 .06.3c0 .173-.037.343-.11.5a2.4 2.4 0 0 1-.27.46l-.35.42c-.12.13-.24.27-.35.41a2.33 2.33 0 0 0-.27.45 1.18 1.18 0 0 0-.1.5v.66H8v-.49a.94.94 0 0 1 .11-.42 3.09 3.09 0 0 1 .28-.41l.36-.44a4.29 4.29 0 0 0 .36-.48 2.59 2.59 0 0 0 .28-.55 1.91 1.91 0 0 0 .11-.64 2.18 2.18 0 0 0-.1-.67 1.52 1.52 0 0 0-.35-.55zM6.8 9.83h1.17V11H6.8V9.83z"}}]})(props);\n};\nfunction VscQuote (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.16 3.5C4.73 5.06 3.55 6.67 3.55 9.36c.16-.05.3-.05.44-.05 1.27 0 2.5.86 2.5 2.41 0 1.61-1.03 2.61-2.5 2.61-1.9 0-2.99-1.52-2.99-4.25 0-3.8 1.75-6.53 5.02-8.42L7.16 3.5zm7 0c-2.43 1.56-3.61 3.17-3.61 5.86.16-.05.3-.05.44-.05 1.27 0 2.5.86 2.5 2.41 0 1.61-1.03 2.61-2.5 2.61-1.89 0-2.98-1.52-2.98-4.25 0-3.8 1.75-6.53 5.02-8.42l1.14 1.84h-.01z"}}]})(props);\n};\nfunction VscRadioTower (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.998 5.58a5.55 5.55 0 0 1 1.62-3.88l-.71-.7a6.45 6.45 0 0 0 0 9.16l.71-.7a5.55 5.55 0 0 1-1.62-3.88zm1.06 0a4.42 4.42 0 0 0 1.32 3.17l.71-.71a3.27 3.27 0 0 1-.76-1.12 3.45 3.45 0 0 1 0-2.67 3.22 3.22 0 0 1 .76-1.13l-.71-.71a4.46 4.46 0 0 0-1.32 3.17zm7.65 3.21l-.71-.71c.33-.32.59-.704.76-1.13a3.449 3.449 0 0 0 0-2.67 3.22 3.22 0 0 0-.76-1.13l.71-.7a4.468 4.468 0 0 1 0 6.34zM13.068 1l-.71.71a5.43 5.43 0 0 1 0 7.74l.71.71a6.45 6.45 0 0 0 0-9.16zM9.993 5.43a1.5 1.5 0 0 1-.245.98 2 2 0 0 1-.27.23l3.44 7.73-.92.4-.77-1.73h-5.54l-.77 1.73-.92-.4 3.44-7.73a1.52 1.52 0 0 1-.33-1.63 1.55 1.55 0 0 1 .56-.68 1.5 1.5 0 0 1 2.325 1.1zm-1.595-.34a.52.52 0 0 0-.25.14.52.52 0 0 0-.11.22.48.48 0 0 0 0 .29c.04.09.102.17.18.23a.54.54 0 0 0 .28.08.51.51 0 0 0 .5-.5.54.54 0 0 0-.08-.28.58.58 0 0 0-.23-.18.48.48 0 0 0-.29 0zm.23 2.05h-.27l-.87 1.94h2l-.86-1.94zm2.2 4.94l-.89-2h-2.88l-.89 2h4.66z"}}]})(props);\n};\nfunction VscReactions (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12 7.5c0 .169-.01.336-.027.5h1.005A5.5 5.5 0 1 0 8 12.978v-1.005A4.5 4.5 0 1 1 12 7.5zM5.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2 2.5c.712 0 1.355-.298 1.81-.776l.707.708A3.49 3.49 0 0 1 7.5 10.5a3.49 3.49 0 0 1-2.555-1.108l.707-.708A2.494 2.494 0 0 0 7.5 9.5zm2-2.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2.5 3h1v2h2v1h-2v2h-1v-2h-2v-1h2v-2z"}}]})(props);\n};\nfunction VscRecordKeys (props) {\n  return GenIcon({"tag":"svg","attr":{"fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14 3H3a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm0 8H3V4h11v7zm-3-6h-1v1h1V5zm-1 2H9v1h1V7zm2-2h1v1h-1V5zm1 4h-1v1h1V9zM6 9h5v1H6V9zm7-2h-2v1h2V7zM8 5h1v1H8V5zm0 2H7v1h1V7zM4 9h1v1H4V9zm0-4h1v1H4V5zm3 0H6v1h1V5zM4 7h2v1H4V7z"}}]})(props);\n};\nfunction VscRecord (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z"}}]})(props);\n};\nfunction VscRedo (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.5 2v3.5L12 6H8.5V5h2.521l-.941-.941a3.552 3.552 0 1 0-5.023 5.023l5.197 5.198-.72.72-5.198-5.198A4.57 4.57 0 0 1 10.8 3.339l.7.7V2h1z"}}]})(props);\n};\nfunction VscReferences (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.105 4.561l-3.43 3.427-1.134-1.12 2.07-2.08h-4.8a2.4 2.4 0 1 0 0 4.8h.89v1.6h-.88a4 4 0 0 1 0-7.991h4.8L6.54 1.13 7.675 0l3.43 3.432v1.13zM16.62 24h-9.6l-.8-.8V10.412l.8-.8h9.6l.8.8V23.2l-.8.8zm-8.8-1.6h8V11.212h-8V22.4zm5.6-20.798h9.6l.8.8v12.786l-.8.8h-4v-1.6h3.2V3.2h-8v4.787h-1.6V2.401l.8-.8zm.8 11.186h-4.8v1.6h4.8v-1.6zm-4.8 3.2h4.8v1.6h-4.8v-1.6zm4.8 3.2h-4.8v1.6h4.8v-1.6zm1.6-14.4h4.8v1.6h-4.8v-1.6zm4.8 6.4h-1.6v1.6h1.6v-1.6zm-3.338-3.176v-.024h3.338v1.6h-1.762l-1.576-1.576z"}}]})(props);\n};\nfunction VscRefresh (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.681 3H2V2h3.5l.5.5V6H5V4a5 5 0 1 0 4.53-.761l.302-.954A6 6 0 1 1 4.681 3z"}}]})(props);\n};\nfunction VscRegex (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10.012 2h.976v3.113l2.56-1.557.486.885L11.47 6l2.564 1.559-.485.885-2.561-1.557V10h-.976V6.887l-2.56 1.557-.486-.885L9.53 6 6.966 4.441l.485-.885 2.561 1.557V2zM2 10h4v4H2v-4z"}}]})(props);\n};\nfunction VscRemoteExplorer (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.344 2.125h20.312l.782.781v8.599a7.825 7.825 0 0 0-1.563-.912V3.688H2.125V17.75h7.813a7.813 7.813 0 0 0 1.562 4.688H5.25v-1.563h4.688v-1.563H1.344l-.782-.78V2.905l.782-.781zM17.75 11.5a6.25 6.25 0 1 0 0 12.5 6.25 6.25 0 0 0 0-12.5zm0 10.938a4.688 4.688 0 1 1 0-9.377 4.688 4.688 0 0 1 0 9.377zm2.603-3.132L18.2 17.153 20.353 15l.647.646-1.506 1.507L21 18.659l-.647.647zM15 17.246l1.506 1.507L15 20.259l.647.647 2.153-2.153-2.153-2.153-.647.646z"}}]})(props);\n};\nfunction VscRemote (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.904 9.57L8.928 5.596l3.976-3.976-.619-.62L8 5.286v.619l4.285 4.285.62-.618zM3 5.62l4.072 4.07L3 13.763l.619.618L8 10v-.619L3.619 5 3 5.619z"}}]})(props);\n};\nfunction VscRemove (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 8H1V7h14v1z"}}]})(props);\n};\nfunction VscReplaceAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.6 2.677c.147-.31.356-.465.626-.465.248 0 .44.118.573.353.134.236.201.557.201.966 0 .443-.078.798-.235 1.067-.156.268-.365.402-.627.402-.237 0-.416-.125-.537-.374h-.008v.31H11V1h.593v1.677h.008zm-.016 1.1a.78.78 0 0 0 .107.426c.071.113.163.169.274.169.136 0 .24-.072.314-.216.075-.145.113-.35.113-.615 0-.22-.035-.39-.104-.514-.067-.124-.164-.187-.29-.187-.12 0-.219.062-.297.185a.886.886 0 0 0-.117.48v.272zM4.12 7.695L2 5.568l.662-.662 1.006 1v-1.51A1.39 1.39 0 0 1 5.055 3H7.4v.905H5.055a.49.49 0 0 0-.468.493l.007 1.5.949-.944.656.656-2.08 2.085zM9.356 4.93H10V3.22C10 2.408 9.685 2 9.056 2c-.135 0-.285.024-.45.073a1.444 1.444 0 0 0-.388.167v.665c.237-.203.487-.304.75-.304.261 0 .392.156.392.469l-.6.103c-.506.086-.76.406-.76.961 0 .263.061.473.183.631A.61.61 0 0 0 8.69 5c.29 0 .509-.16.657-.48h.009v.41zm.004-1.355v.193a.75.75 0 0 1-.12.436.368.368 0 0 1-.313.17.276.276 0 0 1-.22-.095.38.38 0 0 1-.08-.248c0-.222.11-.351.332-.389l.4-.067zM7 12.93h-.644v-.41h-.009c-.148.32-.367.48-.657.48a.61.61 0 0 1-.507-.235c-.122-.158-.183-.368-.183-.63 0-.556.254-.876.76-.962l.6-.103c0-.313-.13-.47-.392-.47-.263 0-.513.102-.75.305v-.665c.095-.063.224-.119.388-.167.165-.049.315-.073.45-.073.63 0 .944.407.944 1.22v1.71zm-.64-1.162v-.193l-.4.068c-.222.037-.333.166-.333.388 0 .1.027.183.08.248a.276.276 0 0 0 .22.095.368.368 0 0 0 .312-.17c.08-.116.12-.26.12-.436zM9.262 13c.321 0 .568-.058.738-.173v-.71a.9.9 0 0 1-.552.207.619.619 0 0 1-.5-.215c-.12-.145-.181-.345-.181-.598 0-.26.063-.464.189-.612a.644.644 0 0 1 .516-.223c.194 0 .37.069.528.207v-.749c-.129-.09-.338-.134-.626-.134-.417 0-.751.14-1.001.422-.249.28-.373.662-.373 1.148 0 .42.116.764.349 1.03.232.267.537.4.913.4zM2 9l1-1h9l1 1v5l-1 1H3l-1-1V9zm1 0v5h9V9H3zm3-2l1-1h7l1 1v5l-1 1V7H6z"}}]})(props);\n};\nfunction VscReplace (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.221 3.739l2.261 2.269L7.7 3.784l-.7-.7-1.012 1.007-.008-1.6a.523.523 0 0 1 .5-.526H8V1H6.48A1.482 1.482 0 0 0 5 2.489V4.1L3.927 3.033l-.706.706zm6.67 1.794h.01c.183.311.451.467.806.467.393 0 .706-.168.94-.503.236-.335.353-.78.353-1.333 0-.511-.1-.913-.301-1.207-.201-.295-.488-.442-.86-.442-.405 0-.718.194-.938.581h-.01V1H9v4.919h.89v-.386zm-.015-1.061v-.34c0-.248.058-.448.175-.601a.54.54 0 0 1 .445-.23.49.49 0 0 1 .436.233c.104.154.155.368.155.643 0 .33-.056.587-.169.768a.524.524 0 0 1-.47.27.495.495 0 0 1-.411-.211.853.853 0 0 1-.16-.532zM9 12.769c-.256.154-.625.231-1.108.231-.563 0-1.02-.178-1.369-.533-.349-.355-.523-.813-.523-1.374 0-.648.186-1.158.56-1.53.374-.376.875-.563 1.5-.563.433 0 .746.06.94.179v.998a1.26 1.26 0 0 0-.792-.276c-.325 0-.583.1-.774.298-.19.196-.283.468-.283.816 0 .338.09.603.272.797.182.191.431.287.749.287.282 0 .558-.092.828-.276v.946zM4 7L3 8v6l1 1h7l1-1V8l-1-1H4zm0 1h7v6H4V8z"}}]})(props);\n};\nfunction VscReply (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6.306 2.146l-4.02 4.02v.708l4.02 4.02.708-.707L3.807 6.98H5.69c2.813 0 4.605.605 5.705 1.729 1.102 1.125 1.615 2.877 1.615 5.421v.35h1v-.35c0-2.646-.527-4.72-1.9-6.121C10.735 6.605 8.617 5.98 5.69 5.98H3.887l3.127-3.126-.708-.708z"}}]})(props);\n};\nfunction VscRepoClone (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13 10H4V2h4V1H3.74a1.9 1.9 0 0 0-.67.13 1.66 1.66 0 0 0-.57.41 1.73 1.73 0 0 0-.37.59 1.68 1.68 0 0 0-.13.62v9.5a1.75 1.75 0 0 0 1.07 1.62 1.9 1.9 0 0 0 .67.13H4v-1h-.26a.72.72 0 0 1-.29-.06.78.78 0 0 1-.4-.4.93.93 0 0 1 0-.29v-.5a.93.93 0 0 1 0-.29.78.78 0 0 1 .4-.4.72.72 0 0 1 .29-.06H13v2H9v1h4.5l.5-.5V9h-1v1zM6 3H5v1h1V3zM5 5h1v1H5V5zm0 2h1v1H5V7zm.28 8H5v-3h3v3h-.28L6.5 13.49 5.28 15zM10 1h4.5l.5.5v6l-.5.5H12v1h-1V8h-1a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zm.5 6h.5V6h-.5a.5.5 0 0 0 0 1zM12 7h2V6h-2v1zm-1-2h3V2h-3v3z"}}]})(props);\n};\nfunction VscRepoForcePush (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.74 1h9.76l.5.5v12l-.5.5H10v-1h3v-2h-3v-1h3V2H4v8h3v1H3.74a.74.74 0 0 0-.74.75v.5a.74.74 0 0 0 .74.75H7v1H3.74A1.74 1.74 0 0 1 2 12.25v-9.5A1.74 1.74 0 0 1 3.74 1zm1.6 4.83l.71.7L8 4.58v1.45L5.38 8.65l.71.7 1.92-1.92V15h1V7.328l2.03 2.022.7-.7L9 5.9V4.538l2 1.992.7-.7L8.88 3h-.71L5.34 5.83z"}}]})(props);\n};\nfunction VscRepoForked (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 4a2 2 0 1 0-2.47 1.94V7a.48.48 0 0 1-.27.44L8.49 8.88l-2.76-1.4A.49.49 0 0 1 5.46 7V5.94a2 2 0 1 0-1 0V7a1.51 1.51 0 0 0 .82 1.34L8 9.74v1.32a2 2 0 1 0 1 0V9.74l2.7-1.36A1.49 1.49 0 0 0 12.52 7V5.92A2 2 0 0 0 14 4zM4 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0zm5.47 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM12 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"}}]})(props);\n};\nfunction VscRepoPull (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13 1.5V3h-1V2H3v8h10v3.5l-.5.5H8v-1h4v-2H2.735a.72.72 0 0 0-.285.06.74.74 0 0 0-.4.4.93.93 0 0 0-.05.29v.5a.93.93 0 0 0 .05.29.74.74 0 0 0 .4.4c.091.04.19.06.29.06H3v1h-.26a1.9 1.9 0 0 1-.67-.13 1.77 1.77 0 0 1-.94-.95 1.7 1.7 0 0 1-.13-.67v-9.5a1.7 1.7 0 0 1 .13-.62 1.77 1.77 0 0 1 .94-1A1.9 1.9 0 0 1 2.74 1h9.76l.5.5zM2 10.17V2.748v7.422zM5 3H4v1h1V3zm0 2H4v1h1V5zM4 7h1v1H4V7zm8.07-3.61l-.7.71 1.92 1.92H7v1h6.39l-2.02 2.03.7.7 2.83-2.82v-.71l-2.83-2.83zM5.5 13.49L4.28 15H4v-3h3v3h-.28L5.5 13.49z"}}]})(props);\n};\nfunction VscRepoPush (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.5 1H3.74A1.74 1.74 0 0 0 2 2.75v9.5A1.74 1.74 0 0 0 3.74 14H7v-1H3.74a.74.74 0 0 1-.74-.75v-.5a.74.74 0 0 1 .74-.75H7v-1H4V2h9v8h-3v1h3v2h-3v1h3.5l.5-.5v-12l-.5-.5zM3 2.73a.75.75 0 0 0 0 .02v7.42-7.44zM6 3H5v1h1V3zm-.62 5.65l.71.7 1.92-1.92V15h1V7.328l2.03 2.022.7-.7-2.82-2.83h-.71L5.38 8.65zM5 5h1v1H5V5z"}}]})(props);\n};\nfunction VscRepo (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14 10V1.5l-.5-.5H3.74a1.9 1.9 0 0 0-.67.13 1.77 1.77 0 0 0-.94 1 1.7 1.7 0 0 0-.13.62v9.5a1.7 1.7 0 0 0 .13.67c.177.427.515.768.94.95a1.9 1.9 0 0 0 .67.13H4v-1h-.26a.72.72 0 0 1-.29-.06.74.74 0 0 1-.4-.4.93.93 0 0 1-.05-.29v-.5a.93.93 0 0 1 .05-.29.74.74 0 0 1 .4-.4.72.72 0 0 1 .286-.06H13v2H9v1h4.5l.5-.5V10zM4 10V2h9v8H4zm1-7h1v1H5V3zm0 2h1v1H5V5zm1 2H5v1h1V7zm.5 6.49L5.28 15H5v-3h3v3h-.28L6.5 13.49z"}}]})(props);\n};\nfunction VscReport (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 1h13l.5.5v10l-.5.5H7.707l-2.853 2.854L4 14.5V12H1.5l-.5-.5v-10l.5-.5zm6 10H14V2H2v9h2.5l.5.5v1.793l2.146-2.147L7.5 11zm0-8h1v5h-1V3zm0 7h1V9h-1v1z"}}]})(props);\n};\nfunction VscRequestChanges (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 1h-13l-.5.5v10l.5.5H4v2.5l.854.354L7.707 12H14.5l.5-.5v-10l-.5-.5zM14 11H7.5l-.354.146L5 13.293V11.5l-.5-.5H2V2h12v9zm-4-1H6V8.979h4V10zM7.5 3h1v2h2v1h-2v2h-1V6h-2V5h2V3z"}}]})(props);\n};\nfunction VscRocket (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.491 1c-3.598.004-6.654 1.983-8.835 4H1.5l-.5.5v3l.147.354.991.991.001.009 4 4 .009.001.999.999L7.5 15h3l.5-.5v-4.154c2.019-2.178 3.996-5.233 3.992-8.846l-.501-.5zM2 6h2.643a23.828 23.828 0 0 0-2.225 2.71L2 8.294V6zm5.7 8l-.42-.423a23.59 23.59 0 0 0 2.715-2.216V14H7.7zm-1.143-1.144L3.136 9.437C4.128 8 8.379 2.355 13.978 2.016c-.326 5.612-5.987 9.853-7.421 10.84zM4 15v-1H2v-2H1v3h3zm6.748-7.667a1.5 1.5 0 1 0-2.496-1.666 1.5 1.5 0 0 0 2.495 1.666z"}}]})(props);\n};\nfunction VscRootFolderOpened (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 6.257V2.5l.5-.5h5l.35.15.86.85h5.79l.5.5V6h1.13l.48.63-2.63 7-.48.37H8.743a5.48 5.48 0 0 0 .657-1h2.73l2.37-6H8.743a5.534 5.534 0 0 0-.72-.724l.127-.126L8.5 6H13V4H7.5l-.35-.15L6.29 3H2l.01 2.594c-.361.184-.7.407-1.01.663z"}},{"tag":"path","attr":{"d":"M6 10.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 10.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0zM4.5 13a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5z"}}]})(props);\n};\nfunction VscRootFolder (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.71 3h6.79l.51.5v10l-.5.5H8.743a5.48 5.48 0 0 0 .657-1h4.59v-1.51l.01-4v-1.5H7.69l-.017.017a5.494 5.494 0 0 0-.881-.508l.348-.349.35-.15h6.5l.01-.99H7.5l-.36-.15-.85-.85H2V5.6a5.45 5.45 0 0 0-.99.649V2.5l.5-.5h5l.35.15.85.85z"}},{"tag":"path","attr":{"d":"M6 10.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 10.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0zM4.5 13a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5z"}}]})(props);\n};\nfunction VscRss (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 13H3v-2c1.11 0 2 .89 2 2zM3 3v1a9 9 0 0 1 9 9h1C13 7.48 8.52 3 3 3zm0 4v1c2.75 0 5 2.25 5 5h1c0-3.31-2.69-6-6-6z"}}]})(props);\n};\nfunction VscRuby (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 7.19l6.64 6.64h.72L15 7.19v-.72l-3.32-3.32-.36-.15H4.68l-.36.15L1 6.47v.72zm7 5.56L2.08 6.83 4.89 4h6.22l2.81 2.83L8 12.75zm0-7.73h2.69l1.81 1.81-4.5 4.4V5.02z"}}]})(props);\n};\nfunction VscRunAbove (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1.77 1.01L1 1.42v12l.78.42 9-6v-.83l-9.01-6zM2 12.49V2.36l7.6 5.07L2 12.49zM12.15 8h.71l2.5 2.5-.71.71L13 9.56V15h-1V9.55l-1.65 1.65-.7-.7 2.5-2.5z"}}]})(props);\n};\nfunction VscRunAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M2.78 2L2 2.41v12l.78.42 9-6V8l-9-6zM3 13.48V3.35l7.6 5.07L3 13.48z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 14.683l8.78-5.853V8L6 2.147V3.35l7.6 5.07L6 13.48v1.203z"}}]})(props);\n};\nfunction VscRunBelow (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M1.8 1.01l-.78.41v12l.78.42 9-6v-.83l-9-6zm.22 11.48V2.36l7.6 5.07-7.6 5.06zM12.85 15h-.71l-2.5-2.5.71-.71L12 13.44V8h1v5.45l1.65-1.65.71.71L12.85 15z"}}]})(props);\n};\nfunction VscRunErrors (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 2.41L5.78 2L14.78 8V8.83L9 12.6833V11.4826L13.6 8.42L6 3.35V7H5V2.41Z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.87227 7.80803C4.02215 7.7549 3.16715 7.9667 2.46857 8.44931C1.71646 8.9338 1.23555 9.6327 0.970474 10.4798C0.70131 11.2888 0.756984 12.1983 1.07646 12.997C1.39862 13.8024 1.98841 14.444 2.73373 14.8699C3.48976 15.3019 4.34985 15.407 5.20068 15.2475C6.06198 15.086 6.81126 14.6028 7.34443 13.963L7.34919 13.9568C7.87759 13.2698 8.20141 12.468 8.20141 11.6053C8.20141 10.5403 7.82698 9.63047 7.13464 8.88488L7.12941 8.87965C6.54444 8.29468 5.74055 7.8623 4.87227 7.80803ZM2.95059 9.18281C3.4627 8.81037 4.12262 8.66604 4.74312 8.71377L4.74421 8.71385C5.40049 8.76073 5.96469 9.04069 6.44119 9.51719C6.95689 10.0329 7.24402 10.7907 7.24402 11.5546V11.5618L7.24453 11.5689C7.29089 12.2179 7.0608 12.8292 6.67758 13.3579C6.25159 13.8765 5.68456 14.2071 5.06818 14.3493C4.45885 14.49 3.80161 14.3963 3.23776 14.0674C2.66626 13.7341 2.23786 13.259 1.95045 12.6362C1.67052 12.0297 1.66791 11.3722 1.85872 10.752L1.85983 10.7482C2.04996 10.0827 2.42849 9.56252 2.95059 9.18281ZM4.5051 11.0124L3.29191 9.7487L2.65431 10.3863L3.87316 11.6559L2.65431 12.9256L3.29191 13.5632L4.5051 12.2994L5.71829 13.5632L6.35589 12.9256L5.13704 11.6559L6.35589 10.3863L5.71829 9.7487L4.5051 11.0124Z"}}]})(props);\n};\nfunction VscSaveAll (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.85 2.65l-1.5-1.5L13 1H4.48l-.5.5V4H1.5l-.5.5v10l.5.5h10l.5-.5V12h2.5l.5-.5V3l-.15-.35zM11 14H2V5h1v3.07h6V5h.79L11 6.21V14zM6 7V5h2v2H6zm8 4h-2V6l-.15-.35-1.5-1.5L10 4H5V2h7.81l1.21 1.21L14 11z"}}]})(props);\n};\nfunction VscSaveAs (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.04 1.33L12.71 3l.29.71v.33h-.5l-.5.5v-.83l-1.67-1.67H10v4H4v-4H2v10h3l-.5 1H2l-1-1v-10l1-1h8.33l.71.29zM7 5h2V2H7v3zm6.5 0L15 6.5l-.02.69-5.5 5.5-.13.12-.37.37-.1.09-3 1.5-.67-.67 1.5-3 .09-.1.37-.37.12-.13 5.5-5.5h.71zm-6.22 7.24l-.52 1 1.04-.48-.52-.52zm.69-1.03l.79.79 5.15-5.15-.79-.79-5.15 5.15z"}}]})(props);\n};\nfunction VscSave (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.353 1.146l1.5 1.5L15 3v11.5l-.5.5h-13l-.5-.5v-13l.5-.5H13l.353.146zM2 2v12h12V3.208L12.793 2H11v4H4V2H2zm6 0v3h2V2H8z"}}]})(props);\n};\nfunction VscScreenFull (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3 12h10V4H3v8zm2-6h6v4H5V6zM2 6H1V2.5l.5-.5H5v1H2v3zm13-3.5V6h-1V3h-3V2h3.5l.5.5zM14 10h1v3.5l-.5.5H11v-1h3v-3zM2 13h3v1H1.5l-.5-.5V10h1v3z"}}]})(props);\n};\nfunction VscScreenNormal (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3.5 4H1V3h2V1h1v2.5l-.5.5zM13 3V1h-1v2.5l.5.5H15V3h-2zm-1 9.5V15h1v-2h2v-1h-2.5l-.5.5zM1 12v1h2v2h1v-2.5l-.5-.5H1zm11-1.5l-.5.5h-7l-.5-.5v-5l.5-.5h7l.5.5v5zM10 7H6v2h4V7z"}}]})(props);\n};\nfunction VscSearchStop (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.738 3.318a4.5 4.5 0 0 0-.877 5.123A4.48 4.48 0 0 0 6.1 10a4.62 4.62 0 0 0-.1 1v.17c-.16-.11-.32-.22-.47-.34L1.75 14.5 1 13.84l3.8-3.69a5.5 5.5 0 1 1 9.62-3.65c0 .268-.02.535-.06.8a5.232 5.232 0 0 0-.94-.68V6.5a4.5 4.5 0 0 0-7.682-3.182zm3.04 4.356a4 4 0 1 1 4.444 6.652 4 4 0 0 1-4.444-6.652zm.1 5.447A3 3 0 0 0 11 14a3 3 0 0 0 1.74-.55L8.55 9.26A3 3 0 0 0 8 11a3 3 0 0 0 .879 2.121zm.382-4.57l4.19 4.189A3 3 0 0 0 14 11a3 3 0 0 0-3-3 3 3 0 0 0-1.74.55z"}}]})(props);\n};\nfunction VscSearch (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15.25 0a8.25 8.25 0 0 0-6.18 13.72L1 22.88l1.12 1 8.05-9.12A8.251 8.251 0 1 0 15.25.01V0zm0 15a6.75 6.75 0 1 1 0-13.5 6.75 6.75 0 0 1 0 13.5z"}}]})(props);\n};\nfunction VscServerEnvironment (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6 3h4v1H6V3zm0 6h4v1H6V9zm0 2h4v1H6v-1zm9.14 5H.86l1.25-5H4V2a.95.95 0 0 1 .078-.383c.052-.12.123-.226.211-.32a.922.922 0 0 1 .32-.219A1.01 1.01 0 0 1 5 1h6a.95.95 0 0 1 .383.078c.12.052.226.123.32.211a.922.922 0 0 1 .219.32c.052.125.078.256.078.391v9h1.89l1.25 5zM5 13h6V2H5v11zm8.86 2l-.75-3H12v2H4v-2H2.89l-.75 3h11.72z"}}]})(props);\n};\nfunction VscServerProcess (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5V9h-1V6H2v7h7v1H1.5l-.5-.5v-11l.5-.5zM2 5h12V3H2v2zm5 7v-1.094a1.633 1.633 0 0 1-.469-.265l-.945.539-.5-.86.937-.547a1.57 1.57 0 0 1 0-.547l-.937-.546.5-.86.945.54c.151-.12.308-.209.469-.266V7h1v1.094a1.48 1.48 0 0 1 .469.265l.945-.539.5.86-.937.547a1.57 1.57 0 0 1 0 .546l.937.547-.5.86-.945-.54a1.807 1.807 0 0 1-.469.266V12H7zm-.25-2.5c0 .208.073.385.219.531a.723.723 0 0 0 .531.219.723.723 0 0 0 .531-.219.723.723 0 0 0 .219-.531.723.723 0 0 0-.219-.531.723.723 0 0 0-.531-.219.723.723 0 0 0-.531.219.723.723 0 0 0-.219.531zm5.334 5.5v-1.094a1.634 1.634 0 0 1-.469-.265l-.945.539-.5-.86.938-.547a1.572 1.572 0 0 1 0-.547l-.938-.546.5-.86.945.54c.151-.12.308-.209.47-.266V10h1v1.094a1.486 1.486 0 0 1 .468.265l.945-.539.5.86-.937.547a1.562 1.562 0 0 1 0 .546l.937.547-.5.86-.945-.54a1.806 1.806 0 0 1-.469.266V15h-1zm-.25-2.5c0 .208.073.385.219.531a.723.723 0 0 0 .531.219.723.723 0 0 0 .531-.219.723.723 0 0 0 .22-.531.723.723 0 0 0-.22-.531.723.723 0 0 0-.53-.219.723.723 0 0 0-.532.219.723.723 0 0 0-.219.531z"}}]})(props);\n};\nfunction VscServer (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.5 5L2 4.5v-3l.5-.5h11l.5.5v3l-.5.5h-11zM10 2H9v1H8V2H7v1H6V2H5v1H4V2H3v2h10V2h-2v1h-1V2zm-7.5 8L2 9.5v-3l.5-.5h11l.5.5v3l-.5.5h-11zM6 7H5v1H4V7H3v2h10V7h-2v1h-1V7H9v1H8V7H7v1H6V7zm7.5 8l.5-.5v-3l-.5-.5h-11l-.5.5v3l.5.5h11zM3 14v-2h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h2v2H3z"}}]})(props);\n};\nfunction VscSettingsGear (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M19.85 8.75l4.15.83v4.84l-4.15.83 2.35 3.52-3.43 3.43-3.52-2.35-.83 4.15H9.58l-.83-4.15-3.52 2.35-3.43-3.43 2.35-3.52L0 14.42V9.58l4.15-.83L1.8 5.23 5.23 1.8l3.52 2.35L9.58 0h4.84l.83 4.15 3.52-2.35 3.43 3.43-2.35 3.52zm-1.57 5.07l4-.81v-2l-4-.81-.54-1.3 2.29-3.43-1.43-1.43-3.43 2.29-1.3-.54-.81-4h-2l-.81 4-1.3.54-3.43-2.29-1.43 1.43L6.38 8.9l-.54 1.3-4 .81v2l4 .81.54 1.3-2.29 3.43 1.43 1.43 3.43-2.29 1.3.54.81 4h2l.81-4 1.3-.54 3.43 2.29 1.43-1.43-2.29-3.43.54-1.3zm-8.186-4.672A3.43 3.43 0 0 1 12 8.57 3.44 3.44 0 0 1 15.43 12a3.43 3.43 0 1 1-5.336-2.852zm.956 4.274c.281.188.612.288.95.288A1.7 1.7 0 0 0 13.71 12a1.71 1.71 0 1 0-2.66 1.422z"}}]})(props);\n};\nfunction VscSettings (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.5 2h-1v5h1V2zm6.1 5H6.4L6 6.45v-1L6.4 5h3.2l.4.5v1l-.4.5zm-5 3H1.4L1 9.5v-1l.4-.5h3.2l.4.5v1l-.4.5zm3.9-8h-1v2h1V2zm-1 6h1v6h-1V8zm-4 3h-1v3h1v-3zm7.9 0h3.19l.4-.5v-.95l-.4-.5H11.4l-.4.5v.95l.4.5zm2.1-9h-1v6h1V2zm-1 10h1v2h-1v-2z"}}]})(props);\n};\nfunction VscShield (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.246 14.713a27.792 27.792 0 0 1-1.505-.953c-.501-.34-.983-.707-1.444-1.1-.458-.395-.888-.82-1.288-1.274-.4-.455-.753-.95-1.05-1.478a7.8 7.8 0 0 1-.7-1.69A7.041 7.041 0 0 1 2 6.3V3.1l.5-.5c.333 0 .656-.011.97-.036.296-.023.591-.066.882-.128.284-.062.562-.148.832-.256.284-.118.557-.261.816-.427a4.83 4.83 0 0 1 1.184-.565 4.8 4.8 0 0 1 2-.142 4.018 4.018 0 0 1 1.237.383c.199.097.392.204.58.322.26.167.535.31.821.428.27.109.547.194.831.256.291.062.587.106.884.129.311.024.634.035.967.035l.5.5v3.2a7.043 7.043 0 0 1-.256 1.919 7.804 7.804 0 0 1-.7 1.69 8.751 8.751 0 0 1-1.05 1.478c-.4.452-.829.877-1.286 1.27a15.94 15.94 0 0 1-1.448 1.1 28.71 28.71 0 0 1-1.51.956h-.508zM3 3.59V6.3c-.004.555.07 1.11.22 1.645a6.7 6.7 0 0 0 .61 1.473c.263.467.575.905.93 1.308.37.417.766.81 1.188 1.174.432.368.883.712 1.352 1.03.4.267.8.523 1.2.769.4-.242.8-.498 1.2-.768.47-.319.923-.663 1.355-1.031.421-.364.817-.756 1.186-1.172a7.8 7.8 0 0 0 .93-1.308c.261-.465.466-.96.61-1.473.15-.537.223-1.09.22-1.647V3.59c-.159 0-.313-.012-.465-.023l-.079-.006a7.95 7.95 0 0 1-1.018-.147 6.112 6.112 0 0 1-1.976-.814 5.166 5.166 0 0 0-.482-.27 3.123 3.123 0 0 0-.943-.29 3.686 3.686 0 0 0-1.558.106c-.332.108-.649.26-.94.452-.312.2-.64.372-.983.513a6.4 6.4 0 0 1-1 .307c-.335.07-.675.12-1.017.146-.174.01-.355.02-.54.026zm6.065 4.3a1.5 1.5 0 1 0-1.13 0L7.5 10.5h2l-.435-2.61z"}}]})(props);\n};\nfunction VscSignIn (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.02 3.77l.01-.01.99.99V2.5l-.5-.5h-9l-.51.5v.493L2 3v10.29l.36.46 5 1.72L8 15v-1h3.52l.5-.5v-2.25l-1 1V13H8V4.71l-.33-.46L4.036 3h6.984v.77zM7 14.28l-4-1.34V3.72l4 1.34v9.22zm3.09-6.75h4.97v1h-4.93l1.59 1.6-.71.7-2.47-2.46v-.71l2.49-2.48.7.7-1.64 1.65z"}}]})(props);\n};\nfunction VscSignOut (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.02 3.77v1.56l1-.99V2.5l-.5-.5h-9l-.5.5v.486L2 3v10.29l.36.46 5 1.72L8 15v-1h3.52l.5-.5v-1.81l-1-1V13H8V4.71l-.33-.46L4.036 3h6.984v.77zM7 14.28l-4-1.34V3.72l4 1.34v9.22zm6.52-5.8H8.55v-1h4.93l-1.6-1.6.71-.7 2.47 2.46v.71l-2.49 2.48-.7-.7 1.65-1.65z"}}]})(props);\n};\nfunction VscSmiley (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4.111 2.18a7 7 0 1 1 7.778 11.64A7 7 0 0 1 4.11 2.18zm.556 10.809a6 6 0 1 0 6.666-9.978 6 6 0 0 0-6.666 9.978zM6.5 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm5 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM8 11a3 3 0 0 1-2.65-1.58l-.87.48a4 4 0 0 0 7.12-.16l-.9-.43A3 3 0 0 1 8 11z"}}]})(props);\n};\nfunction VscSortPrecedence (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7 2L6 3v3h1V3h7v2.453l.207-.16.793.793V3l-1-1H7zm1 2h2v2H8V4zM5 9H3v2h2V9zM2 7L1 8v5l1 1h7l1-1V8L9 7H2zm0 6V8h7v5H2zm6-3H6v2h2v-2zm5-6h-1v3.864l-1.182-1.182-.707.707 2.035 2.036h.708l2.035-2.036-.707-.707L13 7.864V4z"}}]})(props);\n};\nfunction VscSourceControl (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M21.007 8.222A3.738 3.738 0 0 0 15.045 5.2a3.737 3.737 0 0 0 1.156 6.583 2.988 2.988 0 0 1-2.668 1.67h-2.99a4.456 4.456 0 0 0-2.989 1.165V7.4a3.737 3.737 0 1 0-1.494 0v9.117a3.776 3.776 0 1 0 1.816.099 2.99 2.99 0 0 1 2.668-1.667h2.99a4.484 4.484 0 0 0 4.223-3.039 3.736 3.736 0 0 0 3.25-3.687zM4.565 3.738a2.242 2.242 0 1 1 4.484 0 2.242 2.242 0 0 1-4.484 0zm4.484 16.441a2.242 2.242 0 1 1-4.484 0 2.242 2.242 0 0 1 4.484 0zm8.221-9.715a2.242 2.242 0 1 1 0-4.485 2.242 2.242 0 0 1 0 4.485z"}}]})(props);\n};\nfunction VscSplitHorizontal (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 1H3L2 2v11l1 1h11l1-1V2l-1-1zM8 13H3V2h5v11zm6 0H9V2h5v11z"}}]})(props);\n};\nfunction VscSplitVertical (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 1H3L2 2v11l1 1h11l1-1V2l-1-1zm0 12H3V8h11v5zm0-6H3V2h11v5z"}}]})(props);\n};\nfunction VscSquirrel (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.558 2.642a3.698 3.698 0 0 0-.123-.01A1.47 1.47 0 0 0 3.999 1.52v1.307a4.898 4.898 0 0 0-2.993 3.587v.39c.459.836 1.906 1.13 2.154 1.18.027.006.04.009.035.009-2.419.32-2.19 2.249-2.19 2.249a1 1 0 0 0 1 .93c.272-.019.538-.08.79-.18h2.06a3 3 0 0 0-.36 1h-.32a2.55 2.55 0 0 0-2.17 2.528.42.42 0 0 0 .39.48h6.677a3.76 3.76 0 0 0 3.929-4.158 3.649 3.649 0 0 0-.75-2.09l-.11-.14c-.43-.55-.68-.909-.55-1.289.13-.38.365-.4.365-.4s.185-.03.455.09c.22.128.46.22.71.27a1.58 1.58 0 0 0 1.736-.905c.095-.208.143-.435.143-.664.006-.718-.33-1.455-.725-2.088a4.998 4.998 0 0 0-1.554-1.57 3.998 3.998 0 0 0-2.639-.4 3.049 3.049 0 0 0-1.67.89 3.56 3.56 0 0 0-.779 1.359 4.358 4.358 0 0 0-.636-.747v-.159A1.47 1.47 0 0 0 5.558 1.52v1.122zm5.304 8.739c.111.741.22 1.821-.867 2.442-.296.103-.608.16-.923.167H3.215a1 1 0 0 1 .92-1h1.279v-.499a1.79 1.79 0 0 1 1.653-1.825l-.626-.887c-.236.067-.463.153-.577.233H2.655a.754.754 0 0 0-.264.07c-.138.055-.274.109-.396.03-.2-.13.11-1.12 1.01-1.12h1c.49 0 .57-.54.57-.54l.28-1.129a3.389 3.389 0 0 1-2.85-.93 3.389 3.389 0 0 1 3.14-2.658l.083.002c.26.008.435.014.776.168.93.42 2.149 2.469 2.149 2.469l.06.09h.17v-.07c-.06-.443-.02-1.464.116-1.89.137-.424.367-.814.673-1.14a2.349 2.349 0 0 1 1.3-.659 2.639 2.639 0 0 1 1.86.29c.46.284.85.67 1.139 1.127.289.457.476.836.535 1.374-.001.02 0 .047.002.081.007.143.02.39-.128.547-.127.135-.448.23-.67.18a1.57 1.57 0 0 1-.45-.18 1.33 1.33 0 0 0-1.139-.13 1.42 1.42 0 0 0-.94 1 2.318 2.318 0 0 0 .64 2.238l.11.14c.347.434.546.966.57 1.52a2.999 2.999 0 0 1-.306 1.425 2.708 2.708 0 0 0-.464-1.304l-.37.368zM4.24 5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1z"}}]})(props);\n};\nfunction VscStarEmpty (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.595 6.252L8 1 6.405 6.252H1l4.373 3.4L3.75 15 8 11.695 12.25 15l-1.623-5.348L15 6.252H9.595zm-7.247.47H6.72L8 2.507 6.72 6.722H2.348zm3.537 2.75l-1.307 4.305 1.307-4.305zm7.767-2.75H9.28h4.372zm-8.75.9h2.366L8 5.214l.732 2.41h2.367l-1.915 1.49.731 2.409L8 10.032l-1.915 1.49.731-2.41-1.915-1.49z"}}]})(props);\n};\nfunction VscStarFull (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.595 6.252L8 1 6.405 6.252H1l4.373 3.4L3.75 15 8 11.695 12.25 15l-1.623-5.348L15 6.252H9.595z"}}]})(props);\n};\nfunction VscStarHalf (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6.405 6.252L8 1l1.595 5.252H15l-4.373 3.4L12.25 15 8 11.695 3.75 15l1.623-5.348L1 6.252h5.405zM8 10.032l1.915 1.49-.731-2.41 1.915-1.49H8.732L8 5.214v4.82zm0-7.525zm5.652 4.215H9.28h4.372z"}}]})(props);\n};\nfunction VscStopCircle (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M6 6h4v4H6z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z"}}]})(props);\n};\nfunction VscSymbolArray (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2l-.5.5v11l.5.5H4v-1H2V3h2V2H1.5zm13 12l.5-.5v-11l-.5-.5H12v1h2v10h-2v1h2.5z"}}]})(props);\n};\nfunction VscSymbolBoolean (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 3.5l.5-.5h13l.5.5v9l-.5.5h-13l-.5-.5v-9zM14 4H8v3.493h-.5l-3.574-.005 2.09-2.09-.707-.707-2.955 2.955v.708l2.955 2.955.707-.707-2.114-2.114 3.996.005H8v-.986l3.907.005-2.114-2.114.707-.707 2.956 2.955v.708L10.5 11.309l-.707-.707 2.09-2.09L8 8.507V12h6V4z"}}]})(props);\n};\nfunction VscSymbolClass (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M11.34 9.71h.71l2.67-2.67v-.71L13.38 5h-.7l-1.82 1.81h-5V5.56l1.86-1.85V3l-2-2H5L1 5v.71l2 2h.71l1.14-1.15v5.79l.5.5H10v.52l1.33 1.34h.71l2.67-2.67v-.71L13.37 10h-.7l-1.86 1.85h-5v-4H10v.48l1.34 1.38zm1.69-3.65l.63.63-2 2-.63-.63 2-2zm0 5l.63.63-2 2-.63-.63 2-2zM3.35 6.65l-1.29-1.3 3.29-3.29 1.3 1.29-3.3 3.3z"}}]})(props);\n};\nfunction VscSymbolColor (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 1.003a7 7 0 0 0-7 7v.43c.09 1.51 1.91 1.79 3 .7a1.87 1.87 0 0 1 2.64 2.64c-1.1 1.16-.79 3.07.8 3.2h.6a7 7 0 1 0 0-14l-.04.03zm0 13h-.52a.58.58 0 0 1-.36-.14.56.56 0 0 1-.15-.3 1.24 1.24 0 0 1 .35-1.08 2.87 2.87 0 0 0 0-4 2.87 2.87 0 0 0-4.06 0 1 1 0 0 1-.9.34.41.41 0 0 1-.22-.12.42.42 0 0 1-.1-.29v-.37a6 6 0 1 1 6 6l-.04-.04zM9 3.997a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 7.007a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-7-5a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm7-1a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM13 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"}}]})(props);\n};\nfunction VscSymbolConstant (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 6h8v1H4V6zm8 3H4v1h8V9z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z"}}]})(props);\n};\nfunction VscSymbolEnumMember (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7 3l1-1h6l1 1v5l-1 1h-4V8h4V3H8v3H7V3zm2 6V8L8 7H2L1 8v5l1 1h6l1-1V9zM8 8v5H2V8h6zm1.414-1L9 6.586V6h4v1H9.414zM9 4h4v1H9V4zm-2 6H3v1h4v-1z"}}]})(props);\n};\nfunction VscSymbolEnum (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14 2H8L7 3v3h1V3h6v5h-4v1h4l1-1V3l-1-1zM9 6h4v1H9.41L9 6.59V6zM7 7H2L1 8v5l1 1h6l1-1V8L8 7H7zm1 6H2V8h6v5zM3 9h4v1H3V9zm0 2h4v1H3v-1zm6-7h4v1H9V4z"}}]})(props);\n};\nfunction VscSymbolEvent (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.414 1.56L8.312 1h3.294l.818 1.575L10.236 6h1.781l.72 1.695L5.618 15l-1.602-1.163L6.119 10H4.898L4 8.56l3.414-7zM7.78 9L4.9 14.305 12.018 7H8.312l3.294-5H8.312L4.898 9H7.78z"}}]})(props);\n};\nfunction VscSymbolField (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.45 4.5l-5-2.5h-.9l-7 3.5-.55.89v4.5l.55.9 5 2.5h.9l7-3.5.55-.9v-4.5l-.55-.89zm-8 8.64l-4.5-2.25V7.17l4.5 2v3.97zm.5-4.8L2.29 6.23l6.66-3.34 4.67 2.34-6.67 3.11zm7 1.55l-6.5 3.25V9.21l6.5-3v3.68z"}}]})(props);\n};\nfunction VscSymbolFile (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.85 4.44l-3.28-3.3-.35-.14H2.5l-.5.5v13l.5.5h11l.5-.5V4.8l-.15-.36zM13 5h-3V2l3 3zM3 14V2h6v3.5l.5.5H13v8H3z"}}]})(props);\n};\nfunction VscSymbolInterface (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M11.496 4a3.49 3.49 0 0 0-3.46 3h-3.1a2 2 0 1 0 0 1h3.1a3.5 3.5 0 1 0 3.46-4zm0 6a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5z"}}]})(props);\n};\nfunction VscSymbolKey (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.223 10.933c.326.192.699.29 1.077.282a2.159 2.159 0 0 0 1.754-.842 3.291 3.291 0 0 0 .654-2.113 2.886 2.886 0 0 0-.576-1.877 1.99 1.99 0 0 0-1.634-.733 2.294 2.294 0 0 0-1.523.567V3.475h-.991V11.1h.995v-.344c.076.066.158.125.244.177zM7.85 6.7c.186-.079.388-.113.59-.1a1.08 1.08 0 0 1 .896.428c.257.363.382.802.357 1.245a2.485 2.485 0 0 1-.4 1.484 1.133 1.133 0 0 1-.96.508 1.224 1.224 0 0 1-.976-.417A1.522 1.522 0 0 1 6.975 8.8v-.6a1.722 1.722 0 0 1 .393-1.145c.13-.154.296-.276.482-.355zM3.289 5.675a3.03 3.03 0 0 0-.937.162 2.59 2.59 0 0 0-.8.4l-.1.077v1.2l.423-.359a2.1 2.1 0 0 1 1.366-.572.758.758 0 0 1 .661.282c.15.232.23.503.231.779L2.9 7.825a2.6 2.6 0 0 0-1.378.575 1.65 1.65 0 0 0-.022 2.336 1.737 1.737 0 0 0 1.253.454 1.96 1.96 0 0 0 1.107-.332c.102-.068.197-.145.286-.229v.444h.941V7.715a2.193 2.193 0 0 0-.469-1.5 1.687 1.687 0 0 0-1.329-.54zm.857 3.041c.02.418-.12.829-.391 1.148a1.221 1.221 0 0 1-.955.422.832.832 0 0 1-.608-.2.833.833 0 0 1 0-1.091c.281-.174.6-.277.93-.3l1.02-.148.004.169zm8.313 2.317c.307.13.64.193.973.182.495.012.983-.114 1.41-.365l.123-.075.013-.007V9.615l-.446.32c-.316.224-.696.34-1.084.329A1.3 1.3 0 0 1 12.4 9.8a1.975 1.975 0 0 1-.4-1.312 2.01 2.01 0 0 1 .453-1.381A1.432 1.432 0 0 1 13.6 6.6a1.8 1.8 0 0 1 .971.279l.43.265V5.97l-.17-.073a2.9 2.9 0 0 0-1.17-.247 2.52 2.52 0 0 0-1.929.817 2.9 2.9 0 0 0-.747 2.049c-.028.707.21 1.4.67 1.939.222.249.497.446.804.578z"}}]})(props);\n};\nfunction VscSymbolKeyword (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 4h-5V3h5v1zm-1 3h-2v1h2V7zm-4 0H1v1h9V7zm2 6H1v1h11v-1zm-5-3H1v1h6v-1zm8 0h-5v1h5v-1zM8 2v3H1V2h7zM7 3H2v1h5V3z"}}]})(props);\n};\nfunction VscSymbolMethod (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.51 4l-5-3h-1l-5 3-.49.86v6l.49.85 5 3h1l5-3 .49-.85v-6L13.51 4zm-6 9.56l-4.5-2.7V5.7l4.5 2.45v5.41zM3.27 4.7l4.74-2.84 4.74 2.84-4.74 2.59L3.27 4.7zm9.74 6.16l-4.5 2.7V8.15l4.5-2.45v5.16z"}}]})(props);\n};\nfunction VscSymbolMisc (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 2h8v4c.341.035.677.112 1 .23V1H3v8.48l1-1.75V2zm2.14 8L5 8 4 9.75 3.29 11 1 15h8l-2.29-4-.57-1zm-3.42 4l1.72-3L5 10l.56 1 1.72 3H2.72zm6.836-6.41a3.5 3.5 0 1 1 3.888 5.82 3.5 3.5 0 0 1-3.888-5.82zm.555 4.989a2.5 2.5 0 1 0 2.778-4.157 2.5 2.5 0 0 0-2.778 4.157z"}}]})(props);\n};\nfunction VscSymbolNamespace (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M6 2.984V2h-.09c-.313 0-.616.062-.909.185a2.33 2.33 0 0 0-.775.53 2.23 2.23 0 0 0-.493.753v.001a3.542 3.542 0 0 0-.198.83v.002a6.08 6.08 0 0 0-.024.863c.012.29.018.58.018.869 0 .203-.04.393-.117.572v.001a1.504 1.504 0 0 1-.765.787 1.376 1.376 0 0 1-.558.115H2v.984h.09c.195 0 .38.04.556.121l.001.001c.178.078.329.184.455.318l.002.002c.13.13.233.285.307.465l.001.002c.078.18.117.368.117.566 0 .29-.006.58-.018.869-.012.296-.004.585.024.87v.001c.033.283.099.558.197.824v.001c.106.273.271.524.494.753.223.23.482.407.775.53.293.123.596.185.91.185H6v-.984h-.09c-.199 0-.387-.038-.562-.115a1.613 1.613 0 0 1-.457-.32 1.659 1.659 0 0 1-.309-.467c-.074-.18-.11-.37-.11-.573 0-.228.003-.453.011-.672.008-.228.008-.45 0-.665a4.639 4.639 0 0 0-.055-.64 2.682 2.682 0 0 0-.168-.609A2.284 2.284 0 0 0 3.522 8a2.284 2.284 0 0 0 .738-.955c.08-.192.135-.393.168-.602.033-.21.051-.423.055-.64.008-.22.008-.442 0-.666-.008-.224-.012-.45-.012-.678a1.47 1.47 0 0 1 .877-1.354 1.33 1.33 0 0 1 .563-.121H6zm4 10.032V14h.09c.313 0 .616-.062.909-.185.293-.123.552-.3.775-.53.223-.23.388-.48.493-.753v-.001c.1-.266.165-.543.198-.83v-.002c.028-.28.036-.567.024-.863-.012-.29-.018-.58-.018-.869 0-.203.04-.393.117-.572v-.001a1.504 1.504 0 0 1 .765-.787c.176-.077.362-.115.558-.115H14v-.984h-.09c-.195 0-.38-.04-.556-.121l-.001-.001a1.376 1.376 0 0 1-.455-.318l-.002-.002a1.414 1.414 0 0 1-.307-.465l-.001-.002a1.405 1.405 0 0 1-.117-.566c0-.29.006-.58.018-.869a6.19 6.19 0 0 0-.024-.87v-.001a3.542 3.542 0 0 0-.197-.824v-.001a2.23 2.23 0 0 0-.494-.753 2.33 2.33 0 0 0-.775-.53 2.325 2.325 0 0 0-.91-.185H10v.984h.09c.2 0 .386.038.562.115.174.082.326.188.457.32.127.134.23.29.309.467.074.18.11.37.11.573 0 .228-.003.452-.011.672-.008.228-.008.45 0 .665.004.222.022.435.055.64.033.214.089.416.168.609a2.282 2.282 0 0 0 .738.955 2.282 2.282 0 0 0-.738.955 2.7 2.7 0 0 0-.168.602c-.033.21-.051.423-.055.64-.008.22-.008.442 0 .666.008.224.012.45.012.678a1.47 1.47 0 0 1-.42 1.035 1.466 1.466 0 0 1-.457.319 1.33 1.33 0 0 1-.563.121H10z"}}]})(props);\n};\nfunction VscSymbolNumeric (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11 1v4h4v1h-4v4h4v1h-4v4h-1v-4H6v4H5v-4H1v-1h4V6H1V5h4V1h1v4h4V1h1zM6 6v4h4V6H6z"}}]})(props);\n};\nfunction VscSymbolOperator (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.873 1.1c.335.136.602.398.745.73.072.17.109.352.107.537a1.34 1.34 0 0 1-.61 1.135 1.359 1.359 0 0 1-.753.223A1.355 1.355 0 0 1 1 2.362a1.355 1.355 0 0 1 .83-1.256A1.37 1.37 0 0 1 2.873 1.1zm-.298 1.765a.551.551 0 0 0 .332-.5.548.548 0 1 0-.332.5zM6.43 1.109L1.11 6.43l.686.687 5.32-5.32-.686-.687zM11.5 9h1v2.5H15v1h-2.5V15h-1v-2.5H9v-1h2.5V9zm-5.732.525l.707.707L4.707 12l1.768 1.768-.707.707L4 12.707l-1.768 1.768-.707-.707L3.293 12l-1.768-1.768.707-.707L4 11.293l1.768-1.768zm1.35-4.195a1.353 1.353 0 0 0-1.256-.83 1.355 1.355 0 0 0-1.256.83 1.362 1.362 0 0 0 1.257 1.895A1.358 1.358 0 0 0 7.118 5.33zm-.753.745a.553.553 0 0 1-.289.29.547.547 0 0 1-.599-.117.529.529 0 0 1-.117-.173.544.544 0 0 1 .716-.715.565.565 0 0 1 .173.116.549.549 0 0 1 .116.599zM14 3h-4v1h4V3z"}}]})(props);\n};\nfunction VscSymbolParameter (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11 6h-1v-.5a.5.5 0 0 0-.5-.5H8.479v5.5a.5.5 0 0 0 .5.5h.5v1h-3v-1h.5a.5.5 0 0 0 .5-.5V5H6.5a.5.5 0 0 0-.5.5V6H5V4h6v2zm2.914 2.048l-1.462-1.462.707-.707 1.816 1.816v.707l-1.768 1.767-.707-.707 1.414-1.414zM3.548 9.462L2.086 8 3.5 6.586l-.707-.707-1.768 1.767v.708l1.816 1.815.707-.707z"}}]})(props);\n};\nfunction VscSymbolProperty (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M2.807 14.975a1.75 1.75 0 0 1-1.255-.556 1.684 1.684 0 0 1-.544-1.1A1.72 1.72 0 0 1 1.36 12.1c1.208-1.27 3.587-3.65 5.318-5.345a4.257 4.257 0 0 1 .048-3.078 4.095 4.095 0 0 1 1.665-1.969 4.259 4.259 0 0 1 4.04-.36l.617.268-2.866 2.951 1.255 1.259 2.944-2.877.267.619a4.295 4.295 0 0 1 .04 3.311 4.198 4.198 0 0 1-.923 1.392 4.27 4.27 0 0 1-.743.581 4.217 4.217 0 0 1-3.812.446c-1.098 1.112-3.84 3.872-5.32 5.254a1.63 1.63 0 0 1-1.084.423zm7.938-13.047a3.32 3.32 0 0 0-1.849.557c-.213.13-.412.284-.591.458a3.321 3.321 0 0 0-.657 3.733l.135.297-.233.227c-1.738 1.697-4.269 4.22-5.485 5.504a.805.805 0 0 0 .132 1.05.911.911 0 0 0 .298.22c.1.044.209.069.319.072a.694.694 0 0 0 .45-.181c1.573-1.469 4.612-4.539 5.504-5.44l.23-.232.294.135a3.286 3.286 0 0 0 3.225-.254 3.33 3.33 0 0 0 .591-.464 3.28 3.28 0 0 0 .964-2.358c0-.215-.021-.43-.064-.642L11.43 7.125 8.879 4.578l2.515-2.59a3.286 3.286 0 0 0-.65-.06z"}}]})(props);\n};\nfunction VscSymbolRuler (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M4 1L3 2v12l1 1h8l1-1V2l-1-1H4zm0 2V2h8v12H4v-1h2v-1H4v-2h4V9H4V7h2V6H4V4h4V3H4z"}}]})(props);\n};\nfunction VscSymbolSnippet (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.5 1l-.5.5V13h1V2h11v11h1V1.5l-.5-.5h-12zM2 15v-1h1v1H2zm3-1H4v1h1v-1zm1 0h1v1H6v-1zm3 0H8v1h1v-1zm1 0h1v1h-1v-1zm5 1v-1h-1v1h1zm-3-1h1v1h-1v-1z"}}]})(props);\n};\nfunction VscSymbolString (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 2L1 3v9l1 1h12l1-1V3l-1-1H2zm0 10V3h12v9H2zm3.356-3.07H6V7.22C6 6.408 5.685 6 5.056 6c-.135 0-.285.024-.45.073a1.444 1.444 0 0 0-.388.167v.665c.237-.203.487-.304.75-.304.261 0 .392.156.392.469l-.6.103c-.506.086-.76.406-.76.961 0 .263.061.473.183.631A.61.61 0 0 0 4.69 9c.29 0 .509-.16.657-.48h.009v.41zm.004-1.355v.193a.75.75 0 0 1-.12.436.368.368 0 0 1-.313.17.276.276 0 0 1-.22-.095.38.38 0 0 1-.08-.248c0-.222.11-.351.332-.389l.4-.067zM7.6 8.626h-.007v.31H7V5h.593v1.677h.008c.146-.31.355-.465.625-.465.248 0 .44.118.573.353.134.236.201.557.201.966 0 .443-.078.798-.235 1.067C8.61 8.866 8.4 9 8.138 9c-.237 0-.416-.125-.537-.374zm-.016-1.121v.272a.78.78 0 0 0 .107.426c.071.113.163.169.274.169.135 0 .24-.072.314-.216.075-.145.113-.35.113-.615 0-.22-.035-.39-.104-.514-.067-.124-.164-.187-.29-.187-.12 0-.219.062-.298.185a.887.887 0 0 0-.116.48zM11.262 9c.321 0 .567-.058.738-.173v-.71a.9.9 0 0 1-.552.207.619.619 0 0 1-.5-.215c-.12-.145-.181-.345-.181-.598 0-.26.063-.464.189-.612a.644.644 0 0 1 .516-.223c.194 0 .37.069.528.207v-.749c-.129-.09-.338-.134-.626-.134-.417 0-.751.14-1.001.422-.249.28-.373.662-.373 1.148 0 .42.116.764.349 1.03.232.267.537.4.913.4z"}}]})(props);\n};\nfunction VscSymbolStructure (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 2L1 3v3l1 1h12l1-1V3l-1-1H2zm0 1h12v3H2V3zm-1 7l1-1h3l1 1v3l-1 1H2l-1-1v-3zm2 0H2v3h3v-3H3zm7 0l1-1h3l1 1v3l-1 1h-3l-1-1v-3zm2 0h-1v3h3v-3h-2z"}}]})(props);\n};\nfunction VscSymbolVariable (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2 5h2V4H1.5l-.5.5v8l.5.5H4v-1H2V5zm12.5-1H12v1h2v7h-2v1h2.5l.5-.5v-8l-.5-.5zm-2.74 2.57L12 7v2.51l-.3.45-4.5 2h-.46l-2.5-1.5-.24-.43v-2.5l.3-.46 4.5-2h.46l2.5 1.5zM5 9.71l1.5.9V9.28L5 8.38v1.33zm.58-2.15l1.45.87 3.39-1.5-1.45-.87-3.39 1.5zm1.95 3.17l3.5-1.56v-1.4l-3.5 1.55v1.41z"}}]})(props);\n};\nfunction VscSyncIgnored (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.468 3.687l-.757-.706a6 6 0 0 1 9.285 4.799L15.19 6.6l.75.76-2.09 2.07-.76-.01L11 7.31l.76-.76 1.236 1.25a5 5 0 0 0-7.528-4.113zm4.55 8.889l.784.73a6 6 0 0 1-8.796-5.04L.78 9.5 0 8.73l2.09-2.07.76.01 2.09 2.12-.76.76-1.167-1.18a5 5 0 0 0 7.005 4.206z"}},{"tag":"path","attr":{"d":"M1.123 2.949l.682-.732L13.72 13.328l-.682.732z"}}]})(props);\n};\nfunction VscSync (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.006 8.267L.78 9.5 0 8.73l2.09-2.07.76.01 2.09 2.12-.76.76-1.167-1.18a5 5 0 0 0 9.4 1.983l.813.597a6 6 0 0 1-11.22-2.683zm10.99-.466L11.76 6.55l-.76.76 2.09 2.11.76.01 2.09-2.07-.75-.76-1.194 1.18a6 6 0 0 0-11.11-2.92l.81.594a5 5 0 0 1 9.3 2.346z"}}]})(props);\n};\nfunction VscTable (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.5 2h-12l-.5.5v11l.5.5h12l.5-.5v-11l-.5-.5zM2 3h11v1H2V3zm7 4H6V5h3v2zm0 1v2H6V8h3zM2 5h3v2H2V5zm0 3h3v2H2V8zm0 5v-2h3v2H2zm4 0v-2h3v2H6zm7 0h-3v-2h3v2zm0-3h-3V8h3v2zm-3-3V5h3v2h-3z"}}]})(props);\n};\nfunction VscTag (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.2 2H8.017l-.353.146L1 8.81v.707L6.183 14.7h.707l2.215-2.215A4.48 4.48 0 0 0 15.65 9c.027-.166.044-.332.051-.5a4.505 4.505 0 0 0-2-3.74V2.5l-.5-.5zm-.5 2.259A4.504 4.504 0 0 0 11.2 4a.5.5 0 1 0 0 1 3.5 3.5 0 0 1 1.5.338v2.138L8.775 11.4a.506.506 0 0 0-.217.217l-2.022 2.022-4.475-4.476L8.224 3H12.7v1.259zm1 1.792a3.5 3.5 0 0 1 1 2.449 3.438 3.438 0 0 1-.051.5 3.487 3.487 0 0 1-4.793 2.735l3.698-3.698.146-.354V6.051z"}}]})(props);\n};\nfunction VscTasklist (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.57 6.699l5.693-4.936L8.585 1 3.273 5.596l-1.51-1.832L1 4.442l1.85 2.214.72.043zM15 5H6.824l2.307-2H15v2zM6 7h9v2H6V7zm9 4H6v2h9v-2z"}}]})(props);\n};\nfunction VscTelescope (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.24 1l.59.24 2.11 4.93-.23.59-3.29 1.41-.59-.24-.17-.41L6.1 9l-.58-.19-.16-.38L2.8 9.49l-.58-.24-.72-1.67.28-.59 2.5-1.06-.18-.41.24-.58L7.9 3.41 7.72 3 8 2.42 11.24 1zM2.5 7.64l.35.85 2.22-.91-.37-.85-2.2.91zm2.74-2.12l1.11 2.45 3-1.28-1.11-2.44-3 1.27zM8.79 3l1.86 4.11 2.29-1.01L11.18 2 8.72 3h.07zM8.5 9.1l3.02 4.9h-1.17l-1.88-3.03v4h-1V9.82L5.58 14h-1.1l1.7-3.9 2.32-1z"}}]})(props);\n};\nfunction VscTerminalBash (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.655 3.56L8.918.75a1.785 1.785 0 0 0-1.82 0L2.363 3.56a1.889 1.889 0 0 0-.921 1.628v5.624a1.889 1.889 0 0 0 .913 1.627l4.736 2.812a1.785 1.785 0 0 0 1.82 0l4.736-2.812a1.888 1.888 0 0 0 .913-1.627V5.188a1.889 1.889 0 0 0-.904-1.627zm-3.669 8.781v.404a.149.149 0 0 1-.07.124l-.239.137c-.038.02-.07 0-.07-.053v-.396a.78.78 0 0 1-.545.053.073.073 0 0 1-.027-.09l.086-.365a.153.153 0 0 1 .071-.096.048.048 0 0 1 .038 0 .662.662 0 0 0 .497-.063.662.662 0 0 0 .37-.567c0-.206-.112-.292-.384-.293-.344 0-.661-.066-.67-.574A1.47 1.47 0 0 1 9.6 9.437V9.03a.147.147 0 0 1 .07-.126l.231-.147c.038-.02.07 0 .07.054v.409a.754.754 0 0 1 .453-.055.073.073 0 0 1 .03.095l-.081.362a.156.156 0 0 1-.065.09.055.055 0 0 1-.035 0 .6.6 0 0 0-.436.072.549.549 0 0 0-.331.486c0 .185.098.242.425.248.438 0 .627.199.632.639a1.568 1.568 0 0 1-.576 1.185zm2.481-.68a.094.094 0 0 1-.036.092l-1.198.727a.034.034 0 0 1-.04.003.035.035 0 0 1-.016-.037v-.31a.086.086 0 0 1 .055-.076l1.179-.706a.035.035 0 0 1 .056.035v.273zm.827-6.914L8.812 7.515c-.559.331-.97.693-.97 1.367v5.52c0 .404.165.662.413.741a1.465 1.465 0 0 1-.248.025c-.264 0-.522-.072-.748-.207L2.522 12.15a1.558 1.558 0 0 1-.75-1.338V5.188a1.558 1.558 0 0 1 .75-1.34l4.738-2.81a1.46 1.46 0 0 1 1.489 0l4.736 2.812a1.548 1.548 0 0 1 .728 1.083c-.154-.334-.508-.427-.92-.185h.002z"}}]})(props);\n};\nfunction VscTerminalCmd (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.875 7l2.008 5h-.711l-2.008-5h.711zm-5.125.594c-.276 0-.526.041-.75.125a1.542 1.542 0 0 0-.578.375c-.162.166-.287.37-.375.61a2.364 2.364 0 0 0-.133.827c0 .287.04.547.117.781.078.235.196.433.352.594.156.162.346.29.57.383.224.094.48.138.766.133a2.63 2.63 0 0 0 .992-.195l.125.484a1.998 1.998 0 0 1-.492.148 4.381 4.381 0 0 1-.75.07 2.61 2.61 0 0 1-.914-.156 2.207 2.207 0 0 1-.742-.453 1.878 1.878 0 0 1-.485-.742 3.204 3.204 0 0 1-.18-1.023c0-.365.06-.698.18-1 .12-.302.287-.563.5-.782.214-.218.471-.388.774-.507a2.69 2.69 0 0 1 1-.18c.296 0 .536.023.718.07.183.047.315.094.399.14l-.149.493a1.85 1.85 0 0 0-.406-.14 2.386 2.386 0 0 0-.539-.055zM8 8h1v1H8V8zm0 2h1v1H8v-1z"}},{"tag":"path","attr":{"d":"M15.5 1H.5l-.5.5v13l.5.5h15l.5-.5v-13l-.5-.5zM15 14H1V5h14v9zm0-10H1V2h14v2z"}}]})(props);\n};\nfunction VscTerminalDebian (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.084.029a1.276 1.276 0 0 0-.355.05L6.622.065a9.46 9.46 0 0 1 .514-.048c.075-.005.15-.01.224-.017a1.67 1.67 0 0 1-.276.029zm4.127 7.646c.094-.238.172-.436.16-.762l-.133.282c.135-.41.123-.847.112-1.262-.005-.187-.01-.37-.002-.543l-.054-.015c-.048-1.411-1.268-2.911-2.354-3.419-.936-.432-2.376-.506-3.042-.18a.657.657 0 0 1 .212-.085c.107-.031.197-.058.135-.093-.6.06-.778.171-.973.294a1.92 1.92 0 0 1-.635.273c-.11.106.051.063.181.029.129-.035.226-.06-.004.076a1.7 1.7 0 0 1-.303.05c-.26.025-.492.048-.96.532.026.041.11-.009.168-.044.072-.043.106-.063-.054.137C3.07 2.871 1.78 4.31 1.507 4.787l.143.025c-.1.25-.213.461-.313.649-.136.254-.249.464-.273.667a16.97 16.97 0 0 1-.062.635C.907 7.619.79 8.679 1.12 9.06l-.04.406.052.11c.036.079.071.157.12.23l-.093.008c.22.692.338.704.473.717.137.013.291.028.585.757-.084-.028-.17-.06-.293-.226-.015.127.18.508.41.806l-.097.112a.89.89 0 0 0 .27.311c.023.019.045.036.066.055-.372-.203.1.428.371.79.078.104.14.186.159.218l.073-.132c-.01.19.136.433.41.772l.229-.009c.094.186.438.522.647.538l-.139.181c.254.08.321.135.397.195.08.064.17.136.502.253l-.13-.23c.108.095.192.186.273.272.162.176.31.335.62.481.352.123.536.152.74.184.168.026.35.055.649.14a33.82 33.82 0 0 0-.217-.005c-.506-.012-1.056-.025-1.443-.163-3.016-.817-5.776-4.356-5.574-8-.02-.311-.01-.655 0-.961.012-.422.022-.776-.049-.882l.032-.105c.166-.54.365-1.191.742-1.957L.861 3.92v-.002.001c.012.012.106.107.275-.18.04-.09.079-.182.117-.276.08-.19.16-.383.264-.56l.08-.02c.054-.315.533-.744.93-1.1.19-.171.362-.326.46-.443l.02.138C3.541.977 4.414.611 5.074.334c.152-.063.291-.122.414-.176-.107.118.067.082.311.032.15-.03.325-.067.478-.076-.04.023-.082.044-.122.065-.085.045-.17.088-.25.145.26-.062.373-.044.499-.024.109.018.227.036.456.006-.174.025-.384.094-.35.12.245.029.398-.002.537-.03.174-.034.327-.065.61.03L7.625.275c.235.085.409.137.564.183.313.094.55.165 1.067.439a.58.58 0 0 0 .23-.037c.112-.035.218-.069.477.037.014.025.022.046.03.066.03.08.054.143.456.383.056-.022-.097-.162-.22-.274l-.003-.004c1.01.54 2.108 1.692 2.443 2.924-.188-.347-.162-.171-.134.015.018.124.037.253-.006.235.14.377.255.766.325 1.168l-.023-.085c-.102-.368-.3-1.081-.626-1.555-.012.137-.092.122-.165.108-.105-.019-.196-.036-.058.393.081.119.096.074.109.034.015-.047.027-.086.147.164.002.133.034.266.07.414.022.094.046.195.065.306-.034-.006-.07-.07-.106-.13-.045-.076-.087-.147-.117-.101.076.358.201.545.25.572-.009.02-.021.02-.034.021-.027.002-.056.003-.059.167.022.428.102.39.166.361.02-.009.037-.017.051-.01a1.724 1.724 0 0 1-.083.245c-.086.221-.188.48-.106.816a2.356 2.356 0 0 0-.106-.295 5.896 5.896 0 0 1-.046-.117c-.018.151-.01.256-.003.355.013.166.023.312-.094.62.135-.442.12-.841-.007-.649.03.343-.12.642-.254.908-.111.222-.211.42-.184.602l-.161-.222c-.238.344-.22.417-.202.489.015.06.03.12-.105.339.051-.09.041-.112.031-.133-.01-.024-.021-.046.053-.158-.05.003-.17.12-.316.265-.123.121-.265.261-.402.368-1.172.94-2.571 1.062-3.926.556.006-.031-.006-.066-.097-.128-1.148-.88-1.827-1.628-1.591-3.36.068-.051.117-.193.175-.362.09-.263.203-.59.448-.745.245-.541.979-1.04 1.764-1.052.8-.044 1.476.427 1.816.872-.618-.576-1.63-.751-2.493-.324-.882.396-1.405 1.368-1.329 2.336.01-.016.021-.023.03-.03.02-.015.037-.027.048-.108-.027 1.88 2.026 3.258 3.504 2.563l.018.039c.397-.109.497-.205.633-.335.07-.067.148-.142.28-.233a.441.441 0 0 1-.075.085c-.068.067-.143.14-.05.142.166-.043.634-.465.947-.746l.133-.119c.062-.134.051-.177.04-.221-.012-.052-.025-.104.076-.3l.229-.114c.03-.088.062-.168.092-.243zM6.612 10.06a.018.018 0 0 0-.005.016.114.114 0 0 0 .005-.016zm-.005.016c.008.069.269.268.465.369.516.19 1.1.198 1.559.181-.993.415-2.889-.422-3.509-1.532.057.012.168.14.303.297.204.234.462.532.678.605-.213-.17-.377-.387-.53-.61.288.33.637.6 1.019.779a.102.102 0 0 1 .01-.077l.005-.012zM6.752.219a6.612 6.612 0 0 1-.075-.013c.472.014.437.045.283.08.018-.029-.09-.047-.208-.067zM9.63 6.732c.032-.477-.094-.326-.136-.144.019.01.036.059.052.107.028.08.054.158.084.037zm-.211.664a1.68 1.68 0 0 1-.314.703c.006-.061-.038-.074-.083-.086-.092-.026-.183-.052.176-.504a1.113 1.113 0 0 1-.126.242c-.112.184-.21.344.126.133l.033-.06a1.43 1.43 0 0 0 .188-.428zm-1.34 1.247c-.347-.053-.662-.186-.397-.19.221.02.44.02.656-.033a3.544 3.544 0 0 1-.26.223zM6.958.285l-.1.02.094-.008.006-.012zM4.79 8.818l-.038.186c.047.064.092.13.136.195.12.175.237.348.4.483a4.73 4.73 0 0 0-.214-.368c-.08-.13-.169-.272-.285-.496zm.226-.319c.052.108.104.213.185.302l.082.24-.038-.063c-.1-.166-.2-.333-.252-.524l.023.045zm7.474-1.282l-.039.098a4.717 4.717 0 0 1-.462 1.474c.261-.49.43-1.028.501-1.572zM.436 3.426zm.002.022c.008.037.043.028.075.02.06-.015.114-.03-.004.236-.074.052-.119.087-.144.106l-.027.02a.05.05 0 0 1 .008-.017.597.597 0 0 0 .092-.365zM.118 4.76a2.92 2.92 0 0 1-.106.436.588.588 0 0 0-.005-.154c-.013-.105-.025-.197.135-.402a4.009 4.009 0 0 0-.023.12z"}}]})(props);\n};\nfunction VscTerminalLinux (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.281 11.156a.84.84 0 0 1 .375.297c.084.125.143.276.18.453.02.104.044.2.07.29a1.772 1.772 0 0 0 .219.476c.047.073.11.153.188.242.067.073.127.167.18.281a.793.793 0 0 1 .077.328.49.49 0 0 1-.093.305.944.944 0 0 1-.235.219c-.12.083-.245.156-.375.219-.13.062-.26.127-.39.195a3.624 3.624 0 0 0-.555.328c-.156.115-.313.26-.469.438a2.815 2.815 0 0 1-.625.523 1.471 1.471 0 0 1-.383.172c-.13.036-.26.06-.39.07-.302 0-.552-.052-.75-.156-.198-.104-.37-.294-.516-.57-.042-.079-.083-.128-.125-.149a.774.774 0 0 0-.203-.055L8.67 15c-.26-.02-.525-.031-.796-.031a4.28 4.28 0 0 0-.672.054c-.229.037-.456.081-.68.133-.046.01-.093.05-.14.117a1.7 1.7 0 0 1-.196.227 1.106 1.106 0 0 1-.335.219 1.475 1.475 0 0 1-.555.101c-.172 0-.357-.018-.555-.054a1.82 1.82 0 0 1-.531-.18 3.578 3.578 0 0 0-.953-.328c-.313-.057-.643-.11-.992-.156a3.392 3.392 0 0 1-.344-.063.774.774 0 0 1-.29-.133.705.705 0 0 1-.194-.219.78.78 0 0 1-.079-.351c0-.162.021-.318.063-.469.042-.15.065-.31.07-.476 0-.115-.008-.227-.023-.336a3.53 3.53 0 0 1-.032-.352c0-.265.063-.46.188-.586.125-.125.307-.224.547-.297a.99.99 0 0 0 .297-.148 2.27 2.27 0 0 0 .234-.203 1.86 1.86 0 0 0 .203-.242c.063-.089.133-.178.211-.266a.114.114 0 0 0 .024-.07c0-.063-.003-.123-.008-.18l-.016-.188c0-.354.055-.71.164-1.07.11-.36.253-.71.43-1.055a9.08 9.08 0 0 1 .594-.992c.218-.317.435-.612.648-.883a4.35 4.35 0 0 0 .68-1.203c.15-.416.229-.87.234-1.36 0-.207-.01-.413-.031-.616a6.122 6.122 0 0 1-.031-.625c0-.417.047-.792.14-1.125.094-.334.24-.62.438-.86s.456-.419.773-.539C7.474.075 7.854.01 8.296 0c.527 0 .946.104 1.259.313.312.208.552.481.718.82.167.338.274.716.32 1.133.048.416.074.838.079 1.265v.133c0 .214.002.404.008.57a2.527 2.527 0 0 0 .226.977c.073.161.182.336.328.523.25.329.506.66.766.993.26.333.497.677.71 1.03.214.355.389.725.524 1.11.136.386.206.802.211 1.25a3.3 3.3 0 0 1-.164 1.04zm-6.554-8.14c.072 0 .132.018.18.054a.357.357 0 0 1 .109.149.85.85 0 0 1 .054.187c.01.063.016.128.016.196a.282.282 0 0 1-.024.125.27.27 0 0 1-.07.086l-.094.078a.796.796 0 0 0-.093.093.428.428 0 0 1-.149.141 2.129 2.129 0 0 0-.18.117 1.31 1.31 0 0 0-.156.133.264.264 0 0 0-.07.195c0 .047.023.086.07.117a.704.704 0 0 1 .266.305c.052.12.11.237.172.352.062.114.143.21.242.289.099.078.253.117.46.117h.048c.208-.01.406-.065.594-.164.187-.099.375-.203.562-.313a.633.633 0 0 1 .102-.046.37.37 0 0 0 .101-.055l.57-.445a.926.926 0 0 0 .024-.102 2.75 2.75 0 0 0 .016-.11.236.236 0 0 0-.04-.14.4.4 0 0 0-.093-.094.34.34 0 0 0-.133-.054.909.909 0 0 1-.14-.04 1.083 1.083 0 0 1-.352-.14 1.457 1.457 0 0 0-.344-.156c-.02-.006-.036-.021-.047-.047a.983.983 0 0 1-.031-.094.23.23 0 0 1-.008-.102.126.126 0 0 0-.008-.078c0-.062.005-.127.016-.195a.551.551 0 0 1 .07-.195.417.417 0 0 1 .125-.14.411.411 0 0 1 .203-.056c.162 0 .279.06.352.18.073.12.112.25.117.39a.397.397 0 0 1-.039.18.379.379 0 0 0-.04.172c0 .042.014.07.04.086a.26.26 0 0 0 .102.031c.12 0 .197-.028.234-.085a.533.533 0 0 0 .062-.258c0-.12-.01-.253-.03-.399a1.32 1.32 0 0 0-.126-.406.969.969 0 0 0-.242-.313.574.574 0 0 0-.383-.124c-.27 0-.466.067-.586.203-.12.135-.182.338-.187.609 0 .078.005.156.015.234.01.079.016.157.016.235 0 .026-.003.039-.008.039a.218.218 0 0 1-.047-.016 4.263 4.263 0 0 1-.093-.039.774.774 0 0 0-.118-.039.514.514 0 0 0-.203-.008 1.007 1.007 0 0 1-.125.008c-.073 0-.11-.013-.11-.039 0-.078-.004-.177-.015-.297-.01-.12-.036-.24-.078-.36a.995.995 0 0 0-.156-.296c-.063-.078-.156-.12-.281-.125a.323.323 0 0 0-.227.086.905.905 0 0 0-.164.203.64.64 0 0 0-.086.266 5.4 5.4 0 0 1-.031.25 1.459 1.459 0 0 0 .07.406c.026.083.055.156.086.219.031.062.068.093.11.093.025 0 .06-.018.101-.054.042-.037.063-.07.063-.102 0-.016-.008-.026-.024-.031a.147.147 0 0 0-.047-.008c-.036 0-.068-.018-.094-.055a.468.468 0 0 1-.062-.125 5.144 5.144 0 0 1-.047-.148.564.564 0 0 1 .055-.398c.047-.084.133-.128.258-.133zM5.023 15.18c.125 0 .248-.01.368-.032a.97.97 0 0 0 .336-.125.614.614 0 0 0 .234-.242.943.943 0 0 0 .094-.375.816.816 0 0 0-.047-.273.963.963 0 0 0-.133-.25 2.763 2.763 0 0 0-.203-.281 2.763 2.763 0 0 1-.203-.282 62.93 62.93 0 0 1-.29-.43c-.093-.14-.187-.288-.28-.445a8.124 8.124 0 0 1-.235-.406 2.646 2.646 0 0 0-.266-.398 1.203 1.203 0 0 0-.218-.211.469.469 0 0 0-.29-.094.436.436 0 0 0-.296.11 2.26 2.26 0 0 0-.258.265 3.241 3.241 0 0 1-.297.305c-.11.099-.25.177-.422.234a.744.744 0 0 0-.312.172c-.073.073-.11.185-.11.336 0 .104.008.208.024.312.015.104.026.209.031.313 0 .14-.02.273-.063.398a1.157 1.157 0 0 0-.062.367c0 .141.05.24.148.297.1.058.211.097.336.117.157.027.305.047.446.063.14.016.278.04.414.07.135.032.27.065.406.102.135.036.279.094.43.172.03.015.078.034.14.054l.211.07c.078.027.151.048.219.063a.741.741 0 0 0 .148.024zm2.86-.938c.146 0 .302-.015.469-.047a3.54 3.54 0 0 0 .976-.336 2.59 2.59 0 0 0 .406-.257.222.222 0 0 0 .032-.047.305.305 0 0 0 .023-.063v-.008c.031-.114.057-.24.078-.375a8.63 8.63 0 0 0 .055-.414 8.98 8.98 0 0 1 .055-.414c.02-.135.039-.268.054-.398.021-.14.047-.276.078-.406.032-.13.073-.253.125-.368a1.03 1.03 0 0 1 .211-.304 1.54 1.54 0 0 1 .344-.25v-.016l-.008-.023a.29.29 0 0 1 .047-.149 1.4 1.4 0 0 1 .117-.164.582.582 0 0 1 .149-.133.946.946 0 0 1 .164-.078 9.837 9.837 0 0 0-.102-.375 4.938 4.938 0 0 1-.094-.375 7.126 7.126 0 0 0-.093-.476 2.954 2.954 0 0 0-.11-.36 1.317 1.317 0 0 0-.18-.32c-.077-.104-.174-.23-.288-.375a1.189 1.189 0 0 1-.118-.156.555.555 0 0 1-.046-.196 2.206 2.206 0 0 0-.047-.203 9.48 9.48 0 0 0-.242-.75 2.91 2.91 0 0 0-.172-.383 3.87 3.87 0 0 0-.172-.289c-.052-.078-.107-.117-.164-.117-.125 0-.274.05-.446.149-.171.099-.354.208-.546.328-.193.12-.38.232-.563.336-.182.104-.346.153-.492.148a.7.7 0 0 1-.43-.148 2.236 2.236 0 0 1-.36-.344c-.109-.13-.2-.242-.273-.336-.073-.094-.127-.146-.164-.156-.041 0-.065.031-.07.093a2.56 2.56 0 0 0-.008.211v.133c0 .032-.005.052-.016.063-.057.12-.12.237-.187.351-.068.115-.135.232-.203.352a1.611 1.611 0 0 0-.219.758c0 .078.005.156.016.234.01.078.036.154.078.227l-.016.03a1.31 1.31 0 0 1-.133.157 1.072 1.072 0 0 0-.132.164 2.796 2.796 0 0 0-.407.93c-.078.333-.12.672-.125 1.015 0 .089.006.178.016.266.01.089.016.177.016.266a.526.526 0 0 1-.008.086.525.525 0 0 0-.008.086.75.75 0 0 1 .313.109c.12.068.25.154.39.258.14.104.274.224.399.36.125.135.244.267.359.398.115.13.198.26.25.39.052.13.086.237.101.32a.444.444 0 0 1-.125.329.955.955 0 0 1-.312.203c.089.156.198.289.328.398.13.11.271.198.422.266.151.068.315.117.492.148.177.032.35.047.516.047zm3.133 1.11c.109 0 .216-.016.32-.047a1.65 1.65 0 0 0 .445-.203c.136-.089.26-.198.375-.329a3.07 3.07 0 0 1 .977-.75l.258-.117a2.18 2.18 0 0 0 .257-.133.962.962 0 0 0 .165-.132.256.256 0 0 0 .078-.188.295.295 0 0 0-.024-.117.58.58 0 0 0-.07-.117 5.136 5.136 0 0 1-.203-.305 1.978 1.978 0 0 1-.149-.297l-.125-.312a2.558 2.558 0 0 1-.11-.352.28.28 0 0 0-.054-.101.53.53 0 0 0-.46-.235.533.533 0 0 0-.266.07l-.266.149a7.335 7.335 0 0 1-.281.148.656.656 0 0 1-.297.07.411.411 0 0 1-.258-.077.636.636 0 0 1-.172-.211 2.218 2.218 0 0 1-.117-.258l-.094-.258a1.26 1.26 0 0 1-.14.188.666.666 0 0 0-.125.203c-.068.156-.11.33-.125.523-.026.302-.06.596-.102.883a4.7 4.7 0 0 1-.21.86 1.914 1.914 0 0 0-.063.273 2.88 2.88 0 0 0-.032.289c0 .255.079.466.235.633.156.166.367.25.633.25z"}}]})(props);\n};\nfunction VscTerminalPowershell (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.5 1.007l12.999.17.43.501-1.82 12.872-.57.489-13-.17-.43-.502L1.93 1.495l.57-.488zM1.18 13.885l11.998.157 1.68-11.882L2.86 2.003 1.18 13.885zm5.791-3.49l-.14.991 5 .066.14-.99-5-.066zm1.71-2.457l-3.663-2.93-.692.796 2.636 2.112L3.739 9.95l.465.812L8.68 7.938z"}}]})(props);\n};\nfunction VscTerminalTmux (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M13.5 1h-12l-.5.5v13l.5.5h12l.5-.5v-13l-.5-.5zM7 7.5V13H2V2h5v5.5zm6 5.5H8V8h5v5zm0-6H8V2h5v5z"}}]})(props);\n};\nfunction VscTerminalUbuntu (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3.26 8A1.37 1.37 0 1 1 .52 8a1.37 1.37 0 0 1 2.74 0zm7.79 6.66a1.37 1.37 0 1 0 2.374-1.37 1.37 1.37 0 0 0-2.374 1.37zm2.37-11.95a1.37 1.37 0 1 0-2.37-1.373 1.37 1.37 0 0 0 2.37 1.373zM8.79 4.1a3.9 3.9 0 0 1 3.89 3.55h2a5.93 5.93 0 0 0-1.73-3.8 1.91 1.91 0 0 1-1.66-.12 2.001 2.001 0 0 1-.94-1.38 6 6 0 0 0-1.54-.2 5.83 5.83 0 0 0-2.61.61l1 1.73a3.94 3.94 0 0 1 1.59-.39zM4.88 8a3.93 3.93 0 0 1 1.66-3.2l-1-1.7A5.93 5.93 0 0 0 3.1 6.5a1.92 1.92 0 0 1 0 3 5.93 5.93 0 0 0 2.42 3.4l1-1.7A3.93 3.93 0 0 1 4.88 8zm3.91 3.91a4 4 0 0 1-1.65-.37l-1 1.73c.81.403 1.704.612 2.61.61.52 0 1.038-.067 1.54-.2a2 2 0 0 1 .94-1.38 1.911 1.911 0 0 1 1.66-.12 5.93 5.93 0 0 0 1.73-3.8h-2a3.91 3.91 0 0 1-3.83 3.53z"}}]})(props);\n};\nfunction VscTerminal (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3 1.5L1.5 3v18L3 22.5h18l1.5-1.5V3L21 1.5H3zM3 21V3h18v18H3zm5.656-4.01l1.038 1.061 5.26-5.243v-.912l-5.26-5.26-1.035 1.06 4.59 4.702-4.593 4.592z"}}]})(props);\n};\nfunction VscTextSize (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M3.36 7L1 13h1.34l.51-1.47h2.26L5.64 13H7L4.65 7H3.36zm-.15 3.53l.78-2.14.78 2.14H3.21zM11.82 4h-1.6L7 13h1.56l.75-2.29h3.36l.77 2.29H15l-3.18-9zM9.67 9.5l1.18-3.59c.059-.185.1-.376.12-.57.027.192.064.382.11.57l1.25 3.59H9.67z"}}]})(props);\n};\nfunction VscThreeBars (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14 5H2V3h12v2zm0 4H2V7h12v2zM2 13h12v-2H2v2z"}}]})(props);\n};\nfunction VscThumbsdown (props) {\n  return iconBase_GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5.46 14.11a1.46 1.46 0 0 1-.81-.25 1.38 1.38 0 0 1-.45-1.69L5.17 10H2.38a1.36 1.36 0 0 1-1.16-.61 1.35 1.35 0 0 1-.09-1.32C1.8 6.62 3 4 3.4 2.9A1.38 1.38 0 0 1 4.69 2h8.93A1.4 1.4 0 0 1 15 3.4v3.51a1.38 1.38 0 0 1-1.38 1.38h-1.38L6.4 13.75a1.41 1.41 0 0 1-.94.36zM4.69 3a.39.39 0 0 0-.36.25C3.93 4.34 2.86 6.7 2 8.49a.39.39 0 0 0 0 .36.37.37 0 0 0 .38.15h3.3l.52.68v.46l-1.09 2.44a.37.37 0 0 0 .13.46.38.38 0 0 0 .48 0l6.06-5.59.47-.13h1.37a.38.38 0 0 0 .38-.41V3.4a.4.4 0 0 0-.38-.4H4.69z"}}]})(props);\n};\nfunction VscThumbsup (props) {\n  return iconBase_GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.54 2c.289.001.57.088.81.25a1.38 1.38 0 0 1 .45 1.69l-.97 2.17h2.79a1.36 1.36 0 0 1 1.16.61 1.35 1.35 0 0 1 .09 1.32c-.67 1.45-1.87 4.07-2.27 5.17a1.38 1.38 0 0 1-1.29.9H2.38A1.4 1.4 0 0 1 1 12.71V9.2a1.38 1.38 0 0 1 1.38-1.38h1.38L9.6 2.36a1.41 1.41 0 0 1 .94-.36zm.77 11.11a.39.39 0 0 0 .36-.25c.4-1.09 1.47-3.45 2.33-5.24a.39.39 0 0 0 0-.36.37.37 0 0 0-.38-.15h-3.3l-.52-.68v-.46l1.09-2.44a.37.37 0 0 0-.13-.46.38.38 0 0 0-.48 0L4.22 8.66l-.47.13H2.38A.38.38 0 0 0 2 9.2v3.51a.4.4 0 0 0 .38.4h8.93z"}}]})(props);\n};\nfunction VscTools (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.773 3.485l-.78-.184-2.108 2.096-1.194-1.216 2.056-2.157-.18-.792a4.42 4.42 0 0 0-1.347-.228 3.64 3.64 0 0 0-1.457.28 3.824 3.824 0 0 0-1.186.84 3.736 3.736 0 0 0-.875 1.265 3.938 3.938 0 0 0 0 2.966 335.341 335.341 0 0 0-6.173 6.234c-.21.275-.31.618-.284.963a1.403 1.403 0 0 0 .464.967c.124.135.272.247.437.328.17.075.353.118.538.127.316-.006.619-.126.854-.337 1.548-1.457 4.514-4.45 6.199-6.204.457.194.948.294 1.444.293a3.736 3.736 0 0 0 2.677-1.133 3.885 3.885 0 0 0 1.111-2.73 4.211 4.211 0 0 0-.196-1.378zM2.933 13.928a.31.31 0 0 1-.135.07.437.437 0 0 1-.149 0 .346.346 0 0 1-.144-.057.336.336 0 0 1-.114-.11c-.14-.143-.271-.415-.14-.568 1.37-1.457 4.191-4.305 5.955-6.046.1.132.21.258.328.376.118.123.245.237.38.341-1.706 1.75-4.488 4.564-5.98 5.994zm11.118-9.065c.002.765-.296 1.5-.832 2.048a2.861 2.861 0 0 1-4.007 0 2.992 2.992 0 0 1-.635-3.137A2.748 2.748 0 0 1 10.14 2.18a2.76 2.76 0 0 1 1.072-.214h.254L9.649 3.839v.696l1.895 1.886h.66l1.847-1.816v.258zM3.24 6.688h1.531l.705.717.678-.674-.665-.678V6.01l.057-1.649-.22-.437-2.86-1.882-.591.066-.831.849-.066.599 1.838 2.918.424.215zm-.945-3.632L4.609 4.58 4.57 5.703H3.494L2.002 3.341l.293-.285zm7.105 6.96l.674-.673 3.106 3.185a1.479 1.479 0 0 1 0 2.039 1.404 1.404 0 0 1-1.549.315 1.31 1.31 0 0 1-.437-.315l-3.142-3.203.679-.678 3.132 3.194a.402.402 0 0 0 .153.105.477.477 0 0 0 .359 0 .403.403 0 0 0 .153-.105.436.436 0 0 0 .1-.153.525.525 0 0 0 .036-.184.547.547 0 0 0-.035-.184.436.436 0 0 0-.1-.153L9.4 10.016z"}}]})(props);\n};\nfunction VscTrash (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M10 3h3v1h-1v9l-1 1H4l-1-1V4H2V3h3V2a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v1zM9 2H6v1h3V2zM4 13h7V4H4v9zm2-8H5v7h1V5zm1 0h1v7H7V5zm2 0h1v7H9V5z"}}]})(props);\n};\nfunction VscTriangleDown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M2 5.56L2.413 5h11.194l.393.54L8.373 11h-.827L2 5.56z"}}]})(props);\n};\nfunction VscTriangleLeft (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M10.44 2l.56.413v11.194l-.54.393L5 8.373v-.827L10.44 2z"}}]})(props);\n};\nfunction VscTriangleRight (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5.56 14L5 13.587V2.393L5.54 2 11 7.627v.827L5.56 14z"}}]})(props);\n};\nfunction VscTriangleUp (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14 10.44l-.413.56H2.393L2 10.46 7.627 5h.827L14 10.44z"}}]})(props);\n};\nfunction VscTwitter (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M15 3.784a5.63 5.63 0 0 1-.65.803 6.058 6.058 0 0 1-.786.68 5.442 5.442 0 0 1 .014.377c0 .574-.061 1.141-.184 1.702a8.467 8.467 0 0 1-.534 1.627 8.444 8.444 0 0 1-1.264 2.04 7.768 7.768 0 0 1-1.72 1.521 7.835 7.835 0 0 1-2.095.95 8.524 8.524 0 0 1-2.379.329 8.178 8.178 0 0 1-2.293-.325A7.921 7.921 0 0 1 1 12.52a5.762 5.762 0 0 0 4.252-1.19 2.842 2.842 0 0 1-2.273-1.19 2.878 2.878 0 0 1-.407-.8c.091.014.181.026.27.035a2.797 2.797 0 0 0 1.022-.089 2.808 2.808 0 0 1-.926-.362 2.942 2.942 0 0 1-.728-.633 2.839 2.839 0 0 1-.65-1.822v-.033c.402.227.837.348 1.306.362a2.943 2.943 0 0 1-.936-1.04 2.955 2.955 0 0 1-.253-.649 2.945 2.945 0 0 1 .007-1.453c.063-.243.161-.474.294-.693.364.451.77.856 1.216 1.213a8.215 8.215 0 0 0 3.008 1.525 7.965 7.965 0 0 0 1.695.263 2.15 2.15 0 0 1-.058-.325 3.265 3.265 0 0 1-.017-.331c0-.397.075-.77.226-1.118a2.892 2.892 0 0 1 1.528-1.528 2.79 2.79 0 0 1 1.117-.225 2.846 2.846 0 0 1 2.099.909 5.7 5.7 0 0 0 1.818-.698 2.815 2.815 0 0 1-1.258 1.586A5.704 5.704 0 0 0 15 3.785z"}}]})(props);\n};\nfunction VscTypeHierarchySub (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.5 11h-1.729L8.438 6H9.5l.5-.5v-4L9.5 1h-4l-.5.5v4l.5.5h1.062l-3.333 5H1.5l-.5.5v3l.5.5h3l.5-.5v-3l-.5-.5h-.068L7.5 6.4l3.068 4.6H10.5l-.5.5v3l.5.5h3l.5-.5v-3l-.5-.5zM6 5V2h3v3H6zm-2 7v2H2v-2h2zm9 2h-2v-2h2v2z"}}]})(props);\n};\nfunction VscTypeHierarchySuper (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.5 1h-3l-.5.5v3l.5.5h.068L7.5 9.6 4.432 5H4.5l.5-.5v-3L4.5 1h-3l-.5.5v3l.5.5h1.729l3.333 5H5.5l-.5.5v4l.5.5h4l.5-.5v-4l-.5-.5H8.438l3.333-5H13.5l.5-.5v-3l-.5-.5zM2 4V2h2v2H2zm7 7v3H6v-3h3zm4-7h-2V2h2v2z"}}]})(props);\n};\nfunction VscTypeHierarchy (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M13.5 12h-1.793L10 10.293V6.5L9.5 6H8V4h.5l.5-.5v-2L8.5 1h-2l-.5.5v2l.5.5H7v2H5.5l-.5.5v3.793L3.293 12H1.5l-.5.5v2l.5.5h2l.5-.5v-1.793L5.707 11h3.586L11 12.707V14.5l.5.5h2l.5-.5v-2l-.5-.5zM7 2h1v1H7V2zM6 7h3v3H6V7zm-3 7H2v-1h1v1zm10 0h-1v-1h1v1z"}}]})(props);\n};\nfunction VscUnfold (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.53 6.51v-4l-1 1-.71-.71L7.65 1h.71l1.84 1.83-.71.7-1-1v3.98h-.96zm0 2.98v4l-1-1-.71.71L7.65 15h.71l1.84-1.83-.71-.7-1 1V9.49h-.96zM13.73 4L14 5.02l-3.68 2.93L14 10.98 13.73 12h-4.2v-1h3L9.55 8.57H6.54L3.45 11h3.08v1H2.27L2 10.98l3.68-2.92L2 5.02 2.27 4h4.26v1H3.45l3 2.42h3.01L12.53 5h-3V4h4.2z"}}]})(props);\n};\nfunction VscUngroupByRefType (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M2.9 1L5 3.1l-.8.7L3 2.6V7H2V2.5L.8 3.8l-.7-.7L2.2 1h.7zM3 13.4V9H2v4.4L.8 12.2l-.7.7L2.2 15h.7L5 12.9l-.7-.7L3 13.4zM8.5 7h-2L6 6.5v-2l.5-.5h2l.5.5v2l-.5.5zM7 6h1V5H7v1zm7.5 1h-3l-.5-.5v-3l.5-.5h3l.5.5v3l-.5.5zM12 6h2V4h-2v2zm-3.5 6h-2l-.5-.5v-2l.5-.5h2l.5.5v2l-.5.5zM7 11h1v-1H7v1zm7.5 2h-3l-.5-.5v-3l.5-.5h3l.5.5v3l-.5.5zM12 12h2v-2h-2v2zm-1-2H9v1h2v-1zm0-5H9v1h2V5z"}}]})(props);\n};\nfunction VscUnlock (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5 7V5a3 3 0 0 1 5.83-1h1.044A4.002 4.002 0 0 0 4 5v2H3L2 8v6l1 1h10l1-1V8l-1-1H5zm6 1h2v6H3V8h8z"}}]})(props);\n};\nfunction VscUnmute (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 4.83h2.79L8.15 1l.85.35v13l-.85.33-3.86-3.85H1.5l-.5-.5v-5l.5-.5zM4.85 10L8 13.14V2.56L4.85 5.68l-.35.15H2v4h2.5l.35.17zM15 7.83a6.97 6.97 0 0 1-1.578 4.428l-.712-.71A5.975 5.975 0 0 0 14 7.83c0-1.4-.48-2.689-1.284-3.71l.712-.71A6.971 6.971 0 0 1 15 7.83zm-2 0a4.978 4.978 0 0 1-1.002 3.004l-.716-.716A3.982 3.982 0 0 0 12 7.83a3.98 3.98 0 0 0-.713-2.28l.716-.716c.626.835.997 1.872.997 2.996zm-2 0c0 .574-.16 1.11-.44 1.566l-.739-.738a1.993 1.993 0 0 0 .005-1.647l.739-.739c.276.454.435.988.435 1.558z"}}]})(props);\n};\nfunction VscUnverified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.67 14.72h.71L10.1 13h2.4l.5-.5v-2.42l1.74-1.72v-.71l-1.71-1.72V3.49l-.5-.49H10.1L8.38 1.29h-.71L6 3H3.53L3 3.5v2.43L1.31 7.65v.71L3 10.08v2.42l.53.5H6l1.67 1.72zM6.16 12H4V9.87l-.12-.35L2.37 8l1.48-1.51.15-.35V4h2.16l.36-.14L8 2.35l1.54 1.51.35.14H12v2.14l.17.35L13.69 8l-1.55 1.52-.14.35V12H9.89l-.38.15L8 13.66l-1.48-1.52-.36-.14zm1.443-5.859a.962.962 0 0 0-.128.291c-.03.109-.05.215-.062.317l-.005.043h-.895l.003-.051c.018-.326.089-.615.212-.864.052-.108.117-.214.193-.318.081-.106.18-.2.294-.28.119-.084.255-.15.409-.2A1.71 1.71 0 0 1 8.165 5c.28 0 .523.046.726.14.2.089.366.21.494.363.127.152.22.326.279.52.058.194.087.394.087.599 0 .191-.032.371-.098.54-.064.164-.143.32-.238.466-.094.143-.197.28-.31.41-.11.129-.211.252-.304.372a2.47 2.47 0 0 0-.23.34.653.653 0 0 0-.088.318v.48h-.888v-.539c0-.168.031-.323.094-.464a2.15 2.15 0 0 1 .24-.401c.096-.127.2-.25.308-.368a4.74 4.74 0 0 0 .299-.356c.093-.12.17-.246.228-.377a.984.984 0 0 0 .09-.421 1.04 1.04 0 0 0-.047-.318v-.001a.638.638 0 0 0-.13-.243.558.558 0 0 0-.216-.158H8.46a.689.689 0 0 0-.294-.059.643.643 0 0 0-.339.083.742.742 0 0 0-.223.215zM8.5 11h-.888v-.888H8.5V11z"}}]})(props);\n};\nfunction VscVariableGroup (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M5.387 11.523a.402.402 0 0 1 .593-.367c.058.031.11.065.157.102.047.036.088.07.125.101a.177.177 0 0 0 .117.047c.052 0 .12-.04.203-.117.083-.078.175-.182.273-.313.1-.13.201-.268.305-.414.104-.146.2-.294.29-.445l.226-.39c.062-.11.107-.199.133-.266a15.33 15.33 0 0 0-.133-.524 15.384 15.384 0 0 1-.133-.523 3.72 3.72 0 0 0-.133-.422 1.04 1.04 0 0 0-.187-.313.656.656 0 0 0-.266-.187 1.374 1.374 0 0 0-.375-.07 1.628 1.628 0 0 0-.328.031v-.195L7.69 7a2.345 2.345 0 0 1 .461.734c.052.13.097.263.133.399.037.135.076.283.117.445.078-.115.175-.26.29-.438a4.49 4.49 0 0 1 .398-.523c.15-.172.31-.315.476-.43A1.02 1.02 0 0 1 10.089 7c.13 0 .247.034.351.101.105.068.157.175.157.32 0 .282-.141.423-.422.423a.608.608 0 0 1-.29-.07.608.608 0 0 0-.288-.071c-.1 0-.203.05-.313.148a2.3 2.3 0 0 0-.312.352 9.5 9.5 0 0 0-.485.734l.446 1.852a1.56 1.56 0 0 0 .093.344.669.669 0 0 0 .094.171.184.184 0 0 0 .125.079.37.37 0 0 0 .211-.086 2.14 2.14 0 0 0 .43-.47c.052-.077.093-.15.125-.218l.187.094a2.025 2.025 0 0 1-.219.367 3.775 3.775 0 0 1-.351.422 3.38 3.38 0 0 1-.406.36c-.141.104-.269.153-.383.148a.397.397 0 0 1-.281-.102 1.491 1.491 0 0 1-.204-.234 1.599 1.599 0 0 1-.132-.36 8.263 8.263 0 0 1-.118-.507 34.16 34.16 0 0 1-.101-.532 2.212 2.212 0 0 0-.11-.414l-.203.375a4.489 4.489 0 0 1-.28.453c-.11.157-.222.316-.337.477a2.46 2.46 0 0 1-.375.422c-.135.12-.265.221-.39.305A.66.66 0 0 1 5.91 12a.539.539 0 0 1-.36-.133.454.454 0 0 1-.163-.344zm6.11.477c.28-.36.496-.748.648-1.164a3.87 3.87 0 0 0 .226-1.32c0-.47-.075-.912-.226-1.329A4.57 4.57 0 0 0 11.495 7h.734a3.77 3.77 0 0 1 .922 2.515c0 .474-.073.917-.218 1.329-.146.411-.38.796-.704 1.156h-.734zM3.77 12a3.373 3.373 0 0 1-.704-1.149 3.97 3.97 0 0 1-.218-1.336c0-.953.307-1.791.922-2.515h.726a4.132 4.132 0 0 0-.64 1.18 4.205 4.205 0 0 0-.227 1.335A3.929 3.929 0 0 0 4.496 12H3.77z"}},{"tag":"path","attr":{"d":"M15.5 1H.5l-.5.5v13l.5.5h15l.5-.5v-13l-.5-.5zM15 14H1V5h14v9zm0-10H1V2h14v2z"}}]})(props);\n};\nfunction VscVerified (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.67 14.72h.71L10.1 13h2.4l.5-.5v-2.42l1.74-1.72v-.71l-1.71-1.72V3.49l-.5-.49H10.1L8.38 1.29h-.71L6 3H3.53L3 3.5v2.43L1.31 7.65v.71L3 10.08v2.42l.53.5H6l1.67 1.72zM6.16 12H4V9.87l-.12-.35L2.37 8l1.48-1.51.15-.35V4h2.16l.36-.14L8 2.35l1.54 1.51.35.14H12v2.14l.17.35L13.69 8l-1.55 1.52-.14.35V12H9.89l-.38.15L8 13.66l-1.48-1.52-.36-.14zm.57-1.52h.71l3.77-3.77L10.5 6 7.09 9.42 5.71 8.04 5 8.75l1.73 1.73z"}}]})(props);\n};\nfunction VscVersions (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M8 3L7 4v8l1 1h6l1-1V4l-1-1H8zm6 9H8V4h6v8zM5 9V5h1V4H4.5l-.5.5v7l.5.5H6v-1H5V9zM2 8V6h1V5H1.5l-.5.5v5l.5.5H3v-1H2V8z"}}]})(props);\n};\nfunction VscVmActive (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5v5.503a5.006 5.006 0 0 0-1-.583V3H2v9h5a5 5 0 0 0 1 3H4v-1h3v-1H1.5l-.5-.5v-10l.5-.5z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.778 8.674a4 4 0 1 1 4.444 6.652 4 4 0 0 1-4.444-6.652zm2.13 4.99l2.387-3.182-.8-.6-2.077 2.769-1.301-1.041-.625.78 1.704 1.364.713-.09z"}}]})(props);\n};\nfunction VscVmConnect (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5v5.503a5.006 5.006 0 0 0-1-.583V3H2v9h5a5 5 0 0 0 1 3H4v-1h3v-1H1.5l-.5-.5v-10l.5-.5z"}},{"tag":"path","attr":{"d":"M12 8a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 7a3 3 0 1 1 0-6.001A3 3 0 0 1 12 15z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.133 11.435l1.436 1.436.431-.431-1.004-1.005L14 10.431l-.431-.43-1.436 1.434zm-1.129 1.067L10 11.498l.431-.431 1.436 1.435-1.436 1.436-.431-.431 1.004-1.005z"}}]})(props);\n};\nfunction VscVmOutline (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5v5.503a5.006 5.006 0 0 0-1-.583V3H2v9h5a5 5 0 0 0 1 3H4v-1h3v-1H1.5l-.5-.5v-10l.5-.5z"}},{"tag":"path","attr":{"d":"M12 8a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 7a3 3 0 1 1 0-6.001A3 3 0 0 1 12 15z"}}]})(props);\n};\nfunction VscVmRunning (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1.5 2h13l.5.5v5.503a5.006 5.006 0 0 0-1-.583V3H2v9h5a5 5 0 0 0 1 3H4v-1h3v-1H1.5l-.5-.5v-10l.5-.5z"}},{"tag":"path","attr":{"d":"M12 8c.367 0 .721.047 1.063.14.34.094.658.23.953.407.294.177.563.385.808.625.245.24.455.509.63.808a4.03 4.03 0 0 1 .405 3.082c-.093.342-.229.66-.406.954a4.382 4.382 0 0 1-.625.808c-.24.245-.509.455-.808.63a4.029 4.029 0 0 1-3.082.405 3.784 3.784 0 0 1-.954-.406 4.382 4.382 0 0 1-.808-.625 3.808 3.808 0 0 1-.63-.808 4.027 4.027 0 0 1-.405-3.082c.093-.342.229-.66.406-.954.177-.294.385-.563.625-.808.24-.245.509-.455.808-.63A4.028 4.028 0 0 1 12 8zm2 3.988L11 10v4l3-2.012z"}}]})(props);\n};\nfunction VscVm (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M14.5 2h-13l-.5.5v10l.5.5H7v1H4v1h8v-1H9v-1h5.5l.5-.5v-10l-.5-.5zM14 12H2V3h12v9z"}}]})(props);\n};\nfunction VscWand (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M4.38 5h1V4h1V3h-1V2h-1v1h-1v1h1v1zm8 4h-1v1h-1v1h1v1h1v-1h1v-1h-1V9zM14 2V1h-1v1h-1v1h1v1h1V3h1V2h-1zm-2.947 2.442a1.49 1.49 0 0 0-2.12 0l-7.49 7.49a1.49 1.49 0 0 0 0 2.12c.59.59 1.54.59 2.12 0l7.49-7.49c.58-.58.58-1.53 0-2.12zm-8.2 8.9c-.2.2-.51.2-.71 0-.2-.2-.2-.51 0-.71l6.46-6.46.71.71-6.46 6.46zm7.49-7.49l-.32.32-.71-.71.32-.32c.2-.2.51-.2.71 0 .19.2.19.52 0 .71z"}}]})(props);\n};\nfunction VscWarning (props) {\n  return iconBase_GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.56 1h.88l6.54 12.26-.44.74H1.44L1 13.26 7.56 1zM8 2.28L2.28 13H13.7L8 2.28zM8.625 12v-1h-1.25v1h1.25zm-1.25-2V6h1.25v4h-1.25z"}}]})(props);\n};\nfunction VscWatch (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M7.5 9h2V8H8V5.5H7v3l.5.5z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M5.5 3.669A4.998 4.998 0 0 0 3 8a4.998 4.998 0 0 0 2.5 4.331V14.5l.5.5h4l.5-.5v-2.169A4.998 4.998 0 0 0 13 8a4.998 4.998 0 0 0-2.5-4.331V1.5L10 1H6l-.5.5v2.169zM12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0z"}}]})(props);\n};\nfunction VscWhitespace (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M12 2V1H6.5a3.5 3.5 0 0 0 0 7H8v5H7v1h5v-1h-1V2h1zM8 7H6.5a2.5 2.5 0 1 1 0-5H8v5zm2 6H9V2h1v11z"}}]})(props);\n};\nfunction VscWholeWord (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M1 2h14v1H1V2zm13 2h-1v8h1V4zm-2.728 4.387a2.353 2.353 0 0 0-.36-.786 1.746 1.746 0 0 0-.609-.53 1.832 1.832 0 0 0-.866-.193c-.198 0-.38.024-.547.073a1.76 1.76 0 0 0-.453.205 1.724 1.724 0 0 0-.365.318l-.179.258V4.578H7V12h.893v-.575l.126.175c.087.102.189.19.304.269.117.078.249.14.398.186.149.046.314.068.498.068.353 0 .666-.071.937-.212.272-.143.499-.338.682-.586.183-.25.321-.543.414-.879.093-.338.14-.703.14-1.097a3.756 3.756 0 0 0-.12-.962zM9.793 7.78c.151.071.282.176.39.314.109.14.194.313.255.517.051.174.082.371.089.587l-.007.125c0 .327-.033.62-.1.869a1.886 1.886 0 0 1-.278.614c-.117.162-.26.285-.421.366-.322.162-.76.166-1.069.015a1.264 1.264 0 0 1-.393-.296 1.273 1.273 0 0 1-.218-.367s-.179-.447-.179-.947c0-.5.179-1.002.179-1.002.062-.177.136-.318.224-.43.114-.143.256-.259.424-.345.168-.086.365-.129.587-.129.19 0 .364.037.517.109zM15 13H1v1h14v-1zM2.813 10l-.728 2.031H1l.025-.072 2.441-7.086h.941l2.485 7.158H5.81L5.032 10H2.813zm1.121-3.578h-.022l-.905 2.753h1.841l-.914-2.753z"}}]})(props);\n};\nfunction VscWindow (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M14.5 2h-13l-.5.5v11l.5.5h13l.5-.5v-11l-.5-.5zM14 13H2V6h12v7zm0-8H2V3h12v2z"}}]})(props);\n};\nfunction VscWordWrap (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M3.868 3.449a1.21 1.21 0 0 0-.473-.329c-.274-.111-.623-.15-1.055-.076a3.5 3.5 0 0 0-.71.208c-.082.035-.16.077-.235.125l-.043.03v1.056l.168-.139c.15-.124.326-.225.527-.303.196-.074.4-.113.604-.113.188 0 .33.051.431.157.087.095.137.248.147.456l-.962.144c-.219.03-.41.086-.57.166a1.245 1.245 0 0 0-.398.311c-.103.125-.181.27-.229.426-.097.33-.093.68.011 1.008a1.096 1.096 0 0 0 .638.67c.155.063.328.093.528.093a1.25 1.25 0 0 0 .978-.441v.345h1.007V4.65c0-.255-.03-.484-.089-.681a1.423 1.423 0 0 0-.275-.52zm-.636 1.896v.236c0 .119-.018.231-.055.341a.745.745 0 0 1-.377.447.694.694 0 0 1-.512.027.454.454 0 0 1-.156-.094.389.389 0 0 1-.094-.139.474.474 0 0 1-.035-.186c0-.077.01-.147.024-.212a.33.33 0 0 1 .078-.141.436.436 0 0 1 .161-.109 1.3 1.3 0 0 1 .305-.073l.661-.097zm5.051-1.067a2.253 2.253 0 0 0-.244-.656 1.354 1.354 0 0 0-.436-.459 1.165 1.165 0 0 0-.642-.173 1.136 1.136 0 0 0-.69.223 1.33 1.33 0 0 0-.264.266V1H5.09v6.224h.918v-.281c.123.152.287.266.472.328.098.032.208.047.33.047.255 0 .483-.06.677-.177.192-.115.355-.278.486-.486a2.29 2.29 0 0 0 .293-.718 3.87 3.87 0 0 0 .096-.886 3.714 3.714 0 0 0-.078-.773zm-.86.758c0 .232-.02.439-.06.613-.036.172-.09.315-.159.424a.639.639 0 0 1-.233.237.582.582 0 0 1-.565.014.683.683 0 0 1-.21-.183.925.925 0 0 1-.142-.283A1.187 1.187 0 0 1 6 5.5v-.517c0-.164.02-.314.06-.447.036-.132.087-.242.156-.336a.668.668 0 0 1 .228-.208.584.584 0 0 1 .29-.071.554.554 0 0 1 .496.279c.063.099.108.214.143.354.031.143.05.306.05.482zM2.407 9.9a.913.913 0 0 1 .316-.239c.218-.1.547-.105.766-.018.104.042.204.1.32.184l.33.26V8.945l-.097-.062a1.932 1.932 0 0 0-.905-.215c-.308 0-.593.057-.846.168-.25.11-.467.27-.647.475-.18.21-.318.453-.403.717-.09.272-.137.57-.137.895 0 .289.043.561.13.808.086.249.211.471.373.652.161.185.361.333.597.441.232.104.493.155.778.155.233 0 .434-.028.613-.084.165-.05.322-.123.466-.217l.078-.061v-.889l-.2.095a.4.4 0 0 1-.076.026c-.05.017-.099.035-.128.049-.036.023-.227.09-.227.09-.06.024-.14.043-.218.059a.977.977 0 0 1-.599-.057.827.827 0 0 1-.306-.225 1.088 1.088 0 0 1-.205-.376 1.728 1.728 0 0 1-.076-.529c0-.21.028-.399.083-.56.054-.158.13-.294.22-.4zM14 6h-4V5h4.5l.5.5v6l-.5.5H7.879l2.07 2.071-.706.707-2.89-2.889v-.707l2.89-2.89L9.95 9l-2 2H14V6z"}}]})(props);\n};\nfunction VscWorkspaceTrusted (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.069 0c.262 0 .52.017.76.057a4.1 4.1 0 0 1 .697.154c.228.069.451.155.674.263.217.103.44.229.663.366.377.24.748.434 1.126.589a7.537 7.537 0 0 0 2.331.525c.406.029.823.046 1.257.046v4c0 .76-.097 1.48-.291 2.166a8.996 8.996 0 0 1-.789 1.943 10.312 10.312 0 0 1-1.188 1.725 15.091 15.091 0 0 1-1.492 1.532 17.57 17.57 0 0 1-1.703 1.325c-.594.412-1.194.795-1.794 1.143l-.24.143-.24-.143a27.093 27.093 0 0 1-1.806-1.143 15.58 15.58 0 0 1-1.703-1.325 15.082 15.082 0 0 1-1.491-1.532 10.947 10.947 0 0 1-1.194-1.725 9.753 9.753 0 0 1-.789-1.943A7.897 7.897 0 0 1 .571 6V2c.435 0 .852-.017 1.258-.046a8.16 8.16 0 0 0 1.188-.171c.383-.086.766-.2 1.143-.354A6.563 6.563 0 0 0 5.28.846C5.72.56 6.166.349 6.606.21A4.79 4.79 0 0 1 8.069 0zm6.502 2.983a9.566 9.566 0 0 1-2.234-.377 7.96 7.96 0 0 1-2.046-.943A4.263 4.263 0 0 0 9.23 1.16 3.885 3.885 0 0 0 8.074.994a3.99 3.99 0 0 0-1.165.166 3.946 3.946 0 0 0-1.058.503A7.926 7.926 0 0 1 3.8 2.61c-.709.206-1.451.332-2.229.378v3.017c0 .663.086 1.297.258 1.908a8.58 8.58 0 0 0 .72 1.743 9.604 9.604 0 0 0 1.08 1.572c.417.491.862.948 1.342 1.382.48.435.983.835 1.509 1.206.531.372 1.063.709 1.594 1.017a22.397 22.397 0 0 0 1.589-1.017 15.389 15.389 0 0 0 1.514-1.206c.48-.434.926-.891 1.343-1.382a9.596 9.596 0 0 0 1.08-1.572 8.258 8.258 0 0 0 .709-1.743 6.814 6.814 0 0 0 .262-1.908V2.983z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M11.797 4.709l-.44-.378-.406.035-4.36 5.148-1.485-2.12-.4-.068-.463.331-.069.4 1.909 2.726.217.12.457.028.234-.102 4.835-5.715-.029-.405z"}}]})(props);\n};\nfunction VscWorkspaceUnknown (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.067 0c.263 0 .52.017.76.057a4.1 4.1 0 0 1 .697.154c.229.069.452.155.675.263.217.103.44.229.662.366a7.2 7.2 0 0 0 1.126.589 7.534 7.534 0 0 0 2.332.525c.405.029.822.046 1.257.046v4c0 .76-.097 1.48-.292 2.166a8.996 8.996 0 0 1-.788 1.943 10.306 10.306 0 0 1-1.189 1.725 15.082 15.082 0 0 1-1.491 1.532 17.57 17.57 0 0 1-1.703 1.325c-.594.412-1.194.795-1.794 1.143l-.24.143-.24-.143a27.088 27.088 0 0 1-1.806-1.143 15.579 15.579 0 0 1-1.703-1.325 15.08 15.08 0 0 1-1.491-1.532 10.948 10.948 0 0 1-1.195-1.725 9.753 9.753 0 0 1-.788-1.943A7.897 7.897 0 0 1 .57 6V2c.434 0 .851-.017 1.257-.046a8.16 8.16 0 0 0 1.189-.171c.383-.086.765-.2 1.143-.354a6.563 6.563 0 0 0 1.12-.583C5.719.56 6.164.349 6.604.21A4.79 4.79 0 0 1 8.067 0zm6.503 2.983a9.567 9.567 0 0 1-2.234-.377 7.96 7.96 0 0 1-2.046-.943 4.264 4.264 0 0 0-1.063-.503A3.885 3.885 0 0 0 8.073.994a3.99 3.99 0 0 0-1.166.166 3.946 3.946 0 0 0-1.057.503 7.927 7.927 0 0 1-2.051.948c-.709.206-1.452.332-2.229.378v3.017c0 .663.086 1.297.257 1.908a8.58 8.58 0 0 0 .72 1.743 9.604 9.604 0 0 0 1.08 1.572c.417.491.863.948 1.343 1.382.48.435.983.835 1.509 1.206.531.372 1.062.709 1.594 1.017a22.4 22.4 0 0 0 1.588-1.017 15.384 15.384 0 0 0 1.515-1.206c.48-.434.925-.891 1.343-1.382a9.609 9.609 0 0 0 1.08-1.572 8.269 8.269 0 0 0 .708-1.743 6.814 6.814 0 0 0 .263-1.908V2.983z"}},{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M9.433 4.72c.171.171.314.377.411.606.103.228.155.48.149.754a1.6 1.6 0 0 1-.114.64 2.24 2.24 0 0 1-.292.48 2.787 2.787 0 0 1-.354.383 4.52 4.52 0 0 0-.337.32 1.421 1.421 0 0 0-.24.32.7.7 0 0 0-.086.348v.36l-.131.138h-.715l-.143-.143V8.57c0-.24.04-.45.12-.634.075-.177.166-.343.28-.486a3.42 3.42 0 0 1 .366-.382c.12-.109.229-.212.332-.32.097-.103.182-.212.245-.326a.707.707 0 0 0 .086-.354.966.966 0 0 0-.074-.36.972.972 0 0 0-.2-.298.94.94 0 0 0-1.32 0 .88.88 0 0 0-.2.298.829.829 0 0 0-.075.36L7 6.21h-.715l-.131-.137c0-.263.046-.514.148-.748.103-.229.24-.435.412-.606.177-.177.383-.32.611-.417a1.883 1.883 0 0 1 1.503 0c.229.103.434.24.606.417zM7.57 9.646l.143-.143h.714l.143.143v.714l-.143.143h-.714l-.143-.143v-.714z"}}]})(props);\n};\nfunction VscWorkspaceUntrusted (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8.067 0c.263 0 .52.017.76.057a4.1 4.1 0 0 1 .697.154c.229.069.452.155.675.263.217.103.44.229.662.366a7.2 7.2 0 0 0 1.126.589 7.534 7.534 0 0 0 2.332.525c.405.029.822.046 1.257.046v4c0 .76-.097 1.48-.292 2.166a8.996 8.996 0 0 1-.788 1.943 10.306 10.306 0 0 1-1.189 1.725 15.082 15.082 0 0 1-1.491 1.532 17.57 17.57 0 0 1-1.703 1.325c-.594.412-1.194.795-1.794 1.143l-.24.143-.24-.143a27.088 27.088 0 0 1-1.806-1.143 15.579 15.579 0 0 1-1.703-1.325 15.08 15.08 0 0 1-1.491-1.532 10.948 10.948 0 0 1-1.195-1.725 9.753 9.753 0 0 1-.788-1.943A7.897 7.897 0 0 1 .57 6V2c.434 0 .851-.017 1.257-.046a8.16 8.16 0 0 0 1.189-.171c.383-.086.765-.2 1.143-.354a6.563 6.563 0 0 0 1.12-.583C5.719.56 6.164.349 6.604.21A4.79 4.79 0 0 1 8.067 0zm6.503 2.983a9.567 9.567 0 0 1-2.234-.377 7.96 7.96 0 0 1-2.046-.943 4.264 4.264 0 0 0-1.063-.503A3.885 3.885 0 0 0 8.073.994a3.99 3.99 0 0 0-1.166.166 3.946 3.946 0 0 0-1.057.503 7.927 7.927 0 0 1-2.051.948c-.709.206-1.452.332-2.229.378v3.017c0 .663.086 1.297.257 1.908a8.58 8.58 0 0 0 .72 1.743 9.604 9.604 0 0 0 1.08 1.572c.417.491.863.948 1.343 1.382.48.435.983.835 1.509 1.206.531.372 1.062.709 1.594 1.017a22.4 22.4 0 0 0 1.588-1.017 15.384 15.384 0 0 0 1.515-1.206c.48-.434.925-.891 1.343-1.382a9.609 9.609 0 0 0 1.08-1.572 8.269 8.269 0 0 0 .708-1.743 6.814 6.814 0 0 0 .263-1.908V2.983z"}},{"tag":"path","attr":{"d":"M10.787 5.446l-.4-.406h-.206L8.2 7.023 6.216 5.04h-.2l-.406.406v.2l1.983 1.983L5.61 9.61v.206l.406.4h.2l1.983-1.983 1.982 1.983h.206l.4-.4V9.61L8.804 7.63l1.983-1.983v-.2z"}}]})(props);\n};\nfunction VscZoomIn (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.027 6.149a5.52 5.52 0 0 1-1.27 3.908l4.26 4.26-.7.71-4.26-4.27a5.52 5.52 0 1 1 1.97-4.608zm-5.45 4.888a4.51 4.51 0 0 0 3.18-1.32l-.04.02a4.51 4.51 0 0 0 1.36-3.2 4.5 4.5 0 1 0-4.5 4.5zm2.44-4v-1h-2v-2h-1v2h-2v1h2v2h1v-2h2z"}}]})(props);\n};\nfunction VscZoomOut (props) {\n  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M12.027 6.149a5.52 5.52 0 0 1-1.27 3.908l4.26 4.26-.7.71-4.26-4.27a5.52 5.52 0 1 1 1.97-4.608zm-5.45 4.888a4.51 4.51 0 0 0 3.18-1.32l-.04.02a4.51 4.51 0 0 0 1.36-3.2 4.5 4.5 0 1 0-4.5 4.5zm-2.54-4.98h5v1h-5v-1z"}}]})(props);\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/platform.js\n/**\n * A reference to globalThis, with support\n * for browsers that don\'t yet support the spec.\n * @public\n */\nconst $global = (function () {\n    if (typeof globalThis !== "undefined") {\n        // We\'re running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== "undefined") {\n        // We\'re running in NodeJS\n        return global;\n    }\n    if (typeof self !== "undefined") {\n        // We\'re running in a worker.\n        return self;\n    }\n    if (typeof window !== "undefined") {\n        // We\'re running in the browser\'s main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function("return this")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\nconst propConfig = {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n};\nif ($global.FAST === void 0) {\n    Reflect.defineProperty($global, "FAST", Object.assign({ value: Object.create(null) }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\nconst FAST = $global.FAST;\nif (FAST.getById === void 0) {\n    const storage = Object.create(null);\n    Reflect.defineProperty(FAST, "getById", Object.assign({ value(id, initialize) {\n            let found = storage[id];\n            if (found === void 0) {\n                found = initialize ? (storage[id] = initialize()) : null;\n            }\n            return found;\n        } }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nconst emptyArray = Object.freeze([]);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/dom.js\n\nconst updateQueue = $global.FAST.getById(1 /* updateQueue */, () => {\n    const tasks = [];\n    const pendingErrors = [];\n    function throwFirstError() {\n        if (pendingErrors.length) {\n            throw pendingErrors.shift();\n        }\n    }\n    function tryRunTask(task) {\n        try {\n            task.call();\n        }\n        catch (error) {\n            pendingErrors.push(error);\n            setTimeout(throwFirstError, 0);\n        }\n    }\n    function process() {\n        const capacity = 1024;\n        let index = 0;\n        while (index < tasks.length) {\n            tryRunTask(tasks[index]);\n            index++;\n            // Prevent leaking memory for long chains of recursive calls to `DOM.queueUpdate`.\n            // If we call `DOM.queueUpdate` within a task scheduled by `DOM.queueUpdate`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don\'t\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n            if (index > capacity) {\n                // Manually shift all values starting at the index back to the\n                // beginning of the queue.\n                for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {\n                    tasks[scan] = tasks[scan + index];\n                }\n                tasks.length -= index;\n                index = 0;\n            }\n        }\n        tasks.length = 0;\n    }\n    function enqueue(callable) {\n        if (tasks.length < 1) {\n            $global.requestAnimationFrame(process);\n        }\n        tasks.push(callable);\n    }\n    return Object.freeze({\n        enqueue,\n        process,\n    });\n});\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy("fast-html", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nconst _interpolationStart = `${marker}{`;\n/** @internal */\nconst _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nconst DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        "replace" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error("The HTML policy can only be set once.");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, ""));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}="${this.createInterpolationPlaceholder(index)}"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `\x3c!--${marker}:${index}--\x3e`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate: updateQueue.enqueue,\n    /**\n     * Immediately processes all work previously scheduled\n     * through queueUpdate.\n     * @remarks\n     * This also forces nextUpdate promises\n     * to resolve.\n     */\n    processUpdates: updateQueue.process,\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise(updateQueue.enqueue);\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, "")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js\nfunction spilloverSubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index === -1) {\n        spillover.push(subscriber);\n    }\n}\nfunction spilloverUnsubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index !== -1) {\n        spillover.splice(index, 1);\n    }\n}\nfunction spilloverNotifySubscribers(args) {\n    const spillover = this.spillover;\n    const source = this.source;\n    for (let i = 0, ii = spillover.length; i < ii; ++i) {\n        spillover[i].handleChange(source, args);\n    }\n}\nfunction spilloverHas(subscriber) {\n    return this.spillover.indexOf(subscriber) !== -1;\n}\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nclass SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.sub1 === subscriber || this.sub2 === subscriber;\n    }\n    /**\n     * Subscribes to notification of changes in an object\'s state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        if (this.has(subscriber)) {\n            return;\n        }\n        if (this.sub1 === void 0) {\n            this.sub1 = subscriber;\n            return;\n        }\n        if (this.sub2 === void 0) {\n            this.sub2 = subscriber;\n            return;\n        }\n        this.spillover = [this.sub1, this.sub2, subscriber];\n        this.subscribe = spilloverSubscribe;\n        this.unsubscribe = spilloverUnsubscribe;\n        this.notify = spilloverNotifySubscribers;\n        this.has = spilloverHas;\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n    }\n    /**\n     * Unsubscribes from notification of changes in an object\'s state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        if (this.sub1 === subscriber) {\n            this.sub1 = void 0;\n        }\n        else if (this.sub2 === subscriber) {\n            this.sub2 = void 0;\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const sub1 = this.sub1;\n        const sub2 = this.sub2;\n        const source = this.source;\n        if (sub1 !== void 0) {\n            sub1.handleChange(source, args);\n        }\n        if (sub2 !== void 0) {\n            sub2.handleChange(source, args);\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nclass PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.sourceSubscribers = null;\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        var _a;\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n    }\n    /**\n     * Subscribes to notification of changes in an object\'s state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        var _a;\n        if (propertyToWatch) {\n            let subscribers = this.subscribers[propertyToWatch];\n            if (subscribers === void 0) {\n                this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n            }\n            subscribers.subscribe(subscriber);\n        }\n        else {\n            this.sourceSubscribers = (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n            this.sourceSubscribers.subscribe(subscriber);\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object\'s state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        var _a;\n        if (propertyToUnwatch) {\n            const subscribers = this.subscribers[propertyToUnwatch];\n            if (subscribers !== void 0) {\n                subscribers.unsubscribe(subscriber);\n            }\n        }\n        else {\n            (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/observable.js\n\n\n\n/**\n * Common Observable APIs.\n * @public\n */\nconst Observable = FAST.getById(2 /* observable */, () => {\n    const volatileRegex = /(:|&&|\\|\\||if)/;\n    const notifierLookup = new WeakMap();\n    const accessorLookup = new WeakMap();\n    const queueUpdate = DOM.queueUpdate;\n    let watcher = void 0;\n    let createArrayObserver = (array) => {\n        throw new Error("Must call enableArrayObservation before observing arrays.");\n    };\n    function getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    }\n    function getAccessors(target) {\n        let accessors = accessorLookup.get(target);\n        if (accessors === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (accessors === void 0 && currentTarget !== null) {\n                accessors = accessorLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            if (accessors === void 0) {\n                accessors = [];\n            }\n            else {\n                accessors = accessors.slice(0);\n            }\n            accessorLookup.set(target, accessors);\n        }\n        return accessors;\n    }\n    class DefaultObservableAccessor {\n        constructor(name) {\n            this.name = name;\n            this.field = `_${name}`;\n            this.callback = `${name}Changed`;\n        }\n        getValue(source) {\n            if (watcher !== void 0) {\n                watcher.watch(source, this.name);\n            }\n            return source[this.field];\n        }\n        setValue(source, newValue) {\n            const field = this.field;\n            const oldValue = source[field];\n            if (oldValue !== newValue) {\n                source[field] = newValue;\n                const callback = source[this.callback];\n                if (typeof callback === "function") {\n                    callback.call(source, oldValue, newValue);\n                }\n                getNotifier(source).notify(this.name);\n            }\n        }\n    }\n    class BindingObserverImplementation extends SubscriberSet {\n        constructor(binding, initialSubscriber, isVolatileBinding = false) {\n            super(binding, initialSubscriber);\n            this.binding = binding;\n            this.isVolatileBinding = isVolatileBinding;\n            this.needsRefresh = true;\n            this.needsQueue = true;\n            this.first = this;\n            this.last = null;\n            this.propertySource = void 0;\n            this.propertyName = void 0;\n            this.notifier = void 0;\n            this.next = void 0;\n        }\n        observe(source, context) {\n            if (this.needsRefresh && this.last !== null) {\n                this.disconnect();\n            }\n            const previousWatcher = watcher;\n            watcher = this.needsRefresh ? this : void 0;\n            this.needsRefresh = this.isVolatileBinding;\n            const result = this.binding(source, context);\n            watcher = previousWatcher;\n            return result;\n        }\n        disconnect() {\n            if (this.last !== null) {\n                let current = this.first;\n                while (current !== void 0) {\n                    current.notifier.unsubscribe(this, current.propertyName);\n                    current = current.next;\n                }\n                this.last = null;\n                this.needsRefresh = this.needsQueue = true;\n            }\n        }\n        watch(propertySource, propertyName) {\n            const prev = this.last;\n            const notifier = getNotifier(propertySource);\n            const current = prev === null ? this.first : {};\n            current.propertySource = propertySource;\n            current.propertyName = propertyName;\n            current.notifier = notifier;\n            notifier.subscribe(this, propertyName);\n            if (prev !== null) {\n                if (!this.needsRefresh) {\n                    // Declaring the variable prior to assignment below circumvents\n                    // a bug in Angular\'s optimization process causing infinite recursion\n                    // of this watch() method. Details https://github.com/microsoft/fast/issues/4969\n                    let prevValue;\n                    watcher = void 0;\n                    /* eslint-disable-next-line */\n                    prevValue = prev.propertySource[prev.propertyName];\n                    watcher = this;\n                    if (propertySource === prevValue) {\n                        this.needsRefresh = true;\n                    }\n                }\n                prev.next = current;\n            }\n            this.last = current;\n        }\n        handleChange() {\n            if (this.needsQueue) {\n                this.needsQueue = false;\n                queueUpdate(this);\n            }\n        }\n        call() {\n            if (this.last !== null) {\n                this.needsQueue = true;\n                this.notify(this);\n            }\n        }\n        records() {\n            let next = this.first;\n            return {\n                next: () => {\n                    const current = next;\n                    if (current === undefined) {\n                        return { value: void 0, done: true };\n                    }\n                    else {\n                        next = next.next;\n                        return {\n                            value: current,\n                            done: false,\n                        };\n                    }\n                },\n                [Symbol.iterator]: function () {\n                    return this;\n                },\n            };\n        }\n    }\n    return Object.freeze({\n        /**\n         * @internal\n         * @param factory - The factory used to create array observers.\n         */\n        setArrayObserverFactory(factory) {\n            createArrayObserver = factory;\n        },\n        /**\n         * Gets a notifier for an object or Array.\n         * @param source - The object or Array to get the notifier for.\n         */\n        getNotifier,\n        /**\n         * Records a property change for a source object.\n         * @param source - The object to record the change against.\n         * @param propertyName - The property to track as changed.\n         */\n        track(source, propertyName) {\n            if (watcher !== void 0) {\n                watcher.watch(source, propertyName);\n            }\n        },\n        /**\n         * Notifies watchers that the currently executing property getter or function is volatile\n         * with respect to its observable dependencies.\n         */\n        trackVolatile() {\n            if (watcher !== void 0) {\n                watcher.needsRefresh = true;\n            }\n        },\n        /**\n         * Notifies subscribers of a source object of changes.\n         * @param source - the object to notify of changes.\n         * @param args - The change args to pass to subscribers.\n         */\n        notify(source, args) {\n            getNotifier(source).notify(args);\n        },\n        /**\n         * Defines an observable property on an object or prototype.\n         * @param target - The target object to define the observable on.\n         * @param nameOrAccessor - The name of the property to define as observable;\n         * or a custom accessor that specifies the property name and accessor implementation.\n         */\n        defineProperty(target, nameOrAccessor) {\n            if (typeof nameOrAccessor === "string") {\n                nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n            }\n            getAccessors(target).push(nameOrAccessor);\n            Reflect.defineProperty(target, nameOrAccessor.name, {\n                enumerable: true,\n                get: function () {\n                    return nameOrAccessor.getValue(this);\n                },\n                set: function (newValue) {\n                    nameOrAccessor.setValue(this, newValue);\n                },\n            });\n        },\n        /**\n         * Finds all the observable accessors defined on the target,\n         * including its prototype chain.\n         * @param target - The target object to search for accessor on.\n         */\n        getAccessors,\n        /**\n         * Creates a {@link BindingObserver} that can watch the\n         * provided {@link Binding} for changes.\n         * @param binding - The binding to observe.\n         * @param initialSubscriber - An initial subscriber to changes in the binding value.\n         * @param isVolatileBinding - Indicates whether the binding\'s dependency list must be re-evaluated on every value evaluation.\n         */\n        binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n            return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n        },\n        /**\n         * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n         * on every evaluation of the value.\n         * @param binding - The binding to inspect.\n         */\n        isVolatileBinding(binding) {\n            return volatileRegex.test(binding.toString());\n        },\n    });\n});\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nfunction observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nfunction observable_volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            Observable.trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nconst contextEvent = FAST.getById(3 /* contextEvent */, () => {\n    let current = null;\n    return {\n        get() {\n            return current;\n        },\n        set(event) {\n            current = event;\n        },\n    };\n});\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nclass ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return contextEvent.get();\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n    /**\n     * Sets the event for the current execution context.\n     * @param event - The event to set.\n     * @internal\n     */\n    static setEvent(event) {\n        contextEvent.set(event);\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, "index");\nObservable.defineProperty(ExecutionContext.prototype, "length");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nconst defaultExecutionContext = Object.seal(new ExecutionContext());\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js\n\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nclass element_styles_ElementStyles {\n    constructor() {\n        this.targets = new WeakSet();\n        /** @internal */\n        this.behaviors = null;\n    }\n    /** @internal */\n    addStylesTo(target) {\n        this.targets.add(target);\n    }\n    /** @internal */\n    removeStylesFrom(target) {\n        this.targets.delete(target);\n    }\n    /** @internal */\n    isAttachedTo(target) {\n        return this.targets.has(target);\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n}\n/**\n * Create ElementStyles from ComposableStyles.\n */\nelement_styles_ElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => \n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof element_styles_ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof element_styles_ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nclass AdoptedStyleSheetsStyles extends element_styles_ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.styleSheetCache = styleSheetCache;\n        this._styleSheets = void 0;\n        this.behaviors = reduceBehaviors(styles);\n    }\n    get styleSheets() {\n        if (this._styleSheets === void 0) {\n            const styles = this.styles;\n            const styleSheetCache = this.styleSheetCache;\n            this._styleSheets = reduceStyles(styles).map((x) => {\n                if (x instanceof CSSStyleSheet) {\n                    return x;\n                }\n                let sheet = styleSheetCache.get(x);\n                if (sheet === void 0) {\n                    sheet = new CSSStyleSheet();\n                    sheet.replaceSync(x);\n                    styleSheetCache.set(x, sheet);\n                }\n                return sheet;\n            });\n        }\n        return this._styleSheets;\n    }\n    addStylesTo(target) {\n        target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...this.styleSheets];\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        const sourceSheets = this.styleSheets;\n        target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sourceSheets.indexOf(x) === -1);\n        super.removeStylesFrom(target);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nclass StyleElementStyles extends element_styles_ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        target = this.normalizeTarget(target);\n        for (let i = 0; i < styleSheets.length; i++) {\n            const element = document.createElement("style");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.append(element);\n        }\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        target = this.normalizeTarget(target);\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n        super.removeStylesFrom(target);\n    }\n    isAttachedTo(target) {\n        return super.isAttachedTo(this.normalizeTarget(target));\n    }\n    normalizeTarget(target) {\n        return target === document ? document.body : target;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/attributes.js\n\n\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nconst booleanConverter = {\n    toView(value) {\n        return value ? "true" : "false";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === "false" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nconst nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nclass AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = "reflect", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === "boolean" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === "fromView") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case "reflect":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case "boolean":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(Owner.attributes);\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === "string") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nfunction attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        const attributes = $target.constructor.attributes ||\n            ($target.constructor.attributes = []);\n        attributes.push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js\n\n\n\n\nconst defaultShadowOptions = { mode: "open" };\nconst defaultElementOptions = {};\nconst fastRegistry = FAST.getById(4 /* elementRegistry */, () => {\n    const typeToDefinition = new Map();\n    return Object.freeze({\n        register(definition) {\n            if (typeToDefinition.has(definition.type)) {\n                return false;\n            }\n            typeToDefinition.set(definition.type, definition);\n            return true;\n        },\n        getByType(key) {\n            return typeToDefinition.get(key);\n        },\n    });\n});\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nclass fast_definitions_FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === "string") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? element_styles_ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof element_styles_ElementStyles\n                        ? nameOrConfig.styles\n                        : element_styles_ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Indicates if this element has been defined in at least one registry.\n     */\n    get isDefined() {\n        return !!fastRegistry.getByType(this.type);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (fastRegistry.register(this)) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, "observedAttributes", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n}\n/**\n * Gets the element definition associated with the specified type.\n * @param type - The custom element type to retrieve the definition for.\n */\nfast_definitions_FASTElementDefinition.forType = fastRegistry.getByType;\n\n;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar tslib_es6_assign = function() {\r\n    tslib_es6_assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return tslib_es6_assign.apply(this, arguments);\r\n}\r\n\r\nfunction tslib_es6_rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to get private field on non-instance");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to set private field on non-instance");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/controller.js\n\n\n\n\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n    cancelable: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nclass Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        this._isConnected = false;\n        /**\n         * This allows Observable.getNotifier(...) to return the Controller\n         * when the notifier for the Controller itself is being requested. The\n         * result is that the Observable system does not need to create a separate\n         * instance of Notifier for observables on the Controller. The component and\n         * the controller will now share the same notifier, removing one-object construct\n         * per web component instance.\n         */\n        this.$fastController = this;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === "closed") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we\'ll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Indicates whether or not the custom element has been\n     * connected to the document.\n     */\n    get isConnected() {\n        Observable.track(this, "isConnected");\n        return this._isConnected;\n    }\n    setIsConnected(value) {\n        this._isConnected = value;\n        Observable.notify(this, "isConnected");\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.append(styles);\n        }\n        else if (!styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.addStylesTo(target);\n            if (sourceBehaviors !== null) {\n                this.addBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.removeChild(styles);\n        }\n        else if (styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.removeStylesFrom(target);\n            if (sourceBehaviors !== null) {\n                this.removeBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = new Map());\n        const length = behaviors.length;\n        const behaviorsToBind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);\n            }\n            else {\n                targetBehaviors.set(behavior, 1);\n                behaviorsToBind.push(behavior);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToBind.length; ++i) {\n                behaviorsToBind[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     * @param force - Forces unbinding of behaviors.\n     */\n    removeBehaviors(behaviors, force = false) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        const behaviorsToUnbind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                const count = targetBehaviors.get(behavior) - 1;\n                count === 0 || force\n                    ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior)\n                    : targetBehaviors.set(behavior, count);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToUnbind.length; ++i) {\n                behaviorsToUnbind[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this._isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (const [behavior] of behaviors) {\n                behavior.bind(element, defaultExecutionContext);\n            }\n        }\n        this.setIsConnected(true);\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (!this._isConnected) {\n            return;\n        }\n        this.setIsConnected(false);\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (const [behavior] of behaviors) {\n                behavior.unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this._isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there\'s no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root\'s content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn\'t one, then that means\n        // we\'re doing a Light DOM render to the element\'s direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there\'s already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = fast_definitions_FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error("Missing FASTElement definition.");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js\n\n\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nconst FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new fast_definitions_FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nfunction customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/di/di.js\n/**\n * Big thanks to https://github.com/fkleuver and the https://github.com/aurelia/aurelia project\n * for the bulk of this code and many of the associated tests.\n */\n\n// Tiny polyfill for TypeScript\'s Reflect metadata API.\nconst metadataByTarget = new Map();\nif (!("metadata" in Reflect)) {\n    Reflect.metadata = function (key, value) {\n        return function (target) {\n            Reflect.defineMetadata(key, value, target);\n        };\n    };\n    Reflect.defineMetadata = function (key, value, target) {\n        let metadata = metadataByTarget.get(target);\n        if (metadata === void 0) {\n            metadataByTarget.set(target, (metadata = new Map()));\n        }\n        metadata.set(key, value);\n    };\n    Reflect.getOwnMetadata = function (key, target) {\n        const metadata = metadataByTarget.get(target);\n        if (metadata !== void 0) {\n            return metadata.get(key);\n        }\n        return void 0;\n    };\n}\n/**\n * A utility class used that constructs and registers resolvers for a dependency\n * injection container. Supports a standard set of object lifetimes.\n * @public\n */\nclass ResolverBuilder {\n    /**\n     *\n     * @param container - The container to create resolvers for.\n     * @param key - The key to register resolvers under.\n     */\n    constructor(container, key) {\n        this.container = container;\n        this.key = key;\n    }\n    /**\n     * Creates a resolver for an existing object instance.\n     * @param value - The instance to resolve.\n     * @returns The resolver.\n     */\n    instance(value) {\n        return this.registerResolver(0 /* instance */, value);\n    }\n    /**\n     * Creates a resolver that enforces a singleton lifetime.\n     * @param value - The type to create and cache the singleton for.\n     * @returns The resolver.\n     */\n    singleton(value) {\n        return this.registerResolver(1 /* singleton */, value);\n    }\n    /**\n     * Creates a resolver that creates a new instance for every dependency request.\n     * @param value - The type to create instances of.\n     * @returns - The resolver.\n     */\n    transient(value) {\n        return this.registerResolver(2 /* transient */, value);\n    }\n    /**\n     * Creates a resolver that invokes a callback function for every dependency resolution\n     * request, allowing custom logic to return the dependency.\n     * @param value - The callback to call during resolution.\n     * @returns The resolver.\n     */\n    callback(value) {\n        return this.registerResolver(3 /* callback */, value);\n    }\n    /**\n     * Creates a resolver that invokes a callback function the first time that a dependency\n     * resolution is requested. The returned value is then cached and provided for all\n     * subsequent requests.\n     * @param value - The callback to call during the first resolution.\n     * @returns The resolver.\n     */\n    cachedCallback(value) {\n        return this.registerResolver(3 /* callback */, cacheCallbackResult(value));\n    }\n    /**\n     * Aliases the current key to a different key.\n     * @param destinationKey - The key to point the alias to.\n     * @returns The resolver.\n     */\n    aliasTo(destinationKey) {\n        return this.registerResolver(5 /* alias */, destinationKey);\n    }\n    registerResolver(strategy, state) {\n        const { container, key } = this;\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        this.container = this.key = (void 0);\n        return container.registerResolver(key, new ResolverImpl(key, strategy, state));\n    }\n}\nfunction cloneArrayWithPossibleProps(source) {\n    const clone = source.slice();\n    const keys = Object.keys(source);\n    const len = keys.length;\n    let key;\n    for (let i = 0; i < len; ++i) {\n        key = keys[i];\n        if (!isArrayIndex(key)) {\n            clone[key] = source[key];\n        }\n    }\n    return clone;\n}\n/**\n * A set of default resolvers useful in configuring a container.\n * @public\n */\nconst DefaultResolver = Object.freeze({\n    /**\n     * Disables auto-registration and throws for all un-registered dependencies.\n     * @param key - The key to create the resolver for.\n     */\n    none(key) {\n        throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`);\n    },\n    /**\n     * Provides default singleton resolution behavior during auto-registration.\n     * @param key - The key to create the resolver for.\n     * @returns The resolver.\n     */\n    singleton(key) {\n        return new ResolverImpl(key, 1 /* singleton */, key);\n    },\n    /**\n     * Provides default transient resolution behavior during auto-registration.\n     * @param key - The key to create the resolver for.\n     * @returns The resolver.\n     */\n    transient(key) {\n        return new ResolverImpl(key, 2 /* transient */, key);\n    },\n});\n/**\n * Configuration for a dependency injection container.\n * @public\n */\nconst ContainerConfiguration = Object.freeze({\n    /**\n     * The default configuration used when creating a DOM-disconnected container.\n     * @remarks\n     * The default creates a root container, with no parent container. It does not handle\n     * owner requests and it uses singleton resolution behavior for auto-registration.\n     */\n    default: Object.freeze({\n        parentLocator: () => null,\n        responsibleForOwnerRequests: false,\n        defaultResolver: DefaultResolver.singleton,\n    }),\n});\nconst dependencyLookup = new Map();\nfunction getParamTypes(key) {\n    return (Type) => {\n        return Reflect.getOwnMetadata(key, Type);\n    };\n}\nlet rootDOMContainer = null;\n/**\n * The gateway to dependency injection APIs.\n * @public\n */\nconst DI = Object.freeze({\n    /**\n     * Creates a new dependency injection container.\n     * @param config - The configuration for the container.\n     * @returns A newly created dependency injection container.\n     */\n    createContainer(config) {\n        return new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config));\n    },\n    /**\n     * Finds the dependency injection container responsible for providing dependencies\n     * to the specified node.\n     * @param node - The node to find the responsible container for.\n     * @returns The container responsible for providing dependencies to the node.\n     * @remarks\n     * This will be the same as the parent container if the specified node\n     * does not itself host a container configured with responsibleForOwnerRequests.\n     */\n    findResponsibleContainer(node) {\n        const owned = node.$$container$$;\n        if (owned && owned.responsibleForOwnerRequests) {\n            return owned;\n        }\n        return DI.findParentContainer(node);\n    },\n    /**\n     * Find the dependency injection container up the DOM tree from this node.\n     * @param node - The node to find the parent container for.\n     * @returns The parent container of this node.\n     * @remarks\n     * This will be the same as the responsible container if the specified node\n     * does not itself host a container configured with responsibleForOwnerRequests.\n     */\n    findParentContainer(node) {\n        const event = new CustomEvent(DILocateParentEventType, {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            detail: { container: void 0 },\n        });\n        node.dispatchEvent(event);\n        return event.detail.container || DI.getOrCreateDOMContainer();\n    },\n    /**\n     * Returns a dependency injection container if one is explicitly owned by the specified\n     * node. If one is not owned, then a new container is created and assigned to the node.\n     * @param node - The node to find or create the container for.\n     * @param config - The configuration for the container if one needs to be created.\n     * @returns The located or created container.\n     * @remarks\n     * This API does not search for a responsible or parent container. It looks only for a container\n     * directly defined on the specified node and creates one at that location if one does not\n     * already exist.\n     */\n    getOrCreateDOMContainer(node, config) {\n        if (!node) {\n            return (rootDOMContainer ||\n                (rootDOMContainer = new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config, {\n                    parentLocator: () => null,\n                }))));\n        }\n        return (node.$$container$$ ||\n            new ContainerImpl(node, Object.assign({}, ContainerConfiguration.default, config, {\n                parentLocator: DI.findParentContainer,\n            })));\n    },\n    /**\n     * Gets the "design:paramtypes" metadata for the specified type.\n     * @param Type - The type to get the metadata for.\n     * @returns The metadata array or undefined if no metadata is found.\n     */\n    getDesignParamtypes: getParamTypes("design:paramtypes"),\n    /**\n     * Gets the "di:paramtypes" metadata for the specified type.\n     * @param Type - The type to get the metadata for.\n     * @returns The metadata array or undefined if no metadata is found.\n     */\n    getAnnotationParamtypes: getParamTypes("di:paramtypes"),\n    /**\n     *\n     * @param Type - Gets the "di:paramtypes" metadata for the specified type. If none is found,\n     * an empty metadata array is created and added.\n     * @returns The metadata array.\n     */\n    getOrCreateAnnotationParamTypes(Type) {\n        let annotationParamtypes = this.getAnnotationParamtypes(Type);\n        if (annotationParamtypes === void 0) {\n            Reflect.defineMetadata("di:paramtypes", (annotationParamtypes = []), Type);\n        }\n        return annotationParamtypes;\n    },\n    /**\n     * Gets the dependency keys representing what is needed to instantiate the specified type.\n     * @param Type - The type to get the dependencies for.\n     * @returns An array of dependency keys.\n     */\n    getDependencies(Type) {\n        // Note: Every detail of this getDependencies method is pretty deliberate at the moment, and probably not yet 100% tested from every possible angle,\n        // so be careful with making changes here as it can have a huge impact on complex end user apps.\n        // Preferably, only make changes to the dependency resolution process via a RFC.\n        let dependencies = dependencyLookup.get(Type);\n        if (dependencies === void 0) {\n            // Type.length is the number of constructor parameters. If this is 0, it could mean the class has an empty constructor\n            // but it could also mean the class has no constructor at all (in which case it inherits the constructor from the prototype).\n            // Non-zero constructor length + no paramtypes means emitDecoratorMetadata is off, or the class has no decorator.\n            // We\'re not doing anything with the above right now, but it\'s good to keep in mind for any future issues.\n            const inject = Type.inject;\n            if (inject === void 0) {\n                // design:paramtypes is set by tsc when emitDecoratorMetadata is enabled.\n                const designParamtypes = DI.getDesignParamtypes(Type);\n                // di:paramtypes is set by the parameter decorator from DI.createInterface or by @inject\n                const annotationParamtypes = DI.getAnnotationParamtypes(Type);\n                if (designParamtypes === void 0) {\n                    if (annotationParamtypes === void 0) {\n                        // Only go up the prototype if neither static inject nor any of the paramtypes is defined, as\n                        // there is no sound way to merge a type\'s deps with its prototype\'s deps\n                        const Proto = Object.getPrototypeOf(Type);\n                        if (typeof Proto === "function" && Proto !== Function.prototype) {\n                            dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));\n                        }\n                        else {\n                            dependencies = [];\n                        }\n                    }\n                    else {\n                        // No design:paramtypes so just use the di:paramtypes\n                        dependencies = cloneArrayWithPossibleProps(annotationParamtypes);\n                    }\n                }\n                else if (annotationParamtypes === void 0) {\n                    // No di:paramtypes so just use the design:paramtypes\n                    dependencies = cloneArrayWithPossibleProps(designParamtypes);\n                }\n                else {\n                    // We\'ve got both, so merge them (in case of conflict on same index, di:paramtypes take precedence)\n                    dependencies = cloneArrayWithPossibleProps(designParamtypes);\n                    let len = annotationParamtypes.length;\n                    let auAnnotationParamtype;\n                    for (let i = 0; i < len; ++i) {\n                        auAnnotationParamtype = annotationParamtypes[i];\n                        if (auAnnotationParamtype !== void 0) {\n                            dependencies[i] = auAnnotationParamtype;\n                        }\n                    }\n                    const keys = Object.keys(annotationParamtypes);\n                    len = keys.length;\n                    let key;\n                    for (let i = 0; i < len; ++i) {\n                        key = keys[i];\n                        if (!isArrayIndex(key)) {\n                            dependencies[key] = annotationParamtypes[key];\n                        }\n                    }\n                }\n            }\n            else {\n                // Ignore paramtypes if we have static inject\n                dependencies = cloneArrayWithPossibleProps(inject);\n            }\n            dependencyLookup.set(Type, dependencies);\n        }\n        return dependencies;\n    },\n    /**\n     * Defines a property on a web component class. The value of this property will\n     * be resolved from the dependency injection container responsible for the element\n     * instance, based on where it is connected in the DOM.\n     * @param target - The target to define the property on.\n     * @param propertyName - The name of the property to define.\n     * @param key - The dependency injection key.\n     * @param respectConnection - Indicates whether or not to update the property value if the\n     * hosting component is disconnected and then re-connected at a different location in the DOM.\n     * @remarks\n     * The respectConnection option is only applicable to elements that descend from FASTElement.\n     */\n    defineProperty(target, propertyName, key, respectConnection = false) {\n        const diPropertyKey = `$di_${propertyName}`;\n        Reflect.defineProperty(target, propertyName, {\n            get: function () {\n                let value = this[diPropertyKey];\n                if (value === void 0) {\n                    const container = this instanceof HTMLElement\n                        ? DI.findResponsibleContainer(this)\n                        : DI.getOrCreateDOMContainer();\n                    value = container.get(key);\n                    this[diPropertyKey] = value;\n                    if (respectConnection && this instanceof FASTElement) {\n                        const notifier = this.$fastController;\n                        const handleChange = () => {\n                            const newContainer = DI.findResponsibleContainer(this);\n                            const newValue = newContainer.get(key);\n                            const oldValue = this[diPropertyKey];\n                            if (newValue !== oldValue) {\n                                this[diPropertyKey] = value;\n                                notifier.notify(propertyName);\n                            }\n                        };\n                        notifier.subscribe({ handleChange }, "isConnected");\n                    }\n                }\n                return value;\n            },\n        });\n    },\n    /**\n     * Creates a dependency injection key.\n     * @param nameConfigOrCallback - A friendly name for the key or a lambda that configures a\n     * default resolution for the dependency.\n     * @param configuror - If a friendly name was provided for the first parameter, then an optional\n     * lambda that configures a default resolution for the dependency can be provided second.\n     * @returns The created key.\n     * @remarks\n     * The created key can be used as a property decorator or constructor parameter decorator,\n     * in addition to its standard use in an inject array or through direct container APIs.\n     */\n    createInterface(nameConfigOrCallback, configuror) {\n        const configure = typeof nameConfigOrCallback === "function"\n            ? nameConfigOrCallback\n            : configuror;\n        const friendlyName = typeof nameConfigOrCallback === "string"\n            ? nameConfigOrCallback\n            : nameConfigOrCallback && "friendlyName" in nameConfigOrCallback\n                ? nameConfigOrCallback.friendlyName || defaultFriendlyName\n                : defaultFriendlyName;\n        const respectConnection = typeof nameConfigOrCallback === "string"\n            ? false\n            : nameConfigOrCallback && "respectConnection" in nameConfigOrCallback\n                ? nameConfigOrCallback.respectConnection || false\n                : false;\n        const Interface = function (target, property, index) {\n            if (target == null || new.target !== undefined) {\n                throw new Error(`No registration for interface: \'${Interface.friendlyName}\'`);\n            }\n            if (property) {\n                DI.defineProperty(target, property, Interface, respectConnection);\n            }\n            else {\n                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);\n                annotationParamtypes[index] = Interface;\n            }\n        };\n        Interface.$isInterface = true;\n        Interface.friendlyName = friendlyName == null ? "(anonymous)" : friendlyName;\n        if (configure != null) {\n            Interface.register = function (container, key) {\n                return configure(new ResolverBuilder(container, key !== null && key !== void 0 ? key : Interface));\n            };\n        }\n        Interface.toString = function toString() {\n            return `InterfaceSymbol<${Interface.friendlyName}>`;\n        };\n        return Interface;\n    },\n    /**\n     * A decorator that specifies what to inject into its target.\n     * @param dependencies - The dependencies to inject.\n     * @returns The decorator to be applied to the target class.\n     * @remarks\n     * The decorator can be used to decorate a class, listing all of the classes dependencies.\n     * Or it can be used to decorate a constructor paramter, indicating what to inject for that\n     * parameter.\n     * Or it can be used for a web component property, indicating what that property should resolve to.\n     */\n    inject(...dependencies) {\n        return function (target, key, descriptor) {\n            if (typeof descriptor === "number") {\n                // It\'s a parameter decorator.\n                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);\n                const dep = dependencies[0];\n                if (dep !== void 0) {\n                    annotationParamtypes[descriptor] = dep;\n                }\n            }\n            else if (key) {\n                DI.defineProperty(target, key, dependencies[0]);\n            }\n            else {\n                const annotationParamtypes = descriptor\n                    ? DI.getOrCreateAnnotationParamTypes(descriptor.value)\n                    : DI.getOrCreateAnnotationParamTypes(target);\n                let dep;\n                for (let i = 0; i < dependencies.length; ++i) {\n                    dep = dependencies[i];\n                    if (dep !== void 0) {\n                        annotationParamtypes[i] = dep;\n                    }\n                }\n            }\n        };\n    },\n    /**\n     * Registers the `target` class as a transient dependency; each time the dependency is resolved\n     * a new instance will be created.\n     *\n     * @param target - The class / constructor function to register as transient.\n     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n     *\n     * @example\n     * On an existing class\n     * ```ts\n     * class Foo { }\n     * DI.transient(Foo);\n     * ```\n     *\n     * @example\n     * Inline declaration\n     *\n     * ```ts\n     * const Foo = DI.transient(class { });\n     * // Foo is now strongly typed with register\n     * Foo.register(container);\n     * ```\n     *\n     * @public\n     */\n    transient(target) {\n        target.register = function register(container) {\n            const registration = Registration.transient(target, target);\n            return registration.register(container);\n        };\n        target.registerInRequestor = false;\n        return target;\n    },\n    /**\n     * Registers the `target` class as a singleton dependency; the class will only be created once. Each\n     * consecutive time the dependency is resolved, the same instance will be returned.\n     *\n     * @param target - The class / constructor function to register as a singleton.\n     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n     * @example\n     * On an existing class\n     * ```ts\n     * class Foo { }\n     * DI.singleton(Foo);\n     * ```\n     *\n     * @example\n     * Inline declaration\n     * ```ts\n     * const Foo = DI.singleton(class { });\n     * // Foo is now strongly typed with register\n     * Foo.register(container);\n     * ```\n     *\n     * @public\n     */\n    singleton(target, options = defaultSingletonOptions) {\n        target.register = function register(container) {\n            const registration = Registration.singleton(target, target);\n            return registration.register(container);\n        };\n        target.registerInRequestor = options.scoped;\n        return target;\n    },\n});\n/**\n * The interface key that resolves the dependency injection container itself.\n * @public\n */\nconst Container = DI.createInterface("Container");\n/**\n * The interface key that resolves the service locator itself.\n * @public\n */\nconst ServiceLocator = (/* unused pure expression or super */ null && (Container));\nfunction createResolver(getter) {\n    return function (key) {\n        const resolver = function (target, property, descriptor) {\n            DI.inject(resolver)(target, property, descriptor);\n        };\n        resolver.$isResolver = true;\n        resolver.resolve = function (handler, requestor) {\n            return getter(key, handler, requestor);\n        };\n        return resolver;\n    };\n}\n/**\n * A decorator that specifies what to inject into its target.\n * @param dependencies - The dependencies to inject.\n * @returns The decorator to be applied to the target class.\n * @remarks\n * The decorator can be used to decorate a class, listing all of the classes dependencies.\n * Or it can be used to decorate a constructor paramter, indicating what to inject for that\n * parameter.\n * Or it can be used for a web component property, indicating what that property should resolve to.\n *\n * @public\n */\nconst inject = DI.inject;\nfunction transientDecorator(target) {\n    return DI.transient(target);\n}\nfunction di_transient(target) {\n    return target == null ? transientDecorator : transientDecorator(target);\n}\nconst defaultSingletonOptions = { scoped: false };\nfunction singletonDecorator(target) {\n    return DI.singleton(target);\n}\n/**\n * @public\n */\nfunction singleton(targetOrOptions) {\n    if (typeof targetOrOptions === "function") {\n        return DI.singleton(targetOrOptions);\n    }\n    return function ($target) {\n        return DI.singleton($target, targetOrOptions);\n    };\n}\nfunction createAllResolver(getter) {\n    return function (key, searchAncestors) {\n        searchAncestors = !!searchAncestors;\n        const resolver = function (target, property, descriptor) {\n            DI.inject(resolver)(target, property, descriptor);\n        };\n        resolver.$isResolver = true;\n        resolver.resolve = function (handler, requestor) {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return getter(key, handler, requestor, searchAncestors);\n        };\n        return resolver;\n    };\n}\n/**\n * A decorator and DI resolver that will resolve an array of all dependencies\n * registered with the specified key.\n * @param key - The key to resolve all dependencies for.\n * @param searchAncestors - [optional] Indicates whether to search ancestor containers.\n * @public\n */\nconst di_all = createAllResolver((key, handler, requestor, searchAncestors) => requestor.getAll(key, searchAncestors));\n/**\n * A decorator that lazily injects a dependency depending on whether the `Key` is present at the time of function call.\n *\n * @example\n * You need to make your argument a function that returns the type, for example\n * ```ts\n * class Foo {\n *   constructor( @lazy(\'random\') public random: () => number )\n * }\n * const foo = container.get(Foo); // instanceof Foo\n * foo.random(); // throws\n * ```\n * would throw an exception because you haven\'t registered `\'random\'` before calling the method.\n * @example\n * This, would give you a new \'Math.random()\' number each time.\n * ```ts\n * class Foo {\n *   constructor( @lazy(\'random\') public random: () => random )\n * }\n * container.register(Registration.callback(\'random\', Math.random ));\n * container.get(Foo).random(); // some random number\n * container.get(Foo).random(); // another random number\n * ```\n *\n * `@lazy` does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a\n * `singleton`, `transient` would also behave as you would expect, providing you a new instance each time.\n *\n * @param key - The key to lazily resolve.\n * see {@link DI.createInterface} on interactions with interfaces\n *\n * @public\n */\nconst lazy = createResolver((key, handler, requestor) => {\n    return () => requestor.get(key);\n});\n/**\n * A decorator that allows you to optionally inject a dependency depending on whether the [[`Key`]] is present, for example:\n * @example\n * ```ts\n * class Foo {\n *   constructor( @inject(\'mystring\') public str: string = \'somestring\' )\n * }\n * container.get(Foo); // throws\n * ```\n * would fail\n *\n * @example\n * ```ts\n * class Foo {\n *   constructor( @optional(\'mystring\') public str: string = \'somestring\' )\n * }\n * container.get(Foo).str // somestring\n * ```\n * if you use it without a default it will inject `undefined`, so remember to mark your input type as\n * possibly `undefined`!\n *\n * @param key - The key to optionally resolve.\n * see {@link DI.createInterface} on interactions with interfaces\n *\n * @public\n */\nconst optional = createResolver((key, handler, requestor) => {\n    if (requestor.has(key, true)) {\n        return requestor.get(key);\n    }\n    else {\n        return undefined;\n    }\n});\n/**\n * A decorator that tells the container not to try to inject a dependency.\n *\n * @public\n */\nfunction ignore(target, property, descriptor) {\n    DI.inject(ignore)(target, property, descriptor);\n}\n// Hack: casting below used to prevent TS from generate a namespace which can\'t be commented\n// and results in documentation validation errors.\nignore.$isResolver = true;\nignore.resolve = () => undefined;\n/**\n * A decorator that indicates that a new instance should be injected scoped to the\n * container that requested the instance.\n * @param key - The dependency key for the new instance.\n * @remarks\n * This creates a resolver with an instance strategy pointing to the new instance, effectively\n * making this a singleton, scoped to the container or DOM\'s subtree.\n *\n * @public\n */\nconst newInstanceForScope = createResolver((key, handler, requestor) => {\n    const instance = createNewInstance(key, handler);\n    const resolver = new ResolverImpl(key, 0 /* instance */, instance);\n    requestor.registerResolver(key, resolver);\n    return instance;\n});\n/**\n * A decorator that indicates that a new instance should be injected.\n * @param key - The dependency key for the new instance.\n * @remarks\n * The instance is not internally cached with a resolver as newInstanceForScope does.\n *\n * @public\n */\nconst newInstanceOf = createResolver((key, handler, _requestor) => createNewInstance(key, handler));\nfunction createNewInstance(key, handler) {\n    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n    return handler.getFactory(key).construct(handler);\n}\n/** @internal */\nclass ResolverImpl {\n    constructor(key, strategy, state) {\n        this.key = key;\n        this.strategy = strategy;\n        this.state = state;\n        this.resolving = false;\n    }\n    get $isResolver() {\n        return true;\n    }\n    register(container) {\n        return container.registerResolver(this.key, this);\n    }\n    resolve(handler, requestor) {\n        switch (this.strategy) {\n            case 0 /* instance */:\n                return this.state;\n            case 1 /* singleton */: {\n                if (this.resolving) {\n                    throw new Error(`Cyclic dependency found: ${this.state.name}`);\n                }\n                this.resolving = true;\n                this.state = handler\n                    .getFactory(this.state)\n                    .construct(requestor);\n                this.strategy = 0 /* instance */;\n                this.resolving = false;\n                return this.state;\n            }\n            case 2 /* transient */: {\n                // Always create transients from the requesting container\n                const factory = handler.getFactory(this.state);\n                if (factory === null) {\n                    throw new Error(`Resolver for ${String(this.key)} returned a null factory`);\n                }\n                return factory.construct(requestor);\n            }\n            case 3 /* callback */:\n                return this.state(handler, requestor, this);\n            case 4 /* array */:\n                return this.state[0].resolve(handler, requestor);\n            case 5 /* alias */:\n                return requestor.get(this.state);\n            default:\n                throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`);\n        }\n    }\n    getFactory(container) {\n        var _a, _b, _c;\n        switch (this.strategy) {\n            case 1 /* singleton */:\n            case 2 /* transient */:\n                return container.getFactory(this.state);\n            case 5 /* alias */:\n                return (_c = (_b = (_a = container.getResolver(this.state)) === null || _a === void 0 ? void 0 : _a.getFactory) === null || _b === void 0 ? void 0 : _b.call(_a, container)) !== null && _c !== void 0 ? _c : null;\n            default:\n                return null;\n        }\n    }\n}\nfunction containerGetKey(d) {\n    return this.get(d);\n}\nfunction transformInstance(inst, transform) {\n    return transform(inst);\n}\n/** @internal */\nclass FactoryImpl {\n    constructor(Type, dependencies) {\n        this.Type = Type;\n        this.dependencies = dependencies;\n        this.transformers = null;\n    }\n    construct(container, dynamicDependencies) {\n        let instance;\n        if (dynamicDependencies === void 0) {\n            instance = new this.Type(...this.dependencies.map(containerGetKey, container));\n        }\n        else {\n            instance = new this.Type(...this.dependencies.map(containerGetKey, container), ...dynamicDependencies);\n        }\n        if (this.transformers == null) {\n            return instance;\n        }\n        return this.transformers.reduce(transformInstance, instance);\n    }\n    registerTransformer(transformer) {\n        (this.transformers || (this.transformers = [])).push(transformer);\n    }\n}\nconst containerResolver = {\n    $isResolver: true,\n    resolve(handler, requestor) {\n        return requestor;\n    },\n};\nfunction isRegistry(obj) {\n    return typeof obj.register === "function";\n}\nfunction isSelfRegistry(obj) {\n    return isRegistry(obj) && typeof obj.registerInRequestor === "boolean";\n}\nfunction isRegisterInRequester(obj) {\n    return isSelfRegistry(obj) && obj.registerInRequestor;\n}\nfunction isClass(obj) {\n    return obj.prototype !== void 0;\n}\nconst InstrinsicTypeNames = new Set([\n    "Array",\n    "ArrayBuffer",\n    "Boolean",\n    "DataView",\n    "Date",\n    "Error",\n    "EvalError",\n    "Float32Array",\n    "Float64Array",\n    "Function",\n    "Int8Array",\n    "Int16Array",\n    "Int32Array",\n    "Map",\n    "Number",\n    "Object",\n    "Promise",\n    "RangeError",\n    "ReferenceError",\n    "RegExp",\n    "Set",\n    "SharedArrayBuffer",\n    "String",\n    "SyntaxError",\n    "TypeError",\n    "Uint8Array",\n    "Uint8ClampedArray",\n    "Uint16Array",\n    "Uint32Array",\n    "URIError",\n    "WeakMap",\n    "WeakSet",\n]);\nconst DILocateParentEventType = "__DI_LOCATE_PARENT__";\nconst factories = new Map();\n/**\n * @internal\n */\nclass ContainerImpl {\n    constructor(owner, config) {\n        this.owner = owner;\n        this.config = config;\n        this._parent = void 0;\n        this.registerDepth = 0;\n        this.context = null;\n        if (owner !== null) {\n            owner.$$container$$ = this;\n        }\n        this.resolvers = new Map();\n        this.resolvers.set(Container, containerResolver);\n        if (owner instanceof Node) {\n            owner.addEventListener(DILocateParentEventType, (e) => {\n                if (e.composedPath()[0] !== this.owner) {\n                    e.detail.container = this;\n                    e.stopImmediatePropagation();\n                }\n            });\n        }\n    }\n    get parent() {\n        if (this._parent === void 0) {\n            this._parent = this.config.parentLocator(this.owner);\n        }\n        return this._parent;\n    }\n    get depth() {\n        return this.parent === null ? 0 : this.parent.depth + 1;\n    }\n    get responsibleForOwnerRequests() {\n        return this.config.responsibleForOwnerRequests;\n    }\n    registerWithContext(context, ...params) {\n        this.context = context;\n        this.register(...params);\n        this.context = null;\n        return this;\n    }\n    register(...params) {\n        if (++this.registerDepth === 100) {\n            throw new Error("Unable to autoregister dependency");\n            // Most likely cause is trying to register a plain object that does not have a\n            // register method and is not a class constructor\n        }\n        let current;\n        let keys;\n        let value;\n        let j;\n        let jj;\n        const context = this.context;\n        for (let i = 0, ii = params.length; i < ii; ++i) {\n            current = params[i];\n            if (!isObject(current)) {\n                continue;\n            }\n            if (isRegistry(current)) {\n                current.register(this, context);\n            }\n            else if (isClass(current)) {\n                Registration.singleton(current, current).register(this);\n            }\n            else {\n                keys = Object.keys(current);\n                j = 0;\n                jj = keys.length;\n                for (; j < jj; ++j) {\n                    value = current[keys[j]];\n                    if (!isObject(value)) {\n                        continue;\n                    }\n                    // note: we could remove this if-branch and call this.register directly\n                    // - the extra check is just a perf tweak to create fewer unnecessary arrays by the spread operator\n                    if (isRegistry(value)) {\n                        value.register(this, context);\n                    }\n                    else {\n                        this.register(value);\n                    }\n                }\n            }\n        }\n        --this.registerDepth;\n        return this;\n    }\n    registerResolver(key, resolver) {\n        validateKey(key);\n        const resolvers = this.resolvers;\n        const result = resolvers.get(key);\n        if (result == null) {\n            resolvers.set(key, resolver);\n        }\n        else if (result instanceof ResolverImpl &&\n            result.strategy === 4 /* array */) {\n            result.state.push(resolver);\n        }\n        else {\n            resolvers.set(key, new ResolverImpl(key, 4 /* array */, [result, resolver]));\n        }\n        return resolver;\n    }\n    registerTransformer(key, transformer) {\n        const resolver = this.getResolver(key);\n        if (resolver == null) {\n            return false;\n        }\n        if (resolver.getFactory) {\n            const factory = resolver.getFactory(this);\n            if (factory == null) {\n                return false;\n            }\n            // This type cast is a bit of a hacky one, necessary due to the duplicity of IResolverLike.\n            // Problem is that that interface\'s type arg can be of type Key, but the getFactory method only works on\n            // type Constructable. So the return type of that optional method has this additional constraint, which\n            // seems to confuse the type checker.\n            factory.registerTransformer(transformer);\n            return true;\n        }\n        return false;\n    }\n    getResolver(key, autoRegister = true) {\n        validateKey(key);\n        if (key.resolve !== void 0) {\n            return key;\n        }\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        let current = this;\n        let resolver;\n        while (current != null) {\n            resolver = current.resolvers.get(key);\n            if (resolver == null) {\n                if (current.parent == null) {\n                    const handler = isRegisterInRequester(key)\n                        ? this\n                        : current;\n                    return autoRegister ? this.jitRegister(key, handler) : null;\n                }\n                current = current.parent;\n            }\n            else {\n                return resolver;\n            }\n        }\n        return null;\n    }\n    has(key, searchAncestors = false) {\n        return this.resolvers.has(key)\n            ? true\n            : searchAncestors && this.parent != null\n                ? this.parent.has(key, true)\n                : false;\n    }\n    get(key) {\n        validateKey(key);\n        if (key.$isResolver) {\n            return key.resolve(this, this);\n        }\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        let current = this;\n        let resolver;\n        while (current != null) {\n            resolver = current.resolvers.get(key);\n            if (resolver == null) {\n                if (current.parent == null) {\n                    const handler = isRegisterInRequester(key)\n                        ? this\n                        : current;\n                    resolver = this.jitRegister(key, handler);\n                    return resolver.resolve(current, this);\n                }\n                current = current.parent;\n            }\n            else {\n                return resolver.resolve(current, this);\n            }\n        }\n        throw new Error(`Unable to resolve key: ${key}`);\n    }\n    getAll(key, searchAncestors = false) {\n        validateKey(key);\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        const requestor = this;\n        let current = requestor;\n        let resolver;\n        if (searchAncestors) {\n            let resolutions = emptyArray;\n            while (current != null) {\n                resolver = current.resolvers.get(key);\n                if (resolver != null) {\n                    resolutions = resolutions.concat(\n                    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n                    buildAllResponse(resolver, current, requestor));\n                }\n                current = current.parent;\n            }\n            return resolutions;\n        }\n        else {\n            while (current != null) {\n                resolver = current.resolvers.get(key);\n                if (resolver == null) {\n                    current = current.parent;\n                    if (current == null) {\n                        return emptyArray;\n                    }\n                }\n                else {\n                    return buildAllResponse(resolver, current, requestor);\n                }\n            }\n        }\n        return emptyArray;\n    }\n    getFactory(Type) {\n        let factory = factories.get(Type);\n        if (factory === void 0) {\n            if (isNativeFunction(Type)) {\n                throw new Error(`${Type.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);\n            }\n            factories.set(Type, (factory = new FactoryImpl(Type, DI.getDependencies(Type))));\n        }\n        return factory;\n    }\n    registerFactory(key, factory) {\n        factories.set(key, factory);\n    }\n    createChild(config) {\n        return new ContainerImpl(null, Object.assign({}, this.config, config, { parentLocator: () => this }));\n    }\n    jitRegister(keyAsValue, handler) {\n        if (typeof keyAsValue !== "function") {\n            throw new Error(`Attempted to jitRegister something that is not a constructor: \'${keyAsValue}\'. Did you forget to register this dependency?`);\n        }\n        if (InstrinsicTypeNames.has(keyAsValue.name)) {\n            throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);\n        }\n        if (isRegistry(keyAsValue)) {\n            const registrationResolver = keyAsValue.register(handler);\n            if (!(registrationResolver instanceof Object) ||\n                registrationResolver.resolve == null) {\n                const newResolver = handler.resolvers.get(keyAsValue);\n                if (newResolver != void 0) {\n                    return newResolver;\n                }\n                throw new Error("A valid resolver was not returned from the static register method");\n            }\n            return registrationResolver;\n        }\n        else if (keyAsValue.$isInterface) {\n            throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);\n        }\n        else {\n            const resolver = this.config.defaultResolver(keyAsValue, handler);\n            handler.resolvers.set(keyAsValue, resolver);\n            return resolver;\n        }\n    }\n}\nconst cache = new WeakMap();\nfunction cacheCallbackResult(fun) {\n    return function (handler, requestor, resolver) {\n        if (cache.has(resolver)) {\n            return cache.get(resolver);\n        }\n        const t = fun(handler, requestor, resolver);\n        cache.set(resolver, t);\n        return t;\n    };\n}\n/**\n * You can use the resulting Registration of any of the factory methods\n * to register with the container.\n *\n * @example\n * ```\n * class Foo {}\n * const container = DI.createContainer();\n * container.register(Registration.instance(Foo, new Foo()));\n * container.get(Foo);\n * ```\n *\n * @public\n */\nconst Registration = Object.freeze({\n    /**\n     * Allows you to pass an instance.\n     * Every time you request this {@link Key} you will get this instance back.\n     *\n     * @example\n     * ```\n     * Registration.instance(Foo, new Foo()));\n     * ```\n     *\n     * @param key - The key to register the instance under.\n     * @param value - The instance to return when the key is requested.\n     */\n    instance(key, value) {\n        return new ResolverImpl(key, 0 /* instance */, value);\n    },\n    /**\n     * Creates an instance from the class.\n     * Every time you request this {@link Key} you will get the same one back.\n     *\n     * @example\n     * ```\n     * Registration.singleton(Foo, Foo);\n     * ```\n     *\n     * @param key - The key to register the singleton under.\n     * @param value - The class to instantiate as a singleton when first requested.\n     */\n    singleton(key, value) {\n        return new ResolverImpl(key, 1 /* singleton */, value);\n    },\n    /**\n     * Creates an instance from a class.\n     * Every time you request this {@link Key} you will get a new instance.\n     *\n     * @example\n     * ```\n     * Registration.instance(Foo, Foo);\n     * ```\n     *\n     * @param key - The key to register the instance type under.\n     * @param value - The class to instantiate each time the key is requested.\n     */\n    transient(key, value) {\n        return new ResolverImpl(key, 2 /* transient */, value);\n    },\n    /**\n     * Delegates to a callback function to provide the dependency.\n     * Every time you request this {@link Key} the callback will be invoked to provide\n     * the dependency.\n     *\n     * @example\n     * ```\n     * Registration.callback(Foo, () => new Foo());\n     * Registration.callback(Bar, (c: Container) => new Bar(c.get(Foo)));\n     * ```\n     *\n     * @param key - The key to register the callback for.\n     * @param callback - The function that is expected to return the dependency.\n     */\n    callback(key, callback) {\n        return new ResolverImpl(key, 3 /* callback */, callback);\n    },\n    /**\n     * Delegates to a callback function to provide the dependency and then caches the\n     * dependency for future requests.\n     *\n     * @example\n     * ```\n     * Registration.cachedCallback(Foo, () => new Foo());\n     * Registration.cachedCallback(Bar, (c: Container) => new Bar(c.get(Foo)));\n     * ```\n     *\n     * @param key - The key to register the callback for.\n     * @param callback - The function that is expected to return the dependency.\n     * @remarks\n     * If you pass the same Registration to another container, the same cached value will be used.\n     * Should all references to the resolver returned be removed, the cache will expire.\n     */\n    cachedCallback(key, callback) {\n        return new ResolverImpl(key, 3 /* callback */, cacheCallbackResult(callback));\n    },\n    /**\n     * Creates an alternate {@link Key} to retrieve an instance by.\n     *\n     * @example\n     * ```\n     * Register.singleton(Foo, Foo)\n     * Register.aliasTo(Foo, MyFoos);\n     *\n     * container.getAll(MyFoos) // contains an instance of Foo\n     * ```\n     *\n     * @param originalKey - The original key that has been registered.\n     * @param aliasKey - The alias to the original key.\n     */\n    aliasTo(originalKey, aliasKey) {\n        return new ResolverImpl(aliasKey, 5 /* alias */, originalKey);\n    },\n});\n/** @internal */\nfunction validateKey(key) {\n    if (key === null || key === void 0) {\n        throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?");\n    }\n}\nfunction buildAllResponse(resolver, handler, requestor) {\n    if (resolver instanceof ResolverImpl &&\n        resolver.strategy === 4 /* array */) {\n        const state = resolver.state;\n        let i = state.length;\n        const results = new Array(i);\n        while (i--) {\n            results[i] = state[i].resolve(handler, requestor);\n        }\n        return results;\n    }\n    return [resolver.resolve(handler, requestor)];\n}\nconst defaultFriendlyName = "(anonymous)";\nfunction isObject(value) {\n    return (typeof value === "object" && value !== null) || typeof value === "function";\n}\n/**\n * Determine whether the value is a native function.\n *\n * @param fn - The function to check.\n * @returns `true` is the function is a native function, otherwise `false`\n */\nconst isNativeFunction = (function () {\n    const lookup = new WeakMap();\n    let isNative = false;\n    let sourceText = "";\n    let i = 0;\n    return function (fn) {\n        isNative = lookup.get(fn);\n        if (isNative === void 0) {\n            sourceText = fn.toString();\n            i = sourceText.length;\n            // http://www.ecma-international.org/ecma-262/#prod-NativeFunction\n            isNative =\n                // 29 is the length of \'function () { [native code] }\' which is the smallest length of a native function string\n                i >= 29 &&\n                    // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it\'s 56, in Edge it\'s 61.\n                    i <= 100 &&\n                    // This whole heuristic *could* be tricked by a comment. Do we need to care about that?\n                    sourceText.charCodeAt(i - 1) === 0x7d && // }\n                    // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.\n                    sourceText.charCodeAt(i - 2) <= 0x20 && // whitespace\n                    sourceText.charCodeAt(i - 3) === 0x5d && // ]\n                    sourceText.charCodeAt(i - 4) === 0x65 && // e\n                    sourceText.charCodeAt(i - 5) === 0x64 && // d\n                    sourceText.charCodeAt(i - 6) === 0x6f && // o\n                    sourceText.charCodeAt(i - 7) === 0x63 && // c\n                    sourceText.charCodeAt(i - 8) === 0x20 && //\n                    sourceText.charCodeAt(i - 9) === 0x65 && // e\n                    sourceText.charCodeAt(i - 10) === 0x76 && // v\n                    sourceText.charCodeAt(i - 11) === 0x69 && // i\n                    sourceText.charCodeAt(i - 12) === 0x74 && // t\n                    sourceText.charCodeAt(i - 13) === 0x61 && // a\n                    sourceText.charCodeAt(i - 14) === 0x6e && // n\n                    sourceText.charCodeAt(i - 15) === 0x58; // [\n            lookup.set(fn, isNative);\n        }\n        return isNative;\n    };\n})();\nconst isNumericLookup = {};\nfunction isArrayIndex(value) {\n    switch (typeof value) {\n        case "number":\n            return value >= 0 && (value | 0) === value;\n        case "string": {\n            const result = isNumericLookup[value];\n            if (result !== void 0) {\n                return result;\n            }\n            const length = value.length;\n            if (length === 0) {\n                return (isNumericLookup[value] = false);\n            }\n            let ch = 0;\n            for (let i = 0; i < length; ++i) {\n                ch = value.charCodeAt(i);\n                if ((i === 0 && ch === 0x30 && length > 1) /* must not start with 0 */ ||\n                    ch < 0x30 /* 0 */ ||\n                    ch > 0x39 /* 9 */) {\n                    return (isNumericLookup[value] = false);\n                }\n            }\n            return (isNumericLookup[value] = true);\n        }\n        default:\n            return false;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-system/component-presentation.js\n\n\nfunction presentationKeyFromTag(tagName) {\n    return `${tagName.toLowerCase()}:presentation`;\n}\nconst presentationRegistry = new Map();\n/**\n * An API gateway to component presentation features.\n * @public\n */\nconst ComponentPresentation = Object.freeze({\n    /**\n     * Defines a component presentation for an element.\n     * @param tagName - The element name to define the presentation for.\n     * @param presentation - The presentation that will be applied to matching elements.\n     * @param container - The dependency injection container to register the configuration in.\n     * @public\n     */\n    define(tagName, presentation, container) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === void 0) {\n            presentationRegistry.set(key, presentation);\n        }\n        else {\n            // false indicates that we have more than one presentation\n            // registered for a tagName and we must resolve through DI\n            presentationRegistry.set(key, false);\n        }\n        container.register(Registration.instance(key, presentation));\n    },\n    /**\n     * Finds a component presentation for the specified element name,\n     * searching the DOM hierarchy starting from the provided element.\n     * @param tagName - The name of the element to locate the presentation for.\n     * @param element - The element to begin the search from.\n     * @returns The component presentation or null if none is found.\n     * @public\n     */\n    forTag(tagName, element) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === false) {\n            const container = DI.findResponsibleContainer(element);\n            return container.get(key);\n        }\n        return existing || null;\n    },\n});\n/**\n * The default implementation of ComponentPresentation, used by FoundationElement.\n * @public\n */\nclass DefaultComponentPresentation {\n    /**\n     * Creates an instance of DefaultComponentPresentation.\n     * @param template - The template to apply to the element.\n     * @param styles - The styles to apply to the element.\n     * @public\n     */\n    constructor(template, styles) {\n        this.template = template || null;\n        this.styles =\n            styles === void 0\n                ? null\n                : Array.isArray(styles)\n                    ? element_styles_ElementStyles.create(styles)\n                    : styles instanceof element_styles_ElementStyles\n                        ? styles\n                        : element_styles_ElementStyles.create([styles]);\n    }\n    /**\n     * Applies the presentation details to the specified element.\n     * @param element - The element to apply the presentation details to.\n     * @public\n     */\n    applyTo(element) {\n        const controller = element.$fastController;\n        if (controller.template === null) {\n            controller.template = this.template;\n        }\n        if (controller.styles === null) {\n            controller.styles = this.styles;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/foundation-element/foundation-element.js\n\n\n\n/**\n * Defines a foundation element class that:\n * 1. Connects the element to its ComponentPresentation\n * 2. Allows resolving the element template from the instance or ComponentPresentation\n * 3. Allows resolving the element styles from the instance or ComponentPresentation\n *\n * @public\n */\nclass FoundationElement extends FASTElement {\n    constructor() {\n        super(...arguments);\n        this._presentation = void 0;\n    }\n    /**\n     * A property which resolves the ComponentPresentation instance\n     * for the current component.\n     * @public\n     */\n    get $presentation() {\n        if (this._presentation === void 0) {\n            this._presentation = ComponentPresentation.forTag(this.tagName, this);\n        }\n        return this._presentation;\n    }\n    templateChanged() {\n        if (this.template !== undefined) {\n            this.$fastController.template = this.template;\n        }\n    }\n    stylesChanged() {\n        if (this.styles !== undefined) {\n            this.$fastController.styles = this.styles;\n        }\n    }\n    /**\n     * The connected callback for this FASTElement.\n     * @remarks\n     * This method is invoked by the platform whenever this FoundationElement\n     * becomes connected to the document.\n     * @public\n     */\n    connectedCallback() {\n        if (this.$presentation !== null) {\n            this.$presentation.applyTo(this);\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Defines an element registry function with a set of element definition defaults.\n     * @param elementDefinition - The definition of the element to create the registry\n     * function for.\n     * @public\n     */\n    static compose(elementDefinition) {\n        return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement\n            ? class extends FoundationElement {\n            }\n            : this, elementDefinition, overrideDefinition);\n    }\n}\n__decorate([\n    observable\n], FoundationElement.prototype, "template", void 0);\n__decorate([\n    observable\n], FoundationElement.prototype, "styles", void 0);\nfunction resolveOption(option, context, definition) {\n    if (typeof option === "function") {\n        return option(context, definition);\n    }\n    return option;\n}\n/**\n * Registry capable of defining presentation properties for a DOM Container hierarchy.\n *\n * @internal\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nclass FoundationElementRegistry {\n    constructor(type, elementDefinition, overrideDefinition) {\n        this.type = type;\n        this.elementDefinition = elementDefinition;\n        this.overrideDefinition = overrideDefinition;\n        this.definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);\n    }\n    register(container, context) {\n        const definition = this.definition;\n        const overrideDefinition = this.overrideDefinition;\n        const prefix = definition.prefix || context.elementPrefix;\n        const name = `${prefix}-${definition.baseName}`;\n        context.tryDefineElement({\n            name,\n            type: this.type,\n            baseClass: this.elementDefinition.baseClass,\n            callback: x => {\n                const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x, definition), resolveOption(definition.styles, x, definition));\n                x.definePresentation(presentation);\n                let shadowOptions = resolveOption(definition.shadowOptions, x, definition);\n                if (x.shadowRootMode) {\n                    // If the design system has overridden the shadow root mode, we need special handling.\n                    if (shadowOptions) {\n                        // If there are shadow options present in the definition, then\n                        // either the component itself has specified an option or the\n                        // registry function has overridden it.\n                        if (!overrideDefinition.shadowOptions) {\n                            // There were shadow options provided by the component and not overridden by\n                            // the registry.\n                            shadowOptions.mode = x.shadowRootMode;\n                        }\n                    }\n                    else if (shadowOptions !== null) {\n                        // If the component author did not provide shadow options,\n                        // and did not null them out (light dom opt-in) then they\n                        // were relying on the FASTElement default. So, if the\n                        // design system provides a mode, we need to create the options\n                        // to override the default.\n                        shadowOptions = { mode: x.shadowRootMode };\n                    }\n                }\n                x.defineElement({\n                    elementOptions: resolveOption(definition.elementOptions, x, definition),\n                    shadowOptions,\n                    attributes: resolveOption(definition.attributes, x, definition),\n                });\n            },\n        });\n    }\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-react-wrapper/dist/esm/index.js\n\n\nconst reservedReactProperties = new Set([\n    "children",\n    "localName",\n    "ref",\n    "style",\n    "className",\n]);\nconst emptyProps = Object.freeze(Object.create(null));\nconst DEFAULT_CACHE_NAME = "_default";\n// This will be a two levels cache Map<type, Map<name, ReactWrapper>>\n// to distinguish components of same type but different tag name.\n// Default name: \'_default\'\nconst wrappersCache = new Map();\n// There are 2 kinds of refs and there\'s no built in React API to set one.\nfunction setRef(ref, value) {\n    if (typeof ref === "function") {\n        ref(value);\n    }\n    else {\n        ref.current = value;\n    }\n}\nfunction getTagName(type, config) {\n    if (!config.name) {\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        const definition = fast_definitions_FASTElementDefinition.forType(type);\n        if (definition) {\n            config.name = definition.name;\n        }\n        else {\n            throw new Error("React wrappers must wrap a FASTElement or be configured with a name.");\n        }\n    }\n    return config.name;\n}\nfunction getElementEvents(config) {\n    return config.events || (config.events = {});\n}\nfunction keyIsValid(type, config, name) {\n    if (reservedReactProperties.has(name)) {\n        console.warn(`${getTagName(type, config)} contains property ${name} which is a React ` +\n            `reserved property. It will be used by React and not set on ` +\n            `the element.`);\n        return false;\n    }\n    return true;\n}\nfunction getElementKeys(type, config) {\n    if (!config.keys) {\n        if (config.properties) {\n            config.keys = new Set(config.properties.concat(Object.keys(getElementEvents(config))));\n        }\n        else {\n            const keys = new Set(Object.keys(getElementEvents(config)));\n            const accessors = Observable.getAccessors(type.prototype);\n            if (accessors.length > 0) {\n                for (const a of accessors) {\n                    if (keyIsValid(type, config, a.name)) {\n                        keys.add(a.name);\n                    }\n                }\n            }\n            else {\n                for (const p in type.prototype) {\n                    if (!(p in HTMLElement.prototype) && keyIsValid(type, config, p)) {\n                        keys.add(p);\n                    }\n                }\n            }\n            config.keys = keys;\n        }\n    }\n    return config.keys;\n}\n/**\n * @param React - The React module, typically imported from the `react` npm\n * package\n * @param designSystem - A design system to register the components with.\n * @public\n */\nfunction provideReactWrapper(React, designSystem) {\n    let registrations = [];\n    const registry = {\n        register(container, ...rest) {\n            registrations.forEach(x => x.register(container, ...rest));\n            registrations = [];\n        },\n    };\n    function wrap(type, config = {}) {\n        var _a, _b;\n        if (type instanceof FoundationElementRegistry) {\n            if (designSystem) {\n                designSystem.register(type);\n            }\n            else {\n                registrations.push(type);\n            }\n            type = type.type;\n        }\n        const cachedCandidates = wrappersCache.get(type);\n        if (cachedCandidates) {\n            const cachedWrapper = cachedCandidates.get((_a = config.name) !== null && _a !== void 0 ? _a : DEFAULT_CACHE_NAME);\n            if (cachedWrapper) {\n                return cachedWrapper;\n            }\n        }\n        class ReactComponent extends React.Component {\n            constructor() {\n                super(...arguments);\n                this._element = null;\n            }\n            _updateElement(oldProps) {\n                const element = this._element;\n                if (element === null) {\n                    return;\n                }\n                const currentProps = this.props;\n                const previousProps = oldProps || emptyProps;\n                const events = getElementEvents(config);\n                for (const key in this._elementProps) {\n                    const newValue = currentProps[key];\n                    const event = events[key];\n                    if (event === undefined) {\n                        element[key] = newValue;\n                    }\n                    else {\n                        const oldValue = previousProps[key];\n                        if (newValue === oldValue) {\n                            continue;\n                        }\n                        if (oldValue !== undefined) {\n                            element.removeEventListener(event, oldValue);\n                        }\n                        if (newValue !== undefined) {\n                            element.addEventListener(event, newValue);\n                        }\n                    }\n                }\n            }\n            componentDidMount() {\n                this._updateElement();\n            }\n            componentDidUpdate(old) {\n                this._updateElement(old);\n            }\n            render() {\n                // Since refs only get fulfilled once, pass a new one if the user\'s\n                // ref changed. This allows refs to be fulfilled as expected, going from\n                // having a value to null.\n                const userRef = this.props.__forwardedRef;\n                if (this._ref === undefined || this._userRef !== userRef) {\n                    this._ref = (value) => {\n                        if (this._element === null) {\n                            this._element = value;\n                        }\n                        if (userRef !== null) {\n                            setRef(userRef, value);\n                        }\n                        this._userRef = userRef;\n                    };\n                }\n                // Filter class properties and pass the remaining attributes to React.\n                // This allows attributes to use framework rules\n                // for setting attributes and render correctly under SSR.\n                const newReactProps = { ref: this._ref };\n                const newElementProps = (this._elementProps = {});\n                const elementKeys = getElementKeys(type, config);\n                const currentProps = this.props;\n                for (const k in currentProps) {\n                    const v = currentProps[k];\n                    if (elementKeys.has(k)) {\n                        newElementProps[k] = v;\n                    }\n                    else {\n                        // React does *not* handle `className` for custom elements so\n                        // coerce it to `class` so it\'s handled correctly.\n                        newReactProps[k === "className" ? "class" : k] = v;\n                    }\n                }\n                return React.createElement(getTagName(type, config), newReactProps);\n            }\n        }\n        const reactComponent = React.forwardRef((props, ref) => React.createElement(ReactComponent, Object.assign(Object.assign({}, props), { __forwardedRef: ref }), props === null || props === void 0 ? void 0 : props.children));\n        if (!wrappersCache.has(type)) {\n            wrappersCache.set(type, new Map());\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        wrappersCache.get(type).set((_b = config.name) !== null && _b !== void 0 ? _b : DEFAULT_CACHE_NAME, reactComponent);\n        return reactComponent;\n    }\n    return { wrap, registry };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/badge/badge.js\n\n\n\n/**\n * A Badge Custom HTML Element.\n *\n * @public\n */\nclass badge_Badge extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        this.generateBadgeStyle = () => {\n            if (!this.fill && !this.color) {\n                return;\n            }\n            const fill = `background-color: var(--badge-fill-${this.fill});`;\n            const color = `color: var(--badge-color-${this.color});`;\n            if (this.fill && !this.color) {\n                return fill;\n            }\n            else if (this.color && !this.fill) {\n                return color;\n            }\n            else {\n                return `${color} ${fill}`;\n            }\n        };\n    }\n}\n__decorate([\n    attr({ attribute: "fill" })\n], badge_Badge.prototype, "fill", void 0);\n__decorate([\n    attr({ attribute: "color" })\n], badge_Badge.prototype, "color", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], badge_Badge.prototype, "circular", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js\n\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nclass HTMLDirective {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A {@link HTMLDirective} that targets a named attribute or property on a node.\n * @public\n */\nclass TargetedHTMLDirective extends HTMLDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * Creates a placeholder string based on the directive\'s index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nclass AttachedBehaviorHTMLDirective extends HTMLDirective {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive\'s index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`\'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/binding.js\n\n\n\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there\'s no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = "";\n    }\n    // If the value has a "create" method, then it\'s a template-like.\n    if (value.create) {\n        this.target.textContent = "";\n        let view = this.target.$fastView;\n        // If there\'s no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn\'t created\n            // from the same template as the new value, then we\n            // need to remove the old view if it\'s still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It\'s possible that the value is the same as the previous template\n        // and that there\'s actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it\'s currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === "") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there\'s no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nclass HTMLBindingDirective extends TargetedHTMLDirective {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case ":":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === "innerHTML") {\n                    const binding = this.binding;\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case "?":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case "@":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === "class") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nclass BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        ExecutionContext.setEvent(event);\n        const result = this.binding(this.source, this.context);\n        ExecutionContext.setEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js\n\n\nlet sharedContext = null;\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === "string") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = "";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new HTMLBindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== "") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new HTMLBindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(""), lastNode.nextSibling);\n            if (typeof currentPart === "string") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = " ";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nfunction compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (\n    // If the first node in a fragment is a marker, that means it\'s an unstable first node,\n    // because something like a when, repeat, etc. could add nodes before the marker.\n    // To mitigate this, we insert a stable first node. However, if we insert a node,\n    // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n    DOM.isMarker(fragment.firstChild) ||\n        // Or if there is only one node and a directive, it means the template\'s content\n        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by\n        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.\n        (fragment.childNodes.length === 1 && directives.length)) {\n        fragment.insertBefore(document.createComment(""), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/view.js\n// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nclass HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view\'s DOM nodes to the referenced node.\n     * @param node - The parent node to append the view\'s DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view\'s DOM nodes before the referenced node.\n     * @param node - The node to insert the view\'s DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const parentNode = node.parentNode;\n            const end = this.lastChild;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view\'s DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view\'s behaviors to its binding source.\n     * @param source - The binding source for the view\'s binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view\'s behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/template.js\n\n\n\n\n\n\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nclass ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === "string") {\n                template = document.createElement("template");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === "TEMPLATE") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === "string") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n/* eslint-disable-next-line no-control-regex */\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F "\'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d"\'`<>=]*|"[^"]*|\'[^\']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nfunction html(strings, ...values) {\n    const directives = [];\n    let html = "";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === "function") {\n            value = new HTMLBindingDirective(value);\n        }\n        if (value instanceof TargetedHTMLDirective) {\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof HTMLDirective) {\n            // Since not all values are directives, we can\'t use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/badge/badge.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#Badge} component.\n * @public\n */\nconst badgeTemplate = (context, definition) => html `\n    <template class="${x => (x.circular ? "circular" : "")}">\n        <div class="control" part="control" style="${x => x.generateBadgeStyle()}">\n            <slot></slot>\n        </div>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js\n/**\n * Directive for use in {@link css}.\n *\n * @public\n */\nclass css_directive_CSSDirective {\n    /**\n     * Creates a CSS fragment to interpolate into the CSS document.\n     * @returns - the string to interpolate into CSS\n     */\n    createCSS() {\n        return "";\n    }\n    /**\n     * Creates a behavior to bind to the host element.\n     * @returns - the behavior to bind to the host element, or undefined.\n     */\n    createBehavior() {\n        return undefined;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/css.js\n\n\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = "";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof css_directive_CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof element_styles_ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== "") {\n                styles.push(cssString);\n                cssString = "";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== "") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nfunction css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = element_styles_ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends (/* unused pure expression or super */ null && (CSSDirective)) {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = "";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === "string") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nfunction cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/display.js\n/**\n * A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.\n * @public\n */\nconst display_hidden = `:host([hidden]){display:none}`;\n/**\n * Applies a CSS display property.\n * Also adds CSS rules to not display the element when the [hidden] attribute is applied to the element.\n * @param display - The CSS display property value\n * @public\n */\nfunction display(displayValue) {\n    return `${display_hidden}:host{display:${displayValue}}`;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/composed-parent.js\n/**\n * Retrieves the "composed parent" element of a node, ignoring DOM tree boundaries.\n * When the parent of a node is a shadow-root, it will return the host\n * element of the shadow root. Otherwise it will return the parent node or null if\n * no parent node exists.\n * @param element - The element for which to retrieve the composed parent\n *\n * @public\n */\nfunction composedParent(element) {\n    const parentNode = element.parentElement;\n    if (parentNode) {\n        return parentNode;\n    }\n    else {\n        const rootNode = element.getRootNode();\n        if (rootNode.host instanceof HTMLElement) {\n            // this is shadow-root\n            return rootNode.host;\n        }\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/composed-contains.js\n\n/**\n * Determines if the reference element contains the test element in a "composed" DOM tree that\n * ignores shadow DOM boundaries.\n *\n * Returns true of the test element is a descendent of the reference, or exist in\n * a shadow DOM that is a logical descendent of the reference. Otherwise returns false.\n * @param reference - The element to test for containment against.\n * @param test - The element being tested for containment.\n *\n * @public\n */\nfunction composedContains(reference, test) {\n    let current = test;\n    while (current !== null) {\n        if (current === reference) {\n            return true;\n        }\n        current = composedParent(current);\n    }\n    return false;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-token/custom-property-manager.js\n\n\nconst defaultElement = document.createElement("div");\nfunction isFastElement(element) {\n    return element instanceof FASTElement;\n}\nclass QueuedStyleSheetTarget {\n    setProperty(name, value) {\n        DOM.queueUpdate(() => this.target.setProperty(name, value));\n    }\n    removeProperty(name) {\n        DOM.queueUpdate(() => this.target.removeProperty(name));\n    }\n}\n/**\n * Handles setting properties for a FASTElement using Constructable Stylesheets\n */\nclass ConstructableStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor(source) {\n        super();\n        const sheet = new CSSStyleSheet();\n        this.target = sheet.cssRules[sheet.insertRule(":host{}")].style;\n        source.$fastController.addStyles(element_styles_ElementStyles.create([sheet]));\n    }\n}\nclass DocumentStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor() {\n        super();\n        const sheet = new CSSStyleSheet();\n        this.target = sheet.cssRules[sheet.insertRule(":root{}")].style;\n        document.adoptedStyleSheets = [\n            ...document.adoptedStyleSheets,\n            sheet,\n        ];\n    }\n}\nclass HeadStyleElementStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor() {\n        super();\n        this.style = document.createElement("style");\n        document.head.appendChild(this.style);\n        const { sheet } = this.style;\n        // Because the HTMLStyleElement has been appended,\n        // there shouldn\'t exist a case where `sheet` is null,\n        // but if-check it just in case.\n        if (sheet) {\n            // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it\'s CSSOM implementation,\n            // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.\n            const index = sheet.insertRule(":root{}", sheet.cssRules.length);\n            this.target = sheet.cssRules[index].style;\n        }\n    }\n}\n/**\n * Handles setting properties for a FASTElement using an HTMLStyleElement\n */\nclass StyleElementStyleSheetTarget {\n    constructor(target) {\n        this.store = new Map();\n        this.target = null;\n        const controller = target.$fastController;\n        this.style = document.createElement("style");\n        controller.addStyles(this.style);\n        Observable.getNotifier(controller).subscribe(this, "isConnected");\n        this.handleChange(controller, "isConnected");\n    }\n    targetChanged() {\n        if (this.target !== null) {\n            for (const [key, value] of this.store.entries()) {\n                this.target.setProperty(key, value);\n            }\n        }\n    }\n    setProperty(name, value) {\n        this.store.set(name, value);\n        DOM.queueUpdate(() => {\n            if (this.target !== null) {\n                this.target.setProperty(name, value);\n            }\n        });\n    }\n    removeProperty(name) {\n        this.store.delete(name);\n        DOM.queueUpdate(() => {\n            if (this.target !== null) {\n                this.target.removeProperty(name);\n            }\n        });\n    }\n    handleChange(source, key) {\n        // HTMLStyleElement.sheet is null if the element isn\'t connected to the DOM,\n        // so this method reacts to changes in DOM connection for the element hosting\n        // the HTMLStyleElement.\n        //\n        // All rules applied via the CSSOM also get cleared when the element disconnects,\n        // so we need to add a new rule each time and populate it with the stored properties\n        const { sheet } = this.style;\n        if (sheet) {\n            // Safari will throw if we try to use the return result of insertRule()\n            // to index the rule inline, so store as a const prior to indexing.\n            // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it\'s CSSOM implementation,\n            // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.\n            const index = sheet.insertRule(":host{}", sheet.cssRules.length);\n            this.target = sheet.cssRules[index].style;\n        }\n        else {\n            this.target = null;\n        }\n    }\n}\n__decorate([\n    observable\n], StyleElementStyleSheetTarget.prototype, "target", void 0);\n/**\n * Handles setting properties for a normal HTMLElement\n */\nclass ElementStyleSheetTarget {\n    constructor(source) {\n        this.target = source.style;\n    }\n    setProperty(name, value) {\n        DOM.queueUpdate(() => this.target.setProperty(name, value));\n    }\n    removeProperty(name) {\n        DOM.queueUpdate(() => this.target.removeProperty(name));\n    }\n}\n/**\n * Controls emission for default values. This control is capable\n * of emitting to multiple {@link PropertyTarget | PropertyTargets},\n * and only emits if it has at least one root.\n *\n * @internal\n */\nclass RootStyleSheetTarget {\n    setProperty(name, value) {\n        RootStyleSheetTarget.properties[name] = value;\n        for (const target of RootStyleSheetTarget.roots.values()) {\n            PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).setProperty(name, value);\n        }\n    }\n    removeProperty(name) {\n        delete RootStyleSheetTarget.properties[name];\n        for (const target of RootStyleSheetTarget.roots.values()) {\n            PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).removeProperty(name);\n        }\n    }\n    static registerRoot(root) {\n        const { roots } = RootStyleSheetTarget;\n        if (!roots.has(root)) {\n            roots.add(root);\n            const target = PropertyTargetManager.getOrCreate(this.normalizeRoot(root));\n            for (const key in RootStyleSheetTarget.properties) {\n                target.setProperty(key, RootStyleSheetTarget.properties[key]);\n            }\n        }\n    }\n    static unregisterRoot(root) {\n        const { roots } = RootStyleSheetTarget;\n        if (roots.has(root)) {\n            roots.delete(root);\n            const target = PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(root));\n            for (const key in RootStyleSheetTarget.properties) {\n                target.removeProperty(key);\n            }\n        }\n    }\n    /**\n     * Returns the document when provided the default element,\n     * otherwise is a no-op\n     * @param root - the root to normalize\n     */\n    static normalizeRoot(root) {\n        return root === defaultElement ? document : root;\n    }\n}\nRootStyleSheetTarget.roots = new Set();\nRootStyleSheetTarget.properties = {};\n// Caches PropertyTarget instances\nconst propertyTargetCache = new WeakMap();\n// Use Constructable StyleSheets for FAST elements when supported, otherwise use\n// HTMLStyleElement instances\nconst propertyTargetCtor = DOM.supportsAdoptedStyleSheets\n    ? ConstructableStyleSheetTarget\n    : StyleElementStyleSheetTarget;\n/**\n * Manages creation and caching of PropertyTarget instances.\n *\n * @internal\n */\nconst PropertyTargetManager = Object.freeze({\n    getOrCreate(source) {\n        if (propertyTargetCache.has(source)) {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return propertyTargetCache.get(source);\n        }\n        let target;\n        if (source === defaultElement) {\n            target = new RootStyleSheetTarget();\n        }\n        else if (source instanceof Document) {\n            target = DOM.supportsAdoptedStyleSheets\n                ? new DocumentStyleSheetTarget()\n                : new HeadStyleElementStyleSheetTarget();\n        }\n        else if (isFastElement(source)) {\n            target = new propertyTargetCtor(source);\n        }\n        else {\n            target = new ElementStyleSheetTarget(source);\n        }\n        propertyTargetCache.set(source, target);\n        return target;\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-token/design-token.js\n\n\n\n\n\n\n/**\n * Implementation of {@link (DesignToken:interface)}\n */\nclass DesignTokenImpl extends css_directive_CSSDirective {\n    constructor(configuration) {\n        super();\n        this.subscribers = new WeakMap();\n        this._appliedTo = new Set();\n        this.name = configuration.name;\n        if (configuration.cssCustomPropertyName !== null) {\n            this.cssCustomProperty = `--${configuration.cssCustomPropertyName}`;\n            this.cssVar = `var(${this.cssCustomProperty})`;\n        }\n        this.id = DesignTokenImpl.uniqueId();\n        DesignTokenImpl.tokensById.set(this.id, this);\n    }\n    get appliedTo() {\n        return [...this._appliedTo];\n    }\n    static from(nameOrConfig) {\n        return new DesignTokenImpl({\n            name: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.name,\n            cssCustomPropertyName: typeof nameOrConfig === "string"\n                ? nameOrConfig\n                : nameOrConfig.cssCustomPropertyName === void 0\n                    ? nameOrConfig.name\n                    : nameOrConfig.cssCustomPropertyName,\n        });\n    }\n    static isCSSDesignToken(token) {\n        return typeof token.cssCustomProperty === "string";\n    }\n    static isDerivedDesignTokenValue(value) {\n        return typeof value === "function";\n    }\n    /**\n     * Gets a token by ID. Returns undefined if the token was not found.\n     * @param id - The ID of the token\n     * @returns\n     */\n    static getTokenById(id) {\n        return DesignTokenImpl.tokensById.get(id);\n    }\n    getOrCreateSubscriberSet(target = this) {\n        return (this.subscribers.get(target) ||\n            (this.subscribers.set(target, new Set()) && this.subscribers.get(target)));\n    }\n    createCSS() {\n        return this.cssVar || "";\n    }\n    getValueFor(element) {\n        const value = DesignTokenNode.getOrCreate(element).get(this);\n        if (value !== undefined) {\n            return value;\n        }\n        throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${element} or an ancestor of ${element}.`);\n    }\n    setValueFor(element, value) {\n        this._appliedTo.add(element);\n        if (value instanceof DesignTokenImpl) {\n            value = this.alias(value);\n        }\n        DesignTokenNode.getOrCreate(element).set(this, value);\n        return this;\n    }\n    deleteValueFor(element) {\n        this._appliedTo.delete(element);\n        if (DesignTokenNode.existsFor(element)) {\n            DesignTokenNode.getOrCreate(element).delete(this);\n        }\n        return this;\n    }\n    withDefault(value) {\n        this.setValueFor(defaultElement, value);\n        return this;\n    }\n    subscribe(subscriber, target) {\n        const subscriberSet = this.getOrCreateSubscriberSet(target);\n        if (target && !DesignTokenNode.existsFor(target)) {\n            DesignTokenNode.getOrCreate(target);\n        }\n        if (!subscriberSet.has(subscriber)) {\n            subscriberSet.add(subscriber);\n        }\n    }\n    unsubscribe(subscriber, target) {\n        const list = this.subscribers.get(target || this);\n        if (list && list.has(subscriber)) {\n            list.delete(subscriber);\n        }\n    }\n    /**\n     * Notifies subscribers that the value for an element has changed.\n     * @param element - The element to emit a notification for\n     */\n    notify(element) {\n        const record = Object.freeze({ token: this, target: element });\n        if (this.subscribers.has(this)) {\n            this.subscribers.get(this).forEach(sub => sub.handleChange(record));\n        }\n        if (this.subscribers.has(element)) {\n            this.subscribers.get(element).forEach(sub => sub.handleChange(record));\n        }\n    }\n    /**\n     * Alias the token to the provided token.\n     * @param token - the token to alias to\n     */\n    alias(token) {\n        return ((target) => token.getValueFor(target));\n    }\n}\nDesignTokenImpl.uniqueId = (() => {\n    let id = 0;\n    return () => {\n        id++;\n        return id.toString(16);\n    };\n})();\n/**\n * Token storage by token ID\n */\nDesignTokenImpl.tokensById = new Map();\nclass CustomPropertyReflector {\n    startReflection(token, target) {\n        token.subscribe(this, target);\n        this.handleChange({ token, target });\n    }\n    stopReflection(token, target) {\n        token.unsubscribe(this, target);\n        this.remove(token, target);\n    }\n    handleChange(record) {\n        const { token, target } = record;\n        this.add(token, target);\n    }\n    add(token, target) {\n        PropertyTargetManager.getOrCreate(target).setProperty(token.cssCustomProperty, this.resolveCSSValue(DesignTokenNode.getOrCreate(target).get(token)));\n    }\n    remove(token, target) {\n        PropertyTargetManager.getOrCreate(target).removeProperty(token.cssCustomProperty);\n    }\n    resolveCSSValue(value) {\n        return value && typeof value.createCSS === "function" ? value.createCSS() : value;\n    }\n}\n/**\n * A light wrapper around BindingObserver to handle value caching and\n * token notification\n */\nclass DesignTokenBindingObserver {\n    constructor(source, token, node) {\n        this.source = source;\n        this.token = token;\n        this.node = node;\n        this.dependencies = new Set();\n        this.observer = Observable.binding(source, this, false);\n        // This is a little bit hacky because it\'s using internal APIs of BindingObserverImpl.\n        // BindingObserverImpl queues updates to batch it\'s notifications which doesn\'t work for this\n        // scenario because the DesignToken.getValueFor API is not async. Without this, using DesignToken.getValueFor()\n        // after DesignToken.setValueFor() when setting a dependency of the value being retrieved can return a stale\n        // value. Assigning .handleChange to .call forces immediate invocation of this classes handleChange() method,\n        // allowing resolution of values synchronously.\n        // TODO: https://github.com/microsoft/fast/issues/5110\n        this.observer.handleChange = this.observer.call;\n        this.handleChange();\n    }\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * @internal\n     */\n    handleChange() {\n        this.node.store.set(this.token, this.observer.observe(this.node.target, defaultExecutionContext));\n    }\n}\n/**\n * Stores resolved token/value pairs and notifies on changes\n */\nclass Store {\n    constructor() {\n        this.values = new Map();\n    }\n    set(token, value) {\n        if (this.values.get(token) !== value) {\n            this.values.set(token, value);\n            Observable.getNotifier(this).notify(token.id);\n        }\n    }\n    get(token) {\n        Observable.track(this, token.id);\n        return this.values.get(token);\n    }\n    delete(token) {\n        this.values.delete(token);\n    }\n    all() {\n        return this.values.entries();\n    }\n}\nconst nodeCache = new WeakMap();\nconst childToParent = new WeakMap();\n/**\n * A node responsible for setting and getting token values,\n * emitting values to CSS custom properties, and maintaining\n * inheritance structures.\n */\nclass DesignTokenNode {\n    constructor(target) {\n        this.target = target;\n        /**\n         * Stores all resolved token values for a node\n         */\n        this.store = new Store();\n        /**\n         * All children assigned to the node\n         */\n        this.children = [];\n        /**\n         * All values explicitly assigned to the node in their raw form\n         */\n        this.assignedValues = new Map();\n        /**\n         * Tokens currently being reflected to CSS custom properties\n         */\n        this.reflecting = new Set();\n        /**\n         * Binding observers for assigned and inherited derived values.\n         */\n        this.bindingObservers = new Map();\n        /**\n         * Emits notifications to token when token values\n         * change the DesignTokenNode\n         */\n        this.tokenValueChangeHandler = {\n            handleChange: (source, arg) => {\n                const token = DesignTokenImpl.getTokenById(arg);\n                if (token) {\n                    // Notify any token subscribers\n                    token.notify(this.target);\n                    if (DesignTokenImpl.isCSSDesignToken(token)) {\n                        const parent = this.parent;\n                        const reflecting = this.isReflecting(token);\n                        if (parent) {\n                            const parentValue = parent.get(token);\n                            const sourceValue = source.get(token);\n                            if (parentValue !== sourceValue && !reflecting) {\n                                this.reflectToCSS(token);\n                            }\n                            else if (parentValue === sourceValue && reflecting) {\n                                this.stopReflectToCSS(token);\n                            }\n                        }\n                        else if (!reflecting) {\n                            this.reflectToCSS(token);\n                        }\n                    }\n                }\n            },\n        };\n        nodeCache.set(target, this);\n        // Map store change notifications to token change notifications\n        Observable.getNotifier(this.store).subscribe(this.tokenValueChangeHandler);\n        if (target instanceof FASTElement) {\n            target.$fastController.addBehaviors([this]);\n        }\n        else if (target.isConnected) {\n            this.bind();\n        }\n    }\n    /**\n     * Returns a DesignTokenNode for an element.\n     * Creates a new instance if one does not already exist for a node,\n     * otherwise returns the cached instance\n     *\n     * @param target - The HTML element to retrieve a DesignTokenNode for\n     */\n    static getOrCreate(target) {\n        return nodeCache.get(target) || new DesignTokenNode(target);\n    }\n    /**\n     * Determines if a DesignTokenNode has been created for a target\n     * @param target - The element to test\n     */\n    static existsFor(target) {\n        return nodeCache.has(target);\n    }\n    /**\n     * Searches for and return the nearest parent DesignTokenNode.\n     * Null is returned if no node is found or the node provided is for a default element.\n     */\n    static findParent(node) {\n        if (!(defaultElement === node.target)) {\n            let parent = composedParent(node.target);\n            while (parent !== null) {\n                if (nodeCache.has(parent)) {\n                    return nodeCache.get(parent);\n                }\n                parent = composedParent(parent);\n            }\n            return DesignTokenNode.getOrCreate(defaultElement);\n        }\n        return null;\n    }\n    /**\n     * Finds the closest node with a value explicitly assigned for a token, otherwise null.\n     * @param token - The token to look for\n     * @param start - The node to start looking for value assignment\n     * @returns\n     */\n    static findClosestAssignedNode(token, start) {\n        let current = start;\n        do {\n            if (current.has(token)) {\n                return current;\n            }\n            current = current.parent\n                ? current.parent\n                : current.target !== defaultElement\n                    ? DesignTokenNode.getOrCreate(defaultElement)\n                    : null;\n        } while (current !== null);\n        return null;\n    }\n    /**\n     * The parent DesignTokenNode, or null.\n     */\n    get parent() {\n        return childToParent.get(this) || null;\n    }\n    /**\n     * Checks if a token has been assigned an explicit value the node.\n     * @param token - the token to check.\n     */\n    has(token) {\n        return this.assignedValues.has(token);\n    }\n    /**\n     * Gets the value of a token for a node\n     * @param token - The token to retrieve the value for\n     * @returns\n     */\n    get(token) {\n        const value = this.store.get(token);\n        if (value !== undefined) {\n            return value;\n        }\n        const raw = this.getRaw(token);\n        if (raw !== undefined) {\n            this.hydrate(token, raw);\n            return this.get(token);\n        }\n    }\n    /**\n     * Retrieves the raw assigned value of a token from the nearest assigned node.\n     * @param token - The token to retrieve a raw value for\n     * @returns\n     */\n    getRaw(token) {\n        var _a;\n        if (this.assignedValues.has(token)) {\n            return this.assignedValues.get(token);\n        }\n        return (_a = DesignTokenNode.findClosestAssignedNode(token, this)) === null || _a === void 0 ? void 0 : _a.getRaw(token);\n    }\n    /**\n     * Sets a token to a value for a node\n     * @param token - The token to set\n     * @param value - The value to set the token to\n     */\n    set(token, value) {\n        if (DesignTokenImpl.isDerivedDesignTokenValue(this.assignedValues.get(token))) {\n            this.tearDownBindingObserver(token);\n        }\n        this.assignedValues.set(token, value);\n        if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {\n            this.setupBindingObserver(token, value);\n        }\n        else {\n            this.store.set(token, value);\n        }\n    }\n    /**\n     * Deletes a token value for the node.\n     * @param token - The token to delete the value for\n     */\n    delete(token) {\n        this.assignedValues.delete(token);\n        this.tearDownBindingObserver(token);\n        const upstream = this.getRaw(token);\n        if (upstream) {\n            this.hydrate(token, upstream);\n        }\n        else {\n            this.store.delete(token);\n        }\n    }\n    /**\n     * Invoked when the DesignTokenNode.target is attached to the document\n     */\n    bind() {\n        const parent = DesignTokenNode.findParent(this);\n        if (parent) {\n            parent.appendChild(this);\n        }\n        for (const key of this.assignedValues.keys()) {\n            key.notify(this.target);\n        }\n    }\n    /**\n     * Invoked when the DesignTokenNode.target is detached from the document\n     */\n    unbind() {\n        if (this.parent) {\n            const parent = childToParent.get(this);\n            parent.removeChild(this);\n        }\n    }\n    /**\n     * Appends a child to a parent DesignTokenNode.\n     * @param child - The child to append to the node\n     */\n    appendChild(child) {\n        if (child.parent) {\n            childToParent.get(child).removeChild(child);\n        }\n        const reParent = this.children.filter(x => child.contains(x));\n        childToParent.set(child, this);\n        this.children.push(child);\n        reParent.forEach(x => child.appendChild(x));\n        Observable.getNotifier(this.store).subscribe(child);\n        // How can we not notify *every* subscriber?\n        for (const [token, value] of this.store.all()) {\n            child.hydrate(token, this.bindingObservers.has(token) ? this.getRaw(token) : value);\n        }\n    }\n    /**\n     * Removes a child from a node.\n     * @param child - The child to remove.\n     */\n    removeChild(child) {\n        const childIndex = this.children.indexOf(child);\n        if (childIndex !== -1) {\n            this.children.splice(childIndex, 1);\n        }\n        Observable.getNotifier(this.store).unsubscribe(child);\n        return child.parent === this ? childToParent.delete(child) : false;\n    }\n    /**\n     * Tests whether a provided node is contained by\n     * the calling node.\n     * @param test - The node to test\n     */\n    contains(test) {\n        return composedContains(this.target, test.target);\n    }\n    /**\n     * Instructs the node to reflect a design token for the provided token.\n     * @param token - The design token to reflect\n     */\n    reflectToCSS(token) {\n        if (!this.isReflecting(token)) {\n            this.reflecting.add(token);\n            DesignTokenNode.cssCustomPropertyReflector.startReflection(token, this.target);\n        }\n    }\n    /**\n     * Stops reflecting a DesignToken to CSS\n     * @param token - The design token to stop reflecting\n     */\n    stopReflectToCSS(token) {\n        if (this.isReflecting(token)) {\n            this.reflecting.delete(token);\n            DesignTokenNode.cssCustomPropertyReflector.stopReflection(token, this.target);\n        }\n    }\n    /**\n     * Determines if a token is being reflected to CSS for a node.\n     * @param token - The token to check for reflection\n     * @returns\n     */\n    isReflecting(token) {\n        return this.reflecting.has(token);\n    }\n    /**\n     * Handle changes to upstream tokens\n     * @param source - The parent DesignTokenNode\n     * @param property - The token ID that changed\n     */\n    handleChange(source, property) {\n        const token = DesignTokenImpl.getTokenById(property);\n        if (!token) {\n            return;\n        }\n        this.hydrate(token, this.getRaw(token));\n    }\n    /**\n     * Hydrates a token with a DesignTokenValue, making retrieval available.\n     * @param token - The token to hydrate\n     * @param value - The value to hydrate\n     */\n    hydrate(token, value) {\n        if (!this.has(token)) {\n            const observer = this.bindingObservers.get(token);\n            if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {\n                if (observer) {\n                    // If the binding source doesn\'t match, we need\n                    // to update the binding\n                    if (observer.source !== value) {\n                        this.tearDownBindingObserver(token);\n                        this.setupBindingObserver(token, value);\n                    }\n                }\n                else {\n                    this.setupBindingObserver(token, value);\n                }\n            }\n            else {\n                if (observer) {\n                    this.tearDownBindingObserver(token);\n                }\n                this.store.set(token, value);\n            }\n        }\n    }\n    /**\n     * Sets up a binding observer for a derived token value that notifies token\n     * subscribers on change.\n     *\n     * @param token - The token to notify when the binding updates\n     * @param source - The binding source\n     */\n    setupBindingObserver(token, source) {\n        const binding = new DesignTokenBindingObserver(source, token, this);\n        this.bindingObservers.set(token, binding);\n        return binding;\n    }\n    /**\n     * Tear down a binding observer for a token.\n     */\n    tearDownBindingObserver(token) {\n        if (this.bindingObservers.has(token)) {\n            this.bindingObservers.get(token).disconnect();\n            this.bindingObservers.delete(token);\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Responsible for reflecting tokens to CSS custom properties\n */\nDesignTokenNode.cssCustomPropertyReflector = new CustomPropertyReflector();\n__decorate([\n    observable\n], DesignTokenNode.prototype, "children", void 0);\nfunction design_token_create(nameOrConfig) {\n    return DesignTokenImpl.from(nameOrConfig);\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n/**\n * Factory object for creating {@link (DesignToken:interface)} instances.\n * @public\n */\nconst DesignToken = Object.freeze({\n    create: design_token_create,\n    /**\n     * Informs DesignToken that an HTMLElement for which tokens have\n     * been set has been connected to the document.\n     *\n     * The browser does not provide a reliable mechanism to observe an HTMLElement\'s connectedness\n     * in all scenarios, so invoking this method manually is necessary when:\n     *\n     * 1. Token values are set for an HTMLElement.\n     * 2. The HTMLElement does not inherit from FASTElement.\n     * 3. The HTMLElement is not connected to the document when token values are set.\n     *\n     * @param element - The element to notify\n     * @returns - true if notification was successful, otherwise false.\n     */\n    notifyConnection(element) {\n        if (!element.isConnected || !DesignTokenNode.existsFor(element)) {\n            return false;\n        }\n        DesignTokenNode.getOrCreate(element).bind();\n        return true;\n    },\n    /**\n     * Informs DesignToken that an HTMLElement for which tokens have\n     * been set has been disconnected to the document.\n     *\n     * The browser does not provide a reliable mechanism to observe an HTMLElement\'s connectedness\n     * in all scenarios, so invoking this method manually is necessary when:\n     *\n     * 1. Token values are set for an HTMLElement.\n     * 2. The HTMLElement does not inherit from FASTElement.\n     *\n     * @param element - The element to notify\n     * @returns - true if notification was successful, otherwise false.\n     */\n    notifyDisconnection(element) {\n        if (element.isConnected || !DesignTokenNode.existsFor(element)) {\n            return false;\n        }\n        DesignTokenNode.getOrCreate(element).unbind();\n        return true;\n    },\n    /**\n     * Registers and element or document as a DesignToken root.\n     * {@link CSSDesignToken | CSSDesignTokens} with default values assigned via\n     * {@link (DesignToken:interface).withDefault} will emit CSS custom properties to all\n     * registered roots.\n     * @param target - The root to register\n     */\n    registerRoot(target = defaultElement) {\n        RootStyleSheetTarget.registerRoot(target);\n    },\n    /**\n     * Unregister an element or document as a DesignToken root.\n     * @param target - The root to deregister\n     */\n    unregisterRoot(target = defaultElement) {\n        RootStyleSheetTarget.unregisterRoot(target);\n    },\n});\n/* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/utilities/theme/applyTheme.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Configures a MutationObserver to watch for Visual Studio Code theme changes and\n * applies the current Visual Studio Code theme to the toolkit components.\n */\nfunction initThemeChangeListener(tokenMappings) {\n    window.addEventListener(\'load\', () => {\n        const observer = new MutationObserver(() => {\n            applyCurrentTheme(tokenMappings);\n        });\n        observer.observe(document.body, {\n            attributes: true,\n            attributeFilter: [\'class\'],\n        });\n        applyCurrentTheme(tokenMappings);\n    });\n}\n/**\n * Applies the current Visual Studio Code theme to the toolkit components.\n */\nfunction applyCurrentTheme(tokenMappings) {\n    // Get all the styles applied to the <body> tag in the webview HTML\n    // Importantly this includes all the CSS variables associated with the\n    // current Visual Studio Code theme\n    const styles = getComputedStyle(document.body);\n    const body = document.querySelector(\'body\');\n    if (body) {\n        const themeKind = body.getAttribute(\'data-vscode-theme-kind\');\n        for (const [vscodeTokenName, toolkitToken] of tokenMappings) {\n            let value = styles.getPropertyValue(vscodeTokenName).toString();\n            // Handle a couple of styling edge cases when a high contrast theme is applied\n            if (themeKind === \'vscode-high-contrast\') {\n                // Developer note:\n                //\n                // There are a handful of VS Code theme tokens that have no value when a high\n                // contrast theme is applied.\n                //\n                // This is an issue because when no value is set the toolkit tokens will fall\n                // back to their default color values (aka the VS Code dark theme color palette).\n                // This results in the backgrounds of a couple of components having default dark\n                // theme colors––thus breaking the high contrast theme.\n                //\n                // The below code, catches these tokens which have no value and are also background\n                // tokens, then overrides their value to be transparent.\n                if (value.length === 0 &&\n                    toolkitToken.name.includes(\'background\')) {\n                    value = \'transparent\';\n                }\n                // Set icon button hover to be transparent in high contrast themes\n                if (toolkitToken.name === \'button-icon-hover-background\') {\n                    value = \'transparent\';\n                }\n            }\n            else {\n                // Set contrast-active-border token to be transparent in non-high-contrast themes\n                if (toolkitToken.name === \'contrast-active-border\') {\n                    value = \'transparent\';\n                }\n            }\n            toolkitToken.setValueFor(body, value);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/utilities/design-tokens/create.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * A mapping of all the Visual Studio Code theme CSS variables mapped to the\n * toolkit design tokens.\n */\nconst tokenMappings = new Map();\n/**\n * Boolean flag that ensures the VS Code theme listener is initialized once.\n */\nlet isThemeListenerInitialized = false;\n/**\n * Given a design token name, return a new FAST CSSDesignToken.\n *\n * @remarks A VS Code theme CSS variable can be optionally passed to be\n * associated with the design token.\n *\n * @remarks On the first execution the VS Code theme listener will also be\n * initialized.\n *\n * @param name A design token name.\n * @param vscodeThemeVar A VS Code theme CSS variable name to be associated with\n * the design token.\n * @returns A FAST CSSDesignToken that emits a CSS custom property.\n */\nfunction create_create(name, vscodeThemeVar) {\n    const designToken = DesignToken.create(name);\n    if (vscodeThemeVar) {\n        // If the fake vscode token is passed in, attach a unique ID to it so that it can\n        // be added to the tokenMappings map without overriding a previous fake token value\n        if (vscodeThemeVar.includes(\'--fake-vscode-token\')) {\n            const uniqueId = \'id\' + Math.random().toString(16).slice(2);\n            vscodeThemeVar = `${vscodeThemeVar}-${uniqueId}`;\n        }\n        tokenMappings.set(vscodeThemeVar, designToken);\n    }\n    if (!isThemeListenerInitialized) {\n        initThemeChangeListener(tokenMappings);\n        isThemeListenerInitialized = true;\n    }\n    return designToken;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/design-tokens.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Developer note:\n *\n * There are some tokens defined in this file that make use of `--fake-vscode-token`. This is\n * done when a toolkit token should be added to the tokenMappings map (and subsequently altered\n * in the applyTheme function) but does not have a corresponding VS Code token that can be used.\n *\n * An example is buttonIconHoverBackground token which does not have a corresponding VS Code token\n * at this time (it\'s a hardcoded value in VS Code), but needs to be adjusted to be transparent when a\n * high contrast theme is applied.\n *\n * As a rule of thumb, if there are special cases where a token needs to be adjusted based on the\n * VS Code theme and does not have a corresponding VS Code token, `--fake-vscode-token` can be used\n * to indicate that it should be added to the tokenMappings map and thus make it accessible to the\n * applyTheme function where it can be dynamically adjusted.\n */\n/**\n * Global design tokens.\n */\nconst background = create_create(\'background\', \'--vscode-editor-background\').withDefault(\'#1e1e1e\');\nconst borderWidth = create_create(\'border-width\').withDefault(1);\nconst contrastActiveBorder = create_create(\'contrast-active-border\', \'--vscode-contrastActiveBorder\').withDefault(\'#f38518\');\nconst contrastBorder = create_create(\'contrast-border\', \'--vscode-contrastBorder\').withDefault(\'#6fc3df\');\nconst cornerRadius = create_create(\'corner-radius\').withDefault(0);\nconst designUnit = create_create(\'design-unit\').withDefault(4);\nconst disabledOpacity = create_create(\'disabled-opacity\').withDefault(0.4);\nconst focusBorder = create_create(\'focus-border\', \'--vscode-focusBorder\').withDefault(\'#007fd4\');\nconst fontFamily = create_create(\'font-family\', \'--vscode-font-family\').withDefault(\'-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol\');\nconst fontWeight = create_create(\'font-weight\', \'--vscode-font-weight\').withDefault(\'400\');\nconst foreground = create_create(\'foreground\', \'--vscode-foreground\').withDefault(\'#cccccc\');\nconst inputHeight = create_create(\'input-height\').withDefault(\'26\');\nconst inputMinWidth = create_create(\'input-min-width\').withDefault(\'100px\');\nconst typeRampBaseFontSize = create_create(\'type-ramp-base-font-size\', \'--vscode-font-size\').withDefault(\'13px\');\nconst typeRampBaseLineHeight = create_create(\'type-ramp-base-line-height\').withDefault(\'normal\');\nconst typeRampMinus1FontSize = create_create(\'type-ramp-minus1-font-size\').withDefault(\'11px\');\nconst typeRampMinus1LineHeight = create_create(\'type-ramp-minus1-line-height\').withDefault(\'16px\');\nconst typeRampMinus2FontSize = create_create(\'type-ramp-minus2-font-size\').withDefault(\'9px\');\nconst typeRampMinus2LineHeight = create_create(\'type-ramp-minus2-line-height\').withDefault(\'16px\');\nconst typeRampPlus1FontSize = create_create(\'type-ramp-plus1-font-size\').withDefault(\'16px\');\nconst typeRampPlus1LineHeight = create_create(\'type-ramp-plus1-line-height\').withDefault(\'24px\');\nconst scrollbarWidth = create_create(\'scrollbarWidth\').withDefault(\'10px\');\nconst scrollbarHeight = create_create(\'scrollbarHeight\').withDefault(\'10px\');\nconst scrollbarSliderBackground = create_create(\'scrollbar-slider-background\', \'--vscode-scrollbarSlider-background\').withDefault(\'#79797966\');\nconst scrollbarSliderHoverBackground = create_create(\'scrollbar-slider-hover-background\', \'--vscode-scrollbarSlider-hoverBackground\').withDefault(\'#646464b3\');\nconst scrollbarSliderActiveBackground = create_create(\'scrollbar-slider-active-background\', \'--vscode-scrollbarSlider-activeBackground\').withDefault(\'#bfbfbf66\');\n/**\n * Badge design tokens.\n */\nconst badgeBackground = create_create(\'badge-background\', \'--vscode-badge-background\').withDefault(\'#4d4d4d\');\nconst badgeForeground = create_create(\'badge-foreground\', \'--vscode-badge-foreground\').withDefault(\'#ffffff\');\n/**\n * Button design tokens.\n */\n// Note: Button border is used only for high contrast themes and should be left as transparent otherwise.\nconst buttonBorder = create_create(\'button-border\', \'--vscode-button-border\').withDefault(\'transparent\');\nconst buttonIconBackground = create_create(\'button-icon-background\').withDefault(\'transparent\');\nconst buttonIconCornerRadius = create_create(\'button-icon-corner-radius\').withDefault(\'5px\');\nconst buttonIconFocusBorderOffset = create_create(\'button-icon-outline-offset\').withDefault(0);\n// Note usage of `--fake-vscode-token` (refer to doc comment at top of file for explanation).\nconst buttonIconHoverBackground = create_create(\'button-icon-hover-background\', \'--fake-vscode-token\').withDefault(\'rgba(90, 93, 94, 0.31)\');\nconst buttonIconPadding = create_create(\'button-icon-padding\').withDefault(\'3px\');\nconst buttonPrimaryBackground = create_create(\'button-primary-background\', \'--vscode-button-background\').withDefault(\'#0e639c\');\nconst buttonPrimaryForeground = create_create(\'button-primary-foreground\', \'--vscode-button-foreground\').withDefault(\'#ffffff\');\nconst buttonPrimaryHoverBackground = create_create(\'button-primary-hover-background\', \'--vscode-button-hoverBackground\').withDefault(\'#1177bb\');\nconst buttonSecondaryBackground = create_create(\'button-secondary-background\', \'--vscode-button-secondaryBackground\').withDefault(\'#3a3d41\');\nconst buttonSecondaryForeground = create_create(\'button-secondary-foreground\', \'--vscode-button-secondaryForeground\').withDefault(\'#ffffff\');\nconst buttonSecondaryHoverBackground = create_create(\'button-secondary-hover-background\', \'--vscode-button-secondaryHoverBackground\').withDefault(\'#45494e\');\nconst buttonPaddingHorizontal = create_create(\'button-padding-horizontal\').withDefault(\'11px\');\nconst buttonPaddingVertical = create_create(\'button-padding-vertical\').withDefault(\'4px\');\n/**\n * Checkbox design tokens.\n */\nconst checkboxBackground = create_create(\'checkbox-background\', \'--vscode-checkbox-background\').withDefault(\'#3c3c3c\');\nconst checkboxBorder = create_create(\'checkbox-border\', \'--vscode-checkbox-border\').withDefault(\'#3c3c3c\');\nconst checkboxCornerRadius = create_create(\'checkbox-corner-radius\').withDefault(3);\nconst checkboxForeground = create_create(\'checkbox-foreground\', \'--vscode-checkbox-foreground\').withDefault(\'#f0f0f0\');\n/**\n * Data Grid design tokens\n */\nconst listActiveSelectionBackground = create_create(\'list-active-selection-background\', \'--vscode-list-activeSelectionBackground\').withDefault(\'#094771\');\nconst listActiveSelectionForeground = create_create(\'list-active-selection-foreground\', \'--vscode-list-activeSelectionForeground\').withDefault(\'#ffffff\');\nconst listHoverBackground = create_create(\'list-hover-background\', \'--vscode-list-hoverBackground\').withDefault(\'#2a2d2e\');\n/**\n * Divider design tokens.\n */\nconst dividerBackground = create_create(\'divider-background\', \'--vscode-settings-dropdownListBorder\').withDefault(\'#454545\');\n/**\n * Dropdown design tokens.\n */\nconst dropdownBackground = create_create(\'dropdown-background\', \'--vscode-dropdown-background\').withDefault(\'#3c3c3c\');\nconst dropdownBorder = create_create(\'dropdown-border\', \'--vscode-dropdown-border\').withDefault(\'#3c3c3c\');\nconst dropdownForeground = create_create(\'dropdown-foreground\', \'--vscode-dropdown-foreground\').withDefault(\'#f0f0f0\');\nconst dropdownListMaxHeight = create_create(\'dropdown-list-max-height\').withDefault(\'200px\');\n/**\n * Text Field & Area design tokens.\n */\nconst inputBackground = create_create(\'input-background\', \'--vscode-input-background\').withDefault(\'#3c3c3c\');\nconst inputForeground = create_create(\'input-foreground\', \'--vscode-input-foreground\').withDefault(\'#cccccc\');\nconst inputPlaceholderForeground = create_create(\'input-placeholder-foreground\', \'--vscode-input-placeholderForeground\').withDefault(\'#cccccc\');\n/**\n * Link design tokens.\n */\nconst linkActiveForeground = create_create(\'link-active-foreground\', \'--vscode-textLink-activeForeground\').withDefault(\'#3794ff\');\nconst linkForeground = create_create(\'link-foreground\', \'--vscode-textLink-foreground\').withDefault(\'#3794ff\');\n/**\n * Progress ring design tokens.\n */\nconst progressBackground = create_create(\'progress-background\', \'--vscode-progressBar-background\').withDefault(\'#0e70c0\');\n/**\n * Panels design tokens.\n */\nconst panelTabActiveBorder = create_create(\'panel-tab-active-border\', \'--vscode-panelTitle-activeBorder\').withDefault(\'#e7e7e7\');\nconst panelTabActiveForeground = create_create(\'panel-tab-active-foreground\', \'--vscode-panelTitle-activeForeground\').withDefault(\'#e7e7e7\');\nconst panelTabForeground = create_create(\'panel-tab-foreground\', \'--vscode-panelTitle-inactiveForeground\').withDefault(\'#e7e7e799\');\nconst panelViewBackground = create_create(\'panel-view-background\', \'--vscode-panel-background\').withDefault(\'#1e1e1e\');\nconst panelViewBorder = create_create(\'panel-view-border\', \'--vscode-panel-border\').withDefault(\'#80808059\');\n/**\n * Tag design tokens.\n */\nconst tagCornerRadius = create_create(\'tag-corner-radius\').withDefault(\'2px\');\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/badge/badge.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst badgeStyles = (context, definition) => css `\n\t${display(\'inline-block\')} :host {\n\t\tbox-sizing: border-box;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampMinus1FontSize};\n\t\tline-height: ${typeRampMinus1LineHeight};\n\t\ttext-align: center;\n\t}\n\t.control {\n\t\talign-items: center;\n\t\tbackground-color: ${badgeBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${buttonBorder};\n\t\tborder-radius: 11px;\n\t\tbox-sizing: border-box;\n\t\tcolor: ${badgeForeground};\n\t\tdisplay: flex;\n\t\theight: calc(${designUnit} * 4px);\n\t\tjustify-content: center;\n\t\tmin-width: calc(${designUnit} * 4px + 2px);\n\t\tmin-height: calc(${designUnit} * 4px + 2px);\n\t\tpadding: 3px 6px;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/badge/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code badge class.\n *\n * @public\n */\nclass Badge extends badge_Badge {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // This will override any usage of the circular attribute\n        // inherited by the FAST Foundation Badge component so\n        // that VSCode Badges are always circular\n        if (!this.circular) {\n            this.circular = true;\n        }\n    }\n}\n/**\n * The Visual Studio Code badge component registration.\n *\n * @remarks\n * HTML Element: `<vscode-badge>`\n *\n * @public\n */\nconst vsCodeBadge = Badge.compose({\n    baseName: \'badge\',\n    template: badgeTemplate,\n    styles: badgeStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/patterns/aria-global.js\n\n\n/**\n * Some states and properties are applicable to all host language elements regardless of whether a role is applied.\n * The following global states and properties are supported by all roles and by all base markup elements.\n * {@link https://www.w3.org/TR/wai-aria-1.1/#global_states}\n *\n * This is intended to be used as a mixin. Be sure you extend FASTElement.\n *\n * @public\n */\nclass ARIAGlobalStatesAndProperties {\n}\n__decorate([\n    attr({ attribute: "aria-atomic" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaAtomic", void 0);\n__decorate([\n    attr({ attribute: "aria-busy" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaBusy", void 0);\n__decorate([\n    attr({ attribute: "aria-controls" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaControls", void 0);\n__decorate([\n    attr({ attribute: "aria-current" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaCurrent", void 0);\n__decorate([\n    attr({ attribute: "aria-describedby" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDescribedby", void 0);\n__decorate([\n    attr({ attribute: "aria-details" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDetails", void 0);\n__decorate([\n    attr({ attribute: "aria-disabled" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDisabled", void 0);\n__decorate([\n    attr({ attribute: "aria-errormessage" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaErrormessage", void 0);\n__decorate([\n    attr({ attribute: "aria-flowto" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaFlowto", void 0);\n__decorate([\n    attr({ attribute: "aria-haspopup" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaHaspopup", void 0);\n__decorate([\n    attr({ attribute: "aria-hidden" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaHidden", void 0);\n__decorate([\n    attr({ attribute: "aria-invalid" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaInvalid", void 0);\n__decorate([\n    attr({ attribute: "aria-keyshortcuts" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaKeyshortcuts", void 0);\n__decorate([\n    attr({ attribute: "aria-label" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLabel", void 0);\n__decorate([\n    attr({ attribute: "aria-labelledby" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLabelledby", void 0);\n__decorate([\n    attr({ attribute: "aria-live" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLive", void 0);\n__decorate([\n    attr({ attribute: "aria-owns" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaOwns", void 0);\n__decorate([\n    attr({ attribute: "aria-relevant" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaRelevant", void 0);\n__decorate([\n    attr({ attribute: "aria-roledescription" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaRoledescription", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/ref.js\n\n/**\n * The runtime behavior for template references.\n * @public\n */\nclass RefBehavior {\n    /**\n     * Creates an instance of RefBehavior.\n     * @param target - The element to reference.\n     * @param propertyName - The name of the property to assign the reference to.\n     */\n    constructor(target, propertyName) {\n        this.target = target;\n        this.propertyName = propertyName;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        source[this.propertyName] = this.target;\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    unbind() { }\n}\n/**\n * A directive that observes the updates a property with a reference to the element.\n * @param propertyName - The name of the property to assign the reference to.\n * @public\n */\nfunction ref(propertyName) {\n    return new AttachedBehaviorHTMLDirective("fast-ref", RefBehavior, propertyName);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/patterns/start-end.js\n\n/**\n * A mixin class implementing start and end elements.\n * These are generally used to decorate text elements with icons or other visual indicators.\n * @public\n */\nclass StartEnd {\n    handleStartContentChange() {\n        this.startContainer.classList.toggle("start", this.start.assignedNodes().length > 0);\n    }\n    handleEndContentChange() {\n        this.endContainer.classList.toggle("end", this.end.assignedNodes().length > 0);\n    }\n}\n/**\n * The template for the end element.\n * For use with {@link StartEnd}\n *\n * @public\n */\nconst endSlotTemplate = (context, definition) => html `\n    <span\n        part="end"\n        ${ref("endContainer")}\n        class=${x => (definition.end ? "end" : void 0)}\n    >\n        <slot name="end" ${ref("end")} @slotchange="${x => x.handleEndContentChange()}">\n            ${definition.end || ""}\n        </slot>\n    </span>\n`;\n/**\n * The template for the start element.\n * For use with {@link StartEnd}\n *\n * @public\n */\nconst startSlotTemplate = (context, definition) => html `\n    <span\n        part="start"\n        ${ref("startContainer")}\n        class="${x => (definition.start ? "start" : void 0)}"\n    >\n        <slot\n            name="start"\n            ${ref("start")}\n            @slotchange="${x => x.handleStartContentChange()}"\n        >\n            ${definition.start || ""}\n        </slot>\n    </span>\n`;\n/**\n * The template for the end element.\n * For use with {@link StartEnd}\n *\n * @public\n * @deprecated - use endSlotTemplate\n */\nconst endTemplate = html `\n    <span part="end" ${ref("endContainer")}>\n        <slot\n            name="end"\n            ${ref("end")}\n            @slotchange="${x => x.handleEndContentChange()}"\n        ></slot>\n    </span>\n`;\n/**\n * The template for the start element.\n * For use with {@link StartEnd}\n *\n * @public\n * @deprecated - use startSlotTemplate\n */\nconst startTemplate = html `\n    <span part="start" ${ref("startContainer")}>\n        <slot\n            name="start"\n            ${ref("start")}\n            @slotchange="${x => x.handleStartContentChange()}"\n        ></slot>\n    </span>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/apply-mixins.js\n/**\n * Apply mixins to a constructor.\n * Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.\n * @public\n */\nfunction applyMixins(derivedCtor, ...baseCtors) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            if (name !== "constructor") {\n                Object.defineProperty(derivedCtor.prototype, name, \n                /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n                Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n            }\n        });\n        if (baseCtor.attributes) {\n            const existing = derivedCtor.attributes || [];\n            derivedCtor.attributes = existing.concat(baseCtor.attributes);\n        }\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/key-codes.js\n/**\n * Key Code values\n * @deprecated - KeyCodes are deprecated, use individual string key exports\n */\nvar KeyCodes;\n(function (KeyCodes) {\n    KeyCodes[KeyCodes["alt"] = 18] = "alt";\n    KeyCodes[KeyCodes["arrowDown"] = 40] = "arrowDown";\n    KeyCodes[KeyCodes["arrowLeft"] = 37] = "arrowLeft";\n    KeyCodes[KeyCodes["arrowRight"] = 39] = "arrowRight";\n    KeyCodes[KeyCodes["arrowUp"] = 38] = "arrowUp";\n    KeyCodes[KeyCodes["back"] = 8] = "back";\n    KeyCodes[KeyCodes["backSlash"] = 220] = "backSlash";\n    KeyCodes[KeyCodes["break"] = 19] = "break";\n    KeyCodes[KeyCodes["capsLock"] = 20] = "capsLock";\n    KeyCodes[KeyCodes["closeBracket"] = 221] = "closeBracket";\n    KeyCodes[KeyCodes["colon"] = 186] = "colon";\n    KeyCodes[KeyCodes["colon2"] = 59] = "colon2";\n    KeyCodes[KeyCodes["comma"] = 188] = "comma";\n    KeyCodes[KeyCodes["ctrl"] = 17] = "ctrl";\n    KeyCodes[KeyCodes["delete"] = 46] = "delete";\n    KeyCodes[KeyCodes["end"] = 35] = "end";\n    KeyCodes[KeyCodes["enter"] = 13] = "enter";\n    KeyCodes[KeyCodes["equals"] = 187] = "equals";\n    KeyCodes[KeyCodes["equals2"] = 61] = "equals2";\n    KeyCodes[KeyCodes["equals3"] = 107] = "equals3";\n    KeyCodes[KeyCodes["escape"] = 27] = "escape";\n    KeyCodes[KeyCodes["forwardSlash"] = 191] = "forwardSlash";\n    KeyCodes[KeyCodes["function1"] = 112] = "function1";\n    KeyCodes[KeyCodes["function10"] = 121] = "function10";\n    KeyCodes[KeyCodes["function11"] = 122] = "function11";\n    KeyCodes[KeyCodes["function12"] = 123] = "function12";\n    KeyCodes[KeyCodes["function2"] = 113] = "function2";\n    KeyCodes[KeyCodes["function3"] = 114] = "function3";\n    KeyCodes[KeyCodes["function4"] = 115] = "function4";\n    KeyCodes[KeyCodes["function5"] = 116] = "function5";\n    KeyCodes[KeyCodes["function6"] = 117] = "function6";\n    KeyCodes[KeyCodes["function7"] = 118] = "function7";\n    KeyCodes[KeyCodes["function8"] = 119] = "function8";\n    KeyCodes[KeyCodes["function9"] = 120] = "function9";\n    KeyCodes[KeyCodes["home"] = 36] = "home";\n    KeyCodes[KeyCodes["insert"] = 45] = "insert";\n    KeyCodes[KeyCodes["menu"] = 93] = "menu";\n    KeyCodes[KeyCodes["minus"] = 189] = "minus";\n    KeyCodes[KeyCodes["minus2"] = 109] = "minus2";\n    KeyCodes[KeyCodes["numLock"] = 144] = "numLock";\n    KeyCodes[KeyCodes["numPad0"] = 96] = "numPad0";\n    KeyCodes[KeyCodes["numPad1"] = 97] = "numPad1";\n    KeyCodes[KeyCodes["numPad2"] = 98] = "numPad2";\n    KeyCodes[KeyCodes["numPad3"] = 99] = "numPad3";\n    KeyCodes[KeyCodes["numPad4"] = 100] = "numPad4";\n    KeyCodes[KeyCodes["numPad5"] = 101] = "numPad5";\n    KeyCodes[KeyCodes["numPad6"] = 102] = "numPad6";\n    KeyCodes[KeyCodes["numPad7"] = 103] = "numPad7";\n    KeyCodes[KeyCodes["numPad8"] = 104] = "numPad8";\n    KeyCodes[KeyCodes["numPad9"] = 105] = "numPad9";\n    KeyCodes[KeyCodes["numPadDivide"] = 111] = "numPadDivide";\n    KeyCodes[KeyCodes["numPadDot"] = 110] = "numPadDot";\n    KeyCodes[KeyCodes["numPadMinus"] = 109] = "numPadMinus";\n    KeyCodes[KeyCodes["numPadMultiply"] = 106] = "numPadMultiply";\n    KeyCodes[KeyCodes["numPadPlus"] = 107] = "numPadPlus";\n    KeyCodes[KeyCodes["openBracket"] = 219] = "openBracket";\n    KeyCodes[KeyCodes["pageDown"] = 34] = "pageDown";\n    KeyCodes[KeyCodes["pageUp"] = 33] = "pageUp";\n    KeyCodes[KeyCodes["period"] = 190] = "period";\n    KeyCodes[KeyCodes["print"] = 44] = "print";\n    KeyCodes[KeyCodes["quote"] = 222] = "quote";\n    KeyCodes[KeyCodes["scrollLock"] = 145] = "scrollLock";\n    KeyCodes[KeyCodes["shift"] = 16] = "shift";\n    KeyCodes[KeyCodes["space"] = 32] = "space";\n    KeyCodes[KeyCodes["tab"] = 9] = "tab";\n    KeyCodes[KeyCodes["tilde"] = 192] = "tilde";\n    KeyCodes[KeyCodes["windowsLeft"] = 91] = "windowsLeft";\n    KeyCodes[KeyCodes["windowsOpera"] = 219] = "windowsOpera";\n    KeyCodes[KeyCodes["windowsRight"] = 92] = "windowsRight";\n})(KeyCodes || (KeyCodes = {}));\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeAlt = 18;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowDown = 40;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowLeft = 37;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowRight = 39;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowUp = 38;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBack = 8;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBackSlash = 220;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBreak = 19;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCapsLock = 20;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCloseBracket = 221;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeColon = 186;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeColon2 = 59; // Opera and Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeComma = 188;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCtrl = 17;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeDelete = 46;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEnd = 35;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEnter = 13;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals = 187;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals2 = 61; // Opera\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals3 = 107; // Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEscape = 27;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeForwardSlash = 191;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction1 = 112;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction10 = 121;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction11 = 122;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction12 = 123;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction2 = 113;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction3 = 114;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction4 = 115;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction5 = 116;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction6 = 117;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction7 = 118;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction8 = 119;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction9 = 120;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeHome = 36;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeInsert = 45;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMenu = 93;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMinus = 189;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMinus2 = 109; // Opera and Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumLock = 144;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad0 = 96;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad1 = 97;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad2 = 98;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad3 = 99;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad4 = 100;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad5 = 101;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad6 = 102;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad7 = 103;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad8 = 104;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad9 = 105;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadDivide = 111;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadDot = 110;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadMinus = 109;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadMultiply = 106;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadPlus = 107;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeOpenBracket = 219;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePageDown = 34;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePageUp = 33;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePeriod = 190;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePrint = 44;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeQuote = 222;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeScrollLock = 145;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeShift = 16;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeSpace = 32;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeTab = 9;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeTilde = 192;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsLeft = 91;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsOpera = 219; // Opera\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsRight = 92;\n/**\n * String values for use with KeyboardEvent.key\n */\nconst keyArrowDown = "ArrowDown";\nconst keyArrowLeft = "ArrowLeft";\nconst keyArrowRight = "ArrowRight";\nconst keyArrowUp = "ArrowUp";\nconst keyEnter = "Enter";\nconst keyEscape = "Escape";\nconst keyHome = "Home";\nconst keyEnd = "End";\nconst keyFunction2 = "F2";\nconst keyPageDown = "PageDown";\nconst keyPageUp = "PageUp";\nconst keySpace = " ";\nconst keyTab = "Tab";\nconst keyBackspace = "Backspace";\nconst keyDelete = "Delete";\nconst ArrowKeys = {\n    ArrowDown: keyArrowDown,\n    ArrowLeft: keyArrowLeft,\n    ArrowRight: keyArrowRight,\n    ArrowUp: keyArrowUp,\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/form-associated/form-associated.js\n\n\nconst proxySlotName = "form-associated-proxy";\nconst ElementInternalsKey = "ElementInternals";\n/**\n * @alpha\n */\nconst supportsElementInternals = ElementInternalsKey in window &&\n    "setFormValue" in window[ElementInternalsKey].prototype;\nconst InternalsMap = new WeakMap();\n/**\n * Base function for providing Custom Element Form Association.\n *\n * @alpha\n */\nfunction FormAssociated(BaseCtor) {\n    const C = class extends BaseCtor {\n        constructor(...args) {\n            super(...args);\n            /**\n             * Track whether the value has been changed from the initial value\n             */\n            this.dirtyValue = false;\n            /**\n             * Sets the element\'s disabled state. A disabled element will not be included during form submission.\n             *\n             * @remarks\n             * HTML Attribute: disabled\n             */\n            this.disabled = false;\n            /**\n             * These are events that are still fired by the proxy\n             * element based on user / programmatic interaction.\n             *\n             * The proxy implementation should be transparent to\n             * the app author, so block these events from emitting.\n             */\n            this.proxyEventsToBlock = ["change", "click"];\n            this.proxyInitialized = false;\n            this.required = false;\n            this.initialValue = this.initialValue || "";\n            if (!this.elementInternals) {\n                // When elementInternals is not supported, formResetCallback is\n                // bound to an event listener, so ensure the handler\'s `this`\n                // context is correct.\n                this.formResetCallback = this.formResetCallback.bind(this);\n            }\n        }\n        /**\n         * Must evaluate to true to enable elementInternals.\n         * Feature detects API support and resolve respectively\n         *\n         * @internal\n         */\n        static get formAssociated() {\n            return supportsElementInternals;\n        }\n        /**\n         * Returns the validity state of the element\n         *\n         * @alpha\n         */\n        get validity() {\n            return this.elementInternals\n                ? this.elementInternals.validity\n                : this.proxy.validity;\n        }\n        /**\n         * Retrieve a reference to the associated form.\n         * Returns null if not associated to any form.\n         *\n         * @alpha\n         */\n        get form() {\n            return this.elementInternals ? this.elementInternals.form : this.proxy.form;\n        }\n        /**\n         * Retrieve the localized validation message,\n         * or custom validation message if set.\n         *\n         * @alpha\n         */\n        get validationMessage() {\n            return this.elementInternals\n                ? this.elementInternals.validationMessage\n                : this.proxy.validationMessage;\n        }\n        /**\n         * Whether the element will be validated when the\n         * form is submitted\n         */\n        get willValidate() {\n            return this.elementInternals\n                ? this.elementInternals.willValidate\n                : this.proxy.willValidate;\n        }\n        /**\n         * A reference to all associated label elements\n         */\n        get labels() {\n            if (this.elementInternals) {\n                return Object.freeze(Array.from(this.elementInternals.labels));\n            }\n            else if (this.proxy instanceof HTMLElement &&\n                this.proxy.ownerDocument &&\n                this.id) {\n                // Labels associated by wrapping the element: <label><custom-element></custom-element></label>\n                const parentLabels = this.proxy.labels;\n                // Labels associated using the `for` attribute\n                const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for=\'${this.id}\']`));\n                const labels = parentLabels\n                    ? forLabels.concat(Array.from(parentLabels))\n                    : forLabels;\n                return Object.freeze(labels);\n            }\n            else {\n                return emptyArray;\n            }\n        }\n        /**\n         * Invoked when the `value` property changes\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `valueChanged` method\n         * They must be sure to invoke `super.valueChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        valueChanged(previous, next) {\n            this.dirtyValue = true;\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.value = this.value;\n            }\n            this.currentValue = this.value;\n            this.setFormValue(this.value);\n            this.validate();\n        }\n        currentValueChanged() {\n            this.value = this.currentValue;\n        }\n        /**\n         * Invoked when the `initialValue` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `initialValueChanged` method\n         * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        initialValueChanged(previous, next) {\n            // If the value is clean and the component is connected to the DOM\n            // then set value equal to the attribute value.\n            if (!this.dirtyValue) {\n                this.value = this.initialValue;\n                this.dirtyValue = false;\n            }\n        }\n        /**\n         * Invoked when the `disabled` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `disabledChanged` method\n         * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        disabledChanged(previous, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.disabled = this.disabled;\n            }\n            DOM.queueUpdate(() => this.classList.toggle("disabled", this.disabled));\n        }\n        /**\n         * Invoked when the `name` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `nameChanged` method\n         * They must be sure to invoke `super.nameChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        nameChanged(previous, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.name = this.name;\n            }\n        }\n        /**\n         * Invoked when the `required` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `requiredChanged` method\n         * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        requiredChanged(prev, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.required = this.required;\n            }\n            DOM.queueUpdate(() => this.classList.toggle("required", this.required));\n            this.validate();\n        }\n        /**\n         * The element internals object. Will only exist\n         * in browsers supporting the attachInternals API\n         */\n        get elementInternals() {\n            if (!supportsElementInternals) {\n                return null;\n            }\n            let internals = InternalsMap.get(this);\n            if (!internals) {\n                internals = this.attachInternals();\n                InternalsMap.set(this, internals);\n            }\n            return internals;\n        }\n        /**\n         * @internal\n         */\n        connectedCallback() {\n            super.connectedCallback();\n            this.addEventListener("keypress", this._keypressHandler);\n            if (!this.value) {\n                this.value = this.initialValue;\n                this.dirtyValue = false;\n            }\n            if (!this.elementInternals) {\n                this.attachProxy();\n                if (this.form) {\n                    this.form.addEventListener("reset", this.formResetCallback);\n                }\n            }\n        }\n        /**\n         * @internal\n         */\n        disconnectedCallback() {\n            this.proxyEventsToBlock.forEach(name => this.proxy.removeEventListener(name, this.stopPropagation));\n            if (!this.elementInternals && this.form) {\n                this.form.removeEventListener("reset", this.formResetCallback);\n            }\n        }\n        /**\n         * Return the current validity of the element.\n         */\n        checkValidity() {\n            return this.elementInternals\n                ? this.elementInternals.checkValidity()\n                : this.proxy.checkValidity();\n        }\n        /**\n         * Return the current validity of the element.\n         * If false, fires an invalid event at the element.\n         */\n        reportValidity() {\n            return this.elementInternals\n                ? this.elementInternals.reportValidity()\n                : this.proxy.reportValidity();\n        }\n        /**\n         * Set the validity of the control. In cases when the elementInternals object is not\n         * available (and the proxy element is used to report validity), this function will\n         * do nothing unless a message is provided, at which point the setCustomValidity method\n         * of the proxy element will be invoked with the provided message.\n         * @param flags - Validity flags\n         * @param message - Optional message to supply\n         * @param anchor - Optional element used by UA to display an interactive validation UI\n         */\n        setValidity(flags, message, anchor) {\n            if (this.elementInternals) {\n                this.elementInternals.setValidity(flags, message, anchor);\n            }\n            else if (typeof message === "string") {\n                this.proxy.setCustomValidity(message);\n            }\n        }\n        /**\n         * Invoked when a connected component\'s form or fieldset has its disabled\n         * state changed.\n         * @param disabled - the disabled value of the form / fieldset\n         */\n        formDisabledCallback(disabled) {\n            this.disabled = disabled;\n        }\n        formResetCallback() {\n            this.value = this.initialValue;\n            this.dirtyValue = false;\n        }\n        /**\n         * Attach the proxy element to the DOM\n         */\n        attachProxy() {\n            var _a;\n            if (!this.proxyInitialized) {\n                this.proxyInitialized = true;\n                this.proxy.style.display = "none";\n                this.proxyEventsToBlock.forEach(name => this.proxy.addEventListener(name, this.stopPropagation));\n                // These are typically mapped to the proxy during\n                // property change callbacks, but during initialization\n                // on the initial call of the callback, the proxy is\n                // still undefined. We should find a better way to address this.\n                this.proxy.disabled = this.disabled;\n                this.proxy.required = this.required;\n                if (typeof this.name === "string") {\n                    this.proxy.name = this.name;\n                }\n                if (typeof this.value === "string") {\n                    this.proxy.value = this.value;\n                }\n                this.proxy.setAttribute("slot", proxySlotName);\n                this.proxySlot = document.createElement("slot");\n                this.proxySlot.setAttribute("name", proxySlotName);\n            }\n            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);\n            this.appendChild(this.proxy);\n        }\n        /**\n         * Detach the proxy element from the DOM\n         */\n        detachProxy() {\n            var _a;\n            this.removeChild(this.proxy);\n            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);\n        }\n        /**\n         * Sets the validity of the custom element. By default this uses the proxy element to determine\n         * validity, but this can be extended or replaced in implementation.\n         */\n        validate() {\n            if (this.proxy instanceof HTMLElement) {\n                this.setValidity(this.proxy.validity, this.proxy.validationMessage);\n            }\n        }\n        /**\n         * Associates the provided value (and optional state) with the parent form.\n         * @param value - The value to set\n         * @param state - The state object provided to during session restores and when autofilling.\n         */\n        setFormValue(value, state) {\n            if (this.elementInternals) {\n                this.elementInternals.setFormValue(value, state || value);\n            }\n        }\n        _keypressHandler(e) {\n            switch (e.key) {\n                case keyEnter:\n                    if (this.form instanceof HTMLFormElement) {\n                        // Implicit submission\n                        const defaultButton = this.form.querySelector("[type=submit]");\n                        defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();\n                    }\n                    break;\n            }\n        }\n        /**\n         * Used to stop propagation of proxy element events\n         * @param e - Event object\n         */\n        stopPropagation(e) {\n            e.stopPropagation();\n        }\n    };\n    attr({ mode: "boolean" })(C.prototype, "disabled");\n    attr({ mode: "fromView", attribute: "value" })(C.prototype, "initialValue");\n    attr({ attribute: "current-value" })(C.prototype, "currentValue");\n    attr(C.prototype, "name");\n    attr({ mode: "boolean" })(C.prototype, "required");\n    observable(C.prototype, "value");\n    return C;\n}\n/**\n * @alpha\n */\nfunction CheckableFormAssociated(BaseCtor) {\n    class C extends FormAssociated(BaseCtor) {\n    }\n    class D extends C {\n        constructor(...args) {\n            super(args);\n            /**\n             * Tracks whether the "checked" property has been changed.\n             * This is necessary to provide consistent behavior with\n             * normal input checkboxes\n             */\n            this.dirtyChecked = false;\n            /**\n             * Provides the default checkedness of the input element\n             * Passed down to proxy\n             *\n             * @public\n             * @remarks\n             * HTML Attribute: checked\n             */\n            this.checkedAttribute = false;\n            /**\n             * The checked state of the control.\n             *\n             * @public\n             */\n            this.checked = false;\n            // Re-initialize dirtyChecked because initialization of other values\n            // causes it to become true\n            this.dirtyChecked = false;\n        }\n        checkedAttributeChanged() {\n            this.defaultChecked = this.checkedAttribute;\n        }\n        /**\n         * @internal\n         */\n        defaultCheckedChanged() {\n            if (!this.dirtyChecked) {\n                // Setting this.checked will cause us to enter a dirty state,\n                // but if we are clean when defaultChecked is changed, we want to stay\n                // in a clean state, so reset this.dirtyChecked\n                this.checked = this.defaultChecked;\n                this.dirtyChecked = false;\n            }\n        }\n        checkedChanged(prev, next) {\n            if (!this.dirtyChecked) {\n                this.dirtyChecked = true;\n            }\n            this.currentChecked = this.checked;\n            this.updateForm();\n            if (this.proxy instanceof HTMLInputElement) {\n                this.proxy.checked = this.checked;\n            }\n            if (prev !== undefined) {\n                this.$emit("change");\n            }\n            this.validate();\n        }\n        currentCheckedChanged(prev, next) {\n            this.checked = this.currentChecked;\n        }\n        updateForm() {\n            const value = this.checked ? this.value : null;\n            this.setFormValue(value, value);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.updateForm();\n        }\n        formResetCallback() {\n            super.formResetCallback();\n            this.checked = !!this.checkedAttribute;\n            this.dirtyChecked = false;\n        }\n    }\n    attr({ attribute: "checked", mode: "boolean" })(D.prototype, "checkedAttribute");\n    attr({ attribute: "current-checked", converter: booleanConverter })(D.prototype, "currentChecked");\n    observable(D.prototype, "defaultChecked");\n    observable(D.prototype, "checked");\n    return D;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.form-associated.js\n\n\nclass _Button extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Button:class)} component.\n *\n * @internal\n */\nclass FormAssociatedButton extends FormAssociated(_Button) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("input");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.js\n\n\n\n\n\n/**\n * A Button Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.\n *\n * @public\n */\nclass button_Button extends FormAssociatedButton {\n    constructor() {\n        super(...arguments);\n        /**\n         * Prevent events to propagate if disabled and has no slotted content wrapped in HTML elements\n         * @internal\n         */\n        this.handleClick = (e) => {\n            var _a;\n            if (this.disabled && ((_a = this.defaultSlottedContent) === null || _a === void 0 ? void 0 : _a.length) <= 1) {\n                e.stopPropagation();\n            }\n        };\n        /**\n         * Submits the parent form\n         */\n        this.handleSubmission = () => {\n            if (!this.form) {\n                return;\n            }\n            const attached = this.proxy.isConnected;\n            if (!attached) {\n                this.attachProxy();\n            }\n            // Browser support for requestSubmit is not comprehensive\n            // so click the proxy if it isn\'t supported\n            typeof this.form.requestSubmit === "function"\n                ? this.form.requestSubmit(this.proxy)\n                : this.proxy.click();\n            if (!attached) {\n                this.detachProxy();\n            }\n        };\n        /**\n         * Resets the parent form\n         */\n        this.handleFormReset = () => {\n            var _a;\n            (_a = this.form) === null || _a === void 0 ? void 0 : _a.reset();\n        };\n        /**\n         * Overrides the focus call for where delegatesFocus is unsupported.\n         * This check works for Chrome, Edge Chromium, FireFox, and Safari\n         * Relevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858\n         */\n        this.handleUnsupportedDelegatesFocus = () => {\n            var _a;\n            // Check to see if delegatesFocus is supported\n            if (window.ShadowRoot &&\n                !window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus") && ((_a = this.$fastController.definition.shadowOptions) === null || _a === void 0 ? void 0 : _a.delegatesFocus)) {\n                this.focus = () => {\n                    this.control.focus();\n                };\n            }\n        };\n    }\n    formactionChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formAction = this.formaction;\n        }\n    }\n    formenctypeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formEnctype = this.formenctype;\n        }\n    }\n    formmethodChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formMethod = this.formmethod;\n        }\n    }\n    formnovalidateChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formNoValidate = this.formnovalidate;\n        }\n    }\n    formtargetChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formTarget = this.formtarget;\n        }\n    }\n    typeChanged(previous, next) {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.type = this.type;\n        }\n        next === "submit" && this.addEventListener("click", this.handleSubmission);\n        previous === "submit" && this.removeEventListener("click", this.handleSubmission);\n        next === "reset" && this.addEventListener("click", this.handleFormReset);\n        previous === "reset" && this.removeEventListener("click", this.handleFormReset);\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        this.proxy.setAttribute("type", this.type);\n        this.handleUnsupportedDelegatesFocus();\n        const elements = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);\n        if (elements) {\n            elements.forEach((span) => {\n                span.addEventListener("click", this.handleClick);\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        var _a;\n        super.disconnectedCallback();\n        const elements = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);\n        if (elements) {\n            elements.forEach((span) => {\n                span.removeEventListener("click", this.handleClick);\n            });\n        }\n    }\n}\n__decorate([\n    attr({ mode: "boolean" })\n], button_Button.prototype, "autofocus", void 0);\n__decorate([\n    attr({ attribute: "form" })\n], button_Button.prototype, "formId", void 0);\n__decorate([\n    attr\n], button_Button.prototype, "formaction", void 0);\n__decorate([\n    attr\n], button_Button.prototype, "formenctype", void 0);\n__decorate([\n    attr\n], button_Button.prototype, "formmethod", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], button_Button.prototype, "formnovalidate", void 0);\n__decorate([\n    attr\n], button_Button.prototype, "formtarget", void 0);\n__decorate([\n    attr\n], button_Button.prototype, "type", void 0);\n__decorate([\n    observable\n], button_Button.prototype, "defaultSlottedContent", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA button role\n *\n * @public\n */\nclass DelegatesARIAButton {\n}\n__decorate([\n    attr({ attribute: "aria-expanded" })\n], DelegatesARIAButton.prototype, "ariaExpanded", void 0);\n__decorate([\n    attr({ attribute: "aria-pressed" })\n], DelegatesARIAButton.prototype, "ariaPressed", void 0);\napplyMixins(DelegatesARIAButton, ARIAGlobalStatesAndProperties);\napplyMixins(button_Button, StartEnd, DelegatesARIAButton);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js\n\n\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nfunction node_observation_elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nclass NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js\n\n\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nclass SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener("slotchange", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener("slotchange", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nfunction slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === "string") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective("fast-slotted", SlottedBehavior, propertyOrOptions);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Button:class)} component.\n * @public\n */\nconst buttonTemplate = (context, definition) => html `\n    <button\n        class="control"\n        part="control"\n        ?autofocus="${x => x.autofocus}"\n        ?disabled="${x => x.disabled}"\n        form="${x => x.formId}"\n        formaction="${x => x.formaction}"\n        formenctype="${x => x.formenctype}"\n        formmethod="${x => x.formmethod}"\n        formnovalidate="${x => x.formnovalidate}"\n        formtarget="${x => x.formtarget}"\n        name="${x => x.name}"\n        type="${x => x.type}"\n        value="${x => x.value}"\n        aria-atomic="${x => x.ariaAtomic}"\n        aria-busy="${x => x.ariaBusy}"\n        aria-controls="${x => x.ariaControls}"\n        aria-current="${x => x.ariaCurrent}"\n        aria-describedby="${x => x.ariaDescribedby}"\n        aria-details="${x => x.ariaDetails}"\n        aria-disabled="${x => x.ariaDisabled}"\n        aria-errormessage="${x => x.ariaErrormessage}"\n        aria-expanded="${x => x.ariaExpanded}"\n        aria-flowto="${x => x.ariaFlowto}"\n        aria-haspopup="${x => x.ariaHaspopup}"\n        aria-hidden="${x => x.ariaHidden}"\n        aria-invalid="${x => x.ariaInvalid}"\n        aria-keyshortcuts="${x => x.ariaKeyshortcuts}"\n        aria-label="${x => x.ariaLabel}"\n        aria-labelledby="${x => x.ariaLabelledby}"\n        aria-live="${x => x.ariaLive}"\n        aria-owns="${x => x.ariaOwns}"\n        aria-pressed="${x => x.ariaPressed}"\n        aria-relevant="${x => x.ariaRelevant}"\n        aria-roledescription="${x => x.ariaRoledescription}"\n        ${ref("control")}\n    >\n        ${startSlotTemplate(context, definition)}\n        <span class="content" part="content">\n            <slot ${slotted("defaultSlottedContent")}></slot>\n        </span>\n        ${endSlotTemplate(context, definition)}\n    </button>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/exenv-es6/dist/can-use-dom.js\n/**\n * Checks if the DOM is available to access and use\n */\nfunction can_use_dom_canUseDOM() {\n    return !!(typeof window !== "undefined" && window.document && window.document.createElement);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/dom.js\n\n/**\n * A test that ensures that all arguments are HTML Elements\n */\nfunction isHTMLElement(...args) {\n    return args.every((arg) => arg instanceof HTMLElement);\n}\n/**\n * Returns all displayed elements inside of a root node that match a provided selector\n */\nfunction getDisplayedNodes(rootNode, selector) {\n    if (!rootNode || !selector || !isHTMLElement(rootNode)) {\n        return;\n    }\n    const nodes = Array.from(rootNode.querySelectorAll(selector));\n    // offsetParent will be null if the element isn\'t currently displayed,\n    // so this will allow us to operate only on visible nodes\n    return nodes.filter((node) => node.offsetParent !== null);\n}\n/**\n * Gets the numeric key code associated with a keyboard event. This method is for use with DOM level 3 events\n * that still use the deprecated keyCode property.\n */\nfunction getKeyCode(event) {\n    return event === null ? null : event.which || event.keyCode || event.charCode;\n}\n/**\n * Returns the nonce used in the page, if any.\n *\n * Based on https://github.com/cssinjs/jss/blob/master/packages/jss/src/DomRenderer.js\n */\nfunction getNonce() {\n    const node = document.querySelector(\'meta[property="csp-nonce"]\');\n    if (node) {\n        return node.getAttribute("content");\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Test if the document supports :focus-visible\n */\nlet _canUseFocusVisible;\nfunction canUseFocusVisible() {\n    if (typeof _canUseFocusVisible === "boolean") {\n        return _canUseFocusVisible;\n    }\n    if (!can_use_dom_canUseDOM()) {\n        _canUseFocusVisible = false;\n        return _canUseFocusVisible;\n    }\n    // Check to see if the document supports the focus-visible element\n    const styleElement = document.createElement("style");\n    // If nonces are present on the page, use it when creating the style element\n    // to test focus-visible support.\n    const styleNonce = getNonce();\n    if (styleNonce !== null) {\n        styleElement.setAttribute("nonce", styleNonce);\n    }\n    document.head.appendChild(styleElement);\n    try {\n        styleElement.sheet.insertRule("foo:focus-visible {color:inherit}", 0);\n        _canUseFocusVisible = true;\n    }\n    catch (e) {\n        _canUseFocusVisible = false;\n    }\n    finally {\n        document.head.removeChild(styleElement);\n    }\n    return _canUseFocusVisible;\n}\nlet _canUseCssGrid;\nfunction canUseCssGrid() {\n    if (typeof _canUseCssGrid === "boolean") {\n        return _canUseCssGrid;\n    }\n    try {\n        _canUseCssGrid = CSS.supports("display", "grid");\n    }\n    catch (_a) {\n        _canUseCssGrid = false;\n    }\n    return _canUseCssGrid;\n}\nfunction canUseForcedColors() {\n    return (canUseDOM() &&\n        (window.matchMedia("(forced-colors: none)").matches ||\n            window.matchMedia("(forced-colors: active)").matches));\n}\nfunction resetDocumentCache() {\n    _canUseCssGrid = undefined;\n    _canUseFocusVisible = undefined;\n}\n/**\n * @deprecated Use \'canUseForcedColors\' instead\n */\nconst canUsedForcedColors = (/* unused pure expression or super */ null && (canUseForcedColors));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/focus.js\n\n/**\n * The string representing the focus selector to be used. Value\n * will be "focus-visible" when https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\n * is supported and "focus" when it is not.\n *\n * @public\n */\nconst focusVisible = canUseFocusVisible() ? "focus-visible" : "focus";\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/disabled.js\n/**\n * The CSS value for disabled cursors.\n * @public\n */\nconst disabledCursor = "not-allowed";\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/button/button.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Developer note:\n *\n * The prettier-ignore command is used on this block of code because when removed the\n * \'.control:${focusVisible}\' CSS selector will be automatically reformatted to\n * \'.control: ${focusVisible}\' (note the space between the colon and dollar sign).\n *\n * This results in non-valid CSS that will not render a focus outline on base buttons.\n *\n * Additionally, this prettier command must be declared on the entire code block and not\n * directly above the CSS selector line because the below code block is a template literal\n * string which will end up being used directly in the final component CSS.\n *\n * Thus having \'// prettier-ignore\' directly in the final CSS will also break the component\n * styling.\n *\n * @internal\n */\n// prettier-ignore\nconst BaseButtonStyles = css `\n\t${display(\'inline-flex\')} :host {\n\t\toutline: none;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tcolor: ${buttonPrimaryForeground};\n\t\tbackground: ${buttonPrimaryBackground};\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tfill: currentColor;\n\t\tcursor: pointer;\n\t}\n\t.control {\n\t\tbackground: transparent;\n\t\theight: inherit;\n\t\tflex-grow: 1;\n\t\tbox-sizing: border-box;\n\t\tdisplay: inline-flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tpadding: ${buttonPaddingVertical} ${buttonPaddingHorizontal};\n\t\twhite-space: wrap;\n\t\toutline: none;\n\t\ttext-decoration: none;\n\t\tborder: calc(${borderWidth} * 1px) solid ${buttonBorder};\n\t\tcolor: inherit;\n\t\tborder-radius: inherit;\n\t\tfill: inherit;\n\t\tcursor: inherit;\n\t\tfont-family: inherit;\n\t\tmax-width: 300px;\n\t}\n\t:host(:hover) {\n\t\tbackground: ${buttonPrimaryHoverBackground};\n\t}\n\t:host(:active) {\n\t\tbackground: ${buttonPrimaryBackground};\n\t}\n\t.control:${focusVisible} {\n\t\toutline: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\toutline-offset: calc(${borderWidth} * 2px);\n\t}\n\t.control::-moz-focus-inner {\n\t\tborder: 0;\n\t}\n\t:host([disabled]) {\n\t\topacity: ${disabledOpacity};\n\t\tbackground: ${buttonPrimaryBackground};\n\t\tcursor: ${disabledCursor};\n\t}\n\t.content {\n\t\tdisplay: flex;\n\t}\n\t.start {\n\t\tdisplay: flex;\n\t}\n\t::slotted(svg),\n\t::slotted(span) {\n\t\twidth: calc(${designUnit} * 4px);\n\t\theight: calc(${designUnit} * 4px);\n\t}\n\t.start {\n\t\tmargin-inline-end: 8px;\n\t}\n`;\n/**\n * @internal\n */\nconst PrimaryButtonStyles = css `\n\t:host([appearance=\'primary\']) {\n\t\tbackground: ${buttonPrimaryBackground};\n\t\tcolor: ${buttonPrimaryForeground};\n\t}\n\t:host([appearance=\'primary\']:hover) {\n\t\tbackground: ${buttonPrimaryHoverBackground};\n\t}\n\t:host([appearance=\'primary\']:active) .control:active {\n\t\tbackground: ${buttonPrimaryBackground};\n\t}\n\t:host([appearance=\'primary\']) .control:${focusVisible} {\n\t\toutline: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\toutline-offset: calc(${borderWidth} * 2px);\n\t}\n\t:host([appearance=\'primary\'][disabled]) {\n\t\tbackground: ${buttonPrimaryBackground};\n\t}\n`;\n/**\n * @internal\n */\nconst SecondaryButtonStyles = css `\n\t:host([appearance=\'secondary\']) {\n\t\tbackground: ${buttonSecondaryBackground};\n\t\tcolor: ${buttonSecondaryForeground};\n\t}\n\t:host([appearance=\'secondary\']:hover) {\n\t\tbackground: ${buttonSecondaryHoverBackground};\n\t}\n\t:host([appearance=\'secondary\']:active) .control:active {\n\t\tbackground: ${buttonSecondaryBackground};\n\t}\n\t:host([appearance=\'secondary\']) .control:${focusVisible} {\n\t\toutline: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\toutline-offset: calc(${borderWidth} * 2px);\n\t}\n\t:host([appearance=\'secondary\'][disabled]) {\n\t\tbackground: ${buttonSecondaryBackground};\n\t}\n`;\n/**\n * @internal\n */\nconst IconButtonStyles = css `\n\t:host([appearance=\'icon\']) {\n\t\tbackground: ${buttonIconBackground};\n\t\tborder-radius: ${buttonIconCornerRadius};\n\t\tcolor: ${foreground};\n\t}\n\t:host([appearance=\'icon\']:hover) {\n\t\tbackground: ${buttonIconHoverBackground};\n\t\toutline: 1px dotted ${contrastActiveBorder};\n\t\toutline-offset: -1px;\n\t}\n\t:host([appearance=\'icon\']) .control {\n\t\tpadding: ${buttonIconPadding};\n\t\tborder: none;\n\t}\n\t:host([appearance=\'icon\']:active) .control:active {\n\t\tbackground: ${buttonIconHoverBackground};\n\t}\n\t:host([appearance=\'icon\']) .control:${focusVisible} {\n\t\toutline: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\toutline-offset: ${buttonIconFocusBorderOffset};\n\t}\n\t:host([appearance=\'icon\'][disabled]) {\n\t\tbackground: ${buttonIconBackground};\n\t}\n`;\nconst buttonStyles = (context, definition) => css `\n\t${BaseButtonStyles}\n\t${PrimaryButtonStyles}\n\t${SecondaryButtonStyles}\n\t${IconButtonStyles}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/button/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The Visual Studio Code button class.\n *\n * @public\n */\nclass Button extends button_Button {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // If the appearance property has not been set, set it to the\n        // value of the appearance attribute.\n        if (!this.appearance) {\n            const appearanceValue = this.getAttribute(\'appearance\');\n            this.appearance = appearanceValue;\n        }\n    }\n    /**\n     * Component lifecycle method that runs when an attribute of the\n     * element is changed.\n     *\n     * @param attrName - The attribute that was changed\n     * @param oldVal - The old value of the attribute\n     * @param newVal - The new value of the attribute\n     *\n     * @internal\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n        // In the case when an icon only button is created add a default ARIA\n        // label to the button since there is no longer button text to use\n        // as the label\n        if (attrName === \'appearance\' && newVal === \'icon\') {\n            // Only set the ARIA label to the default text if an aria-label attribute\n            // does not exist on the button\n            const ariaLabelValue = this.getAttribute(\'aria-label\');\n            if (!ariaLabelValue) {\n                this.ariaLabel = \'Icon Button\';\n            }\n        }\n        // In the case when the aria-label attribute has been defined on the\n        // <vscode-button>, this will programmatically propogate the value to\n        // the <button> HTML element that lives in the Shadow DOM\n        if (attrName === \'aria-label\') {\n            this.ariaLabel = newVal;\n        }\n        if (attrName === \'disabled\') {\n            this.disabled = newVal !== null;\n        }\n    }\n}\n__decorate([\n    attr\n], Button.prototype, "appearance", void 0);\n/**\n * The Visual Studio Code button component registration.\n *\n * @remarks\n * HTML Element: `<vscode-button>`\n *\n * @public\n */\nconst vsCodeButton = Button.compose({\n    baseName: \'button\',\n    template: buttonTemplate,\n    styles: buttonStyles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.form-associated.js\n\n\nclass _Checkbox extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.\n *\n * @internal\n */\nclass FormAssociatedCheckbox extends CheckableFormAssociated(_Checkbox) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("input");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.js\n\n\n\n\n/**\n * A Checkbox Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.\n *\n * @public\n */\nclass checkbox_Checkbox extends FormAssociatedCheckbox {\n    constructor() {\n        super();\n        /**\n         * The element\'s value to be included in form submission when checked.\n         * Default to "on" to reach parity with input[type="checkbox"]\n         *\n         * @internal\n         */\n        this.initialValue = "on";\n        /**\n         * The indeterminate state of the control\n         */\n        this.indeterminate = false;\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            switch (e.key) {\n                case keySpace:\n                    this.checked = !this.checked;\n                    break;\n            }\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            if (!this.disabled && !this.readOnly) {\n                this.checked = !this.checked;\n            }\n        };\n        this.proxy.setAttribute("type", "checkbox");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: "readonly", mode: "boolean" })\n], checkbox_Checkbox.prototype, "readOnly", void 0);\n__decorate([\n    observable\n], checkbox_Checkbox.prototype, "defaultSlottedNodes", void 0);\n__decorate([\n    observable\n], checkbox_Checkbox.prototype, "indeterminate", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.\n * @public\n */\nconst checkboxTemplate = (context, definition) => html `\n    <template\n        role="checkbox"\n        aria-checked="${x => x.checked}"\n        aria-required="${x => x.required}"\n        aria-disabled="${x => x.disabled}"\n        aria-readonly="${x => x.readOnly}"\n        tabindex="${x => (x.disabled ? null : 0)}"\n        @keypress="${(x, c) => x.keypressHandler(c.event)}"\n        @click="${(x, c) => x.clickHandler(c.event)}"\n        class="${x => (x.readOnly ? "readonly" : "")} ${x => x.checked ? "checked" : ""} ${x => (x.indeterminate ? "indeterminate" : "")}"\n    >\n        <div part="control" class="control">\n            <slot name="checked-indicator">\n                ${definition.checkedIndicator || ""}\n            </slot>\n            <slot name="indeterminate-indicator">\n                ${definition.indeterminateIndicator || ""}\n            </slot>\n        </div>\n        <label\n            part="label"\n            class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? "label"\n    : "label label__hidden"}"\n        >\n            <slot ${slotted("defaultSlottedNodes")}></slot>\n        </label>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/checkbox/checkbox.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst checkboxStyles = (context, defintiion) => css `\n\t${display(\'inline-flex\')} :host {\n\t\talign-items: center;\n\t\toutline: none;\n\t\tmargin: calc(${designUnit} * 1px) 0;\n\t\tuser-select: none;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t}\n\t.control {\n\t\tposition: relative;\n\t\twidth: calc(${designUnit} * 4px + 2px);\n\t\theight: calc(${designUnit} * 4px + 2px);\n\t\tbox-sizing: border-box;\n\t\tborder-radius: calc(${checkboxCornerRadius} * 1px);\n\t\tborder: calc(${borderWidth} * 1px) solid ${checkboxBorder};\n\t\tbackground: ${checkboxBackground};\n\t\toutline: none;\n\t\tcursor: pointer;\n\t}\n\t.label {\n\t\tfont-family: ${fontFamily};\n\t\tcolor: ${foreground};\n\t\tpadding-inline-start: calc(${designUnit} * 2px + 2px);\n\t\tmargin-inline-end: calc(${designUnit} * 2px + 2px);\n\t\tcursor: pointer;\n\t}\n\t.label__hidden {\n\t\tdisplay: none;\n\t\tvisibility: hidden;\n\t}\n\t.checked-indicator {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tdisplay: block;\n\t\tfill: ${foreground};\n\t\topacity: 0;\n\t\tpointer-events: none;\n\t}\n\t.indeterminate-indicator {\n\t\tborder-radius: 2px;\n\t\tbackground: ${foreground};\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\twidth: 50%;\n\t\theight: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t\topacity: 0;\n\t}\n\t:host(:enabled) .control:hover {\n\t\tbackground: ${checkboxBackground};\n\t\tborder-color: ${checkboxBorder};\n\t}\n\t:host(:enabled) .control:active {\n\t\tbackground: ${checkboxBackground};\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host(:${focusVisible}) .control {\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t}\n\t:host(.disabled) .label,\n\t:host(.readonly) .label,\n\t:host(.readonly) .control,\n\t:host(.disabled) .control {\n\t\tcursor: ${disabledCursor};\n\t}\n\t:host(.checked:not(.indeterminate)) .checked-indicator,\n\t:host(.indeterminate) .indeterminate-indicator {\n\t\topacity: 1;\n\t}\n\t:host(.disabled) {\n\t\topacity: ${disabledOpacity};\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/checkbox/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code checkbox class.\n *\n * @public\n */\nclass Checkbox extends checkbox_Checkbox {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n        else {\n            // Fallback to the label if there is no text content\n            this.setAttribute(\'aria-label\', \'Checkbox\');\n        }\n    }\n}\n/**\n * The Visual Studio Code checkbox component registration.\n *\n * @remarks\n * HTML Element: `<vscode-checkbox>`\n *\n * @public\n */\nconst vsCodeCheckbox = Checkbox.compose({\n    baseName: \'checkbox\',\n    template: checkboxTemplate,\n    styles: checkboxStyles,\n    checkedIndicator: `\n\t\t<svg \n\t\t\tpart="checked-indicator"\n\t\t\tclass="checked-indicator"\n\t\t\twidth="16" \n\t\t\theight="16" \n\t\t\tviewBox="0 0 16 16" \n\t\t\txmlns="http://www.w3.org/2000/svg" \n\t\t\tfill="currentColor"\n\t\t>\n\t\t\t<path \n\t\t\t\tfill-rule="evenodd" \n\t\t\t\tclip-rule="evenodd" \n\t\t\t\td="M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z"\n\t\t\t/>\n\t\t</svg>\n\t`,\n    indeterminateIndicator: `\n\t\t<div part="indeterminate-indicator" class="indeterminate-indicator"></div>\n\t`,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/array-change-records.js\n\n/** @internal */\nfunction newSplice(index, removed, addedCount) {\n    return {\n        index: index,\n        removed: removed,\n        addedCount: addedCount,\n    };\n}\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n// Note: This function is *based* on the computation of the Levenshtein\n// "edit" distance. The one change is that "updates" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for "keeping" the\n// maximum array items in the original array. For example:\n//\n//   \'xxxx123\' -> \'123yyyy\'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring \'123\' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    // "Deletion" columns\n    const rowCount = oldEnd - oldStart + 1;\n    const columnCount = currentEnd - currentStart + 1;\n    const distances = new Array(rowCount);\n    let north;\n    let west;\n    // "Addition" rows. Initialize null column.\n    for (let i = 0; i < rowCount; ++i) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n    }\n    // Initialize null row\n    for (let j = 0; j < columnCount; ++j) {\n        distances[0][j] = j;\n    }\n    for (let i = 1; i < rowCount; ++i) {\n        for (let j = 1; j < columnCount; ++j) {\n            if (current[currentStart + j - 1] === old[oldStart + i - 1]) {\n                distances[i][j] = distances[i - 1][j - 1];\n            }\n            else {\n                north = distances[i - 1][j] + 1;\n                west = distances[i][j - 1] + 1;\n                distances[i][j] = north < west ? north : west;\n            }\n        }\n    }\n    return distances;\n}\n// This starts at the final weight, and walks "backward" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    const edits = [];\n    while (i > 0 || j > 0) {\n        if (i === 0) {\n            edits.push(EDIT_ADD);\n            j--;\n            continue;\n        }\n        if (j === 0) {\n            edits.push(EDIT_DELETE);\n            i--;\n            continue;\n        }\n        const northWest = distances[i - 1][j - 1];\n        const west = distances[i - 1][j];\n        const north = distances[i][j - 1];\n        let min;\n        if (west < north) {\n            min = west < northWest ? west : northWest;\n        }\n        else {\n            min = north < northWest ? north : northWest;\n        }\n        if (min === northWest) {\n            if (northWest === current) {\n                edits.push(EDIT_LEAVE);\n            }\n            else {\n                edits.push(EDIT_UPDATE);\n                current = northWest;\n            }\n            i--;\n            j--;\n        }\n        else if (min === west) {\n            edits.push(EDIT_DELETE);\n            i--;\n            current = west;\n        }\n        else {\n            edits.push(EDIT_ADD);\n            j--;\n            current = north;\n        }\n    }\n    edits.reverse();\n    return edits;\n}\nfunction sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; ++i) {\n        if (current[i] !== old[i]) {\n            return i;\n        }\n    }\n    return searchLength;\n}\nfunction sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && current[--index1] === old[--index2]) {\n        count++;\n    }\n    return count;\n}\nfunction intersect(start1, end1, start2, end2) {\n    // Disjoint\n    if (end1 < start2 || end2 < start1) {\n        return -1;\n    }\n    // Adjacent\n    if (end1 === start2 || end2 === start1) {\n        return 0;\n    }\n    // Non-zero intersect, span1 first\n    if (start1 < start2) {\n        if (end1 < end2) {\n            return end1 - start2; // Overlap\n        }\n        return end2 - start2; // Contained\n    }\n    // Non-zero intersect, span2 first\n    if (end2 < end1) {\n        return end2 - start1; // Overlap\n    }\n    return end1 - start1; // Contained\n}\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n/**\n * @internal\n * @remarks\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n */\nfunction calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart === 0 && oldStart === 0) {\n        prefixCount = sharedPrefix(current, old, minLength);\n    }\n    if (currentEnd === current.length && oldEnd === old.length) {\n        suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n    }\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {\n        return emptyArray;\n    }\n    if (currentStart === currentEnd) {\n        const splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd) {\n            splice.removed.push(old[oldStart++]);\n        }\n        return [splice];\n    }\n    else if (oldStart === oldEnd) {\n        return [newSplice(currentStart, [], currentEnd - currentStart)];\n    }\n    const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n    const splices = [];\n    let splice = void 0;\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; ++i) {\n        switch (ops[i]) {\n            case EDIT_LEAVE:\n                if (splice !== void 0) {\n                    splices.push(splice);\n                    splice = void 0;\n                }\n                index++;\n                oldIndex++;\n                break;\n            case EDIT_UPDATE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            case EDIT_ADD:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                break;\n            case EDIT_DELETE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            // no default\n        }\n    }\n    if (splice !== void 0) {\n        splices.push(splice);\n    }\n    return splices;\n}\nconst $push = Array.prototype.push;\nfunction mergeSplice(splices, index, removed, addedCount) {\n    const splice = newSplice(index, removed, addedCount);\n    let inserted = false;\n    let insertionOffset = 0;\n    for (let i = 0; i < splices.length; i++) {\n        const current = splices[i];\n        current.index += insertionOffset;\n        if (inserted) {\n            continue;\n        }\n        const intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);\n        if (intersectCount >= 0) {\n            // Merge the two splices\n            splices.splice(i, 1);\n            i--;\n            insertionOffset -= current.addedCount - current.removed.length;\n            splice.addedCount += current.addedCount - intersectCount;\n            const deleteCount = splice.removed.length + current.removed.length - intersectCount;\n            if (!splice.addedCount && !deleteCount) {\n                // merged splice is a noop. discard.\n                inserted = true;\n            }\n            else {\n                let currentRemoved = current.removed;\n                if (splice.index < current.index) {\n                    // some prefix of splice.removed is prepended to current.removed.\n                    const prepend = splice.removed.slice(0, current.index - splice.index);\n                    $push.apply(prepend, currentRemoved);\n                    currentRemoved = prepend;\n                }\n                if (splice.index + splice.removed.length >\n                    current.index + current.addedCount) {\n                    // some suffix of splice.removed is appended to current.removed.\n                    const append = splice.removed.slice(current.index + current.addedCount - splice.index);\n                    $push.apply(currentRemoved, append);\n                }\n                splice.removed = currentRemoved;\n                if (current.index < splice.index) {\n                    splice.index = current.index;\n                }\n            }\n        }\n        else if (splice.index < current.index) {\n            // Insert splice here.\n            inserted = true;\n            splices.splice(i, 0, splice);\n            i++;\n            const offset = splice.addedCount - splice.removed.length;\n            current.index += offset;\n            insertionOffset += offset;\n        }\n    }\n    if (!inserted) {\n        splices.push(splice);\n    }\n}\nfunction createInitialSplices(changeRecords) {\n    const splices = [];\n    for (let i = 0, ii = changeRecords.length; i < ii; i++) {\n        const record = changeRecords[i];\n        mergeSplice(splices, record.index, record.removed, record.addedCount);\n    }\n    return splices;\n}\n/** @internal */\nfunction projectArraySplices(array, changeRecords) {\n    let splices = [];\n    const initialSplices = createInitialSplices(changeRecords);\n    for (let i = 0, ii = initialSplices.length; i < ii; ++i) {\n        const splice = initialSplices[i];\n        if (splice.addedCount === 1 && splice.removed.length === 1) {\n            if (splice.removed[0] !== array[splice.index]) {\n                splices.push(splice);\n            }\n            continue;\n        }\n        splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));\n    }\n    return splices;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js\n\n\n\n\nlet arrayObservationEnabled = false;\nfunction adjustIndex(changeRecord, array) {\n    let index = changeRecord.index;\n    const arrayLength = array.length;\n    if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n    }\n    else if (index < 0) {\n        index =\n            arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n    }\n    if (index < 0) {\n        index = 0;\n    }\n    changeRecord.index = index;\n    return changeRecord;\n}\nclass ArrayObserver extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.oldCollection = void 0;\n        this.splices = void 0;\n        this.needsQueue = true;\n        this.call = this.flush;\n        Reflect.defineProperty(source, "$fastController", {\n            value: this,\n            enumerable: false,\n        });\n    }\n    addSplice(splice) {\n        if (this.splices === void 0) {\n            this.splices = [splice];\n        }\n        else {\n            this.splices.push(splice);\n        }\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    reset(oldCollection) {\n        this.oldCollection = oldCollection;\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    flush() {\n        const splices = this.splices;\n        const oldCollection = this.oldCollection;\n        if (splices === void 0 && oldCollection === void 0) {\n            return;\n        }\n        this.needsQueue = true;\n        this.splices = void 0;\n        this.oldCollection = void 0;\n        const finalSplices = oldCollection === void 0\n            ? projectArraySplices(this.source, splices)\n            : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n        this.notify(finalSplices);\n    }\n}\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\nfunction enableArrayObservation() {\n    if (arrayObservationEnabled) {\n        return;\n    }\n    arrayObservationEnabled = true;\n    Observable.setArrayObserverFactory((collection) => {\n        return new ArrayObserver(collection);\n    });\n    const proto = Array.prototype;\n    // Don\'t patch Array if it has already been patched\n    // by another copy of fast-element.\n    if (proto.$fastPatch) {\n        return;\n    }\n    Reflect.defineProperty(proto, "$fastPatch", {\n        value: 1,\n        enumerable: false,\n    });\n    const pop = proto.pop;\n    const push = proto.push;\n    const reverse = proto.reverse;\n    const shift = proto.shift;\n    const sort = proto.sort;\n    const splice = proto.splice;\n    const unshift = proto.unshift;\n    proto.pop = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = pop.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(this.length, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.push = function () {\n        const methodCallResult = push.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n    proto.reverse = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = reverse.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.shift = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = shift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(0, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.sort = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = sort.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.splice = function () {\n        const methodCallResult = splice.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n        }\n        return methodCallResult;\n    };\n    proto.unshift = function () {\n        const methodCallResult = unshift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n}\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js\n\n\n\n\n\n\nconst defaultRepeatOptions = Object.freeze({\n    positioning: false,\n    recycle: true,\n});\nfunction bindWithoutPositioning(view, items, index, context) {\n    view.bind(items[index], context);\n}\nfunction bindWithPositioning(view, items, index, context) {\n    const childContext = Object.create(context);\n    childContext.index = index;\n    childContext.length = items.length;\n    view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\nclass RepeatBehavior {\n    /**\n     * Creates an instance of RepeatBehavior.\n     * @param location - The location in the DOM to render the repeat.\n     * @param itemsBinding - The array to render.\n     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n     * @param templateBinding - The template to render for each item.\n     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n        this.location = location;\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        this.source = null;\n        this.views = [];\n        this.items = null;\n        this.itemsObserver = null;\n        this.originalContext = void 0;\n        this.childContext = void 0;\n        this.bindView = bindWithoutPositioning;\n        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n        if (options.positioning) {\n            this.bindView = bindWithPositioning;\n        }\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source, context) {\n        this.source = source;\n        this.originalContext = context;\n        this.childContext = Object.create(context);\n        this.childContext.parent = source;\n        this.childContext.parentContext = this.originalContext;\n        this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n        this.template = this.templateBindingObserver.observe(source, this.originalContext);\n        this.observeItems(true);\n        this.refreshAllViews();\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.source = null;\n        this.items = null;\n        if (this.itemsObserver !== null) {\n            this.itemsObserver.unsubscribe(this);\n        }\n        this.unbindAllViews();\n        this.itemsBindingObserver.disconnect();\n        this.templateBindingObserver.disconnect();\n    }\n    /** @internal */\n    handleChange(source, args) {\n        if (source === this.itemsBinding) {\n            this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n            this.observeItems();\n            this.refreshAllViews();\n        }\n        else if (source === this.templateBinding) {\n            this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n            this.refreshAllViews(true);\n        }\n        else {\n            this.updateViews(args);\n        }\n    }\n    observeItems(force = false) {\n        if (!this.items) {\n            this.items = emptyArray;\n            return;\n        }\n        const oldObserver = this.itemsObserver;\n        const newObserver = (this.itemsObserver = Observable.getNotifier(this.items));\n        const hasNewObserver = oldObserver !== newObserver;\n        if (hasNewObserver && oldObserver !== null) {\n            oldObserver.unsubscribe(this);\n        }\n        if (hasNewObserver || force) {\n            newObserver.subscribe(this);\n        }\n    }\n    updateViews(splices) {\n        const childContext = this.childContext;\n        const views = this.views;\n        const totalRemoved = [];\n        const bindView = this.bindView;\n        let removeDelta = 0;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            const removed = splice.removed;\n            totalRemoved.push(...views.splice(splice.index + removeDelta, removed.length));\n            removeDelta -= splice.addedCount;\n        }\n        const items = this.items;\n        const template = this.template;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            let addIndex = splice.index;\n            const end = addIndex + splice.addedCount;\n            for (; addIndex < end; ++addIndex) {\n                const neighbor = views[addIndex];\n                const location = neighbor ? neighbor.firstChild : this.location;\n                const view = this.options.recycle && totalRemoved.length > 0\n                    ? totalRemoved.shift()\n                    : template.create();\n                views.splice(addIndex, 0, view);\n                bindView(view, items, addIndex, childContext);\n                view.insertBefore(location);\n            }\n        }\n        for (let i = 0, ii = totalRemoved.length; i < ii; ++i) {\n            totalRemoved[i].dispose();\n        }\n        if (this.options.positioning) {\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const currentContext = views[i].context;\n                currentContext.length = ii;\n                currentContext.index = i;\n            }\n        }\n    }\n    refreshAllViews(templateChanged = false) {\n        const items = this.items;\n        const childContext = this.childContext;\n        const template = this.template;\n        const location = this.location;\n        const bindView = this.bindView;\n        let itemsLength = items.length;\n        let views = this.views;\n        let viewsLength = views.length;\n        if (itemsLength === 0 || templateChanged) {\n            // all views need to be removed\n            HTMLView.disposeContiguousBatch(views);\n            viewsLength = 0;\n        }\n        if (viewsLength === 0) {\n            // all views need to be created\n            this.views = views = new Array(itemsLength);\n            for (let i = 0; i < itemsLength; ++i) {\n                const view = template.create();\n                bindView(view, items, i, childContext);\n                views[i] = view;\n                view.insertBefore(location);\n            }\n        }\n        else {\n            // attempt to reuse existing views with new data\n            let i = 0;\n            for (; i < itemsLength; ++i) {\n                if (i < viewsLength) {\n                    const view = views[i];\n                    bindView(view, items, i, childContext);\n                }\n                else {\n                    const view = template.create();\n                    bindView(view, items, i, childContext);\n                    views.push(view);\n                    view.insertBefore(location);\n                }\n            }\n            const removed = views.splice(i, viewsLength - i);\n            for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n                removed[i].dispose();\n            }\n        }\n    }\n    unbindAllViews() {\n        const views = this.views;\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            views[i].unbind();\n        }\n    }\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\nclass RepeatDirective extends HTMLDirective {\n    /**\n     * Creates an instance of RepeatDirective.\n     * @param itemsBinding - The binding that provides the array to render.\n     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(itemsBinding, templateBinding, options) {\n        super();\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        /**\n         * Creates a placeholder string based on the directive\'s index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createBlockPlaceholder;\n        enableArrayObservation();\n        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     */\n    createBehavior(target) {\n        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n    }\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\nfunction repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n    const templateBinding = typeof templateOrTemplateBinding === "function"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return new RepeatDirective(itemsBinding, templateBinding, options);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/events.js\n/**\n * This set of exported strings reference https://developer.mozilla.org/en-US/docs/Web/Events\n * and should include all non-deprecated and non-experimental Standard events\n */\nconst eventAbort = "abort";\nconst eventAfterPrint = "afterprint";\nconst eventAnimationCancel = "animationcancel";\nconst eventAnimationEnd = "animationend";\nconst eventAnimationIteration = "animationiteration";\nconst eventAnimationStart = "animationstart";\nconst eventAppInstalled = "appinstalled";\nconst eventBeforePrint = "beforeprint";\nconst eventBeforeUnload = "beforeunload";\nconst eventBeginEvent = "beginEvent";\nconst eventBlocked = "blocked";\nconst eventBlur = "blur";\nconst eventCanPlay = "canplay";\nconst eventCanPlayThrough = "canplaythrough";\nconst eventChange = "change";\nconst eventChargingChange = "chargingchange";\nconst eventChargingTimeChange = "chargingtimechange";\nconst eventClick = "click";\nconst eventClose = "close";\nconst eventComplete = "complete";\nconst eventCompositionEnd = "compositionend";\nconst eventCompositionStart = "compositionstart";\nconst eventCompositionUpdate = "compositionupdate";\nconst eventContextMenu = "contextmenu";\nconst eventCopy = "copy";\nconst eventCut = "cut";\nconst eventDblClick = "dblclick";\nconst eventDeviceChange = "devicechange";\nconst eventDeviceMotion = "devicemotion";\nconst eventDeviceOrientation = "deviceorientation";\nconst eventDischargingTimeChange = "dischargingtimechange";\nconst eventDrag = "drag";\nconst eventDragEnd = "dragend";\nconst eventDragEnter = "dragenter";\nconst eventDragLeave = "dragleave";\nconst eventDragOver = "dragover";\nconst eventDragStart = "dragstart";\nconst eventDrop = "drop";\nconst eventDurationChange = "durationchange";\nconst eventEmptied = "emptied";\nconst eventEnded = "ended";\nconst eventEndEvent = "endevent";\nconst eventError = "error";\nconst eventFocus = "focus";\nconst eventFocusIn = "focusin";\nconst eventFocusOut = "focusout";\nconst eventFullScreenChange = "fullscreenchange";\nconst eventFullScreenError = "fullscreenerror";\nconst eventGamePadConnected = "gamepadconnected";\nconst eventGamePadDisconnected = "gamepaddisconnected";\nconst eventGotPointerCapture = "gotpointercapture";\nconst eventHashChange = "hashchange";\nconst eventLostPointerCapture = "lostpointercapture";\nconst eventInput = "input";\nconst eventInvalid = "invalid";\nconst eventKeyDown = "keydown";\nconst eventKeyUp = "keyup";\nconst eventLevelChange = "levelchange";\nconst eventLoad = "load";\nconst eventLoadedData = "loadeddata";\nconst eventLoadedMetaData = "loadedmetadata";\nconst eventLoadEnd = "loadend";\nconst eventLoadStart = "loadstart";\nconst eventMessage = "message";\nconst eventMessageError = "messageerror";\nconst eventMouseDown = "mousedown";\nconst eventMouseEnter = "mouseenter";\nconst eventMouseLeave = "mouseleave";\nconst eventMouseMove = "mousemove";\nconst eventMouseOut = "mouseout";\nconst eventMouseOver = "mouseover";\nconst eventMouseUp = "mouseup";\nconst eventNotificationClick = "notificationclick";\nconst eventOffline = "offline";\nconst eventOnline = "online";\nconst eventOpen = "open";\nconst eventOrientationChange = "orientationchange";\nconst eventPageHide = "pagehide";\nconst eventPageShow = "pageshow";\nconst eventPaste = "paste";\nconst eventPause = "pause";\nconst eventPointerCancel = "pointercancel";\nconst eventPointerDown = "pointerdown";\nconst eventPointerEnter = "pointerenter";\nconst eventPointerLeave = "pointerleave";\nconst eventPointerLockChange = "pointerlockchange";\nconst eventPointerLockError = "pointerlockerror";\nconst eventPointerMove = "pointermove";\nconst eventPointerOut = "pointerout";\nconst eventPointerOver = "pointerover";\nconst eventPointerUp = "pointerup";\nconst eventPlay = "play";\nconst eventPlaying = "playing";\nconst eventPopState = "popstate";\nconst eventProgress = "progress";\nconst eventPush = "push";\nconst eventPushSubscriptionChange = "pushsubscriptionchange";\nconst eventRateChange = "ratechange";\nconst eventReadyStateChange = "readystatechange";\nconst eventRepeatEvent = "repeatevent";\nconst eventReset = "reset";\nconst eventResize = "resize";\nconst eventResourceTimingBufferFull = "resourcetimingbufferfull";\nconst eventScroll = "scroll";\nconst eventSeeked = "seeked";\nconst eventSeeking = "seeking";\nconst eventSelect = "select";\nconst eventShow = "show";\nconst eventSlotChange = "slotchange";\nconst eventStalled = "stalled";\nconst eventStart = "start";\nconst eventStorage = "storage";\nconst eventSubmit = "submit";\nconst eventSuccess = "success";\nconst eventSuspend = "suspend";\nconst eventSVGAbort = "SVGAbort";\nconst eventSVGError = "SVGError";\nconst eventSVGLoad = "SVGLoad";\nconst eventSVGResize = "SVGResize";\nconst eventSVGScroll = "SVGScroll";\nconst eventSVGUnload = "SVGUnload";\nconst eventSVGZoom = "SVGZoom";\nconst eventTimeOut = "timeout";\nconst eventTimeUpdate = "timeupdate";\nconst eventTouchCancel = "touchcancel";\nconst eventTouchEnd = "touchend";\nconst eventTouchMove = "touchmove";\nconst eventTouchStart = "touchstart";\nconst eventTransitionEnd = "transitionend";\nconst eventUnload = "unload";\nconst eventUpgradeNeeded = "upgradeneeded";\nconst eventUserProximity = "userproximity";\nconst eventVersionChange = "versionchange";\nconst eventVisibilityChange = "visibilitychange";\nconst eventVolumeChange = "volumechange";\nconst eventWaiting = "waiting";\nconst eventWheel = "wheel";\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.options.js\n/**\n * Enumerates auto generated header options\n * default option generates a non-sticky header row\n *\n * @public\n */\nvar GenerateHeaderOptions;\n(function (GenerateHeaderOptions) {\n    GenerateHeaderOptions["none"] = "none";\n    GenerateHeaderOptions["default"] = "default";\n    GenerateHeaderOptions["sticky"] = "sticky";\n})(GenerateHeaderOptions || (GenerateHeaderOptions = {}));\n/**\n * Enumerates possible cell types.\n *\n * @public\n */\nvar DataGridCellTypes;\n(function (DataGridCellTypes) {\n    DataGridCellTypes["default"] = "default";\n    DataGridCellTypes["columnHeader"] = "columnheader";\n    DataGridCellTypes["rowHeader"] = "rowheader";\n})(DataGridCellTypes || (DataGridCellTypes = {}));\n/**\n * Enumerates possible row types\n *\n * @public\n */\nvar DataGridRowTypes;\n(function (DataGridRowTypes) {\n    DataGridRowTypes["default"] = "default";\n    DataGridRowTypes["header"] = "header";\n    DataGridRowTypes["stickyHeader"] = "sticky-header";\n})(DataGridRowTypes || (DataGridRowTypes = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.js\n\n\n\n\n\n\n/**\n * A Data Grid Custom HTML Element.\n *\n * @public\n */\nclass data_grid_DataGrid extends FoundationElement {\n    constructor() {\n        super();\n        /**\n         * When true the component will not add itself to the tab queue.\n         * Default is false.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: no-tabbing\n         */\n        this.noTabbing = false;\n        /**\n         *  Whether the grid should automatically generate a header row and its type\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: generate-header\n         */\n        this.generateHeader = GenerateHeaderOptions["default"];\n        /**\n         * The data being displayed in the grid\n         *\n         * @public\n         */\n        this.rowsData = [];\n        /**\n         * The column definitions of the grid\n         *\n         * @public\n         */\n        this.columnDefinitions = null;\n        /**\n         * The index of the row that will receive focus the next time the\n         * grid is focused. This value changes as focus moves to different\n         * rows within the grid.  Changing this value when focus is already\n         * within the grid moves focus to the specified row.\n         *\n         * @public\n         */\n        this.focusRowIndex = 0;\n        /**\n         * The index of the column that will receive focus the next time the\n         * grid is focused. This value changes as focus moves to different rows\n         * within the grid.  Changing this value when focus is already within\n         * the grid moves focus to the specified column.\n         *\n         * @public\n         */\n        this.focusColumnIndex = 0;\n        this.rowsPlaceholder = null;\n        this.generatedHeader = null;\n        this.isUpdatingFocus = false;\n        this.pendingFocusUpdate = false;\n        this.rowindexUpdateQueued = false;\n        this.columnDefinitionsStale = true;\n        this.generatedGridTemplateColumns = "";\n        this.focusOnCell = (rowIndex, columnIndex, scrollIntoView) => {\n            if (this.rowElements.length === 0) {\n                this.focusRowIndex = 0;\n                this.focusColumnIndex = 0;\n                return;\n            }\n            const focusRowIndex = Math.max(0, Math.min(this.rowElements.length - 1, rowIndex));\n            const focusRow = this.rowElements[focusRowIndex];\n            const cells = focusRow.querySelectorAll(\'[role="cell"], [role="gridcell"], [role="columnheader"], [role="rowheader"]\');\n            const focusColumnIndex = Math.max(0, Math.min(cells.length - 1, columnIndex));\n            const focusTarget = cells[focusColumnIndex];\n            if (scrollIntoView &&\n                this.scrollHeight !== this.clientHeight &&\n                ((focusRowIndex < this.focusRowIndex && this.scrollTop > 0) ||\n                    (focusRowIndex > this.focusRowIndex &&\n                        this.scrollTop < this.scrollHeight - this.clientHeight))) {\n                focusTarget.scrollIntoView({ block: "center", inline: "center" });\n            }\n            focusTarget.focus();\n        };\n        this.onChildListChange = (mutations, \n        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n        observer) => {\n            if (mutations && mutations.length) {\n                mutations.forEach((mutation) => {\n                    mutation.addedNodes.forEach((newNode) => {\n                        if (newNode.nodeType === 1 &&\n                            newNode.getAttribute("role") === "row") {\n                            newNode.columnDefinitions = this.columnDefinitions;\n                        }\n                    });\n                });\n                this.queueRowIndexUpdate();\n            }\n        };\n        this.queueRowIndexUpdate = () => {\n            if (!this.rowindexUpdateQueued) {\n                this.rowindexUpdateQueued = true;\n                DOM.queueUpdate(this.updateRowIndexes);\n            }\n        };\n        this.updateRowIndexes = () => {\n            let newGridTemplateColumns = this.gridTemplateColumns;\n            if (newGridTemplateColumns === undefined) {\n                // try to generate columns based on manual rows\n                if (this.generatedGridTemplateColumns === "" && this.rowElements.length > 0) {\n                    const firstRow = this.rowElements[0];\n                    this.generatedGridTemplateColumns = new Array(firstRow.cellElements.length)\n                        .fill("1fr")\n                        .join(" ");\n                }\n                newGridTemplateColumns = this.generatedGridTemplateColumns;\n            }\n            this.rowElements.forEach((element, index) => {\n                const thisRow = element;\n                thisRow.rowIndex = index;\n                thisRow.gridTemplateColumns = newGridTemplateColumns;\n                if (this.columnDefinitionsStale) {\n                    thisRow.columnDefinitions = this.columnDefinitions;\n                }\n            });\n            this.rowindexUpdateQueued = false;\n            this.columnDefinitionsStale = false;\n        };\n    }\n    /**\n     *  generates a gridTemplateColumns based on columndata array\n     */\n    static generateTemplateColumns(columnDefinitions) {\n        let templateColumns = "";\n        columnDefinitions.forEach((column) => {\n            templateColumns = `${templateColumns}${templateColumns === "" ? "" : " "}${"1fr"}`;\n        });\n        return templateColumns;\n    }\n    noTabbingChanged() {\n        if (this.$fastController.isConnected) {\n            if (this.noTabbing) {\n                this.setAttribute("tabIndex", "-1");\n            }\n            else {\n                this.setAttribute("tabIndex", this.contains(document.activeElement) ||\n                    this === document.activeElement\n                    ? "-1"\n                    : "0");\n            }\n        }\n    }\n    generateHeaderChanged() {\n        if (this.$fastController.isConnected) {\n            this.toggleGeneratedHeader();\n        }\n    }\n    gridTemplateColumnsChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateRowIndexes();\n        }\n    }\n    rowsDataChanged() {\n        if (this.columnDefinitions === null && this.rowsData.length > 0) {\n            this.columnDefinitions = data_grid_DataGrid.generateColumns(this.rowsData[0]);\n        }\n        if (this.$fastController.isConnected) {\n            this.toggleGeneratedHeader();\n        }\n    }\n    columnDefinitionsChanged() {\n        if (this.columnDefinitions === null) {\n            this.generatedGridTemplateColumns = "";\n            return;\n        }\n        this.generatedGridTemplateColumns = data_grid_DataGrid.generateTemplateColumns(this.columnDefinitions);\n        if (this.$fastController.isConnected) {\n            this.columnDefinitionsStale = true;\n            this.queueRowIndexUpdate();\n        }\n    }\n    headerCellItemTemplateChanged() {\n        if (this.$fastController.isConnected) {\n            if (this.generatedHeader !== null) {\n                this.generatedHeader.headerCellItemTemplate = this.headerCellItemTemplate;\n            }\n        }\n    }\n    focusRowIndexChanged() {\n        if (this.$fastController.isConnected) {\n            this.queueFocusUpdate();\n        }\n    }\n    focusColumnIndexChanged() {\n        if (this.$fastController.isConnected) {\n            this.queueFocusUpdate();\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.rowItemTemplate === undefined) {\n            this.rowItemTemplate = this.defaultRowItemTemplate;\n        }\n        this.rowsPlaceholder = document.createComment("");\n        this.appendChild(this.rowsPlaceholder);\n        this.toggleGeneratedHeader();\n        this.rowsRepeatBehavior = new RepeatDirective(x => x.rowsData, x => x.rowItemTemplate, { positioning: true }).createBehavior(this.rowsPlaceholder);\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        this.$fastController.addBehaviors([this.rowsRepeatBehavior]);\n        this.addEventListener("row-focused", this.handleRowFocus);\n        this.addEventListener(eventFocus, this.handleFocus);\n        this.addEventListener(eventKeyDown, this.handleKeydown);\n        this.addEventListener(eventFocusOut, this.handleFocusOut);\n        this.observer = new MutationObserver(this.onChildListChange);\n        // only observe if nodes are added or removed\n        this.observer.observe(this, { childList: true });\n        if (this.noTabbing) {\n            this.setAttribute("tabindex", "-1");\n        }\n        DOM.queueUpdate(this.queueRowIndexUpdate);\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener("row-focused", this.handleRowFocus);\n        this.removeEventListener(eventFocus, this.handleFocus);\n        this.removeEventListener(eventKeyDown, this.handleKeydown);\n        this.removeEventListener(eventFocusOut, this.handleFocusOut);\n        // disconnect observer\n        this.observer.disconnect();\n        this.rowsPlaceholder = null;\n        this.generatedHeader = null;\n    }\n    /**\n     * @internal\n     */\n    handleRowFocus(e) {\n        this.isUpdatingFocus = true;\n        const focusRow = e.target;\n        this.focusRowIndex = this.rowElements.indexOf(focusRow);\n        this.focusColumnIndex = focusRow.focusColumnIndex;\n        this.setAttribute("tabIndex", "-1");\n        this.isUpdatingFocus = false;\n    }\n    /**\n     * @internal\n     */\n    handleFocus(e) {\n        this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);\n    }\n    /**\n     * @internal\n     */\n    handleFocusOut(e) {\n        if (e.relatedTarget === null || !this.contains(e.relatedTarget)) {\n            this.setAttribute("tabIndex", this.noTabbing ? "-1" : "0");\n        }\n    }\n    /**\n     * @internal\n     */\n    handleKeydown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        let newFocusRowIndex;\n        const maxIndex = this.rowElements.length - 1;\n        const currentGridBottom = this.offsetHeight + this.scrollTop;\n        const lastRow = this.rowElements[maxIndex];\n        switch (e.key) {\n            case keyArrowUp:\n                e.preventDefault();\n                // focus up one row\n                this.focusOnCell(this.focusRowIndex - 1, this.focusColumnIndex, true);\n                break;\n            case keyArrowDown:\n                e.preventDefault();\n                // focus down one row\n                this.focusOnCell(this.focusRowIndex + 1, this.focusColumnIndex, true);\n                break;\n            case keyPageUp:\n                e.preventDefault();\n                if (this.rowElements.length === 0) {\n                    this.focusOnCell(0, 0, false);\n                    break;\n                }\n                if (this.focusRowIndex === 0) {\n                    this.focusOnCell(0, this.focusColumnIndex, false);\n                    return;\n                }\n                newFocusRowIndex = this.focusRowIndex - 1;\n                for (newFocusRowIndex; newFocusRowIndex >= 0; newFocusRowIndex--) {\n                    const thisRow = this.rowElements[newFocusRowIndex];\n                    if (thisRow.offsetTop < this.scrollTop) {\n                        this.scrollTop =\n                            thisRow.offsetTop + thisRow.clientHeight - this.clientHeight;\n                        break;\n                    }\n                }\n                this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);\n                break;\n            case keyPageDown:\n                e.preventDefault();\n                if (this.rowElements.length === 0) {\n                    this.focusOnCell(0, 0, false);\n                    break;\n                }\n                // focus down one "page"\n                if (this.focusRowIndex >= maxIndex ||\n                    lastRow.offsetTop + lastRow.offsetHeight <= currentGridBottom) {\n                    this.focusOnCell(maxIndex, this.focusColumnIndex, false);\n                    return;\n                }\n                newFocusRowIndex = this.focusRowIndex + 1;\n                for (newFocusRowIndex; newFocusRowIndex <= maxIndex; newFocusRowIndex++) {\n                    const thisRow = this.rowElements[newFocusRowIndex];\n                    if (thisRow.offsetTop + thisRow.offsetHeight > currentGridBottom) {\n                        let stickyHeaderOffset = 0;\n                        if (this.generateHeader === GenerateHeaderOptions.sticky &&\n                            this.generatedHeader !== null) {\n                            stickyHeaderOffset = this.generatedHeader.clientHeight;\n                        }\n                        this.scrollTop = thisRow.offsetTop - stickyHeaderOffset;\n                        break;\n                    }\n                }\n                this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);\n                break;\n            case keyHome:\n                if (e.ctrlKey) {\n                    e.preventDefault();\n                    // focus first cell of first row\n                    this.focusOnCell(0, 0, true);\n                }\n                break;\n            case keyEnd:\n                if (e.ctrlKey && this.columnDefinitions !== null) {\n                    e.preventDefault();\n                    // focus last cell of last row\n                    this.focusOnCell(this.rowElements.length - 1, this.columnDefinitions.length - 1, true);\n                }\n                break;\n        }\n    }\n    queueFocusUpdate() {\n        if (this.isUpdatingFocus &&\n            (this.contains(document.activeElement) || this === document.activeElement)) {\n            return;\n        }\n        if (this.pendingFocusUpdate === false) {\n            this.pendingFocusUpdate = true;\n            DOM.queueUpdate(() => this.updateFocus());\n        }\n    }\n    updateFocus() {\n        this.pendingFocusUpdate = false;\n        this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);\n    }\n    toggleGeneratedHeader() {\n        if (this.generatedHeader !== null) {\n            this.removeChild(this.generatedHeader);\n            this.generatedHeader = null;\n        }\n        if (this.generateHeader !== GenerateHeaderOptions.none &&\n            this.rowsData.length > 0) {\n            const generatedHeaderElement = document.createElement(this.rowElementTag);\n            this.generatedHeader = generatedHeaderElement;\n            this.generatedHeader.columnDefinitions = this.columnDefinitions;\n            this.generatedHeader.gridTemplateColumns = this.gridTemplateColumns;\n            this.generatedHeader.rowType =\n                this.generateHeader === GenerateHeaderOptions.sticky\n                    ? DataGridRowTypes.stickyHeader\n                    : DataGridRowTypes.header;\n            if (this.firstChild !== null || this.rowsPlaceholder !== null) {\n                this.insertBefore(generatedHeaderElement, this.firstChild !== null ? this.firstChild : this.rowsPlaceholder);\n            }\n            return;\n        }\n    }\n}\n/**\n *  generates a basic column definition by examining sample row data\n */\ndata_grid_DataGrid.generateColumns = (row) => {\n    return Object.getOwnPropertyNames(row).map((property, index) => {\n        return {\n            columnDataKey: property,\n            gridColumn: `${index}`,\n        };\n    });\n};\n__decorate([\n    attr({ attribute: "no-tabbing", mode: "boolean" })\n], data_grid_DataGrid.prototype, "noTabbing", void 0);\n__decorate([\n    attr({ attribute: "generate-header" })\n], data_grid_DataGrid.prototype, "generateHeader", void 0);\n__decorate([\n    attr({ attribute: "grid-template-columns" })\n], data_grid_DataGrid.prototype, "gridTemplateColumns", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "rowsData", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "columnDefinitions", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "rowItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "cellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "headerCellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "focusRowIndex", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "focusColumnIndex", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "defaultRowItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "rowElementTag", void 0);\n__decorate([\n    observable\n], data_grid_DataGrid.prototype, "rowElements", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/children.js\n\n\n/**\n * The runtime behavior for child node observation.\n * @public\n */\nclass ChildrenBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of ChildrenBehavior.\n     * @param target - The element target to observe children on.\n     * @param options - The options to use when observing the element children.\n     */\n    constructor(target, options) {\n        super(target, options);\n        this.observer = null;\n        options.childList = true;\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        if (this.observer === null) {\n            this.observer = new MutationObserver(this.handleEvent.bind(this));\n        }\n        this.observer.observe(this.target, this.options);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        if ("subtree" in this.options) {\n            return Array.from(this.target.querySelectorAll(this.options.selector));\n        }\n        return Array.from(this.target.childNodes);\n    }\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\nfunction children(propertyOrOptions) {\n    if (typeof propertyOrOptions === "string") {\n        propertyOrOptions = {\n            property: propertyOrOptions,\n        };\n    }\n    return new AttachedBehaviorHTMLDirective("fast-children", ChildrenBehavior, propertyOrOptions);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-row.js\n\n\n\n\n\n/**\n * A Data Grid Row Custom HTML Element.\n *\n * @public\n */\nclass data_grid_row_DataGridRow extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The type of row\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: row-type\n         */\n        this.rowType = DataGridRowTypes["default"];\n        /**\n         * The base data for this row\n         *\n         * @public\n         */\n        this.rowData = null;\n        /**\n         * The column definitions of the row\n         *\n         * @public\n         */\n        this.columnDefinitions = null;\n        /**\n         * Whether focus is on/in a cell within this row.\n         *\n         * @internal\n         */\n        this.isActiveRow = false;\n        this.cellsRepeatBehavior = null;\n        this.cellsPlaceholder = null;\n        /**\n         * @internal\n         */\n        this.focusColumnIndex = 0;\n        this.refocusOnLoad = false;\n        this.updateRowStyle = () => {\n            this.style.gridTemplateColumns = this.gridTemplateColumns;\n        };\n    }\n    gridTemplateColumnsChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateRowStyle();\n        }\n    }\n    rowTypeChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateItemTemplate();\n        }\n    }\n    rowDataChanged() {\n        if (this.rowData !== null && this.isActiveRow) {\n            this.refocusOnLoad = true;\n            return;\n        }\n    }\n    cellItemTemplateChanged() {\n        this.updateItemTemplate();\n    }\n    headerCellItemTemplateChanged() {\n        this.updateItemTemplate();\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // note that row elements can be reused with a different data object\n        // as the parent grid\'s repeat behavior reacts to changes in the data set.\n        if (this.cellsRepeatBehavior === null) {\n            this.cellsPlaceholder = document.createComment("");\n            this.appendChild(this.cellsPlaceholder);\n            this.updateItemTemplate();\n            this.cellsRepeatBehavior = new RepeatDirective(x => x.columnDefinitions, x => x.activeCellItemTemplate, { positioning: true }).createBehavior(this.cellsPlaceholder);\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            this.$fastController.addBehaviors([this.cellsRepeatBehavior]);\n        }\n        this.addEventListener("cell-focused", this.handleCellFocus);\n        this.addEventListener(eventFocusOut, this.handleFocusout);\n        this.addEventListener(eventKeyDown, this.handleKeydown);\n        this.updateRowStyle();\n        if (this.refocusOnLoad) {\n            // if focus was on the row when data changed try to refocus on same cell\n            this.refocusOnLoad = false;\n            if (this.cellElements.length > this.focusColumnIndex) {\n                this.cellElements[this.focusColumnIndex].focus();\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener("cell-focused", this.handleCellFocus);\n        this.removeEventListener(eventFocusOut, this.handleFocusout);\n        this.removeEventListener(eventKeyDown, this.handleKeydown);\n    }\n    handleFocusout(e) {\n        if (!this.contains(e.target)) {\n            this.isActiveRow = false;\n            this.focusColumnIndex = 0;\n        }\n    }\n    handleCellFocus(e) {\n        this.isActiveRow = true;\n        this.focusColumnIndex = this.cellElements.indexOf(e.target);\n        this.$emit("row-focused", this);\n    }\n    handleKeydown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        let newFocusColumnIndex = 0;\n        switch (e.key) {\n            case keyArrowLeft:\n                // focus left one cell\n                newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);\n                this.cellElements[newFocusColumnIndex].focus();\n                e.preventDefault();\n                break;\n            case keyArrowRight:\n                // focus right one cell\n                newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);\n                this.cellElements[newFocusColumnIndex].focus();\n                e.preventDefault();\n                break;\n            case keyHome:\n                if (!e.ctrlKey) {\n                    this.cellElements[0].focus();\n                    e.preventDefault();\n                }\n                break;\n            case keyEnd:\n                if (!e.ctrlKey) {\n                    // focus last cell of the row\n                    this.cellElements[this.cellElements.length - 1].focus();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateItemTemplate() {\n        this.activeCellItemTemplate =\n            this.rowType === DataGridRowTypes["default"] &&\n                this.cellItemTemplate !== undefined\n                ? this.cellItemTemplate\n                : this.rowType === DataGridRowTypes["default"] &&\n                    this.cellItemTemplate === undefined\n                    ? this.defaultCellItemTemplate\n                    : this.headerCellItemTemplate !== undefined\n                        ? this.headerCellItemTemplate\n                        : this.defaultHeaderCellItemTemplate;\n    }\n}\n__decorate([\n    attr({ attribute: "grid-template-columns" })\n], data_grid_row_DataGridRow.prototype, "gridTemplateColumns", void 0);\n__decorate([\n    attr({ attribute: "row-type" })\n], data_grid_row_DataGridRow.prototype, "rowType", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "rowData", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "columnDefinitions", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "cellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "headerCellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "rowIndex", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "isActiveRow", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "activeCellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "defaultCellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "defaultHeaderCellItemTemplate", void 0);\n__decorate([\n    observable\n], data_grid_row_DataGridRow.prototype, "cellElements", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid.template.js\n\n\nfunction createRowItemTemplate(context) {\n    const rowTag = context.tagFor(data_grid_row_DataGridRow);\n    return html `\n    <${rowTag}\n        :rowData="${x => x}"\n        :cellItemTemplate="${(x, c) => c.parent.cellItemTemplate}"\n        :headerCellItemTemplate="${(x, c) => c.parent.headerCellItemTemplate}"\n    ></${rowTag}>\n`;\n}\n/**\n * Generates a template for the {@link @microsoft/fast-foundation#DataGrid} component using\n * the provided prefix.\n *\n * @public\n */\nconst dataGridTemplate = (context, definition) => {\n    const rowItemTemplate = createRowItemTemplate(context);\n    const rowTag = context.tagFor(data_grid_row_DataGridRow);\n    return html `\n        <template\n            role="grid"\n            tabindex="0"\n            :rowElementTag="${() => rowTag}"\n            :defaultRowItemTemplate="${rowItemTemplate}"\n            ${children({\n        property: "rowElements",\n        filter: node_observation_elements("[role=row]"),\n    })}\n        >\n            <slot></slot>\n        </template>\n    `;\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-cell.js\n\n\n\n\n\n\nconst defaultCellContentsTemplate = html `\n    <template>\n        ${x => x.rowData === null ||\n    x.columnDefinition === null ||\n    x.columnDefinition.columnDataKey === null\n    ? null\n    : x.rowData[x.columnDefinition.columnDataKey]}\n    </template>\n`;\nconst defaultHeaderCellContentsTemplate = html `\n    <template>\n        ${x => x.columnDefinition === null\n    ? null\n    : x.columnDefinition.title === undefined\n        ? x.columnDefinition.columnDataKey\n        : x.columnDefinition.title}\n    </template>\n`;\n/**\n * A Data Grid Cell Custom HTML Element.\n *\n * @public\n */\nclass data_grid_cell_DataGridCell extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The type of cell\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: cell-type\n         */\n        this.cellType = DataGridCellTypes["default"];\n        /**\n         * The base data for the parent row\n         *\n         * @public\n         */\n        this.rowData = null;\n        /**\n         * The base data for the column\n         *\n         * @public\n         */\n        this.columnDefinition = null;\n        this.isActiveCell = false;\n        this.customCellView = null;\n        this.updateCellStyle = () => {\n            this.style.gridColumn = this.gridColumn;\n        };\n    }\n    cellTypeChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateCellView();\n        }\n    }\n    gridColumnChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateCellStyle();\n        }\n    }\n    columnDefinitionChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected) {\n            this.updateCellView();\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        this.addEventListener(eventFocusIn, this.handleFocusin);\n        this.addEventListener(eventFocusOut, this.handleFocusout);\n        this.addEventListener(eventKeyDown, this.handleKeydown);\n        this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === undefined\n            ? 0\n            : this.columnDefinition.gridColumn}`;\n        this.updateCellView();\n        this.updateCellStyle();\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener(eventFocusIn, this.handleFocusin);\n        this.removeEventListener(eventFocusOut, this.handleFocusout);\n        this.removeEventListener(eventKeyDown, this.handleKeydown);\n        this.disconnectCellView();\n    }\n    handleFocusin(e) {\n        if (this.isActiveCell) {\n            return;\n        }\n        this.isActiveCell = true;\n        switch (this.cellType) {\n            case DataGridCellTypes.columnHeader:\n                if (this.columnDefinition !== null &&\n                    this.columnDefinition.headerCellInternalFocusQueue !== true &&\n                    typeof this.columnDefinition.headerCellFocusTargetCallback ===\n                        "function") {\n                    // move focus to the focus target\n                    const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n                    if (focusTarget !== null) {\n                        focusTarget.focus();\n                    }\n                }\n                break;\n            default:\n                if (this.columnDefinition !== null &&\n                    this.columnDefinition.cellInternalFocusQueue !== true &&\n                    typeof this.columnDefinition.cellFocusTargetCallback === "function") {\n                    // move focus to the focus target\n                    const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n                    if (focusTarget !== null) {\n                        focusTarget.focus();\n                    }\n                }\n                break;\n        }\n        this.$emit("cell-focused", this);\n    }\n    handleFocusout(e) {\n        if (this !== document.activeElement && !this.contains(document.activeElement)) {\n            this.isActiveCell = false;\n        }\n    }\n    handleKeydown(e) {\n        if (e.defaultPrevented ||\n            this.columnDefinition === null ||\n            (this.cellType === DataGridCellTypes["default"] &&\n                this.columnDefinition.cellInternalFocusQueue !== true) ||\n            (this.cellType === DataGridCellTypes.columnHeader &&\n                this.columnDefinition.headerCellInternalFocusQueue !== true)) {\n            return;\n        }\n        switch (e.key) {\n            case keyEnter:\n            case keyFunction2:\n                if (this.contains(document.activeElement) &&\n                    document.activeElement !== this) {\n                    return;\n                }\n                switch (this.cellType) {\n                    case DataGridCellTypes.columnHeader:\n                        if (this.columnDefinition.headerCellFocusTargetCallback !==\n                            undefined) {\n                            const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n                            if (focusTarget !== null) {\n                                focusTarget.focus();\n                            }\n                            e.preventDefault();\n                        }\n                        break;\n                    default:\n                        if (this.columnDefinition.cellFocusTargetCallback !== undefined) {\n                            const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n                            if (focusTarget !== null) {\n                                focusTarget.focus();\n                            }\n                            e.preventDefault();\n                        }\n                        break;\n                }\n                break;\n            case keyEscape:\n                if (this.contains(document.activeElement) &&\n                    document.activeElement !== this) {\n                    this.focus();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateCellView() {\n        this.disconnectCellView();\n        if (this.columnDefinition === null) {\n            return;\n        }\n        switch (this.cellType) {\n            case DataGridCellTypes.columnHeader:\n                if (this.columnDefinition.headerCellTemplate !== undefined) {\n                    this.customCellView = this.columnDefinition.headerCellTemplate.render(this, this);\n                }\n                else {\n                    this.customCellView = defaultHeaderCellContentsTemplate.render(this, this);\n                }\n                break;\n            case undefined:\n            case DataGridCellTypes.rowHeader:\n            case DataGridCellTypes["default"]:\n                if (this.columnDefinition.cellTemplate !== undefined) {\n                    this.customCellView = this.columnDefinition.cellTemplate.render(this, this);\n                }\n                else {\n                    this.customCellView = defaultCellContentsTemplate.render(this, this);\n                }\n                break;\n        }\n    }\n    disconnectCellView() {\n        if (this.customCellView !== null) {\n            this.customCellView.dispose();\n            this.customCellView = null;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: "cell-type" })\n], data_grid_cell_DataGridCell.prototype, "cellType", void 0);\n__decorate([\n    attr({ attribute: "grid-column" })\n], data_grid_cell_DataGridCell.prototype, "gridColumn", void 0);\n__decorate([\n    observable\n], data_grid_cell_DataGridCell.prototype, "rowData", void 0);\n__decorate([\n    observable\n], data_grid_cell_DataGridCell.prototype, "columnDefinition", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-row.template.js\n\n\nfunction createCellItemTemplate(context) {\n    const cellTag = context.tagFor(data_grid_cell_DataGridCell);\n    return html `\n    <${cellTag}\n        cell-type="${x => (x.isRowHeader ? "rowheader" : undefined)}"\n        grid-column="${(x, c) => c.index + 1}"\n        :rowData="${(x, c) => c.parent.rowData}"\n        :columnDefinition="${x => x}"\n    ></${cellTag}>\n`;\n}\nfunction createHeaderCellItemTemplate(context) {\n    const cellTag = context.tagFor(data_grid_cell_DataGridCell);\n    return html `\n    <${cellTag}\n        cell-type="columnheader"\n        grid-column="${(x, c) => c.index + 1}"\n        :columnDefinition="${x => x}"\n    ></${cellTag}>\n`;\n}\n/**\n * Generates a template for the {@link @microsoft/fast-foundation#DataGridRow} component using\n * the provided prefix.\n *\n * @public\n */\nconst dataGridRowTemplate = (context, definition) => {\n    const cellItemTemplate = createCellItemTemplate(context);\n    const headerCellItemTemplate = createHeaderCellItemTemplate(context);\n    return html `\n        <template\n            role="row"\n            class="${x => (x.rowType !== "default" ? x.rowType : "")}"\n            :defaultCellItemTemplate="${cellItemTemplate}"\n            :defaultHeaderCellItemTemplate="${headerCellItemTemplate}"\n            ${children({\n        property: "cellElements",\n        filter: node_observation_elements(\'[role="cell"],[role="gridcell"],[role="columnheader"],[role="rowheader"]\'),\n    })}\n        >\n            <slot ${slotted("slottedCellElements")}></slot>\n        </template>\n    `;\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-cell.template.js\n\n/**\n * Generates a template for the {@link @microsoft/fast-foundation#DataGridCell} component using\n * the provided prefix.\n * @public\n */\nconst dataGridCellTemplate = (context, definition) => {\n    return html `\n        <template\n            tabindex="-1"\n            role="${x => !x.cellType || x.cellType === "default" ? "gridcell" : x.cellType}"\n            class="\n            ${x => x.cellType === "columnheader"\n        ? "column-header"\n        : x.cellType === "rowheader"\n            ? "row-header"\n            : ""}\n            "\n        >\n            <slot></slot>\n        </template>\n    `;\n};\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/data-grid/data-grid.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst dataGridStyles = (context, definition) => css `\n\t:host {\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/data-grid/data-grid-row.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst dataGridRowStyles = (context, definition) => css `\n\t:host {\n\t\tdisplay: grid;\n\t\tpadding: calc((${designUnit} / 4) * 1px) 0;\n\t\tbox-sizing: border-box;\n\t\twidth: 100%;\n\t\tbackground: transparent;\n\t}\n\t:host(.header) {\n\t}\n\t:host(.sticky-header) {\n\t\tbackground: ${background};\n\t\tposition: sticky;\n\t\ttop: 0;\n\t}\n\t:host(:hover) {\n\t\tbackground: ${listHoverBackground};\n\t\toutline: 1px dotted ${contrastActiveBorder};\n\t\toutline-offset: -1px;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/data-grid/data-grid-cell.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst dataGridCellStyles = (context, definition) => css `\n\t:host {\n\t\tpadding: calc(${designUnit} * 1px) calc(${designUnit} * 3px);\n\t\tcolor: ${foreground};\n\t\topacity: 1;\n\t\tbox-sizing: border-box;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tfont-weight: 400;\n\t\tborder: solid calc(${borderWidth} * 1px) transparent;\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\twhite-space: wrap;\n\t\toverflow-wrap: anywhere;\n\t}\n\t:host(.column-header) {\n\t\tfont-weight: 600;\n\t\toverflow-wrap: normal;\n\t}\n\t:host(:${focusVisible}),\n\t:host(:focus),\n\t:host(:active) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tborder: solid calc(${borderWidth} * 1px) ${focusBorder};\n\t\tcolor: ${listActiveSelectionForeground};\n\t\toutline: none;\n\t}\n\t:host(:${focusVisible}) ::slotted(*),\n\t:host(:focus) ::slotted(*),\n\t:host(:active) ::slotted(*) {\n\t\tcolor: ${listActiveSelectionForeground} !important;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/data-grid/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n/**\n * The Visual Studio Code data grid class.\n *\n * @public\n */\nclass DataGrid extends data_grid_DataGrid {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // Sets a default ARIA label on the data grid only if an aria-label attribute\n        // does not already exist\n        const ariaLabelValue = this.getAttribute(\'aria-label\');\n        if (!ariaLabelValue) {\n            this.setAttribute(\'aria-label\', \'Data Grid\');\n        }\n    }\n}\n/**\n * The Visual Studio Code data grid component registration.\n *\n * @remarks\n * HTML Element: `<vscode-data-grid>`\n *\n * @public\n */\nconst vsCodeDataGrid = DataGrid.compose({\n    baseName: \'data-grid\',\n    baseClass: data_grid_DataGrid,\n    template: dataGridTemplate,\n    styles: dataGridStyles,\n});\n/**\n * The Visual Studio Code data grid row class.\n *\n * @public\n */\nclass DataGridRow extends data_grid_row_DataGridRow {\n}\n/**\n * The Visual Studio Code data grid row component registration.\n *\n * @remarks\n * HTML Element: `<vscode-data-grid-row>`\n *\n * @public\n */\nconst vsCodeDataGridRow = DataGridRow.compose({\n    baseName: \'data-grid-row\',\n    baseClass: data_grid_row_DataGridRow,\n    template: dataGridRowTemplate,\n    styles: dataGridRowStyles,\n});\n/**\n * The Visual Studio Code data grid cell class.\n *\n * @public\n */\nclass DataGridCell extends data_grid_cell_DataGridCell {\n}\n/**\n * The Visual Studio Code data grid cell component registration.\n *\n * @remarks\n * HTML Element: `<vscode-data-grid-cell>`\n *\n * @public\n */\nconst vsCodeDataGridCell = DataGridCell.compose({\n    baseName: \'data-grid-cell\',\n    baseClass: data_grid_cell_DataGridCell,\n    template: dataGridCellTemplate,\n    styles: dataGridCellStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/aria.js\nvar Orientation;\n(function (Orientation) {\n    Orientation["horizontal"] = "horizontal";\n    Orientation["vertical"] = "vertical";\n})(Orientation || (Orientation = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.options.js\n/**\n * Divider roles\n * @public\n */\nvar DividerRole;\n(function (DividerRole) {\n    /**\n     * The divider semantically separates content\n     */\n    DividerRole["separator"] = "separator";\n    /**\n     * The divider has no semantic value and is for visual presentation only.\n     */\n    DividerRole["presentation"] = "presentation";\n})(DividerRole || (DividerRole = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.js\n\n\n\n\n\n\n/**\n * A Divider Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.\n *\n * @public\n */\nclass divider_Divider extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The role of the element.\n         *\n         * @public\n         * @defaultValue - {@link DividerRole.separator}\n         * @remarks\n         * HTML Attribute: role\n         */\n        this.role = DividerRole.separator;\n        /**\n         * The orientation of the divider.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: orientation\n         */\n        this.orientation = Orientation.horizontal;\n    }\n}\n__decorate([\n    attr\n], divider_Divider.prototype, "role", void 0);\n__decorate([\n    attr\n], divider_Divider.prototype, "orientation", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/divider/divider.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#Divider} component.\n * @public\n */\nconst dividerTemplate = (context, definition) => html `\n    <template role="${x => x.role}" aria-orientation="${x => x.orientation}"></template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/divider/divider.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst dividerStyles = (context, definition) => css `\n\t${display(\'block\')} :host {\n\t\tborder: none;\n\t\tborder-top: calc(${borderWidth} * 1px) solid ${dividerBackground};\n\t\tbox-sizing: content-box;\n\t\theight: 0;\n\t\tmargin: calc(${designUnit} * 1px) 0;\n\t\twidth: 100%;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/divider/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The Visual Studio Code divider class.\n *\n * @public\n */\nclass Divider extends divider_Divider {\n}\n/**\n * The Visual Studio Code divider component registration.\n *\n * @remarks\n * HTML Element: `<vscode-divider>`\n *\n * @public\n */\nconst vsCodeDivider = Divider.compose({\n    baseName: \'divider\',\n    template: dividerTemplate,\n    styles: dividerStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/strings.js\nlet uniqueIdCounter = 0;\n/**\n * Generates a unique ID based on incrementing a counter.\n */\nfunction uniqueId(prefix = "") {\n    return `${prefix}${uniqueIdCounter++}`;\n}\n/**\n * Builds a string from a format specifier and replacement parameters.\n */\nfunction format(formatSpecifier, ...parameters) {\n    return formatSpecifier.replace(/{(\\d+)}/g, function (match, index) {\n        if (index >= parameters.length) {\n            return match;\n        }\n        const value = parameters[index];\n        if (typeof value !== "number" && !value) {\n            return "";\n        }\n        return value;\n    });\n}\n/**\n * Check to see if one string starts with another\n */\nfunction startsWith(stringToSearch, searchFor, position = 0) {\n    if (!stringToSearch || !searchFor) {\n        return false;\n    }\n    return stringToSearch.substr(position, searchFor.length) === searchFor;\n}\n/**\n * Matches all instances of the RegExp in the string. Operates similarly to the\n * native `String.matchAll`, which is not yet available on all supported\n * browsers. Note that the regex *must* be global.\n */\nfunction matchAll(re, str) {\n    const matches = [];\n    let match;\n    while ((match = re.exec(str))) {\n        matches.push(match[1]);\n    }\n    re.lastIndex = 0;\n    return matches;\n}\n/**\n * Determines if the specified string is undefined, null, empty, or whitespace.\n * True if the value is undefined, null, empty, or whitespace, otherwise false.\n */\nfunction isNullOrWhiteSpace(value) {\n    return !value || !value.trim();\n}\nconst wordRe = /([A-Z]+[a-z0-9]*|[A-Z]*[a-z0-9]+)/g;\n/**\n * Converts a string to Pascal Case\n */\nfunction pascalCase(value) {\n    return matchAll(wordRe, value)\n        .map((word) => `${word.charAt(0).toUpperCase()}${word.slice(1).toLowerCase()}`)\n        .join("");\n}\n/**\n * converts a string from camelCase or pascalCase to spinal-case\n * which is an lowercase dash separated naming style.\n *\n * An example of spinal case: foo-bar-bat\n */\nfunction spinalCase(value) {\n    const valueWithLowerCaseFirstLetter = `${value\n        .charAt(0)\n        .toLowerCase()}${value.slice(1)}`;\n    return valueWithLowerCaseFirstLetter.replace(/([A-Z])/g, function (match, group1) {\n        return `-${group1.toLowerCase()}`;\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/array.js\n/**\n * Returns the index of the last element in the array where predicate is true, and -1 otherwise.\n *\n * @param array - the array to test\n * @param predicate - find calls predicate once for each element of the array, in descending order, until it finds one where predicate returns true. If such an element is found, findLastIndex immediately returns that element index. Otherwise, findIndex returns -1.\n */\nfunction findLastIndex(array, predicate) {\n    let k = array.length;\n    while (k--) {\n        if (predicate(array[k], k, array)) {\n            return k;\n        }\n    }\n    return -1;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/listbox-option/listbox-option.js\n\n\n\n\n\n\n\n/**\n * Determines if the element is a {@link (ListboxOption:class)}\n *\n * @param element - the element to test.\n * @public\n */\nfunction isListboxOption(el) {\n    return (isHTMLElement(el) &&\n        (el.getAttribute("role") === "option" ||\n            el instanceof HTMLOptionElement));\n}\n/**\n * An Option Custom HTML Element.\n * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option }.\n *\n * @public\n */\nclass ListboxOption extends FoundationElement {\n    constructor(text, value, defaultSelected, selected) {\n        super();\n        /**\n         * The defaultSelected state of the option.\n         * @public\n         */\n        this.defaultSelected = false;\n        /**\n         * Tracks whether the "selected" property has been changed.\n         * @internal\n         */\n        this.dirtySelected = false;\n        /**\n         * The checked state of the control.\n         *\n         * @public\n         */\n        this.selected = this.defaultSelected;\n        /**\n         * Track whether the value has been changed from the initial value\n         */\n        this.dirtyValue = false;\n        if (text) {\n            this.textContent = text;\n        }\n        if (value) {\n            this.initialValue = value;\n        }\n        if (defaultSelected) {\n            this.defaultSelected = defaultSelected;\n        }\n        if (selected) {\n            this.selected = selected;\n        }\n        this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);\n        this.proxy.disabled = this.disabled;\n    }\n    /**\n     * Updates the ariaChecked property when the checked property changes.\n     *\n     * @param prev - the previous checked value\n     * @param next - the current checked value\n     *\n     * @public\n     */\n    checkedChanged(prev, next) {\n        if (typeof next === "boolean") {\n            this.ariaChecked = next ? "true" : "false";\n            return;\n        }\n        this.ariaChecked = undefined;\n    }\n    defaultSelectedChanged() {\n        if (!this.dirtySelected) {\n            this.selected = this.defaultSelected;\n            if (this.proxy instanceof HTMLOptionElement) {\n                this.proxy.selected = this.defaultSelected;\n            }\n        }\n    }\n    disabledChanged(prev, next) {\n        this.ariaDisabled = this.disabled ? "true" : "false";\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.disabled = this.disabled;\n        }\n    }\n    selectedAttributeChanged() {\n        this.defaultSelected = this.selectedAttribute;\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.defaultSelected = this.defaultSelected;\n        }\n    }\n    selectedChanged() {\n        this.ariaSelected = this.selected ? "true" : "false";\n        if (!this.dirtySelected) {\n            this.dirtySelected = true;\n        }\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.selected = this.selected;\n        }\n    }\n    initialValueChanged(previous, next) {\n        // If the value is clean and the component is connected to the DOM\n        // then set value equal to the attribute value.\n        if (!this.dirtyValue) {\n            this.value = this.initialValue;\n            this.dirtyValue = false;\n        }\n    }\n    get label() {\n        var _a, _b;\n        return (_b = (_a = this.value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : "";\n    }\n    get text() {\n        return this.textContent;\n    }\n    set value(next) {\n        this._value = next;\n        this.dirtyValue = true;\n        if (this.proxy instanceof HTMLElement) {\n            this.proxy.value = next;\n        }\n        Observable.notify(this, "value");\n    }\n    get value() {\n        var _a, _b;\n        Observable.track(this, "value");\n        return (_b = (_a = this._value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : "";\n    }\n    get form() {\n        return this.proxy ? this.proxy.form : null;\n    }\n}\n__decorate([\n    observable\n], ListboxOption.prototype, "checked", void 0);\n__decorate([\n    observable\n], ListboxOption.prototype, "defaultSelected", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], ListboxOption.prototype, "disabled", void 0);\n__decorate([\n    attr({ attribute: "selected", mode: "boolean" })\n], ListboxOption.prototype, "selectedAttribute", void 0);\n__decorate([\n    observable\n], ListboxOption.prototype, "selected", void 0);\n__decorate([\n    attr({ attribute: "value", mode: "fromView" })\n], ListboxOption.prototype, "initialValue", void 0);\n/**\n * States and properties relating to the ARIA `option` role.\n *\n * @public\n */\nclass DelegatesARIAListboxOption {\n}\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, "ariaChecked", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, "ariaPosInSet", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, "ariaSelected", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, "ariaSetSize", void 0);\napplyMixins(DelegatesARIAListboxOption, ARIAGlobalStatesAndProperties);\napplyMixins(ListboxOption, StartEnd, DelegatesARIAListboxOption);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/listbox/listbox.js\n\n\n\n\n\n\n\n/**\n * A Listbox Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#listbox | ARIA listbox }.\n *\n * @public\n */\nclass Listbox extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The internal unfiltered list of selectable options.\n         *\n         * @internal\n         */\n        this._options = [];\n        /**\n         * The index of the selected option.\n         *\n         * @public\n         */\n        this.selectedIndex = -1;\n        /**\n         * A collection of the selected options.\n         *\n         * @public\n         */\n        this.selectedOptions = [];\n        /**\n         * A standard `click` event creates a `focus` event before firing, so a\n         * `mousedown` event is used to skip that initial focus.\n         *\n         * @internal\n         */\n        this.shouldSkipFocus = false;\n        /**\n         * The current typeahead buffer string.\n         *\n         * @internal\n         */\n        this.typeaheadBuffer = "";\n        /**\n         * Flag for the typeahead timeout expiration.\n         *\n         * @internal\n         */\n        this.typeaheadExpired = true;\n        /**\n         * The timeout ID for the typeahead handler.\n         *\n         * @internal\n         */\n        this.typeaheadTimeout = -1;\n    }\n    /**\n     * The first selected option.\n     *\n     * @internal\n     */\n    get firstSelectedOption() {\n        var _a;\n        return (_a = this.selectedOptions[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Returns true if there is one or more selectable option.\n     *\n     * @internal\n     */\n    get hasSelectableOptions() {\n        return this.options.length > 0 && !this.options.every(o => o.disabled);\n    }\n    /**\n     * The number of options.\n     *\n     * @public\n     */\n    get length() {\n        var _a, _b;\n        return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    }\n    /**\n     * The list of options.\n     *\n     * @public\n     */\n    get options() {\n        Observable.track(this, "options");\n        return this._options;\n    }\n    set options(value) {\n        this._options = value;\n        Observable.notify(this, "options");\n    }\n    /**\n     * Flag for the typeahead timeout expiration.\n     *\n     * @deprecated use `Listbox.typeaheadExpired`\n     * @internal\n     */\n    get typeAheadExpired() {\n        return this.typeaheadExpired;\n    }\n    set typeAheadExpired(value) {\n        this.typeaheadExpired = value;\n    }\n    /**\n     * Handle click events for listbox options.\n     *\n     * @internal\n     */\n    clickHandler(e) {\n        const captured = e.target.closest(`option,[role=option]`);\n        if (captured && !captured.disabled) {\n            this.selectedIndex = this.options.indexOf(captured);\n            return true;\n        }\n    }\n    /**\n     * Ensures that the provided option is focused and scrolled into view.\n     *\n     * @param optionToFocus - The option to focus\n     * @internal\n     */\n    focusAndScrollOptionIntoView(optionToFocus = this.firstSelectedOption) {\n        // To ensure that the browser handles both `focus()` and `scrollIntoView()`, the\n        // timing here needs to guarantee that they happen on different frames. Since this\n        // function is typically called from the `openChanged` observer, `DOM.queueUpdate`\n        // causes the calls to be grouped into the same frame. To prevent this,\n        // `requestAnimationFrame` is used instead of `DOM.queueUpdate`.\n        if (this.contains(document.activeElement) && optionToFocus !== null) {\n            optionToFocus.focus();\n            requestAnimationFrame(() => {\n                optionToFocus.scrollIntoView({ block: "nearest" });\n            });\n        }\n    }\n    /**\n     * Handles `focusin` actions for the component. When the component receives focus,\n     * the list of selected options is refreshed and the first selected option is scrolled\n     * into view.\n     *\n     * @internal\n     */\n    focusinHandler(e) {\n        if (!this.shouldSkipFocus && e.target === e.currentTarget) {\n            this.setSelectedOptions();\n            this.focusAndScrollOptionIntoView();\n        }\n        this.shouldSkipFocus = false;\n    }\n    /**\n     * Returns the options which match the current typeahead buffer.\n     *\n     * @internal\n     */\n    getTypeaheadMatches() {\n        const pattern = this.typeaheadBuffer.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, "\\\\$&");\n        const re = new RegExp(`^${pattern}`, "gi");\n        return this.options.filter((o) => o.text.trim().match(re));\n    }\n    /**\n     * Determines the index of the next option which is selectable, if any.\n     *\n     * @param prev - the previous selected index\n     * @param next - the next index to select\n     *\n     * @internal\n     */\n    getSelectableIndex(prev = this.selectedIndex, next) {\n        const direction = prev > next ? -1 : prev < next ? 1 : 0;\n        const potentialDirection = prev + direction;\n        let nextSelectableOption = null;\n        switch (direction) {\n            case -1: {\n                nextSelectableOption = this.options.reduceRight((nextSelectableOption, thisOption, index) => !nextSelectableOption &&\n                    !thisOption.disabled &&\n                    index < potentialDirection\n                    ? thisOption\n                    : nextSelectableOption, nextSelectableOption);\n                break;\n            }\n            case 1: {\n                nextSelectableOption = this.options.reduce((nextSelectableOption, thisOption, index) => !nextSelectableOption &&\n                    !thisOption.disabled &&\n                    index > potentialDirection\n                    ? thisOption\n                    : nextSelectableOption, nextSelectableOption);\n                break;\n            }\n        }\n        return this.options.indexOf(nextSelectableOption);\n    }\n    /**\n     * Handles external changes to child options.\n     *\n     * @param source - the source object\n     * @param propertyName - the property\n     *\n     * @internal\n     */\n    handleChange(source, propertyName) {\n        switch (propertyName) {\n            case "selected": {\n                if (Listbox.slottedOptionFilter(source)) {\n                    this.selectedIndex = this.options.indexOf(source);\n                }\n                this.setSelectedOptions();\n                break;\n            }\n        }\n    }\n    /**\n     * Moves focus to an option whose label matches characters typed by the user.\n     * Consecutive keystrokes are batched into a buffer of search text used\n     * to match against the set of options.  If `TYPE_AHEAD_TIMEOUT_MS` passes\n     * between consecutive keystrokes, the search restarts.\n     *\n     * @param key - the key to be evaluated\n     *\n     * @internal\n     */\n    handleTypeAhead(key) {\n        if (this.typeaheadTimeout) {\n            window.clearTimeout(this.typeaheadTimeout);\n        }\n        this.typeaheadTimeout = window.setTimeout(() => (this.typeaheadExpired = true), Listbox.TYPE_AHEAD_TIMEOUT_MS);\n        if (key.length > 1) {\n            return;\n        }\n        this.typeaheadBuffer = `${this.typeaheadExpired ? "" : this.typeaheadBuffer}${key}`;\n    }\n    /**\n     * Handles `keydown` actions for listbox navigation and typeahead.\n     *\n     * @internal\n     */\n    keydownHandler(e) {\n        if (this.disabled) {\n            return true;\n        }\n        this.shouldSkipFocus = false;\n        const key = e.key;\n        switch (key) {\n            // Select the first available option\n            case keyHome: {\n                if (!e.shiftKey) {\n                    e.preventDefault();\n                    this.selectFirstOption();\n                }\n                break;\n            }\n            // Select the next selectable option\n            case keyArrowDown: {\n                if (!e.shiftKey) {\n                    e.preventDefault();\n                    this.selectNextOption();\n                }\n                break;\n            }\n            // Select the previous selectable option\n            case keyArrowUp: {\n                if (!e.shiftKey) {\n                    e.preventDefault();\n                    this.selectPreviousOption();\n                }\n                break;\n            }\n            // Select the last available option\n            case keyEnd: {\n                e.preventDefault();\n                this.selectLastOption();\n                break;\n            }\n            case keyTab: {\n                this.focusAndScrollOptionIntoView();\n                return true;\n            }\n            case keyEnter:\n            case keyEscape: {\n                return true;\n            }\n            case keySpace: {\n                if (this.typeaheadExpired) {\n                    return true;\n                }\n            }\n            // Send key to Typeahead handler\n            default: {\n                if (key.length === 1) {\n                    this.handleTypeAhead(`${key}`);\n                }\n                return true;\n            }\n        }\n    }\n    /**\n     * Prevents `focusin` events from firing before `click` events when the\n     * element is unfocused.\n     *\n     * @internal\n     */\n    mousedownHandler(e) {\n        this.shouldSkipFocus = !this.contains(document.activeElement);\n        return true;\n    }\n    /**\n     * Switches between single-selection and multi-selection mode.\n     *\n     * @param prev - the previous value of the `multiple` attribute\n     * @param next - the next value of the `multiple` attribute\n     *\n     * @internal\n     */\n    multipleChanged(prev, next) {\n        this.ariaMultiSelectable = next ? "true" : undefined;\n    }\n    /**\n     * Updates the list of selected options when the `selectedIndex` changes.\n     *\n     * @param prev - the previous selected index value\n     * @param next - the current selected index value\n     *\n     * @internal\n     */\n    selectedIndexChanged(prev, next) {\n        var _a;\n        if (!this.hasSelectableOptions) {\n            this.selectedIndex = -1;\n            return;\n        }\n        if (((_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.disabled) && typeof prev === "number") {\n            const selectableIndex = this.getSelectableIndex(prev, next);\n            const newNext = selectableIndex > -1 ? selectableIndex : prev;\n            this.selectedIndex = newNext;\n            if (next === newNext) {\n                this.selectedIndexChanged(next, newNext);\n            }\n            return;\n        }\n        this.setSelectedOptions();\n    }\n    /**\n     * Updates the selectedness of each option when the list of selected options changes.\n     *\n     * @param prev - the previous list of selected options\n     * @param next - the current list of selected options\n     *\n     * @internal\n     */\n    selectedOptionsChanged(prev, next) {\n        var _a;\n        const filteredNext = next.filter(Listbox.slottedOptionFilter);\n        (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach(o => {\n            const notifier = Observable.getNotifier(o);\n            notifier.unsubscribe(this, "selected");\n            o.selected = filteredNext.includes(o);\n            notifier.subscribe(this, "selected");\n        });\n    }\n    /**\n     * Moves focus to the first selectable option.\n     *\n     * @public\n     */\n    selectFirstOption() {\n        var _a, _b;\n        if (!this.disabled) {\n            this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(o => !o.disabled)) !== null && _b !== void 0 ? _b : -1;\n        }\n    }\n    /**\n     * Moves focus to the last selectable option.\n     *\n     * @internal\n     */\n    selectLastOption() {\n        if (!this.disabled) {\n            this.selectedIndex = findLastIndex(this.options, o => !o.disabled);\n        }\n    }\n    /**\n     * Moves focus to the next selectable option.\n     *\n     * @internal\n     */\n    selectNextOption() {\n        if (!this.disabled && this.selectedIndex < this.options.length - 1) {\n            this.selectedIndex += 1;\n        }\n    }\n    /**\n     * Moves focus to the previous selectable option.\n     *\n     * @internal\n     */\n    selectPreviousOption() {\n        if (!this.disabled && this.selectedIndex > 0) {\n            this.selectedIndex = this.selectedIndex - 1;\n        }\n    }\n    /**\n     * Updates the selected index to match the first selected option.\n     *\n     * @internal\n     */\n    setDefaultSelectedOption() {\n        var _a, _b;\n        this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(el => el.defaultSelected)) !== null && _b !== void 0 ? _b : -1;\n    }\n    /**\n     * Sets an option as selected and gives it focus.\n     *\n     * @public\n     */\n    setSelectedOptions() {\n        var _a, _b, _c;\n        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {\n            this.selectedOptions = [this.options[this.selectedIndex]];\n            this.ariaActiveDescendant = (_c = (_b = this.firstSelectedOption) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "";\n            this.focusAndScrollOptionIntoView();\n        }\n    }\n    /**\n     * Updates the list of options and resets the selected option when the slotted option content changes.\n     *\n     * @param prev - the previous list of slotted options\n     * @param next - the current list of slotted options\n     *\n     * @internal\n     */\n    slottedOptionsChanged(prev, next) {\n        this.options = next.reduce((options, item) => {\n            if (isListboxOption(item)) {\n                options.push(item);\n            }\n            return options;\n        }, []);\n        const setSize = `${this.options.length}`;\n        this.options.forEach((option, index) => {\n            if (!option.id) {\n                option.id = uniqueId("option-");\n            }\n            option.ariaPosInSet = `${index + 1}`;\n            option.ariaSetSize = setSize;\n        });\n        if (this.$fastController.isConnected) {\n            this.setSelectedOptions();\n            this.setDefaultSelectedOption();\n        }\n    }\n    /**\n     * Updates the filtered list of options when the typeahead buffer changes.\n     *\n     * @param prev - the previous typeahead buffer value\n     * @param next - the current typeahead buffer value\n     *\n     * @internal\n     */\n    typeaheadBufferChanged(prev, next) {\n        if (this.$fastController.isConnected) {\n            const typeaheadMatches = this.getTypeaheadMatches();\n            if (typeaheadMatches.length) {\n                const selectedIndex = this.options.indexOf(typeaheadMatches[0]);\n                if (selectedIndex > -1) {\n                    this.selectedIndex = selectedIndex;\n                }\n            }\n            this.typeaheadExpired = false;\n        }\n    }\n}\n/**\n * A static filter to include only selectable options.\n *\n * @param n - element to filter\n * @public\n */\nListbox.slottedOptionFilter = (n) => isListboxOption(n) && !n.disabled && !n.hidden;\n/**\n * Typeahead timeout in milliseconds.\n *\n * @internal\n */\nListbox.TYPE_AHEAD_TIMEOUT_MS = 1000;\n__decorate([\n    attr({ mode: "boolean" })\n], Listbox.prototype, "disabled", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], Listbox.prototype, "multiple", void 0);\n__decorate([\n    observable\n], Listbox.prototype, "selectedIndex", void 0);\n__decorate([\n    observable\n], Listbox.prototype, "selectedOptions", void 0);\n__decorate([\n    observable\n], Listbox.prototype, "slottedOptions", void 0);\n__decorate([\n    observable\n], Listbox.prototype, "typeaheadBuffer", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA listbox role\n *\n * @public\n */\nclass DelegatesARIAListbox {\n}\n__decorate([\n    observable\n], DelegatesARIAListbox.prototype, "ariaActiveDescendant", void 0);\n__decorate([\n    observable\n], DelegatesARIAListbox.prototype, "ariaDisabled", void 0);\n__decorate([\n    observable\n], DelegatesARIAListbox.prototype, "ariaExpanded", void 0);\n__decorate([\n    observable\n], DelegatesARIAListbox.prototype, "ariaMultiSelectable", void 0);\napplyMixins(DelegatesARIAListbox, ARIAGlobalStatesAndProperties);\napplyMixins(Listbox, DelegatesARIAListbox);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/select/select.form-associated.js\n\n\nclass _Select extends Listbox {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Select:class)} component.\n *\n * @internal\n */\nclass FormAssociatedSelect extends FormAssociated(_Select) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("select");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/select/select.options.js\n/**\n * Positioning directions for the listbox when a select is open.\n * @public\n */\nvar SelectPosition;\n(function (SelectPosition) {\n    SelectPosition["above"] = "above";\n    SelectPosition["below"] = "below";\n})(SelectPosition || (SelectPosition = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/select/select.js\n\n\n\n\n\n\n\n\n/**\n * A Select Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.\n *\n * @public\n */\nclass Select extends FormAssociatedSelect {\n    constructor() {\n        super(...arguments);\n        /**\n         * The open attribute.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: open\n         */\n        this.open = false;\n        /**\n         * Indicates the initial state of the position attribute.\n         *\n         * @internal\n         */\n        this.forcedPosition = false;\n        /**\n         * Holds the current state for the calculated position of the listbox.\n         *\n         * @public\n         */\n        this.position = SelectPosition.below;\n        /**\n         * The unique id for the internal listbox element.\n         *\n         * @internal\n         */\n        this.listboxId = uniqueId("listbox-");\n        /**\n         * The max height for the listbox when opened.\n         *\n         * @internal\n         */\n        this.maxHeight = 0;\n        /**\n         * The value displayed on the button.\n         *\n         * @public\n         */\n        this.displayValue = "";\n    }\n    openChanged() {\n        if (this.open) {\n            this.ariaControls = this.listboxId;\n            this.ariaExpanded = "true";\n            this.setPositioning();\n            this.focusAndScrollOptionIntoView();\n            this.indexWhenOpened = this.selectedIndex;\n            // focus is directed to the element when `open` is changed programmatically\n            DOM.queueUpdate(() => this.focus());\n            return;\n        }\n        this.ariaControls = "";\n        this.ariaExpanded = "false";\n    }\n    /**\n     * The value property.\n     *\n     * @public\n     */\n    get value() {\n        Observable.track(this, "value");\n        return this._value;\n    }\n    set value(next) {\n        var _a;\n        const prev = `${this._value}`;\n        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {\n            const selectedIndex = this.options.findIndex(el => el.value === next);\n            const prevSelectedOption = this.options[this.selectedIndex];\n            const nextSelectedOption = this.options[selectedIndex];\n            const prevSelectedValue = prevSelectedOption\n                ? prevSelectedOption.value\n                : null;\n            const nextSelectedValue = nextSelectedOption\n                ? nextSelectedOption.value\n                : null;\n            if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {\n                next = "";\n                this.selectedIndex = selectedIndex;\n            }\n            if (this.firstSelectedOption) {\n                next = this.firstSelectedOption.value;\n            }\n        }\n        if (prev !== next) {\n            this._value = next;\n            super.valueChanged(prev, next);\n            Observable.notify(this, "value");\n        }\n    }\n    updateValue(shouldEmit) {\n        if (this.$fastController.isConnected) {\n            this.value = this.firstSelectedOption ? this.firstSelectedOption.value : "";\n            this.displayValue = this.firstSelectedOption\n                ? this.firstSelectedOption.textContent || this.firstSelectedOption.value\n                : this.value;\n        }\n        if (shouldEmit) {\n            this.$emit("input");\n            this.$emit("change", this, {\n                bubbles: true,\n                composed: undefined,\n            });\n        }\n    }\n    /**\n     * Updates the proxy value when the selected index changes.\n     *\n     * @param prev - the previous selected index\n     * @param next - the next selected index\n     *\n     * @internal\n     */\n    selectedIndexChanged(prev, next) {\n        super.selectedIndexChanged(prev, next);\n        this.updateValue();\n    }\n    positionChanged() {\n        this.positionAttribute = this.position;\n        this.setPositioning();\n    }\n    /**\n     * Calculate and apply listbox positioning based on available viewport space.\n     *\n     * @param force - direction to force the listbox to display\n     * @public\n     */\n    setPositioning() {\n        const currentBox = this.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const availableBottom = viewportHeight - currentBox.bottom;\n        this.position = this.forcedPosition\n            ? this.positionAttribute\n            : currentBox.top > availableBottom\n                ? SelectPosition.above\n                : SelectPosition.below;\n        this.positionAttribute = this.forcedPosition\n            ? this.positionAttribute\n            : this.position;\n        this.maxHeight =\n            this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;\n    }\n    maxHeightChanged() {\n        if (this.listbox) {\n            this.listbox.style.setProperty("--max-height", `${this.maxHeight}px`);\n        }\n    }\n    /**\n     * Synchronize the `aria-disabled` property when the `disabled` property changes.\n     *\n     * @param prev - The previous disabled value\n     * @param next - The next disabled value\n     *\n     * @internal\n     */\n    disabledChanged(prev, next) {\n        if (super.disabledChanged) {\n            super.disabledChanged(prev, next);\n        }\n        this.ariaDisabled = this.disabled ? "true" : "false";\n    }\n    /**\n     * Reset the element to its first selectable option when its parent form is reset.\n     *\n     * @internal\n     */\n    formResetCallback() {\n        this.setProxyOptions();\n        // Call the base class\'s implementation setDefaultSelectedOption instead of the select\'s\n        // override, in order to reset the selectedIndex without using the value property.\n        super.setDefaultSelectedOption();\n        if (this.selectedIndex === -1) {\n            this.selectedIndex = 0;\n        }\n    }\n    /**\n     * Handle opening and closing the listbox when the select is clicked.\n     *\n     * @param e - the mouse event\n     * @internal\n     */\n    clickHandler(e) {\n        // do nothing if the select is disabled\n        if (this.disabled) {\n            return;\n        }\n        if (this.open) {\n            const captured = e.target.closest(`option,[role=option]`);\n            if (captured && captured.disabled) {\n                return;\n            }\n        }\n        super.clickHandler(e);\n        this.open = !this.open;\n        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n            this.updateValue(true);\n        }\n        return true;\n    }\n    /**\n     * Handle focus state when the element or its children lose focus.\n     *\n     * @param e - The focus event\n     * @internal\n     */\n    focusoutHandler(e) {\n        var _a;\n        if (!this.open) {\n            return true;\n        }\n        const focusTarget = e.relatedTarget;\n        if (this.isSameNode(focusTarget)) {\n            this.focus();\n            return;\n        }\n        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.includes(focusTarget))) {\n            this.open = false;\n            if (this.indexWhenOpened !== this.selectedIndex) {\n                this.updateValue(true);\n            }\n        }\n    }\n    /**\n     * Synchronize the form-associated proxy and update the value property of the element.\n     *\n     * @param prev - the previous collection of slotted option elements\n     * @param next - the next collection of slotted option elements\n     *\n     * @internal\n     */\n    slottedOptionsChanged(prev, next) {\n        super.slottedOptionsChanged(prev, next);\n        this.setProxyOptions();\n        this.updateValue();\n    }\n    setDefaultSelectedOption() {\n        var _a;\n        const options = (_a = this.options) !== null && _a !== void 0 ? _a : Array.from(this.children).filter(Listbox.slottedOptionFilter);\n        const selectedIndex = options === null || options === void 0 ? void 0 : options.findIndex(el => el.hasAttribute("selected") || el.selected || el.value === this.value);\n        if (selectedIndex !== -1) {\n            this.selectedIndex = selectedIndex;\n            return;\n        }\n        this.selectedIndex = 0;\n    }\n    /**\n     * Reset and fill the proxy to match the component\'s options.\n     *\n     * @internal\n     */\n    setProxyOptions() {\n        if (this.proxy instanceof HTMLSelectElement && this.options) {\n            this.proxy.options.length = 0;\n            this.options.forEach(option => {\n                const proxyOption = option.proxy ||\n                    (option instanceof HTMLOptionElement ? option.cloneNode() : null);\n                if (proxyOption) {\n                    this.proxy.appendChild(proxyOption);\n                }\n            });\n        }\n    }\n    /**\n     * Handle keyboard interaction for the select.\n     *\n     * @param e - the keyboard event\n     * @internal\n     */\n    keydownHandler(e) {\n        super.keydownHandler(e);\n        const key = e.key || e.key.charCodeAt(0);\n        switch (key) {\n            case " ": {\n                if (this.typeaheadExpired) {\n                    e.preventDefault();\n                    this.open = !this.open;\n                }\n                break;\n            }\n            case "Enter": {\n                e.preventDefault();\n                this.open = !this.open;\n                break;\n            }\n            case "Escape": {\n                if (this.open) {\n                    e.preventDefault();\n                    this.open = false;\n                }\n                break;\n            }\n            case "Tab": {\n                if (!this.open) {\n                    return true;\n                }\n                e.preventDefault();\n                this.open = false;\n            }\n        }\n        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n            this.updateValue(true);\n            this.indexWhenOpened = this.selectedIndex;\n        }\n        return true;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.forcedPosition = !!this.positionAttribute;\n    }\n}\n__decorate([\n    attr({ attribute: "open", mode: "boolean" })\n], Select.prototype, "open", void 0);\n__decorate([\n    attr({ attribute: "position" })\n], Select.prototype, "positionAttribute", void 0);\n__decorate([\n    observable\n], Select.prototype, "position", void 0);\n__decorate([\n    observable\n], Select.prototype, "maxHeight", void 0);\n__decorate([\n    observable\n], Select.prototype, "displayValue", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA select role.\n *\n * @public\n */\nclass DelegatesARIASelect {\n}\n__decorate([\n    observable\n], DelegatesARIASelect.prototype, "ariaControls", void 0);\napplyMixins(DelegatesARIASelect, DelegatesARIAListbox);\napplyMixins(Select, StartEnd, DelegatesARIASelect);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/select/select.template.js\n\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Select:class)} component.\n * @public\n */\nconst selectTemplate = (context, definition) => html `\n    <template\n        class="${x => (x.open ? "open" : "")} ${x => x.disabled ? "disabled" : ""} ${x => x.position}"\n        aria-activedescendant="${x => x.ariaActiveDescendant}"\n        aria-controls="${x => x.ariaControls}"\n        aria-disabled="${x => x.ariaDisabled}"\n        aria-expanded="${x => x.ariaExpanded}"\n        aria-haspopup="listbox"\n        ?open="${x => x.open}"\n        role="combobox"\n        tabindex="${x => (!x.disabled ? "0" : null)}"\n        @click="${(x, c) => x.clickHandler(c.event)}"\n        @focusout="${(x, c) => x.focusoutHandler(c.event)}"\n        @keydown="${(x, c) => x.keydownHandler(c.event)}"\n    >\n        <div class="control" part="control" ?disabled="${x => x.disabled}">\n            ${startSlotTemplate(context, definition)}\n            <slot name="button-container">\n                <div class="selected-value" part="selected-value">\n                    <slot name="selected-value">${x => x.displayValue}</slot>\n                </div>\n                <div aria-hidden="true" class="indicator" part="indicator">\n                    <slot name="indicator">\n                        ${definition.indicator || ""}\n                    </slot>\n                </div>\n            </slot>\n            ${endSlotTemplate(context, definition)}\n        </div>\n        <div\n            class="listbox"\n            id="${x => x.listboxId}"\n            part="listbox"\n            role="listbox"\n            ?disabled="${x => x.disabled}"\n            ?hidden="${x => !x.open}"\n            ${ref("listbox")}\n        >\n            <slot\n                ${slotted({\n    filter: Listbox.slottedOptionFilter,\n    flatten: true,\n    property: "slottedOptions",\n})}\n            ></slot>\n        </div>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/dropdown/dropdown.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst dropdownStyles = (context, definition) => css `\n\t${display(\'inline-flex\')} :host {\n\t\tbackground: ${dropdownBackground};\n\t\tbox-sizing: border-box;\n\t\tcolor: ${foreground};\n\t\tcontain: contents;\n\t\tfont-family: ${fontFamily};\n\t\theight: calc(${inputHeight} * 1px);\n\t\tposition: relative;\n\t\tuser-select: none;\n\t\tmin-width: ${inputMinWidth};\n\t\toutline: none;\n\t\tvertical-align: top;\n\t}\n\t.control {\n\t\talign-items: center;\n\t\tbox-sizing: border-box;\n\t\tborder: calc(${borderWidth} * 1px) solid ${dropdownBorder};\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tcursor: pointer;\n\t\tdisplay: flex;\n\t\tfont-family: inherit;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tmin-height: 100%;\n\t\tpadding: 2px 6px 2px 8px;\n\t\twidth: 100%;\n\t}\n\t.listbox {\n\t\tbackground: ${dropdownBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tbox-sizing: border-box;\n\t\tdisplay: inline-flex;\n\t\tflex-direction: column;\n\t\tleft: 0;\n\t\tmax-height: ${dropdownListMaxHeight};\n\t\tpadding: 0 0 calc(${designUnit} * 1px) 0;\n\t\toverflow-y: auto;\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\tz-index: 1;\n\t}\n\t.listbox[hidden] {\n\t\tdisplay: none;\n\t}\n\t:host(:${focusVisible}) .control {\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host(:not([disabled]):hover) {\n\t\tbackground: ${dropdownBackground};\n\t\tborder-color: ${dropdownBorder};\n\t}\n\t:host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\tcolor: ${listActiveSelectionForeground};\n\t}\n\t:host([disabled]) {\n\t\tcursor: ${disabledCursor};\n\t\topacity: ${disabledOpacity};\n\t}\n\t:host([disabled]) .control {\n\t\tcursor: ${disabledCursor};\n\t\tuser-select: none;\n\t}\n\t:host([disabled]:hover) {\n\t\tbackground: ${dropdownBackground};\n\t\tcolor: ${foreground};\n\t\tfill: currentcolor;\n\t}\n\t:host(:not([disabled])) .control:active {\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host(:empty) .listbox {\n\t\tdisplay: none;\n\t}\n\t:host([open]) .control {\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host([open][position=\'above\']) .listbox,\n\t:host([open][position=\'below\']) .control {\n\t\tborder-bottom-left-radius: 0;\n\t\tborder-bottom-right-radius: 0;\n\t}\n\t:host([open][position=\'above\']) .control,\n\t:host([open][position=\'below\']) .listbox {\n\t\tborder-top-left-radius: 0;\n\t\tborder-top-right-radius: 0;\n\t}\n\t:host([open][position=\'above\']) .listbox {\n\t\tbottom: calc(${inputHeight} * 1px);\n\t}\n\t:host([open][position=\'below\']) .listbox {\n\t\ttop: calc(${inputHeight} * 1px);\n\t}\n\t.selected-value {\n\t\tflex: 1 1 auto;\n\t\tfont-family: inherit;\n\t\toverflow: hidden;\n\t\ttext-align: start;\n\t\ttext-overflow: ellipsis;\n\t\twhite-space: nowrap;\n\t}\n\t.indicator {\n\t\tflex: 0 0 auto;\n\t\tmargin-inline-start: 1em;\n\t}\n\tslot[name=\'listbox\'] {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t}\n\t:host([open]) slot[name=\'listbox\'] {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t}\n\t.end {\n\t\tmargin-inline-start: auto;\n\t}\n\t.start,\n\t.end,\n\t.indicator,\n\t.select-indicator,\n\t::slotted(svg),\n\t::slotted(span) {\n\t\tfill: currentcolor;\n\t\theight: 1em;\n\t\tmin-height: calc(${designUnit} * 4px);\n\t\tmin-width: calc(${designUnit} * 4px);\n\t\twidth: 1em;\n\t}\n\t::slotted([role=\'option\']),\n\t::slotted(option) {\n\t\tflex: 0 0 auto;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/dropdown/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The Visual Studio Code dropdown class.\n *\n * @public\n */\nclass Dropdown extends Select {\n}\n/**\n * The Visual Studio Code link dropdown registration.\n *\n * @remarks\n * HTML Element: `<vscode-dropdown>`\n *\n * @public\n */\nconst vsCodeDropdown = Dropdown.compose({\n    baseName: \'dropdown\',\n    template: selectTemplate,\n    styles: dropdownStyles,\n    indicator: `\n\t\t<svg \n\t\t\tclass="select-indicator"\n\t\t\tpart="select-indicator"\n\t\t\twidth="16" \n\t\t\theight="16" \n\t\t\tviewBox="0 0 16 16" \n\t\t\txmlns="http://www.w3.org/2000/svg" \n\t\t\tfill="currentColor"\n\t\t>\n\t\t\t<path \n\t\t\t\tfill-rule="evenodd" \n\t\t\t\tclip-rule="evenodd" \n\t\t\t\td="M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z"\n\t\t\t/>\n\t\t</svg>\n\t`,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/anchor/anchor.js\n\n\n\n\n\n/**\n * An Anchor Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element }.\n *\n * @public\n */\nclass Anchor extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the focus call for where delegatesFocus is unsupported.\n         * This check works for Chrome, Edge Chromium, FireFox, and Safari\n         * Relevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858\n         */\n        this.handleUnsupportedDelegatesFocus = () => {\n            var _a;\n            // Check to see if delegatesFocus is supported\n            if (window.ShadowRoot &&\n                !window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus") && ((_a = this.$fastController.definition.shadowOptions) === null || _a === void 0 ? void 0 : _a.delegatesFocus)) {\n                this.focus = () => {\n                    this.control.focus();\n                };\n            }\n        };\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.handleUnsupportedDelegatesFocus();\n    }\n}\n__decorate([\n    attr\n], Anchor.prototype, "download", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "href", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "hreflang", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "ping", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "referrerpolicy", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "rel", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "target", void 0);\n__decorate([\n    attr\n], Anchor.prototype, "type", void 0);\n__decorate([\n    observable\n], Anchor.prototype, "defaultSlottedContent", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA link role\n *\n * @public\n */\nclass DelegatesARIALink {\n}\n__decorate([\n    attr({ attribute: "aria-expanded" })\n], DelegatesARIALink.prototype, "ariaExpanded", void 0);\napplyMixins(DelegatesARIALink, ARIAGlobalStatesAndProperties);\napplyMixins(Anchor, StartEnd, DelegatesARIALink);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/anchor/anchor.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Anchor:class)} component.\n * @public\n */\nconst anchorTemplate = (context, definition) => html `\n    <a\n        class="control"\n        part="control"\n        download="${x => x.download}"\n        href="${x => x.href}"\n        hreflang="${x => x.hreflang}"\n        ping="${x => x.ping}"\n        referrerpolicy="${x => x.referrerpolicy}"\n        rel="${x => x.rel}"\n        target="${x => x.target}"\n        type="${x => x.type}"\n        aria-atomic="${x => x.ariaAtomic}"\n        aria-busy="${x => x.ariaBusy}"\n        aria-controls="${x => x.ariaControls}"\n        aria-current="${x => x.ariaCurrent}"\n        aria-describedby="${x => x.ariaDescribedby}"\n        aria-details="${x => x.ariaDetails}"\n        aria-disabled="${x => x.ariaDisabled}"\n        aria-errormessage="${x => x.ariaErrormessage}"\n        aria-expanded="${x => x.ariaExpanded}"\n        aria-flowto="${x => x.ariaFlowto}"\n        aria-haspopup="${x => x.ariaHaspopup}"\n        aria-hidden="${x => x.ariaHidden}"\n        aria-invalid="${x => x.ariaInvalid}"\n        aria-keyshortcuts="${x => x.ariaKeyshortcuts}"\n        aria-label="${x => x.ariaLabel}"\n        aria-labelledby="${x => x.ariaLabelledby}"\n        aria-live="${x => x.ariaLive}"\n        aria-owns="${x => x.ariaOwns}"\n        aria-relevant="${x => x.ariaRelevant}"\n        aria-roledescription="${x => x.ariaRoledescription}"\n        ${ref("control")}\n    >\n        ${startSlotTemplate(context, definition)}\n        <span class="content" part="content">\n            <slot ${slotted("defaultSlottedContent")}></slot>\n        </span>\n        ${endSlotTemplate(context, definition)}\n    </a>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/link/link.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst linkStyles = (context, definition) => css `\n\t${display(\'inline-flex\')} :host {\n\t\tbackground: transparent;\n\t\tbox-sizing: border-box;\n\t\tcolor: ${linkForeground};\n\t\tcursor: pointer;\n\t\tfill: currentcolor;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\toutline: none;\n\t}\n\t.control {\n\t\tbackground: transparent;\n\t\tborder: calc(${borderWidth} * 1px) solid transparent;\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tbox-sizing: border-box;\n\t\tcolor: inherit;\n\t\tcursor: inherit;\n\t\tfill: inherit;\n\t\tfont-family: inherit;\n\t\theight: inherit;\n\t\tpadding: 0;\n\t\toutline: none;\n\t\ttext-decoration: none;\n\t\twhite-space: nowrap;\n\t}\n\t.control::-moz-focus-inner {\n\t\tborder: 0;\n\t}\n\t:host(:hover) {\n\t\tcolor: ${linkActiveForeground};\n\t}\n\t:host(:hover) .content {\n\t\ttext-decoration: underline;\n\t}\n\t:host(:active) {\n\t\tbackground: transparent;\n\t\tcolor: ${linkActiveForeground};\n\t}\n\t:host(:${focusVisible}) .control {\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/link/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code link class.\n *\n * @public\n */\nclass Link extends Anchor {\n}\n/**\n * The Visual Studio Code link component registration.\n *\n * @remarks\n * HTML Element: `<vscode-link>`\n *\n * @public\n */\nconst vsCodeLink = Link.compose({\n    baseName: \'link\',\n    template: anchorTemplate,\n    styles: linkStyles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/listbox-option/listbox-option.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(ListboxOption:class)} component.\n * @public\n */\nconst listboxOptionTemplate = (context, definition) => html `\n    <template\n        aria-checked="${x => x.ariaChecked}"\n        aria-disabled="${x => x.ariaDisabled}"\n        aria-posinset="${x => x.ariaPosInSet}"\n        aria-selected="${x => x.ariaSelected}"\n        aria-setsize="${x => x.ariaSetSize}"\n        class="${x => [x.checked && "checked", x.selected && "selected", x.disabled && "disabled"]\n    .filter(Boolean)\n    .join(" ")}"\n        role="option"\n    >\n        ${startSlotTemplate(context, definition)}\n        <span class="content" part="content">\n            <slot></slot>\n        </span>\n        ${endSlotTemplate(context, definition)}\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/option/option.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst optionStyles = (context, definition) => css `\n\t${display(\'inline-flex\')} :host {\n\t\tfont-family: var(--body-font);\n\t\tborder-radius: ${cornerRadius};\n\t\tborder: calc(${borderWidth} * 1px) solid transparent;\n\t\tbox-sizing: border-box;\n\t\tcolor: ${foreground};\n\t\tcursor: pointer;\n\t\tfill: currentcolor;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tmargin: 0;\n\t\toutline: none;\n\t\toverflow: hidden;\n\t\tpadding: 0 calc((${designUnit} / 2) * 1px)\n\t\t\tcalc((${designUnit} / 4) * 1px);\n\t\tuser-select: none;\n\t\twhite-space: nowrap;\n\t}\n\t:host(:${focusVisible}) {\n\t\tborder-color: ${focusBorder};\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tcolor: ${foreground};\n\t}\n\t:host([aria-selected=\'true\']) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\tcolor: ${listActiveSelectionForeground};\n\t}\n\t:host(:active) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tcolor: ${listActiveSelectionForeground};\n\t}\n\t:host(:not([aria-selected=\'true\']):hover) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t\tcolor: ${listActiveSelectionForeground};\n\t}\n\t:host(:not([aria-selected=\'true\']):active) {\n\t\tbackground: ${listActiveSelectionBackground};\n\t\tcolor: ${foreground};\n\t}\n\t:host([disabled]) {\n\t\tcursor: ${disabledCursor};\n\t\topacity: ${disabledOpacity};\n\t}\n\t:host([disabled]:hover) {\n\t\tbackground-color: inherit;\n\t}\n\t.content {\n\t\tgrid-column-start: 2;\n\t\tjustify-self: start;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/option/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code option class.\n *\n * @public\n */\nclass option_Option extends ListboxOption {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n        else {\n            // Fallback to the label if there is no text content\n            this.setAttribute(\'aria-label\', \'Option\');\n        }\n    }\n}\n/**\n * The Visual Studio Code option component registration.\n *\n * @remarks\n * HTML Element: `<vscode-option>`\n *\n * @public\n */\nconst vsCodeOption = option_Option.compose({\n    baseName: \'option\',\n    template: listboxOptionTemplate,\n    styles: optionStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/numbers.js\n/**\n * This method keeps a given value within the bounds of a min and max value. If the value\n * is larger than the max, the minimum value will be returned. If the value is smaller than the minimum,\n * the maximum will be returned. Otherwise, the value is returned un-changed.\n */\nfunction wrapInBounds(min, max, value) {\n    if (value < min) {\n        return max;\n    }\n    else if (value > max) {\n        return min;\n    }\n    return value;\n}\n/**\n * Ensures that a value is between a min and max value. If value is lower than min, min will be returned.\n * If value is greater than max, max will be returned.\n */\nfunction limit(min, max, value) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Determines if a number value is within a specified range.\n *\n * @param value - the value to check\n * @param min - the range start\n * @param max - the range end\n */\nfunction inRange(value, min, max = 0) {\n    [min, max] = [min, max].sort((a, b) => a - b);\n    return min <= value && value < max;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tabs/tabs.js\n\n\n\n\n\n\n/**\n * The orientation of the {@link @microsoft/fast-foundation#(Tabs:class)} component\n * @public\n */\nvar TabsOrientation;\n(function (TabsOrientation) {\n    TabsOrientation["vertical"] = "vertical";\n    TabsOrientation["horizontal"] = "horizontal";\n})(TabsOrientation || (TabsOrientation = {}));\n/**\n * A Tabs Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#tablist | ARIA tablist }.\n *\n * @public\n */\nclass Tabs extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The orientation\n         * @public\n         * @remarks\n         * HTML Attribute: orientation\n         */\n        this.orientation = TabsOrientation.horizontal;\n        /**\n         * Whether or not to show the active indicator\n         * @public\n         * @remarks\n         * HTML Attribute: activeindicator\n         */\n        this.activeindicator = true;\n        /**\n         * @internal\n         */\n        this.showActiveIndicator = true;\n        this.prevActiveTabIndex = 0;\n        this.activeTabIndex = 0;\n        this.ticking = false;\n        this.change = () => {\n            this.$emit("change", this.activetab);\n        };\n        this.isDisabledElement = (el) => {\n            return el.getAttribute("aria-disabled") === "true";\n        };\n        this.isFocusableElement = (el) => {\n            return !this.isDisabledElement(el);\n        };\n        this.setTabs = () => {\n            const gridHorizontalProperty = "gridColumn";\n            const gridVerticalProperty = "gridRow";\n            const gridProperty = this.isHorizontal()\n                ? gridHorizontalProperty\n                : gridVerticalProperty;\n            this.tabIds = this.getTabIds();\n            this.tabpanelIds = this.getTabPanelIds();\n            this.activeTabIndex = this.getActiveIndex();\n            this.showActiveIndicator = false;\n            this.tabs.forEach((tab, index) => {\n                if (tab.slot === "tab") {\n                    const isActiveTab = this.activeTabIndex === index && this.isFocusableElement(tab);\n                    if (this.activeindicator && this.isFocusableElement(tab)) {\n                        this.showActiveIndicator = true;\n                    }\n                    const tabId = this.tabIds[index];\n                    const tabpanelId = this.tabpanelIds[index];\n                    tab.setAttribute("id", typeof tabId !== "string" ? `tab-${index + 1}` : tabId);\n                    tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");\n                    tab.setAttribute("aria-controls", typeof tabpanelId !== "string" ? `panel-${index + 1}` : tabpanelId);\n                    tab.addEventListener("click", this.handleTabClick);\n                    tab.addEventListener("keydown", this.handleTabKeyDown);\n                    tab.setAttribute("tabindex", isActiveTab ? "0" : "-1");\n                    if (isActiveTab) {\n                        this.activetab = tab;\n                    }\n                }\n                // If the original property isn\'t emptied out,\n                // the next set will morph into a grid-area style setting that is not what we want\n                tab.style[gridHorizontalProperty] = "";\n                tab.style[gridVerticalProperty] = "";\n                tab.style[gridProperty] = `${index + 1}`;\n                !this.isHorizontal()\n                    ? tab.classList.add("vertical")\n                    : tab.classList.remove("vertical");\n            });\n        };\n        this.setTabPanels = () => {\n            this.tabIds = this.getTabIds();\n            this.tabpanelIds = this.getTabPanelIds();\n            this.tabpanels.forEach((tabpanel, index) => {\n                const tabId = this.tabIds[index];\n                const tabpanelId = this.tabpanelIds[index];\n                tabpanel.setAttribute("id", typeof tabpanelId !== "string" ? `panel-${index + 1}` : tabpanelId);\n                tabpanel.setAttribute("aria-labelledby", typeof tabId !== "string" ? `tab-${index + 1}` : tabId);\n                this.activeTabIndex !== index\n                    ? tabpanel.setAttribute("hidden", "")\n                    : tabpanel.removeAttribute("hidden");\n            });\n        };\n        this.handleTabClick = (event) => {\n            const selectedTab = event.currentTarget;\n            if (selectedTab.nodeType === 1 && this.isFocusableElement(selectedTab)) {\n                this.prevActiveTabIndex = this.activeTabIndex;\n                this.activeTabIndex = this.tabs.indexOf(selectedTab);\n                this.setComponent();\n            }\n        };\n        this.handleTabKeyDown = (event) => {\n            if (this.isHorizontal()) {\n                switch (event.key) {\n                    case keyArrowLeft:\n                        event.preventDefault();\n                        this.adjustBackward(event);\n                        break;\n                    case keyArrowRight:\n                        event.preventDefault();\n                        this.adjustForward(event);\n                        break;\n                }\n            }\n            else {\n                switch (event.key) {\n                    case keyArrowUp:\n                        event.preventDefault();\n                        this.adjustBackward(event);\n                        break;\n                    case keyArrowDown:\n                        event.preventDefault();\n                        this.adjustForward(event);\n                        break;\n                }\n            }\n            switch (event.key) {\n                case keyHome:\n                    event.preventDefault();\n                    this.adjust(-this.activeTabIndex);\n                    break;\n                case keyEnd:\n                    event.preventDefault();\n                    this.adjust(this.tabs.length - this.activeTabIndex - 1);\n                    break;\n            }\n        };\n        this.adjustForward = (e) => {\n            const group = this.tabs;\n            let index = 0;\n            index = this.activetab ? group.indexOf(this.activetab) + 1 : 1;\n            if (index === group.length) {\n                index = 0;\n            }\n            while (index < group.length && group.length > 1) {\n                if (this.isFocusableElement(group[index])) {\n                    this.moveToTabByIndex(group, index);\n                    break;\n                }\n                else if (this.activetab && index === group.indexOf(this.activetab)) {\n                    break;\n                }\n                else if (index + 1 >= group.length) {\n                    index = 0;\n                }\n                else {\n                    index += 1;\n                }\n            }\n        };\n        this.adjustBackward = (e) => {\n            const group = this.tabs;\n            let index = 0;\n            index = this.activetab ? group.indexOf(this.activetab) - 1 : 0;\n            index = index < 0 ? group.length - 1 : index;\n            while (index >= 0 && group.length > 1) {\n                if (this.isFocusableElement(group[index])) {\n                    this.moveToTabByIndex(group, index);\n                    break;\n                }\n                else if (index - 1 < 0) {\n                    index = group.length - 1;\n                }\n                else {\n                    index -= 1;\n                }\n            }\n        };\n        this.moveToTabByIndex = (group, index) => {\n            const tab = group[index];\n            this.activetab = tab;\n            this.prevActiveTabIndex = this.activeTabIndex;\n            this.activeTabIndex = index;\n            tab.focus();\n            this.setComponent();\n        };\n    }\n    /**\n     * @internal\n     */\n    orientationChanged() {\n        if (this.$fastController.isConnected) {\n            this.setTabs();\n            this.setTabPanels();\n            this.handleActiveIndicatorPosition();\n        }\n    }\n    /**\n     * @internal\n     */\n    activeidChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected &&\n            this.tabs.length <= this.tabpanels.length) {\n            this.prevActiveTabIndex = this.tabs.findIndex((item) => item.id === oldValue);\n            this.setTabs();\n            this.setTabPanels();\n            this.handleActiveIndicatorPosition();\n        }\n    }\n    /**\n     * @internal\n     */\n    tabsChanged() {\n        if (this.$fastController.isConnected &&\n            this.tabs.length <= this.tabpanels.length) {\n            this.setTabs();\n            this.setTabPanels();\n            this.handleActiveIndicatorPosition();\n        }\n    }\n    /**\n     * @internal\n     */\n    tabpanelsChanged() {\n        if (this.$fastController.isConnected &&\n            this.tabpanels.length <= this.tabs.length) {\n            this.setTabs();\n            this.setTabPanels();\n            this.handleActiveIndicatorPosition();\n        }\n    }\n    getActiveIndex() {\n        const id = this.activeid;\n        if (id !== undefined) {\n            return this.tabIds.indexOf(this.activeid) === -1\n                ? 0\n                : this.tabIds.indexOf(this.activeid);\n        }\n        else {\n            return 0;\n        }\n    }\n    getTabIds() {\n        return this.tabs.map((tab) => {\n            return tab.getAttribute("id");\n        });\n    }\n    getTabPanelIds() {\n        return this.tabpanels.map((tabPanel) => {\n            return tabPanel.getAttribute("id");\n        });\n    }\n    setComponent() {\n        if (this.activeTabIndex !== this.prevActiveTabIndex) {\n            this.activeid = this.tabIds[this.activeTabIndex];\n            this.focusTab();\n            this.change();\n        }\n    }\n    isHorizontal() {\n        return this.orientation === TabsOrientation.horizontal;\n    }\n    handleActiveIndicatorPosition() {\n        // Ignore if we click twice on the same tab\n        if (this.showActiveIndicator &&\n            this.activeindicator &&\n            this.activeTabIndex !== this.prevActiveTabIndex) {\n            if (this.ticking) {\n                this.ticking = false;\n            }\n            else {\n                this.ticking = true;\n                this.animateActiveIndicator();\n            }\n        }\n    }\n    animateActiveIndicator() {\n        this.ticking = true;\n        const gridProperty = this.isHorizontal() ? "gridColumn" : "gridRow";\n        const translateProperty = this.isHorizontal()\n            ? "translateX"\n            : "translateY";\n        const offsetProperty = this.isHorizontal() ? "offsetLeft" : "offsetTop";\n        const prev = this.activeIndicatorRef[offsetProperty];\n        this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;\n        const next = this.activeIndicatorRef[offsetProperty];\n        this.activeIndicatorRef.style[gridProperty] = `${this.prevActiveTabIndex + 1}`;\n        const dif = next - prev;\n        this.activeIndicatorRef.style.transform = `${translateProperty}(${dif}px)`;\n        this.activeIndicatorRef.classList.add("activeIndicatorTransition");\n        this.activeIndicatorRef.addEventListener("transitionend", () => {\n            this.ticking = false;\n            this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;\n            this.activeIndicatorRef.style.transform = `${translateProperty}(0px)`;\n            this.activeIndicatorRef.classList.remove("activeIndicatorTransition");\n        });\n    }\n    /**\n     * The adjust method for FASTTabs\n     * @public\n     * @remarks\n     * This method allows the active index to be adjusted by numerical increments\n     */\n    adjust(adjustment) {\n        this.prevActiveTabIndex = this.activeTabIndex;\n        this.activeTabIndex = wrapInBounds(0, this.tabs.length - 1, this.activeTabIndex + adjustment);\n        this.setComponent();\n    }\n    focusTab() {\n        this.tabs[this.activeTabIndex].focus();\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.tabIds = this.getTabIds();\n        this.tabpanelIds = this.getTabPanelIds();\n        this.activeTabIndex = this.getActiveIndex();\n    }\n}\n__decorate([\n    attr\n], Tabs.prototype, "orientation", void 0);\n__decorate([\n    attr\n], Tabs.prototype, "activeid", void 0);\n__decorate([\n    observable\n], Tabs.prototype, "tabs", void 0);\n__decorate([\n    observable\n], Tabs.prototype, "tabpanels", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], Tabs.prototype, "activeindicator", void 0);\n__decorate([\n    observable\n], Tabs.prototype, "activeIndicatorRef", void 0);\n__decorate([\n    observable\n], Tabs.prototype, "showActiveIndicator", void 0);\napplyMixins(Tabs, StartEnd);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/when.js\n/**\n * A directive that enables basic conditional rendering in a template.\n * @param binding - The condition to test for rendering.\n * @param templateOrTemplateBinding - The template or a binding that gets\n * the template to render when the condition is true.\n * @public\n */\nfunction when(binding, templateOrTemplateBinding) {\n    const getTemplate = typeof templateOrTemplateBinding === "function"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return (source, context) => binding(source, context) ? getTemplate(source, context) : null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tabs/tabs.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Tabs:class)} component.\n * @public\n */\nconst tabsTemplate = (context, definition) => html `\n    <template class="${x => x.orientation}">\n        ${startSlotTemplate(context, definition)}\n        <div class="tablist" part="tablist" role="tablist">\n            <slot class="tab" name="tab" part="tab" ${slotted("tabs")}></slot>\n\n            ${when(x => x.showActiveIndicator, html `\n                    <div\n                        ${ref("activeIndicatorRef")}\n                        class="activeIndicator"\n                        part="activeIndicator"\n                    ></div>\n                `)}\n        </div>\n        ${endSlotTemplate(context, definition)}\n        <div class="tabpanel">\n            <slot name="tabpanel" part="tabpanel" ${slotted("tabpanels")}></slot>\n        </div>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tab/tab.js\n\n\n\n/**\n * A Tab Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}\n * @public\n */\nclass Tab extends FoundationElement {\n}\n__decorate([\n    attr({ mode: "boolean" })\n], Tab.prototype, "disabled", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tab/tab.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#Tab} component.\n * @public\n */\nconst tabTemplate = (context, definition) => html `\n    <template slot="tab" role="tab" aria-disabled="${x => x.disabled}">\n        <slot></slot>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tab-panel/tab-panel.js\n\n/**\n * A TabPanel Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}\n * @public\n */\nclass TabPanel extends FoundationElement {\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/tab-panel/tab-panel.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#TabPanel} component.\n * @public\n */\nconst tabPanelTemplate = (context, definition) => html `\n    <template slot="tabpanel" role="tabpanel">\n        <slot></slot>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/panels/panels.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst panelsStyles = (context, definition) => css `\n\t${display(\'grid\')} :host {\n\t\tbox-sizing: border-box;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tcolor: ${foreground};\n\t\tgrid-template-columns: auto 1fr auto;\n\t\tgrid-template-rows: auto 1fr;\n\t\toverflow-x: auto;\n\t}\n\t.tablist {\n\t\tdisplay: grid;\n\t\tgrid-template-rows: auto auto;\n\t\tgrid-template-columns: auto;\n\t\tcolumn-gap: calc(${designUnit} * 8px);\n\t\tposition: relative;\n\t\twidth: max-content;\n\t\talign-self: end;\n\t\tpadding: calc(${designUnit} * 1px) calc(${designUnit} * 1px) 0;\n\t\tbox-sizing: border-box;\n\t}\n\t.start,\n\t.end {\n\t\talign-self: center;\n\t}\n\t.activeIndicator {\n\t\tgrid-row: 2;\n\t\tgrid-column: 1;\n\t\twidth: 100%;\n\t\theight: calc((${designUnit} / 4) * 1px);\n\t\tjustify-self: center;\n\t\tbackground: ${panelTabActiveForeground};\n\t\tmargin: 0;\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t}\n\t.activeIndicatorTransition {\n\t\ttransition: transform 0.01s linear;\n\t}\n\t.tabpanel {\n\t\tgrid-row: 2;\n\t\tgrid-column-start: 1;\n\t\tgrid-column-end: 4;\n\t\tposition: relative;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/panels/panel-tab.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst panelTabStyles = (context, definition) => css `\n\t${display(\'inline-flex\')} :host {\n\t\tbox-sizing: border-box;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\theight: calc(${designUnit} * 7px);\n\t\tpadding: calc(${designUnit} * 1px) 0;\n\t\tcolor: ${panelTabForeground};\n\t\tfill: currentcolor;\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tborder: solid calc(${borderWidth} * 1px) transparent;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tgrid-row: 1;\n\t\tcursor: pointer;\n\t}\n\t:host(:hover) {\n\t\tcolor: ${panelTabActiveForeground};\n\t\tfill: currentcolor;\n\t}\n\t:host(:active) {\n\t\tcolor: ${panelTabActiveForeground};\n\t\tfill: currentcolor;\n\t}\n\t:host([aria-selected=\'true\']) {\n\t\tbackground: transparent;\n\t\tcolor: ${panelTabActiveForeground};\n\t\tfill: currentcolor;\n\t}\n\t:host([aria-selected=\'true\']:hover) {\n\t\tbackground: transparent;\n\t\tcolor: ${panelTabActiveForeground};\n\t\tfill: currentcolor;\n\t}\n\t:host([aria-selected=\'true\']:active) {\n\t\tbackground: transparent;\n\t\tcolor: ${panelTabActiveForeground};\n\t\tfill: currentcolor;\n\t}\n\t:host(:${focusVisible}) {\n\t\toutline: none;\n\t\tborder: solid calc(${borderWidth} * 1px) ${panelTabActiveBorder};\n\t}\n\t:host(:focus) {\n\t\toutline: none;\n\t}\n\t::slotted(vscode-badge) {\n\t\tmargin-inline-start: calc(${designUnit} * 2px);\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/panels/panel-view.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst panelViewStyles = (context, definition) => css `\n\t${display(\'flex\')} :host {\n\t\tcolor: inherit;\n\t\tbackground-color: transparent;\n\t\tborder: solid calc(${borderWidth} * 1px) transparent;\n\t\tbox-sizing: border-box;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tpadding: 10px calc((${designUnit} + 2) * 1px);\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/panels/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The Visual Studio Code panels class.\n *\n * @public\n */\nclass Panels extends Tabs {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // This will override any usage of the orientation attribute\n        // inherited by the FAST Foundation Tabs component so that\n        // VSCodePanels are always oriented horizontally\n        if (this.orientation) {\n            this.orientation = TabsOrientation.horizontal;\n        }\n        // Sets a default ARIA label on the panels component only if an\n        // aria-label attribute does not already exist\n        const ariaLabelValue = this.getAttribute(\'aria-label\');\n        if (!ariaLabelValue) {\n            this.setAttribute(\'aria-label\', \'Panels\');\n        }\n    }\n}\n/**\n * The Visual Studio Code panels component registration.\n *\n * @remarks\n * HTML Element: `<vscode-panels>`\n *\n * @public\n */\nconst vsCodePanels = Panels.compose({\n    baseName: \'panels\',\n    template: tabsTemplate,\n    styles: panelsStyles,\n});\n/**\n * The Visual Studio Code panel tab class.\n *\n * @public\n */\nclass PanelTab extends Tab {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // This will override any usage of the disabled attribute\n        // inherited by the FAST Foundation Tab component so that\n        // VSCodePanelTab can never be disabled\n        if (this.disabled) {\n            this.disabled = false;\n        }\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n    }\n}\n/**\n * The Visual Studio Code panel tab component registration.\n *\n * @remarks\n * HTML Element: `<vscode-panel-tab>`\n *\n * @public\n */\nconst vsCodePanelTab = PanelTab.compose({\n    baseName: \'panel-tab\',\n    template: tabTemplate,\n    styles: panelTabStyles,\n});\n/**\n * The Visual Studio Code panel view class.\n *\n * @public\n */\nclass PanelView extends TabPanel {\n}\n/**\n * The Visual Studio Code panel view component registration.\n *\n * @remarks\n * HTML Element: `<vscode-panel-view>`\n *\n * @public\n */\nconst vsCodePanelView = PanelView.compose({\n    baseName: \'panel-view\',\n    template: tabPanelTemplate,\n    styles: panelViewStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/progress/base-progress.js\n\n\n\n/**\n * An Progress HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.\n *\n * @public\n */\nclass BaseProgress extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Indicates progress in %\n         * @internal\n         */\n        this.percentComplete = 0;\n    }\n    valueChanged() {\n        if (this.$fastController.isConnected) {\n            this.updatePercentComplete();\n        }\n    }\n    minChanged() {\n        if (this.$fastController.isConnected) {\n            this.updatePercentComplete();\n        }\n    }\n    maxChanged() {\n        if (this.$fastController.isConnected) {\n            this.updatePercentComplete();\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.updatePercentComplete();\n    }\n    updatePercentComplete() {\n        const min = typeof this.min === "number" ? this.min : 0;\n        const max = typeof this.max === "number" ? this.max : 100;\n        const value = typeof this.value === "number" ? this.value : 0;\n        const range = max - min;\n        this.percentComplete =\n            range === 0 ? 0 : Math.fround(((value - min) / range) * 100);\n    }\n}\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], BaseProgress.prototype, "value", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], BaseProgress.prototype, "min", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], BaseProgress.prototype, "max", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], BaseProgress.prototype, "paused", void 0);\n__decorate([\n    observable\n], BaseProgress.prototype, "percentComplete", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/progress-ring/progress-ring.template.js\n\nconst progressSegments = 44;\n/**\n * The template for the {@link @microsoft/fast-foundation#BaseProgress} component.\n * @public\n */\nconst progressRingTemplate = (context, definition) => html `\n    <template\n        role="progressbar"\n        aria-valuenow="${x => x.value}"\n        aria-valuemin="${x => x.min}"\n        aria-valuemax="${x => x.max}"\n        class="${x => (x.paused ? "paused" : "")}"\n    >\n        ${when(x => typeof x.value === "number", html `\n                <svg\n                    class="progress"\n                    part="progress"\n                    viewBox="0 0 16 16"\n                    slot="determinate"\n                >\n                    <circle\n                        class="background"\n                        part="background"\n                        cx="8px"\n                        cy="8px"\n                        r="7px"\n                    ></circle>\n                    <circle\n                        class="determinate"\n                        part="determinate"\n                        style="stroke-dasharray: ${x => (progressSegments * x.percentComplete) /\n    100}px ${progressSegments}px"\n                        cx="8px"\n                        cy="8px"\n                        r="7px"\n                    ></circle>\n                </svg>\n            `)}\n        ${when(x => typeof x.value !== "number", html `\n                <slot name="indeterminate" slot="indeterminate">\n                    ${definition.indeterminateIndicator || ""}\n                </slot>\n            `)}\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/progress-ring/progress-ring.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst progressRingStyles = (context, definition) => css `\n\t${display(\'flex\')} :host {\n\t\talign-items: center;\n\t\toutline: none;\n\t\theight: calc(${designUnit} * 7px);\n\t\twidth: calc(${designUnit} * 7px);\n\t\tmargin: 0;\n\t}\n\t.progress {\n\t\theight: 100%;\n\t\twidth: 100%;\n\t}\n\t.background {\n\t\tfill: none;\n\t\tstroke: transparent;\n\t\tstroke-width: calc(${designUnit} / 2 * 1px);\n\t}\n\t.indeterminate-indicator-1 {\n\t\tfill: none;\n\t\tstroke: ${progressBackground};\n\t\tstroke-width: calc(${designUnit} / 2 * 1px);\n\t\tstroke-linecap: square;\n\t\ttransform-origin: 50% 50%;\n\t\ttransform: rotate(-90deg);\n\t\ttransition: all 0.2s ease-in-out;\n\t\tanimation: spin-infinite 2s linear infinite;\n\t}\n\t@keyframes spin-infinite {\n\t\t0% {\n\t\t\tstroke-dasharray: 0.01px 43.97px;\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\t\t50% {\n\t\t\tstroke-dasharray: 21.99px 21.99px;\n\t\t\ttransform: rotate(450deg);\n\t\t}\n\t\t100% {\n\t\t\tstroke-dasharray: 0.01px 43.97px;\n\t\t\ttransform: rotate(1080deg);\n\t\t}\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/progress-ring/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code progress ring class.\n *\n * @public\n */\nclass ProgressRing extends BaseProgress {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // This will override any usage of the paused attribute\n        // inherited by the FAST Foundation BaseProgress component\n        // so that VSCodeProgressRing can never be paused\n        if (this.paused) {\n            this.paused = false;\n        }\n        // Defines a default aria label that screen readers can access\n        this.setAttribute(\'aria-label\', \'Loading\');\n        this.setAttribute(\'aria-live\', \'assertive\');\n        this.setAttribute(\'role\', \'alert\');\n    }\n    /**\n     * Component lifecycle method that runs when an attribute of the\n     * element is changed.\n     *\n     * @param attrName - The attribute that was changed\n     * @param oldVal - The old value of the attribute\n     * @param newVal - The new value of the attribute\n     *\n     * @internal\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n        if (attrName === \'value\') {\n            // This will override any usage of the value attribute\n            // inherited by the FAST Foundation BaseProgress component\n            // so that VSCodeProgressRing can never set to be a\n            // determinate state\n            this.removeAttribute(\'value\');\n        }\n    }\n}\n/**\n * The Visual Studio Code progress ring component registration.\n *\n * @remarks\n * HTML Element: `<vscode-progress-ring>`\n *\n * @public\n */\nconst vsCodeProgressRing = ProgressRing.compose({\n    baseName: \'progress-ring\',\n    template: progressRingTemplate,\n    styles: progressRingStyles,\n    indeterminateIndicator: `\n\t\t<svg class="progress" part="progress" viewBox="0 0 16 16">\n\t\t\t<circle\n\t\t\t\tclass="background"\n\t\t\t\tpart="background"\n\t\t\t\tcx="8px"\n\t\t\t\tcy="8px"\n\t\t\t\tr="7px"\n\t\t\t></circle>\n\t\t\t<circle\n\t\t\t\tclass="indeterminate-indicator-1"\n\t\t\t\tpart="indeterminate-indicator-1"\n\t\t\t\tcx="8px"\n\t\t\t\tcy="8px"\n\t\t\t\tr="7px"\n\t\t\t></circle>\n\t\t</svg>\n\t`,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.form-associated.js\n\n\nclass _Radio extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Radio:class)} component.\n *\n * @internal\n */\nclass FormAssociatedRadio extends CheckableFormAssociated(_Radio) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("input");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.js\n\n\n\n\n/**\n * A Radio Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.\n *\n * @public\n */\nclass radio_Radio extends FormAssociatedRadio {\n    constructor() {\n        super();\n        /**\n         * The element\'s value to be included in form submission when checked.\n         * Default to "on" to reach parity with input[type="radio"]\n         *\n         * @internal\n         */\n        this.initialValue = "on";\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            switch (e.key) {\n                case keySpace:\n                    if (!this.checked && !this.readOnly) {\n                        this.checked = true;\n                    }\n                    return;\n            }\n            return true;\n        };\n        this.proxy.setAttribute("type", "radio");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n    /**\n     * @internal\n     */\n    defaultCheckedChanged() {\n        var _a;\n        if (this.$fastController.isConnected && !this.dirtyChecked) {\n            // Setting this.checked will cause us to enter a dirty state,\n            // but if we are clean when defaultChecked is changed, we want to stay\n            // in a clean state, so reset this.dirtyChecked\n            if (!this.isInsideRadioGroup()) {\n                this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;\n                this.dirtyChecked = false;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a, _b;\n        super.connectedCallback();\n        this.validate();\n        if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute("role")) !== "radiogroup" &&\n            this.getAttribute("tabindex") === null) {\n            if (!this.disabled) {\n                this.setAttribute("tabindex", "0");\n            }\n        }\n        if (this.checkedAttribute) {\n            if (!this.dirtyChecked) {\n                // Setting this.checked will cause us to enter a dirty state,\n                // but if we are clean when defaultChecked is changed, we want to stay\n                // in a clean state, so reset this.dirtyChecked\n                if (!this.isInsideRadioGroup()) {\n                    this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;\n                    this.dirtyChecked = false;\n                }\n            }\n        }\n    }\n    isInsideRadioGroup() {\n        const parent = this.closest("[role=radiogroup]");\n        return parent !== null;\n    }\n    /**\n     * @internal\n     */\n    clickHandler(e) {\n        if (!this.disabled && !this.readOnly && !this.checked) {\n            this.checked = true;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: "readonly", mode: "boolean" })\n], radio_Radio.prototype, "readOnly", void 0);\n__decorate([\n    observable\n], radio_Radio.prototype, "name", void 0);\n__decorate([\n    observable\n], radio_Radio.prototype, "defaultSlottedNodes", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Radio:class)} component.\n * @public\n */\nconst radioTemplate = (context, definition) => html `\n    <template\n        role="radio"\n        class="${x => (x.checked ? "checked" : "")} ${x => x.readOnly ? "readonly" : ""}"\n        aria-checked="${x => x.checked}"\n        aria-required="${x => x.required}"\n        aria-disabled="${x => x.disabled}"\n        aria-readonly="${x => x.readOnly}"\n        @keypress="${(x, c) => x.keypressHandler(c.event)}"\n        @click="${(x, c) => x.clickHandler(c.event)}"\n    >\n        <div part="control" class="control">\n            <slot name="checked-indicator">\n                ${definition.checkedIndicator || ""}\n            </slot>\n        </div>\n        <label\n            part="label"\n            class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? "label"\n    : "label label__hidden"}"\n        >\n            <slot ${slotted("defaultSlottedNodes")}></slot>\n        </label>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/radio/radio.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst radioStyles = (context, definition) => css `\n\t${display(\'inline-flex\')} :host {\n\t\talign-items: center;\n\t\tflex-direction: row;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tmargin: calc(${designUnit} * 1px) 0;\n\t\toutline: none;\n\t\tposition: relative;\n\t\ttransition: all 0.2s ease-in-out;\n\t\tuser-select: none;\n\t}\n\t.control {\n\t\tbackground: ${checkboxBackground};\n\t\tborder-radius: 999px;\n\t\tborder: calc(${borderWidth} * 1px) solid ${checkboxBorder};\n\t\tbox-sizing: border-box;\n\t\tcursor: pointer;\n\t\theight: calc(${designUnit} * 4px);\n\t\tposition: relative;\n\t\toutline: none;\n\t\twidth: calc(${designUnit} * 4px);\n\t}\n\t.label {\n\t\tcolor: ${foreground};\n\t\tcursor: pointer;\n\t\tfont-family: ${fontFamily};\n\t\tmargin-inline-end: calc(${designUnit} * 2px + 2px);\n\t\tpadding-inline-start: calc(${designUnit} * 2px + 2px);\n\t}\n\t.label__hidden {\n\t\tdisplay: none;\n\t\tvisibility: hidden;\n\t}\n\t.control,\n\t.checked-indicator {\n\t\tflex-shrink: 0;\n\t}\n\t.checked-indicator {\n\t\tbackground: ${foreground};\n\t\tborder-radius: 999px;\n\t\tdisplay: inline-block;\n\t\tinset: calc(${designUnit} * 1px);\n\t\topacity: 0;\n\t\tpointer-events: none;\n\t\tposition: absolute;\n\t}\n\t:host(:not([disabled])) .control:hover {\n\t\tbackground: ${checkboxBackground};\n\t\tborder-color: ${checkboxBorder};\n\t}\n\t:host(:not([disabled])) .control:active {\n\t\tbackground: ${checkboxBackground};\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host(:${focusVisible}) .control {\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t}\n\t:host([aria-checked=\'true\']) .control {\n\t\tbackground: ${checkboxBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${checkboxBorder};\n\t}\n\t:host([aria-checked=\'true\']:not([disabled])) .control:hover {\n\t\tbackground: ${checkboxBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${checkboxBorder};\n\t}\n\t:host([aria-checked=\'true\']:not([disabled])) .control:active {\n\t\tbackground: ${checkboxBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t}\n\t:host([aria-checked="true"]:${focusVisible}:not([disabled])) .control {\n\t\tborder: calc(${borderWidth} * 1px) solid ${focusBorder};\n\t}\n\t:host([disabled]) .label,\n\t:host([readonly]) .label,\n\t:host([readonly]) .control,\n\t:host([disabled]) .control {\n\t\tcursor: ${disabledCursor};\n\t}\n\t:host([aria-checked=\'true\']) .checked-indicator {\n\t\topacity: 1;\n\t}\n\t:host([disabled]) {\n\t\topacity: ${disabledOpacity};\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/radio/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code radio class.\n *\n * @public\n */\nclass Radio extends radio_Radio {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n        else {\n            // Fallback to the label if there is no text content\n            this.setAttribute(\'aria-label\', \'Radio\');\n        }\n    }\n}\n/**\n * The Visual Studio Code radio component registration.\n *\n * @remarks\n * HTML Element: `<vscode-radio>`\n *\n * @public\n */\nconst vsCodeRadio = Radio.compose({\n    baseName: \'radio\',\n    template: radioTemplate,\n    styles: radioStyles,\n    checkedIndicator: `\n\t\t<div part="checked-indicator" class="checked-indicator"></div>\n\t`,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/localization.js\n/**\n * Expose ltr and rtl strings\n */\nvar Direction;\n(function (Direction) {\n    Direction["ltr"] = "ltr";\n    Direction["rtl"] = "rtl";\n})(Direction || (Direction = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/direction.js\n\n/**\n * a method to determine the current localization direction of the view\n * @param rootNode - the HTMLElement to begin the query from, usually "this" when used in a component controller\n * @public\n */\nconst getDirection = (rootNode) => {\n    const dirNode = rootNode.closest("[dir]");\n    return dirNode !== null && dirNode.dir === "rtl" ? Direction.rtl : Direction.ltr;\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/radio-group/radio-group.js\n\n\n\n\n\n/**\n * An Radio Group Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.\n *\n * @public\n */\nclass radio_group_RadioGroup extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The orientation of the group\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: orientation\n         */\n        this.orientation = Orientation.horizontal;\n        this.radioChangeHandler = (e) => {\n            const changedRadio = e.target;\n            if (changedRadio.checked) {\n                this.slottedRadioButtons.forEach((radio) => {\n                    if (radio !== changedRadio) {\n                        radio.checked = false;\n                        if (!this.isInsideFoundationToolbar) {\n                            radio.setAttribute("tabindex", "-1");\n                        }\n                    }\n                });\n                this.selectedRadio = changedRadio;\n                this.value = changedRadio.value;\n                changedRadio.setAttribute("tabindex", "0");\n                this.focusedRadio = changedRadio;\n            }\n            e.stopPropagation();\n        };\n        this.moveToRadioByIndex = (group, index) => {\n            const radio = group[index];\n            if (!this.isInsideToolbar) {\n                radio.setAttribute("tabindex", "0");\n                if (radio.readOnly) {\n                    this.slottedRadioButtons.forEach((nextRadio) => {\n                        if (nextRadio !== radio) {\n                            nextRadio.setAttribute("tabindex", "-1");\n                        }\n                    });\n                }\n                else {\n                    radio.checked = true;\n                    this.selectedRadio = radio;\n                }\n            }\n            this.focusedRadio = radio;\n            radio.focus();\n        };\n        this.moveRightOffGroup = () => {\n            var _a;\n            (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n        };\n        this.moveLeftOffGroup = () => {\n            var _a;\n            (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n        };\n        /**\n         * @internal\n         */\n        this.focusOutHandler = (e) => {\n            const group = this.slottedRadioButtons;\n            const radio = e.target;\n            const index = radio !== null ? group.indexOf(radio) : 0;\n            const focusedIndex = this.focusedRadio\n                ? group.indexOf(this.focusedRadio)\n                : -1;\n            if ((focusedIndex === 0 && index === focusedIndex) ||\n                (focusedIndex === group.length - 1 && focusedIndex === index)) {\n                if (!this.selectedRadio) {\n                    this.focusedRadio = group[0];\n                    this.focusedRadio.setAttribute("tabindex", "0");\n                    group.forEach((nextRadio) => {\n                        if (nextRadio !== this.focusedRadio) {\n                            nextRadio.setAttribute("tabindex", "-1");\n                        }\n                    });\n                }\n                else {\n                    this.focusedRadio = this.selectedRadio;\n                    if (!this.isInsideFoundationToolbar) {\n                        this.selectedRadio.setAttribute("tabindex", "0");\n                        group.forEach((nextRadio) => {\n                            if (nextRadio !== this.selectedRadio) {\n                                nextRadio.setAttribute("tabindex", "-1");\n                            }\n                        });\n                    }\n                }\n            }\n            return true;\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            const radio = e.target;\n            if (radio) {\n                const group = this.slottedRadioButtons;\n                if (radio.checked || group.indexOf(radio) === 0) {\n                    radio.setAttribute("tabindex", "0");\n                    this.selectedRadio = radio;\n                }\n                else {\n                    radio.setAttribute("tabindex", "-1");\n                    this.selectedRadio = null;\n                }\n                this.focusedRadio = radio;\n            }\n            e.preventDefault();\n        };\n        this.shouldMoveOffGroupToTheRight = (index, group, key) => {\n            return index === group.length && this.isInsideToolbar && key === keyArrowRight;\n        };\n        this.shouldMoveOffGroupToTheLeft = (group, key) => {\n            const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n            return index < 0 && this.isInsideToolbar && key === keyArrowLeft;\n        };\n        this.checkFocusedRadio = () => {\n            if (this.focusedRadio !== null &&\n                !this.focusedRadio.readOnly &&\n                !this.focusedRadio.checked) {\n                this.focusedRadio.checked = true;\n                this.focusedRadio.setAttribute("tabindex", "0");\n                this.focusedRadio.focus();\n                this.selectedRadio = this.focusedRadio;\n            }\n        };\n        this.moveRight = (e) => {\n            const group = this.slottedRadioButtons;\n            let index = 0;\n            index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;\n            if (this.shouldMoveOffGroupToTheRight(index, group, e.key)) {\n                this.moveRightOffGroup();\n                return;\n            }\n            else if (index === group.length) {\n                index = 0;\n            }\n            /* looping to get to next radio that is not disabled */\n            /* matching native radio/radiogroup which does not select an item if there is only 1 in the group */\n            while (index < group.length && group.length > 1) {\n                if (!group[index].disabled) {\n                    this.moveToRadioByIndex(group, index);\n                    break;\n                }\n                else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n                    break;\n                }\n                else if (index + 1 >= group.length) {\n                    if (this.isInsideToolbar) {\n                        break;\n                    }\n                    else {\n                        index = 0;\n                    }\n                }\n                else {\n                    index += 1;\n                }\n            }\n        };\n        this.moveLeft = (e) => {\n            const group = this.slottedRadioButtons;\n            let index = 0;\n            index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n            index = index < 0 ? group.length - 1 : index;\n            if (this.shouldMoveOffGroupToTheLeft(group, e.key)) {\n                this.moveLeftOffGroup();\n                return;\n            }\n            /* looping to get to next radio that is not disabled */\n            while (index >= 0 && group.length > 1) {\n                if (!group[index].disabled) {\n                    this.moveToRadioByIndex(group, index);\n                    break;\n                }\n                else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n                    break;\n                }\n                else if (index - 1 < 0) {\n                    index = group.length - 1;\n                }\n                else {\n                    index -= 1;\n                }\n            }\n        };\n        /**\n         * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar\n         * navigation is different when there is an ancestor with role=\'toolbar\'\n         *\n         * @internal\n         */\n        this.keydownHandler = (e) => {\n            const key = e.key;\n            if (key in ArrowKeys && this.isInsideFoundationToolbar) {\n                return true;\n            }\n            switch (key) {\n                case keyEnter: {\n                    this.checkFocusedRadio();\n                    break;\n                }\n                case keyArrowRight:\n                case keyArrowDown: {\n                    if (this.direction === Direction.ltr) {\n                        this.moveRight(e);\n                    }\n                    else {\n                        this.moveLeft(e);\n                    }\n                    break;\n                }\n                case keyArrowLeft:\n                case keyArrowUp: {\n                    if (this.direction === Direction.ltr) {\n                        this.moveLeft(e);\n                    }\n                    else {\n                        this.moveRight(e);\n                    }\n                    break;\n                }\n                default: {\n                    return true;\n                }\n            }\n        };\n    }\n    readOnlyChanged() {\n        if (this.slottedRadioButtons !== undefined) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (this.readOnly) {\n                    radio.readOnly = true;\n                }\n                else {\n                    radio.readOnly = false;\n                }\n            });\n        }\n    }\n    disabledChanged() {\n        if (this.slottedRadioButtons !== undefined) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (this.disabled) {\n                    radio.disabled = true;\n                }\n                else {\n                    radio.disabled = false;\n                }\n            });\n        }\n    }\n    nameChanged() {\n        if (this.slottedRadioButtons) {\n            this.slottedRadioButtons.forEach((radio) => {\n                radio.setAttribute("name", this.name);\n            });\n        }\n    }\n    valueChanged() {\n        if (this.slottedRadioButtons) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (radio.getAttribute("value") === this.value) {\n                    radio.checked = true;\n                    this.selectedRadio = radio;\n                }\n            });\n        }\n        this.$emit("change");\n    }\n    slottedRadioButtonsChanged(oldValue, newValue) {\n        if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {\n            this.setupRadioButtons();\n        }\n    }\n    get parentToolbar() {\n        return this.closest(\'[role="toolbar"]\');\n    }\n    get isInsideToolbar() {\n        var _a;\n        return ((_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false);\n    }\n    get isInsideFoundationToolbar() {\n        var _a;\n        return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a["$fastController"]);\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.direction = getDirection(this);\n        this.setupRadioButtons();\n    }\n    disconnectedCallback() {\n        this.slottedRadioButtons.forEach((radio) => {\n            radio.removeEventListener("change", this.radioChangeHandler);\n        });\n    }\n    setupRadioButtons() {\n        const checkedRadios = this.slottedRadioButtons.filter((radio) => {\n            return radio.hasAttribute("checked");\n        });\n        const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;\n        if (numberOfCheckedRadios > 1) {\n            const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n            lastCheckedRadio.checked = true;\n        }\n        let foundMatchingVal = false;\n        this.slottedRadioButtons.forEach((radio) => {\n            if (this.name !== undefined) {\n                radio.setAttribute("name", this.name);\n            }\n            if (this.disabled) {\n                radio.disabled = true;\n            }\n            if (this.readOnly) {\n                radio.readOnly = true;\n            }\n            if (this.value && this.value === radio.value) {\n                this.selectedRadio = radio;\n                this.focusedRadio = radio;\n                radio.checked = true;\n                radio.setAttribute("tabindex", "0");\n                foundMatchingVal = true;\n            }\n            else {\n                if (!this.isInsideFoundationToolbar) {\n                    radio.setAttribute("tabindex", "-1");\n                }\n                radio.checked = false;\n            }\n            radio.addEventListener("change", this.radioChangeHandler);\n        });\n        if (this.value === undefined && this.slottedRadioButtons.length > 0) {\n            const checkedRadios = this.slottedRadioButtons.filter((radio) => {\n                return radio.hasAttribute("checked");\n            });\n            const numberOfCheckedRadios = checkedRadios !== null ? checkedRadios.length : 0;\n            if (numberOfCheckedRadios > 0 && !foundMatchingVal) {\n                const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n                lastCheckedRadio.checked = true;\n                this.focusedRadio = lastCheckedRadio;\n                lastCheckedRadio.setAttribute("tabindex", "0");\n            }\n            else {\n                this.slottedRadioButtons[0].setAttribute("tabindex", "0");\n                this.focusedRadio = this.slottedRadioButtons[0];\n            }\n        }\n    }\n}\n__decorate([\n    attr({ attribute: "readonly", mode: "boolean" })\n], radio_group_RadioGroup.prototype, "readOnly", void 0);\n__decorate([\n    attr({ attribute: "disabled", mode: "boolean" })\n], radio_group_RadioGroup.prototype, "disabled", void 0);\n__decorate([\n    attr\n], radio_group_RadioGroup.prototype, "name", void 0);\n__decorate([\n    attr\n], radio_group_RadioGroup.prototype, "value", void 0);\n__decorate([\n    attr\n], radio_group_RadioGroup.prototype, "orientation", void 0);\n__decorate([\n    observable\n], radio_group_RadioGroup.prototype, "childItems", void 0);\n__decorate([\n    observable\n], radio_group_RadioGroup.prototype, "slottedRadioButtons", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/radio-group/radio-group.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#RadioGroup} component.\n * @public\n */\nconst radioGroupTemplate = (context, definition) => html `\n    <template\n        role="radiogroup"\n        aria-disabled="${x => x.disabled}"\n        aria-readonly="${x => x.readOnly}"\n        @click="${(x, c) => x.clickHandler(c.event)}"\n        @keydown="${(x, c) => x.keydownHandler(c.event)}"\n        @focusout="${(x, c) => x.focusOutHandler(c.event)}"\n    >\n        <slot name="label"></slot>\n        <div\n            class="positioning-region ${x => x.orientation === Orientation.horizontal ? "horizontal" : "vertical"}"\n            part="positioning-region"\n        >\n            <slot\n                ${slotted({\n    property: "slottedRadioButtons",\n    filter: node_observation_elements("[role=radio]"),\n})}\n            ></slot>\n        </div>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/radio-group/radio-group.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst radioGroupStyles = (context, definition) => css `\n\t${display(\'flex\')} :host {\n\t\talign-items: flex-start;\n\t\tmargin: calc(${designUnit} * 1px) 0;\n\t\tflex-direction: column;\n\t}\n\t.positioning-region {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t}\n\t:host([orientation=\'vertical\']) .positioning-region {\n\t\tflex-direction: column;\n\t}\n\t:host([orientation=\'horizontal\']) .positioning-region {\n\t\tflex-direction: row;\n\t}\n\t::slotted([slot=\'label\']) {\n\t\tcolor: ${foreground};\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tmargin: calc(${designUnit} * 1px) 0;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/radio-group/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The Visual Studio Code radio group class.\n *\n * @public\n */\nclass RadioGroup extends radio_group_RadioGroup {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // Generates a unique id for each radio group label so that the label element\n        // within the group can be correctly associated with the radio group.\n        const label = this.querySelector(\'label\');\n        if (label) {\n            const id = \'radio-group-\' + Math.random().toString(16).slice(2);\n            label.setAttribute(\'id\', id);\n            this.setAttribute(\'aria-labelledby\', id);\n        }\n    }\n}\n/**\n * The Visual Studio Code radio group component registration.\n *\n * @remarks\n * HTML Element: `<vscode-radio-group>`\n *\n * @public\n */\nconst vsCodeRadioGroup = RadioGroup.compose({\n    baseName: \'radio-group\',\n    template: radioGroupTemplate,\n    styles: radioGroupStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/tag/tag.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst tagStyles = (context, definition) => css `\n\t${display(\'inline-block\')} :host {\n\t\tbox-sizing: border-box;\n\t\tfont-family: ${fontFamily};\n\t\tfont-size: ${typeRampMinus1FontSize};\n\t\tline-height: ${typeRampMinus1LineHeight};\n\t}\n\t.control {\n\t\tbackground-color: ${badgeBackground};\n\t\tborder: calc(${borderWidth} * 1px) solid ${buttonBorder};\n\t\tborder-radius: ${tagCornerRadius};\n\t\tcolor: ${badgeForeground};\n\t\tpadding: calc(${designUnit} * 0.5px) calc(${designUnit} * 1px);\n\t\ttext-transform: uppercase;\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/tag/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The Visual Studio Code tag class.\n *\n * @public\n */\nclass Tag extends badge_Badge {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // This will override any usage of the circular attribute\n        // inherited by the FAST Foundation Badge component so that\n        // VSCodeTags are never circular\n        if (this.circular) {\n            this.circular = false;\n        }\n    }\n}\n/**\n * The Visual Studio Code tag component registration.\n *\n * @remarks\n * HTML Element: `<vscode-tag>`\n *\n * @public\n */\nconst vsCodeTag = Tag.compose({\n    baseName: \'tag\',\n    template: badgeTemplate,\n    styles: tagStyles,\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.form-associated.js\n\n\nclass _TextField extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(TextField:class)} component.\n *\n * @internal\n */\nclass FormAssociatedTextField extends FormAssociated(_TextField) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("input");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.options.js\n/**\n * Text field sub-types\n * @public\n */\nvar TextFieldType;\n(function (TextFieldType) {\n    /**\n     * An email TextField\n     */\n    TextFieldType["email"] = "email";\n    /**\n     * A password TextField\n     */\n    TextFieldType["password"] = "password";\n    /**\n     * A telephone TextField\n     */\n    TextFieldType["tel"] = "tel";\n    /**\n     * A text TextField\n     */\n    TextFieldType["text"] = "text";\n    /**\n     * A URL TextField\n     */\n    TextFieldType["url"] = "url";\n})(TextFieldType || (TextFieldType = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.js\n\n\n\n\n\n\n\n/**\n * A Text Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type="text" /> element }.\n *\n * @public\n */\nclass text_field_TextField extends FormAssociatedTextField {\n    constructor() {\n        super(...arguments);\n        /**\n         * Allows setting a type or mode of text.\n         * @public\n         * @remarks\n         * HTML Attribute: type\n         */\n        this.type = TextFieldType.text;\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n            this.validate();\n        }\n    }\n    autofocusChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.autofocus = this.autofocus;\n            this.validate();\n        }\n    }\n    placeholderChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.placeholder = this.placeholder;\n        }\n    }\n    typeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.type = this.type;\n            this.validate();\n        }\n    }\n    listChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.setAttribute("list", this.list);\n            this.validate();\n        }\n    }\n    maxlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.maxLength = this.maxlength;\n            this.validate();\n        }\n    }\n    minlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.minLength = this.minlength;\n            this.validate();\n        }\n    }\n    patternChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.pattern = this.pattern;\n            this.validate();\n        }\n    }\n    sizeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.size = this.size;\n        }\n    }\n    spellcheckChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.spellcheck = this.spellcheck;\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.proxy.setAttribute("type", this.type);\n        this.validate();\n        if (this.autofocus) {\n            DOM.queueUpdate(() => {\n                this.focus();\n            });\n        }\n    }\n    /**\n     * Handles the internal control\'s `input` event\n     * @internal\n     */\n    handleTextInput() {\n        this.value = this.control.value;\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * "Change" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit("change");\n    }\n}\n__decorate([\n    attr({ attribute: "readonly", mode: "boolean" })\n], text_field_TextField.prototype, "readOnly", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], text_field_TextField.prototype, "autofocus", void 0);\n__decorate([\n    attr\n], text_field_TextField.prototype, "placeholder", void 0);\n__decorate([\n    attr\n], text_field_TextField.prototype, "type", void 0);\n__decorate([\n    attr\n], text_field_TextField.prototype, "list", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], text_field_TextField.prototype, "maxlength", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], text_field_TextField.prototype, "minlength", void 0);\n__decorate([\n    attr\n], text_field_TextField.prototype, "pattern", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], text_field_TextField.prototype, "size", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], text_field_TextField.prototype, "spellcheck", void 0);\n__decorate([\n    observable\n], text_field_TextField.prototype, "defaultSlottedNodes", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA textbox role\n *\n * @public\n */\nclass DelegatesARIATextbox {\n}\napplyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);\napplyMixins(text_field_TextField, StartEnd, DelegatesARIATextbox);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.form-associated.js\n\n\nclass _TextArea extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(TextArea:class)} component.\n *\n * @internal\n */\nclass FormAssociatedTextArea extends FormAssociated(_TextArea) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("textarea");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.options.js\n/**\n * Resize mode for a TextArea\n * @public\n */\nvar TextAreaResize;\n(function (TextAreaResize) {\n    /**\n     * No resize.\n     */\n    TextAreaResize["none"] = "none";\n    /**\n     * Resize vertically and horizontally.\n     */\n    TextAreaResize["both"] = "both";\n    /**\n     * Resize horizontally.\n     */\n    TextAreaResize["horizontal"] = "horizontal";\n    /**\n     * Resize vertically.\n     */\n    TextAreaResize["vertical"] = "vertical";\n})(TextAreaResize || (TextAreaResize = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.js\n\n\n\n\n\n\n\n/**\n * A Text Area Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.\n *\n * @public\n */\nclass text_area_TextArea extends FormAssociatedTextArea {\n    constructor() {\n        super(...arguments);\n        /**\n         * The resize mode of the element.\n         * @public\n         * @remarks\n         * HTML Attribute: resize\n         */\n        this.resize = TextAreaResize.none;\n        /**\n         * Sizes the element horizontally by a number of character columns.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: cols\n         */\n        this.cols = 20;\n        /**\n         * @internal\n         */\n        this.handleTextInput = () => {\n            this.value = this.control.value;\n        };\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n    autofocusChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.autofocus = this.autofocus;\n        }\n    }\n    listChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.setAttribute("list", this.list);\n        }\n    }\n    maxlengthChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.maxLength = this.maxlength;\n        }\n    }\n    minlengthChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.minLength = this.minlength;\n        }\n    }\n    spellcheckChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.spellcheck = this.spellcheck;\n        }\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * "Change" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit("change");\n    }\n}\n__decorate([\n    attr({ mode: "boolean" })\n], text_area_TextArea.prototype, "readOnly", void 0);\n__decorate([\n    attr\n], text_area_TextArea.prototype, "resize", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], text_area_TextArea.prototype, "autofocus", void 0);\n__decorate([\n    attr({ attribute: "form" })\n], text_area_TextArea.prototype, "formId", void 0);\n__decorate([\n    attr\n], text_area_TextArea.prototype, "list", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], text_area_TextArea.prototype, "maxlength", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], text_area_TextArea.prototype, "minlength", void 0);\n__decorate([\n    attr\n], text_area_TextArea.prototype, "name", void 0);\n__decorate([\n    attr\n], text_area_TextArea.prototype, "placeholder", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter, mode: "fromView" })\n], text_area_TextArea.prototype, "cols", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter, mode: "fromView" })\n], text_area_TextArea.prototype, "rows", void 0);\n__decorate([\n    attr({ mode: "boolean" })\n], text_area_TextArea.prototype, "spellcheck", void 0);\n__decorate([\n    observable\n], text_area_TextArea.prototype, "defaultSlottedNodes", void 0);\napplyMixins(text_area_TextArea, DelegatesARIATextbox);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(TextArea:class)} component.\n * @public\n */\nconst textAreaTemplate = (context, definition) => html `\n    <template\n        class="\n            ${x => (x.readOnly ? "readonly" : "")}\n            ${x => (x.resize !== TextAreaResize.none ? `resize-${x.resize}` : "")}"\n    >\n        <label\n            part="label"\n            for="control"\n            class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? "label"\n    : "label label__hidden"}"\n        >\n            <slot ${slotted("defaultSlottedNodes")}></slot>\n        </label>\n        <textarea\n            part="control"\n            class="control"\n            id="control"\n            ?autofocus="${x => x.autofocus}"\n            cols="${x => x.cols}"\n            ?disabled="${x => x.disabled}"\n            form="${x => x.form}"\n            list="${x => x.list}"\n            maxlength="${x => x.maxlength}"\n            minlength="${x => x.minlength}"\n            name="${x => x.name}"\n            placeholder="${x => x.placeholder}"\n            ?readonly="${x => x.readOnly}"\n            ?required="${x => x.required}"\n            rows="${x => x.rows}"\n            ?spellcheck="${x => x.spellcheck}"\n            :value="${x => x.value}"\n            aria-atomic="${x => x.ariaAtomic}"\n            aria-busy="${x => x.ariaBusy}"\n            aria-controls="${x => x.ariaControls}"\n            aria-current="${x => x.ariaCurrent}"\n            aria-describedby="${x => x.ariaDescribedby}"\n            aria-details="${x => x.ariaDetails}"\n            aria-disabled="${x => x.ariaDisabled}"\n            aria-errormessage="${x => x.ariaErrormessage}"\n            aria-flowto="${x => x.ariaFlowto}"\n            aria-haspopup="${x => x.ariaHaspopup}"\n            aria-hidden="${x => x.ariaHidden}"\n            aria-invalid="${x => x.ariaInvalid}"\n            aria-keyshortcuts="${x => x.ariaKeyshortcuts}"\n            aria-label="${x => x.ariaLabel}"\n            aria-labelledby="${x => x.ariaLabelledby}"\n            aria-live="${x => x.ariaLive}"\n            aria-owns="${x => x.ariaOwns}"\n            aria-relevant="${x => x.ariaRelevant}"\n            aria-roledescription="${x => x.ariaRoledescription}"\n            @input="${(x, c) => x.handleTextInput()}"\n            @change="${x => x.handleChange()}"\n            ${ref("control")}\n        ></textarea>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/text-area/text-area.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst textAreaStyles = (context, definition) => css `\n\t${display(\'inline-block\')} :host {\n\t\tfont-family: ${fontFamily};\n\t\toutline: none;\n\t\tuser-select: none;\n\t}\n\t.control {\n\t\tbox-sizing: border-box;\n\t\tposition: relative;\n\t\tcolor: ${inputForeground};\n\t\tbackground: ${inputBackground};\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tborder: calc(${borderWidth} * 1px) solid ${dropdownBorder};\n\t\tfont: inherit;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tpadding: calc(${designUnit} * 2px + 1px);\n\t\twidth: 100%;\n\t\tmin-width: ${inputMinWidth};\n\t\tresize: none;\n\t}\n\t.control:hover:enabled {\n\t\tbackground: ${inputBackground};\n\t\tborder-color: ${dropdownBorder};\n\t}\n\t.control:active:enabled {\n\t\tbackground: ${inputBackground};\n\t\tborder-color: ${focusBorder};\n\t}\n\t.control:hover,\n\t.control:${focusVisible},\n\t.control:disabled,\n\t.control:active {\n\t\toutline: none;\n\t}\n\t.control::-webkit-scrollbar {\n\t\twidth: ${scrollbarWidth};\n\t\theight: ${scrollbarHeight};\n\t}\n\t.control::-webkit-scrollbar-corner {\n\t\tbackground: ${inputBackground};\n\t}\n\t.control::-webkit-scrollbar-thumb {\n\t\tbackground: ${scrollbarSliderBackground};\n\t}\n\t.control::-webkit-scrollbar-thumb:hover {\n\t\tbackground: ${scrollbarSliderHoverBackground};\n\t}\n\t.control::-webkit-scrollbar-thumb:active {\n\t\tbackground: ${scrollbarSliderActiveBackground};\n\t}\n\t:host(:focus-within:not([disabled])) .control {\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host([resize=\'both\']) .control {\n\t\tresize: both;\n\t}\n\t:host([resize=\'horizontal\']) .control {\n\t\tresize: horizontal;\n\t}\n\t:host([resize=\'vertical\']) .control {\n\t\tresize: vertical;\n\t}\n\t.label {\n\t\tdisplay: block;\n\t\tcolor: ${foreground};\n\t\tcursor: pointer;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tmargin-bottom: 2px;\n\t}\n\t.label__hidden {\n\t\tdisplay: none;\n\t\tvisibility: hidden;\n\t}\n\t:host([disabled]) .label,\n\t:host([readonly]) .label,\n\t:host([readonly]) .control,\n\t:host([disabled]) .control {\n\t\tcursor: ${disabledCursor};\n\t}\n\t:host([disabled]) {\n\t\topacity: ${disabledOpacity};\n\t}\n\t:host([disabled]) .control {\n\t\tborder-color: ${dropdownBorder};\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/text-area/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The Visual Studio Code text area class.\n *\n * @remarks\n * HTML Element: `<vscode-text-area>`\n *\n * @public\n */\nclass TextArea extends text_area_TextArea {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n        else {\n            // Describe the generic component if no label is provided\n            this.setAttribute(\'aria-label\', \'Text area\');\n        }\n    }\n}\n/**\n * The Visual Studio Code text area component registration.\n *\n * @remarks\n * HTML Element: `<vscode-text-area>`\n *\n * @public\n */\nconst vsCodeTextArea = TextArea.compose({\n    baseName: \'text-area\',\n    template: textAreaTemplate,\n    styles: textAreaStyles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/whitespace-filter.js\n/**\n * a method to filter out any whitespace _only_ nodes, to be used inside a template\n * @param value - The Node that is being inspected\n * @param index - The index of the node within the array\n * @param array - The Node array that is being filtered\n *\n * @public\n */\nfunction whitespaceFilter(value, index, array) {\n    return value.nodeType !== Node.TEXT_NODE\n        ? true\n        : typeof value.nodeValue === "string" && !!value.nodeValue.trim().length;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.template.js\n\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(TextField:class)} component.\n * @public\n */\nconst textFieldTemplate = (context, definition) => html `\n    <template\n        class="\n            ${x => (x.readOnly ? "readonly" : "")}\n        "\n    >\n        <label\n            part="label"\n            for="control"\n            class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? "label"\n    : "label label__hidden"}"\n        >\n            <slot\n                ${slotted({ property: "defaultSlottedNodes", filter: whitespaceFilter })}\n            ></slot>\n        </label>\n        <div class="root" part="root">\n            ${startSlotTemplate(context, definition)}\n            <input\n                class="control"\n                part="control"\n                id="control"\n                @input="${x => x.handleTextInput()}"\n                @change="${x => x.handleChange()}"\n                ?autofocus="${x => x.autofocus}"\n                ?disabled="${x => x.disabled}"\n                list="${x => x.list}"\n                maxlength="${x => x.maxlength}"\n                minlength="${x => x.minlength}"\n                pattern="${x => x.pattern}"\n                placeholder="${x => x.placeholder}"\n                ?readonly="${x => x.readOnly}"\n                ?required="${x => x.required}"\n                size="${x => x.size}"\n                ?spellcheck="${x => x.spellcheck}"\n                :value="${x => x.value}"\n                type="${x => x.type}"\n                aria-atomic="${x => x.ariaAtomic}"\n                aria-busy="${x => x.ariaBusy}"\n                aria-controls="${x => x.ariaControls}"\n                aria-current="${x => x.ariaCurrent}"\n                aria-describedby="${x => x.ariaDescribedby}"\n                aria-details="${x => x.ariaDetails}"\n                aria-disabled="${x => x.ariaDisabled}"\n                aria-errormessage="${x => x.ariaErrormessage}"\n                aria-flowto="${x => x.ariaFlowto}"\n                aria-haspopup="${x => x.ariaHaspopup}"\n                aria-hidden="${x => x.ariaHidden}"\n                aria-invalid="${x => x.ariaInvalid}"\n                aria-keyshortcuts="${x => x.ariaKeyshortcuts}"\n                aria-label="${x => x.ariaLabel}"\n                aria-labelledby="${x => x.ariaLabelledby}"\n                aria-live="${x => x.ariaLive}"\n                aria-owns="${x => x.ariaOwns}"\n                aria-relevant="${x => x.ariaRelevant}"\n                aria-roledescription="${x => x.ariaRoledescription}"\n                ${ref("control")}\n            />\n            ${endSlotTemplate(context, definition)}\n        </div>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/text-field/text-field.styles.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst textFieldStyles = (context, definition) => css `\n\t${display(\'inline-block\')} :host {\n\t\tfont-family: ${fontFamily};\n\t\toutline: none;\n\t\tuser-select: none;\n\t}\n\t.root {\n\t\tbox-sizing: border-box;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tcolor: ${inputForeground};\n\t\tbackground: ${inputBackground};\n\t\tborder-radius: calc(${cornerRadius} * 1px);\n\t\tborder: calc(${borderWidth} * 1px) solid ${dropdownBorder};\n\t\theight: calc(${inputHeight} * 1px);\n\t\tmin-width: ${inputMinWidth};\n\t}\n\t.control {\n\t\t-webkit-appearance: none;\n\t\tfont: inherit;\n\t\tbackground: transparent;\n\t\tborder: 0;\n\t\tcolor: inherit;\n\t\theight: calc(100% - (${designUnit} * 1px));\n\t\twidth: 100%;\n\t\tmargin-top: auto;\n\t\tmargin-bottom: auto;\n\t\tborder: none;\n\t\tpadding: 0 calc(${designUnit} * 2px + 1px);\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t}\n\t.control:hover,\n\t.control:${focusVisible},\n\t.control:disabled,\n\t.control:active {\n\t\toutline: none;\n\t}\n\t.label {\n\t\tdisplay: block;\n\t\tcolor: ${foreground};\n\t\tcursor: pointer;\n\t\tfont-size: ${typeRampBaseFontSize};\n\t\tline-height: ${typeRampBaseLineHeight};\n\t\tmargin-bottom: 2px;\n\t}\n\t.label__hidden {\n\t\tdisplay: none;\n\t\tvisibility: hidden;\n\t}\n\t.start,\n\t.end {\n\t\tdisplay: flex;\n\t\tmargin: auto;\n\t\tfill: currentcolor;\n\t}\n\t::slotted(svg),\n\t::slotted(span) {\n\t\twidth: calc(${designUnit} * 4px);\n\t\theight: calc(${designUnit} * 4px);\n\t}\n\t.start {\n\t\tmargin-inline-start: calc(${designUnit} * 2px);\n\t}\n\t.end {\n\t\tmargin-inline-end: calc(${designUnit} * 2px);\n\t}\n\t:host(:hover:not([disabled])) .root {\n\t\tbackground: ${inputBackground};\n\t\tborder-color: ${dropdownBorder};\n\t}\n\t:host(:active:not([disabled])) .root {\n\t\tbackground: ${inputBackground};\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host(:focus-within:not([disabled])) .root {\n\t\tborder-color: ${focusBorder};\n\t}\n\t:host([disabled]) .label,\n\t:host([readonly]) .label,\n\t:host([readonly]) .control,\n\t:host([disabled]) .control {\n\t\tcursor: ${disabledCursor};\n\t}\n\t:host([disabled]) {\n\t\topacity: ${disabledOpacity};\n\t}\n\t:host([disabled]) .control {\n\t\tborder-color: ${dropdownBorder};\n\t}\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/text-field/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The Visual Studio Code text field class.\n *\n * @public\n */\nclass TextField extends text_field_TextField {\n    /**\n     * Component lifecycle method that runs when the component is inserted\n     * into the DOM.\n     *\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.textContent) {\n            this.setAttribute(\'aria-label\', this.textContent);\n        }\n        else {\n            // Describe the generic component if no label is provided\n            this.setAttribute(\'aria-label\', \'Text field\');\n        }\n    }\n}\n/**\n * The Visual Studio Code text field component registration.\n *\n * @remarks\n * HTML Element: `<vscode-text-field>`\n *\n * @public\n */\nconst vsCodeTextField = TextField.compose({\n    baseName: \'text-field\',\n    template: textFieldTemplate,\n    styles: textFieldStyles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-system/design-system.js\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Indicates what to do with an ambiguous (duplicate) element.\n * @public\n */\nconst ElementDisambiguation = Object.freeze({\n    /**\n     * Skip defining the element but still call the provided callback passed\n     * to DesignSystemRegistrationContext.tryDefineElement\n     */\n    definitionCallbackOnly: null,\n    /**\n     * Ignore the duplicate element entirely.\n     */\n    ignoreDuplicate: Symbol(),\n});\nconst elementTypesByTag = new Map();\nconst elementTagsByType = new Map();\nlet rootDesignSystem = null;\nconst designSystemKey = DI.createInterface(x => x.cachedCallback(handler => {\n    if (rootDesignSystem === null) {\n        rootDesignSystem = new DefaultDesignSystem(null, handler);\n    }\n    return rootDesignSystem;\n}));\n/**\n * An API gateway to design system features.\n * @public\n */\nconst DesignSystem = Object.freeze({\n    /**\n     * Returns the HTML element name that the type is defined as.\n     * @param type - The type to lookup.\n     * @public\n     */\n    tagFor(type) {\n        return elementTagsByType.get(type);\n    },\n    /**\n     * Searches the DOM hierarchy for the design system that is responsible\n     * for the provided element.\n     * @param element - The element to locate the design system for.\n     * @returns The located design system.\n     * @public\n     */\n    responsibleFor(element) {\n        const owned = element.$$designSystem$$;\n        if (owned) {\n            return owned;\n        }\n        const container = DI.findResponsibleContainer(element);\n        return container.get(designSystemKey);\n    },\n    /**\n     * Gets the DesignSystem if one is explicitly defined on the provided element;\n     * otherwise creates a design system defined directly on the element.\n     * @param element - The element to get or create a design system for.\n     * @returns The design system.\n     * @public\n     */\n    getOrCreate(node) {\n        if (!node) {\n            if (rootDesignSystem === null) {\n                rootDesignSystem = DI.getOrCreateDOMContainer().get(designSystemKey);\n            }\n            return rootDesignSystem;\n        }\n        const owned = node.$$designSystem$$;\n        if (owned) {\n            return owned;\n        }\n        const container = DI.getOrCreateDOMContainer(node);\n        if (container.has(designSystemKey, false)) {\n            return container.get(designSystemKey);\n        }\n        else {\n            const system = new DefaultDesignSystem(node, container);\n            container.register(Registration.instance(designSystemKey, system));\n            return system;\n        }\n    },\n});\nfunction extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback) {\n    if (typeof params === "string") {\n        return {\n            name: params,\n            type: elementDefinitionType,\n            callback: elementDefinitionCallback,\n        };\n    }\n    else {\n        return params;\n    }\n}\nclass DefaultDesignSystem {\n    constructor(owner, container) {\n        this.owner = owner;\n        this.container = container;\n        this.designTokensInitialized = false;\n        this.prefix = "fast";\n        this.shadowRootMode = undefined;\n        this.disambiguate = () => ElementDisambiguation.definitionCallbackOnly;\n        if (owner !== null) {\n            owner.$$designSystem$$ = this;\n        }\n    }\n    withPrefix(prefix) {\n        this.prefix = prefix;\n        return this;\n    }\n    withShadowRootMode(mode) {\n        this.shadowRootMode = mode;\n        return this;\n    }\n    withElementDisambiguation(callback) {\n        this.disambiguate = callback;\n        return this;\n    }\n    withDesignTokenRoot(root) {\n        this.designTokenRoot = root;\n        return this;\n    }\n    register(...registrations) {\n        const container = this.container;\n        const elementDefinitionEntries = [];\n        const disambiguate = this.disambiguate;\n        const shadowRootMode = this.shadowRootMode;\n        const context = {\n            elementPrefix: this.prefix,\n            tryDefineElement(params, elementDefinitionType, elementDefinitionCallback) {\n                const extractedParams = extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback);\n                const { name, callback, baseClass } = extractedParams;\n                let { type } = extractedParams;\n                let elementName = name;\n                let typeFoundByName = elementTypesByTag.get(elementName);\n                let needsDefine = true;\n                while (typeFoundByName) {\n                    const result = disambiguate(elementName, type, typeFoundByName);\n                    switch (result) {\n                        case ElementDisambiguation.ignoreDuplicate:\n                            return;\n                        case ElementDisambiguation.definitionCallbackOnly:\n                            needsDefine = false;\n                            typeFoundByName = void 0;\n                            break;\n                        default:\n                            elementName = result;\n                            typeFoundByName = elementTypesByTag.get(elementName);\n                            break;\n                    }\n                }\n                if (needsDefine) {\n                    if (elementTagsByType.has(type) || type === FoundationElement) {\n                        type = class extends type {\n                        };\n                    }\n                    elementTypesByTag.set(elementName, type);\n                    elementTagsByType.set(type, elementName);\n                    if (baseClass) {\n                        elementTagsByType.set(baseClass, elementName);\n                    }\n                }\n                elementDefinitionEntries.push(new ElementDefinitionEntry(container, elementName, type, shadowRootMode, callback, needsDefine));\n            },\n        };\n        if (!this.designTokensInitialized) {\n            this.designTokensInitialized = true;\n            if (this.designTokenRoot !== null) {\n                DesignToken.registerRoot(this.designTokenRoot);\n            }\n        }\n        container.registerWithContext(context, ...registrations);\n        for (const entry of elementDefinitionEntries) {\n            entry.callback(entry);\n            if (entry.willDefine && entry.definition !== null) {\n                entry.definition.define();\n            }\n        }\n        return this;\n    }\n}\nclass ElementDefinitionEntry {\n    constructor(container, name, type, shadowRootMode, callback, willDefine) {\n        this.container = container;\n        this.name = name;\n        this.type = type;\n        this.shadowRootMode = shadowRootMode;\n        this.callback = callback;\n        this.willDefine = willDefine;\n        this.definition = null;\n    }\n    definePresentation(presentation) {\n        ComponentPresentation.define(this.name, presentation, this.container);\n    }\n    defineElement(definition) {\n        this.definition = new fast_definitions_FASTElementDefinition(this.type, Object.assign(Object.assign({}, definition), { name: this.name }));\n    }\n    tagFor(type) {\n        return DesignSystem.tagFor(type);\n    }\n}\n/* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/dist/vscode-design-system.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Provides a design system for the specified element either by returning one that was\n * already created for that element or creating one.\n * @param element - The element to root the design system at. By default, this is the body.\n * @returns A VSCode Design System\n * @public\n */\nfunction provideVSCodeDesignSystem(element) {\n    return DesignSystem.getOrCreate(element).withPrefix(\'vscode\');\n}\n\n;// CONCATENATED MODULE: ./node_modules/@vscode/webview-ui-toolkit/react/index.js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nconst { wrap } = provideReactWrapper(react, provideVSCodeDesignSystem());\n/**\n * VS Code Badge React component.\n *\n * @public\n */\nconst VSCodeBadge = wrap(vsCodeBadge(), {\n    name: \'vscode-badge\',\n});\n/**\n * VS Code Button React component.\n *\n * @public\n */\nconst VSCodeButton = wrap(vsCodeButton(), {\n    name: \'vscode-button\',\n});\n/**\n * VS Code Checkbox React component.\n *\n * @public\n */\nconst VSCodeCheckbox = wrap(vsCodeCheckbox(), {\n    name: \'vscode-checkbox\',\n    events: {\n        onChange: \'change\',\n    },\n});\n/**\n * VS Code Data Grid React component.\n *\n * @public\n */\nconst VSCodeDataGrid = wrap(vsCodeDataGrid(), {\n    name: \'vscode-data-grid\',\n});\n/**\n * VS Code Data Grid Cell React component.\n *\n * @public\n */\nconst VSCodeDataGridCell = wrap(vsCodeDataGridCell(), {\n    name: \'vscode-data-grid-cell\',\n});\n/**\n * VS Code Data Grid Row React component.\n *\n * @public\n */\nconst VSCodeDataGridRow = wrap(vsCodeDataGridRow(), {\n    name: \'vscode-data-grid-row\',\n});\n/**\n * VS Code Divider React component.\n *\n * @public\n */\nconst VSCodeDivider = wrap(vsCodeDivider(), {\n    name: \'vscode-divider\',\n});\n/**\n * VS Code Dropdown React component.\n *\n * @public\n */\nconst VSCodeDropdown = wrap(vsCodeDropdown(), {\n    name: \'vscode-dropdown\',\n    events: {\n        onChange: \'change\',\n    },\n});\n/**\n * VS Code Link React component.\n *\n * @public\n */\nconst VSCodeLink = wrap(vsCodeLink(), {\n    name: \'vscode-link\',\n});\n/**\n * VS Code Option React component.\n *\n * @public\n */\nconst VSCodeOption = wrap(vsCodeOption(), {\n    name: \'vscode-option\',\n});\n/**\n * VS Code Panels React component.\n *\n * @public\n */\nconst VSCodePanels = wrap(vsCodePanels(), {\n    name: \'vscode-panels\',\n    events: {\n        onChange: \'change\',\n    },\n});\n/**\n * VS Code Panel Tab React component.\n *\n * @public\n */\nconst VSCodePanelTab = wrap(vsCodePanelTab(), {\n    name: \'vscode-panel-tab\',\n});\n/**\n * VS Code Panel View React component.\n *\n * @public\n */\nconst VSCodePanelView = wrap(vsCodePanelView(), {\n    name: \'vscode-panel-view\',\n});\n/**\n * VS Code Progress Ring React component.\n *\n * @public\n */\nconst VSCodeProgressRing = wrap(vsCodeProgressRing(), {\n    name: \'vscode-progress-ring\',\n});\n/**\n * VS Code Radio React component.\n *\n * @public\n */\nconst VSCodeRadio = wrap(vsCodeRadio(), {\n    name: \'vscode-radio\',\n    events: {\n        onChange: \'change\',\n    },\n});\n/**\n * VS Code Radio Group React component.\n *\n * @public\n */\nconst VSCodeRadioGroup = wrap(vsCodeRadioGroup(), {\n    name: \'vscode-radio-group\',\n    events: {\n        onChange: \'change\',\n    },\n});\n/**\n * VS Code Tag React component.\n *\n * @public\n */\nconst VSCodeTag = wrap(vsCodeTag(), {\n    name: \'vscode-tag\',\n});\n/**\n * VS Code Text Area React component.\n *\n * @public\n */\nconst VSCodeTextArea = wrap(vsCodeTextArea(), {\n    name: \'vscode-text-area\',\n    events: {\n        onChange: \'change\',\n        onInput: \'input\',\n    },\n});\n/**\n * VS Code Text Field React component.\n *\n * @public\n */\nconst VSCodeTextField = wrap(vsCodeTextField(), {\n    name: \'vscode-text-field\',\n    events: {\n        onChange: \'change\',\n        onInput: \'input\',\n    },\n});\n\n;// CONCATENATED MODULE: ./src/sidebar/components/Feedback.tsx\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar Feedback_options = [{\n  icon: react.createElement(VscWarning, {\n    className: "w-full h-full"\n  }),\n  label: \'Incorrect\',\n  slug: \'incorrect\'\n}, {\n  icon: react.createElement(VscThumbsdown, {\n    className: "w-full h-full"\n  }),\n  label: \'Unhelpful\',\n  slug: \'unhelpful\'\n}, {\n  icon: react.createElement(VscThumbsup, {\n    className: "w-full h-full"\n  }),\n  label: \'Great\',\n  slug: \'great\'\n}];\nvar Feedback = function Feedback(_ref) {\n  var responseIteration = _ref.responseIteration;\n\n  var _React$useState = react.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasResponded = _React$useState2[0],\n      setHasResponded = _React$useState2[1];\n\n  var _useStore = useStore(),\n      selectedText = _useStore.selectedText,\n      prompt = _useStore.prompt,\n      stop = _useStore.stop,\n      modelResponse = _useStore.modelResponse;\n\n  var onRespond = function onRespond(option) {\n    var message = {\n      command: \'feedback\',\n      payload: {\n        option: option.slug,\n        prompt: prompt,\n        stop: stop,\n        code: selectedText,\n        modelResponse: modelResponse\n      }\n    };\n    VSCodeAPI.postWebViewMessage(message);\n    setHasResponded(true);\n  };\n\n  (0,react.useEffect)(function () {\n    setHasResponded(false);\n  }, [responseIteration]);\n  return react.createElement("div", {\n    className: ""\n  }, !hasResponded ? react.createElement(react.Fragment, null, react.createElement("p", {\n    className: "text-xs uppercase tracking-widest text-vscode-foreground"\n  }, "This result is..."), react.createElement("div", {\n    className: "flex items-center flex-wrap gap-4 mt-2"\n  }, Feedback_options.map(function (option) {\n    return react.createElement(VSCodeButton, {\n      key: option.slug,\n      appearance: "secondary",\n      onClick: function onClick() {\n        return onRespond(option);\n      }\n    }, react.createElement("span", {\n      slot: "start"\n    }, option.icon), option.label);\n  }))) : react.createElement("p", {\n    className: "text-center mt-6 italic"\n  }, "Thanks for your feedback!"));\n};\n;// CONCATENATED MODULE: ./src/sidebar/components/Collapse.tsx\nfunction Collapse_slicedToArray(arr, i) { return Collapse_arrayWithHoles(arr) || Collapse_iterableToArrayLimit(arr, i) || Collapse_unsupportedIterableToArray(arr, i) || Collapse_nonIterableRest(); }\n\nfunction Collapse_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Collapse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Collapse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Collapse_arrayLikeToArray(o, minLen); }\n\nfunction Collapse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Collapse_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Collapse_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nfunction Collapse(_ref) {\n  var _ref$collapsed = _ref.collapsed,\n      collapsed = _ref$collapsed === void 0 ? true : _ref$collapsed,\n      children = _ref.children;\n\n  var _React$useState = react.useState(collapsed),\n      _React$useState2 = Collapse_slicedToArray(_React$useState, 2),\n      isCollapsed = _React$useState2[0],\n      setIsCollapsed = _React$useState2[1];\n\n  return react.createElement(react.Fragment, null, react.createElement("button", {\n    className: "w-full block text-left",\n    onClick: function onClick() {\n      return setIsCollapsed(!isCollapsed);\n    }\n  }, react.createElement("div", {\n    className: "flex row"\n  }, react.createElement("span", {\n    className: "flex mr-1 w-1 h-1 collapse-icon"\n  }, react.createElement("svg", {\n    className: "transition duration-300 ease-in-out transform ".concat(isCollapsed ? \'rotate-0\' : \'rotate-90\'),\n    width: "8",\n    height: "14",\n    viewBox: "0 0 8 14",\n    fill: "none",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, react.createElement("path", {\n    d: "M7.14645 7.35356L1.35355 13.1465C1.03857 13.4614 0.5 13.2383 0.5 12.7929L0.5 1.20711C0.5 0.761658 1.03857 0.538573 1.35355 0.853556L7.14645 6.64645C7.34171 6.84171 7.34171 7.15829 7.14645 7.35356Z"\n  }))), "Advanced")), react.createElement("div", {\n    className: "collapse-content ".concat(isCollapsed ? \'hidden\' : \'block\', " mt-2"),\n    "aria-expanded": isCollapsed\n  }, children));\n}\n;// CONCATENATED MODULE: ../lib/src/webviews/languages.ts\n// Some of this code is copied over from the @copilot/promptlib package so Labs has full control\n// over language support and single vs. multiline comments\n\n/**\n * Single line comment markers.\n * All these languages show up in the Translate panel\n * 1 to 1 relationship with the multiLineCommentMarkers map below\n *\n * Missing below from this list are:\n * Diff diff\n * Git\tgit-commit and git-rebase\n * JSON\tjson\n */\nconst languageCommentMarkers = {\n  abap: {\n    start: \'"\',\n    end: \'\'\n  },\n  bat: {\n    start: \'REM\',\n    end: \'\'\n  },\n  bibtex: {\n    start: \'%\',\n    end: \'\'\n  },\n  blade: {\n    start: \'#\',\n    end: \'\'\n  },\n  c: {\n    start: \'//\',\n    end: \'\'\n  },\n  clojure: {\n    start: \';\',\n    end: \'\'\n  },\n  cobol: {\n    start: \'*\',\n    end: \'\'\n  },\n  coffeescript: {\n    start: \'//\',\n    end: \'\'\n  },\n  cpp: {\n    start: \'//\',\n    end: \'\'\n  },\n  csharp: {\n    start: \'//\',\n    end: \'\'\n  },\n  css: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  dart: {\n    start: \'//\',\n    end: \'\'\n  },\n  dockerfile: {\n    start: \'#\',\n    end: \'\'\n  },\n  elixir: {\n    start: \'#\',\n    end: \'\'\n  },\n  erb: {\n    start: \'<%#\',\n    end: \'%>\'\n  },\n  fortran: {\n    start: \'C\',\n    end: \'\'\n  },\n  fsharp: {\n    start: \'//\',\n    end: \'\'\n  },\n  go: {\n    start: \'//\',\n    end: \'\'\n  },\n  groovy: {\n    start: \'//\',\n    end: \'\'\n  },\n  haml: {\n    start: \'-#\',\n    end: \'\'\n  },\n  handlebars: {\n    start: \'{{!\',\n    end: \'}}\'\n  },\n  html: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  ini: {\n    start: \';\',\n    end: \'\'\n  },\n  java: {\n    start: \'//\',\n    end: \'\'\n  },\n  javascript: {\n    start: \'//\',\n    end: \'\'\n  },\n  javascriptreact: {\n    start: \'//\',\n    end: \'\'\n  },\n  jsonc: {\n    start: \'//\',\n    end: \'\'\n  },\n  jsx: {\n    start: \'//\',\n    end: \'\'\n  },\n  julia: {\n    start: \'#\',\n    end: \'\'\n  },\n  kotlin: {\n    start: \'//\',\n    end: \'\'\n  },\n  latex: {\n    start: \'%\',\n    end: \'\'\n  },\n  less: {\n    start: \'//\',\n    end: \'\'\n  },\n  lua: {\n    start: \'--\',\n    end: \'\'\n  },\n  makefile: {\n    start: \'#\',\n    end: \'\'\n  },\n  markdown: {\n    start: \'[]: #\',\n    end: \'\'\n  },\n  mdx: {\n    start: \'//\',\n    end: \'\'\n  },\n  \'objective-c\': {\n    start: \'//\',\n    end: \'\'\n  },\n  \'objective-cpp\': {\n    start: \'//\',\n    end: \'\'\n  },\n  perl: {\n    start: \'#\',\n    end: \'\'\n  },\n  php: {\n    start: \'//\',\n    end: \'\'\n  },\n  // important to keep in for highlightjs and as fallback\n  plaintext: {\n    start: \'\',\n    end: \'\'\n  },\n  pug: {\n    start: \'//\',\n    end: \'\'\n  },\n  python: {\n    start: \'#\',\n    end: \'\'\n  },\n  powershell: {\n    start: \'\',\n    end: \'#\'\n  },\n  r: {\n    start: \'#\',\n    end: \'\'\n  },\n  razor: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  ruby: {\n    start: \'#\',\n    end: \'\'\n  },\n  rust: {\n    start: \'//\',\n    end: \'\'\n  },\n  sass: {\n    start: \'//\',\n    end: \'\'\n  },\n  scss: {\n    start: \'//\',\n    end: \'\'\n  },\n  shaderlab: {\n    start: \'//\',\n    end: \'\'\n  },\n  shellscript: {\n    start: \'#\',\n    end: \'\'\n  },\n  slim: {\n    start: \'/\',\n    end: \'\'\n  },\n  solidity: {\n    start: \'//\',\n    end: \'\'\n  },\n  sql: {\n    start: \'--\',\n    end: \'\'\n  },\n  stylus: {\n    start: \'//\',\n    end: \'\'\n  },\n  svelte: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  swift: {\n    start: \'//\',\n    end: \'\'\n  },\n  terraform: {\n    start: \'#\',\n    end: \'\'\n  },\n  tex: {\n    start: \'%\',\n    end: \'\'\n  },\n  typescript: {\n    start: \'//\',\n    end: \'\'\n  },\n  typescriptreact: {\n    start: \'//\',\n    end: \'\'\n  },\n  vb: {\n    start: "\'",\n    end: \'\'\n  },\n  \'vue-html\': {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  vue: {\n    start: \'//\',\n    end: \'\'\n  },\n  xml: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  xsl: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  yaml: {\n    start: \'#\',\n    end: \'\'\n  },\n  zig: {\n    start: \'//\',\n    end: \'\'\n  } // added uniquely in labs\n\n};\n/**\n * Multiline comment markers.\n * Used for the PromptEditor component in the front-end webview\n * This component might end up going away with the use of the Edit models\n * Please note some languages like Fortran and Zig don\'t *really* have\n * multi-line comment support\n *\n * Missing below from this list are:\n * Diff diff\n * Git\tgit-commit and git-rebase\n * JSON\tjson\n */\n\nconst multiLineLanguageCommentMarkers = {\n  abap: {\n    start: \'*\',\n    end: \'*\'\n  },\n  bat: {\n    start: \'::\',\n    end: \'::\'\n  },\n  bibtex: {\n    start: \'%\',\n    end: \'%\'\n  },\n  blade: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  c: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  clojure: {\n    start: \';;\',\n    end: \';;\'\n  },\n  cobol: {\n    start: \'*\',\n    end: \'*\'\n  },\n  coffeescript: {\n    start: \'###\',\n    end: \'###\'\n  },\n  cpp: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  csharp: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  css: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  dart: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  dockerfile: {\n    start: \'#\',\n    end: \'#\'\n  },\n  elixir: {\n    start: \'"""\',\n    end: \'"""\'\n  },\n  erb: {\n    start: \'<% if false %>\',\n    end: \'<% end %>\'\n  },\n  fortran: {\n    start: \'C\',\n    end: \'C\'\n  },\n  fsharp: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  go: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  groovy: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  haml: {\n    start: \'-#\',\n    end: \'#-\'\n  },\n  handlebars: {\n    start: \'{{!\',\n    end: \'}}\'\n  },\n  html: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  ini: {\n    start: \';\',\n    end: \';\'\n  },\n  java: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  javascript: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  javascriptreact: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  jsonc: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  jsx: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  julia: {\n    start: \'#=\',\n    end: \'=#\'\n  },\n  kotlin: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  latex: {\n    start: \'%\',\n    end: \'%\'\n  },\n  less: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  lua: {\n    start: \'--\',\n    end: \'--\'\n  },\n  makefile: {\n    start: \'#\',\n    end: \'#\'\n  },\n  markdown: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  mdx: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  \'objective-c\': {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  \'objective-cpp\': {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  perl: {\n    start: \'#\',\n    end: \'#\'\n  },\n  php: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  // important to keep in for highlightjs and as fallback\n  plaintext: {\n    start: \'\',\n    end: \'\'\n  },\n  pug: {\n    start: \'-#\',\n    end: \'#-\'\n  },\n  python: {\n    start: \'"""\',\n    end: \'"""\'\n  },\n  powershell: {\n    start: \'<#\',\n    end: \'#>\'\n  },\n  r: {\n    start: \'#\',\n    end: \'#\'\n  },\n  razor: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  ruby: {\n    start: \'#\',\n    end: \'#\'\n  },\n  rust: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  sass: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  scss: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  shaderlab: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  shellscript: {\n    start: \'#\',\n    end: \'#\'\n  },\n  slim: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  solidity: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  sql: {\n    start: \'--\',\n    end: \'--\'\n  },\n  stylus: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  svelte: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  swift: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  terraform: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  tex: {\n    start: \'%\',\n    end: \'%\'\n  },\n  typescript: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  typescriptreact: {\n    start: \'/*\',\n    end: \'*/\'\n  },\n  vb: {\n    start: \'\',\n    end: \'\'\n  },\n  \'vue-html\': {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  vue: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  xml: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  xsl: {\n    start: \'\x3c!--\',\n    end: \'--\x3e\'\n  },\n  yaml: {\n    start: \'#\',\n    end: \'#\'\n  },\n  zig: {\n    start: \'//\',\n    end: \'//\'\n  } // added uniquely in labs\n\n};\n/**\n * Comment a single line of text in a given language.\n * E.g. for python, turn "hello there" into "# hello there"\n * Originally from the promptlib library.\n */\n\nfunction comment(text, languageId) {\n  const markers = languageCommentMarkers[languageId];\n\n  if (markers) {\n    const end = markers.end == \'\' ? \'\' : \' \' + markers.end;\n    return `${markers.start} ${text}${end}`;\n  }\n\n  return \'\';\n}\n/**\n * A mapping of all the languages that are in our single or multi-line comments list\n * above that do NOT have a matching Highlight JS identifier.\n * We use Highlight JS to return highlighted HTML to webview so need to match ALL\n * languages we\'re supporting\n * Supported language are here: https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md\n */\n\nconst languageToHighlightJSMap = {\n  abap: \'plaintext\',\n  bibtex: \'plaintext\',\n  blade: \'php\',\n  cobol: \'plaintext\',\n  erb: \'ruby\',\n  \'git-commit\': \'plaintext\',\n  \'git-rebase\': \'plaintext\',\n  javascriptreact: \'jsx\',\n  jsonc: \'json\',\n  latex: \'tex\',\n  mdx: \'markdown\',\n  \'objective-c\': \'objectivec\',\n  \'objective-cpp\': \'objectivec\',\n  perl6: \'perl\',\n  jade: \'plaintext\',\n  pug: \'plaintext\',\n  razor: \'plaintext\',\n  sass: \'scss\',\n  shaderlab: \'plaintext\',\n  shellscript: \'shell\',\n  slim: \'plaintext\',\n  solidity: \'plaintext\',\n  svelte: \'plaintext\',\n  terraform: \'plaintext\',\n  typescriptreact: \'typescript\',\n  \'vue-html\': \'html\',\n  vue: \'javascript\',\n  zig: \'c\'\n};\n/* To support more languages correctly within explain and translate\n * we extend the language IDs supported default by from VSCode\n * https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers\n */\n\nconst fileExtensionToLanguageMap = {\n  blade: \'blade\',\n  dart: \'dart\',\n  elixir: \'elixir\',\n  erb: \'erb\',\n  f: \'fortran\',\n  for: \'fortran\',\n  f90: \'fortran\',\n  f95: \'fortran\',\n  jsx: \'jsx\',\n  jl: \'julia\',\n  kt: \'kotlin\',\n  kts: \'kotlin\',\n  ktm: \'kotlin\',\n  mdx: \'mdx\',\n  solidity: \'solidity\',\n  sol: \'solidity\',\n  svelte: \'svelte\',\n  terraform: \'terraform\',\n  tf: \'terraform\',\n  hcl: \'terraform\',\n  cbl: \'cobol\',\n  cob: \'cobol\',\n  cpy: \'cobol\',\n  zig: \'zig\'\n};\n;// CONCATENATED MODULE: ./src/sidebar/components/PromptEditor.tsx\nfunction PromptEditor_slicedToArray(arr, i) { return PromptEditor_arrayWithHoles(arr) || PromptEditor_iterableToArrayLimit(arr, i) || PromptEditor_unsupportedIterableToArray(arr, i) || PromptEditor_nonIterableRest(); }\n\nfunction PromptEditor_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction PromptEditor_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PromptEditor_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PromptEditor_arrayLikeToArray(o, minLen); }\n\nfunction PromptEditor_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction PromptEditor_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction PromptEditor_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar PromptEditor = function PromptEditor() {\n  var _useStore = useStore(),\n      prompt = _useStore.prompt,\n      language = _useStore.language,\n      stop = _useStore.stop,\n      update = _useStore.update;\n\n  var _useState = (0,react.useState)(null),\n      _useState2 = PromptEditor_slicedToArray(_useState, 2),\n      selectedPresetName = _useState2[0],\n      setSelectedPresetName = _useState2[1];\n\n  var _useState3 = (0,react.useState)(stop.join(\', \')),\n      _useState4 = PromptEditor_slicedToArray(_useState3, 2),\n      stopInputValue = _useState4[0],\n      setStopInputValue = _useState4[1];\n\n  var _useState5 = (0,react.useState)(null),\n      _useState6 = PromptEditor_slicedToArray(_useState5, 2),\n      tip = _useState6[0],\n      setTip = _useState6[1]; // if we can\'t find the language in our list default to plaintext\n\n\n  var languageCommentMarkers = multiLineLanguageCommentMarkers[language] || multiLineLanguageCommentMarkers.plaintext;\n  var languageSpecificPresets = promptPresets.map(function (preset) {\n    return Object.assign(Object.assign({}, preset), {\n      text: preset.text.replace(\'{commentStart}\', languageCommentMarkers.start || \'\').replace(\'{language}\', language),\n      stop: preset.stop.map(function (stop) {\n        return stop.replace(\'{commentEnd}\', languageCommentMarkers.end || \'\');\n      })\n    });\n  });\n\n  var setPrompt = function setPrompt(newPrompt) {\n    update(function (draft) {\n      draft.prompt = newPrompt;\n    });\n  };\n\n  var updatePreset = function updatePreset() {\n    var matchingPreset = languageSpecificPresets.find(function (preset) {\n      return preset.text === prompt && preset.stop.join(\', \') === stop.join(\', \');\n    });\n    setSelectedPresetName((matchingPreset === null || matchingPreset === void 0 ? void 0 : matchingPreset.name) || \'\');\n    setTip((matchingPreset === null || matchingPreset === void 0 ? void 0 : matchingPreset.tip) || null);\n  };\n\n  (0,react.useEffect)(function () {\n    updatePreset();\n  }, [stop, prompt, language]);\n  (0,react.useEffect)(function () {\n    setStop(stopInputValue);\n  }, [stopInputValue]);\n\n  var setStop = function setStop(newStop) {\n    update(function (draft) {\n      draft.stop = newStop.split(\',\').map(function (s) {\n        return s.trim();\n      }).filter(Boolean);\n    });\n  };\n\n  var updateToUsePreset = function updateToUsePreset(presetName) {\n    var preset = languageSpecificPresets.find(function (p) {\n      return p.name === presetName;\n    });\n\n    if (!preset) {\n      return;\n    } else {\n      var stopString = preset.stop.join(\', \');\n      setStop(stopString);\n      setStopInputValue(stopString);\n      setPrompt(preset.text);\n    }\n  }; // set very first preset\n\n\n  (0,react.useEffect)(function () {\n    updateToUsePreset(\'Explain code\');\n  }, []);\n  (0,react.useEffect)(function () {\n    if (selectedPresetName) {\n      updateToUsePreset(selectedPresetName);\n    }\n  }, [language]);\n  return react.createElement("div", {\n    className: "space-y-4 text-xs"\n  }, react.createElement(VSCodeDropdown, {\n    className: "w-full",\n    value: selectedPresetName || \'\',\n    onInput: function onInput(e) {\n      var _a, _b; // clear the model response when a new preset selected\n\n\n      useStore.setState({\n        modelResponse: null,\n        error: null\n      }); // This event isn\'t typed correctly due to an upstream issue in the webview-ui-toolkit.\n      // @ts-ignore\n\n      var selectedPreset = languageSpecificPresets.find(function (preset) {\n        return preset.name === e.target.value;\n      });\n      setPrompt(selectedPreset === null || selectedPreset === void 0 ? void 0 : selectedPreset.text);\n      setStop((_a = selectedPreset === null || selectedPreset === void 0 ? void 0 : selectedPreset.stop) === null || _a === void 0 ? void 0 : _a.join(\', \'));\n      setStopInputValue((_b = selectedPreset === null || selectedPreset === void 0 ? void 0 : selectedPreset.stop) === null || _b === void 0 ? void 0 : _b.join(\', \'));\n    }\n  }, react.createElement(VSCodeOption, {\n    value: ""\n  }, "Custom"), languageSpecificPresets.map(function (preset) {\n    return react.createElement(VSCodeOption, {\n      key: preset.name,\n      value: preset.name\n    }, preset.name);\n  })), react.createElement(Collapse, null, react.createElement("div", {\n    className: "space-y-2"\n  }, react.createElement(VSCodeTextArea, {\n    className: "w-full",\n    rows: 4,\n    value: prompt,\n    onInput: function onInput(e) {\n      setPrompt(e.target.value);\n    }\n  }, "Prompt"), react.createElement(VSCodeTextField, {\n    value: stopInputValue,\n    onChange: function onChange(e) {\n      setStopInputValue(e.target.value);\n    },\n    type: "text",\n    className: "w-full"\n  }, "Stops:"), tip ? react.createElement("p", null, "Tip: ", tip) : null)));\n};\nvar promptPresets = [{\n  name: \'Explain code\',\n  text: \'{commentStart} Here is the explanation for the code above:\\n1.\',\n  stop: [\'{commentEnd}\']\n}, {\n  name: \'Code does following\',\n  text: \'{commentStart} The code above does the following:\\n1.\',\n  stop: [\'{commentEnd}\']\n}, {\n  name: \'Code does following (English)\',\n  text: \'{commentStart} The code above does the following, explained in English:\\n1.\',\n  stop: [\'{commentEnd}\']\n}, {\n  name: \'Show example code\',\n  text: \'{commentStart} This is an example for calling this function:\',\n  stop: [\'{commentEnd}\']\n}];\n;// CONCATENATED MODULE: ./src/sidebar/components/Logo.tsx\n\nvar Logo = function Logo() {\n  return react.createElement("svg", {\n    height: "1.3em",\n    viewBox: "0 0 63 59",\n    xmlns: "http://www.w3.org/2000/svg",\n    fill: "currentColor"\n  }, react.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M47.0015 30.2705C46.9355 29.0089 45.911 28.5137 44.8451 28.1635C43.7213 28.8686 42.349 29.146 41.0359 29.146C39.6395 29.146 37.0351 28.8123 34.8694 26.6497C34.3226 26.106 33.9488 25.2533 33.6955 24.308C33.0385 24.2411 32.3786 24.2061 31.7183 24.2029C31.1313 24.2029 30.4547 24.2369 29.7349 24.308C29.4815 25.2533 29.1077 26.106 28.5609 26.6497C26.3983 28.8123 23.7909 29.146 22.3945 29.146C21.0811 29.146 19.7053 28.8717 18.5821 28.1635C17.5197 28.5126 16.4995 29.0161 16.4319 30.2705C16.262 33.8318 16.3251 37.388 16.2713 40.9505C16.2761 41.6416 16.6926 42.2835 17.3217 42.5694C22.4346 44.8988 27.2695 46.0728 31.7183 46.0728C36.1608 46.0728 40.9957 44.8988 46.1056 42.5694C46.7347 42.2835 47.1512 41.6416 47.156 40.9505C47.2173 37.3942 47.1679 33.8234 46.9984 30.2705H47.0015ZM17.3804 25.312C18.2145 26.1462 19.7901 26.7022 21.4893 26.7022C22.7868 26.7022 25.2583 26.4242 27.2973 24.3543C28.1933 23.4893 28.7494 21.3267 28.6876 19.1332C28.6258 17.3723 28.1315 15.9202 27.39 15.3024C26.5868 14.5918 24.764 14.2829 22.725 14.4682C20.5625 14.6845 18.7397 15.3951 17.8129 16.3837C15.8048 18.5771 16.2373 24.138 17.3804 25.312ZM29.9851 19.9056C30.0469 20.2454 30.0778 20.6161 30.1087 21.0178C30.1087 21.2958 30.1087 21.5738 30.0778 21.8828C30.6957 21.821 31.2209 21.821 31.7152 21.821C32.2095 21.821 32.7347 21.821 33.3526 21.8828C33.3217 21.5738 33.3217 21.2958 33.3217 21.0178C33.3526 20.6161 33.3834 20.2454 33.4452 19.9056C32.7965 19.8438 32.2095 19.8129 31.7152 19.8129C31.2209 19.8129 30.6339 19.8438 29.9851 19.9056ZM34.7428 19.1332C34.681 21.3267 35.2371 23.4893 36.133 24.3543C38.172 26.4242 40.6435 26.7022 41.9411 26.7022C43.6402 26.7022 45.2158 26.1462 46.05 25.312C47.1931 24.138 47.6256 18.5771 45.6175 16.3837C44.6906 15.3951 42.8679 14.6845 40.7053 14.4682C38.6663 14.2829 36.8436 14.5918 36.0403 15.3024C35.2989 15.9202 34.8046 17.3723 34.7428 19.1332ZM56.4303 32.7884V38.3276C56.429 39.0429 56.0744 39.7402 55.4973 40.1627C48.6847 45.1502 40.2785 49.1622 31.7152 49.1622C22.2412 49.1622 12.7559 43.7029 7.933 40.1627C7.35592 39.7402 7.0014 39.0429 7 38.3276V32.7884C7 32.0593 7.2317 31.3549 7.66113 30.7679L9.16567 28.732C9.97145 27.6396 11.1698 27.351 12.4466 27.351C12.9286 21.8519 14.0685 17.9284 16.7934 15.0552C21.9836 9.55609 28.8729 9 31.7152 9C34.5574 9 41.4468 9.55609 46.637 15.0552C49.3587 17.9284 50.5018 21.8519 50.9837 27.351C52.2631 27.351 53.4562 27.6347 54.2616 28.732L55.7661 30.771C56.1986 31.358 56.4303 32.0593 56.4303 32.7884Z"\n  }), react.createElement("path", {\n    d: "M24.5066 34.6951C24.5066 33.5851 25.4064 32.6854 26.5163 32.6854C27.6262 32.6854 28.526 33.5851 28.526 34.6951V38.3992C28.526 39.5091 27.6262 40.4089 26.5163 40.4089C25.4064 40.4089 24.5066 39.5091 24.5066 38.3992V34.6951Z"\n  }), react.createElement("path", {\n    d: "M34.8046 34.6951C34.8046 33.5851 35.7043 32.6854 36.8143 32.6854C37.9242 32.6854 38.824 33.5851 38.824 34.6951V38.3992C38.824 39.5091 37.9242 40.4089 36.8143 40.4089C35.7043 40.4089 34.8046 39.5091 34.8046 38.3992V34.6951Z"\n  }));\n};\n;// CONCATENATED MODULE: ./src/sidebar/components/ask-copilot-button.tsx\n\n\n\nfunction AskCopilotButton(props) {\n  var onClick = props.onClick,\n      disabled = props.disabled;\n  return react.createElement(VSCodeButton, {\n    className: "w-full",\n    onClick: onClick,\n    disabled: disabled\n  }, react.createElement("span", {\n    slot: "start"\n  }, react.createElement(Logo, null)), "Ask Copilot");\n}\n;// CONCATENATED MODULE: ./src/sidebar/PanelExplain.tsx\nfunction PanelExplain_slicedToArray(arr, i) { return PanelExplain_arrayWithHoles(arr) || PanelExplain_iterableToArrayLimit(arr, i) || PanelExplain_unsupportedIterableToArray(arr, i) || PanelExplain_nonIterableRest(); }\n\nfunction PanelExplain_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction PanelExplain_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PanelExplain_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PanelExplain_arrayLikeToArray(o, minLen); }\n\nfunction PanelExplain_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction PanelExplain_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction PanelExplain_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\nvar PanelExplain = function PanelExplain() {\n  var _useStore = useStore(),\n      selectedText = _useStore.selectedText,\n      highlightText = _useStore.highlightText,\n      prompt = _useStore.prompt,\n      language = _useStore.language,\n      stop = _useStore.stop,\n      modelResponse = _useStore.modelResponse,\n      error = _useStore.error,\n      isAnalyzing = _useStore.isAnalyzing;\n\n  var _React$useState = react.useState(0),\n      _React$useState2 = PanelExplain_slicedToArray(_React$useState, 2),\n      responseIteration = _React$useState2[0],\n      setResponseIteration = _React$useState2[1];\n\n  var onHandleClick = function onHandleClick() {\n    useStore.setState({\n      isAnalyzing: true,\n      modelResponse: null,\n      error: null\n    });\n    analyzeCode();\n    setResponseIteration(function (iteration) {\n      return iteration + 1;\n    });\n  };\n\n  var analyzeCode = function analyzeCode() {\n    var message = {\n      command: \'explain\',\n      payload: {\n        prompt: "// Language: ".concat(language, "\\n").concat(selectedText, "\\n\\n").concat(prompt),\n        stop: stop,\n        code: selectedText\n      }\n    };\n    VSCodeAPI.postWebViewMessage(message);\n  }; // when selected text changes, clear the answer\n\n\n  (0,react.useEffect)(function () {\n    useStore.setState({\n      modelResponse: null,\n      error: null\n    });\n  }, [selectedText]);\n\n  var renderResult = function renderResult() {\n    var fullPrompt = "".concat(prompt, " ").concat(modelResponse, " ").concat(stop[0] || \'\');\n    return react.createElement(ResponseText, {\n      text: fullPrompt\n    });\n  };\n\n  return react.createElement("div", {\n    className: "relative text-sm outline-none pt-2 pb-16 space-y-4",\n    tabIndex: 0\n  }, selectedText ? react.createElement(CodeSyntax, {\n    htmlText: highlightText\n  }) : react.createElement("p", {\n    className: "italic"\n  }, "Highlight a block of code that you would like to explore."), selectedText ? react.createElement(react.Fragment, null, react.createElement(PromptEditor, null), react.createElement("div", {\n    className: "relative"\n  }, react.createElement(AskCopilotButton, {\n    disabled: isAnalyzing,\n    onClick: onHandleClick\n  }), isAnalyzing ? react.createElement("div", {\n    className: "flex justify-center my-8"\n  }, react.createElement(VSCodeProgressRing, null)) : null)) : null, modelResponse !== null ? react.createElement("div", null, renderResult(), react.createElement(Feedback, {\n    responseIteration: responseIteration\n  })) : null, error && react.createElement(ResponseText, {\n    text: error,\n    isError: true\n  }));\n};\n\n/* harmony default export */ const sidebar_PanelExplain = (PanelExplain);\n;// CONCATENATED MODULE: ./src/sidebar/PanelTranslate.tsx\nfunction PanelTranslate_slicedToArray(arr, i) { return PanelTranslate_arrayWithHoles(arr) || PanelTranslate_iterableToArrayLimit(arr, i) || PanelTranslate_unsupportedIterableToArray(arr, i) || PanelTranslate_nonIterableRest(); }\n\nfunction PanelTranslate_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction PanelTranslate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PanelTranslate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PanelTranslate_arrayLikeToArray(o, minLen); }\n\nfunction PanelTranslate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction PanelTranslate_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction PanelTranslate_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n // utility function to remove languages we deem don\'t make sense to translate to\n\nvar getLanguages = function getLanguages() {\n  var languages = Object.assign({}, languageCommentMarkers); // the following languages don\'t really make sense to translate to\n\n  delete languages[\'plaintext\'];\n  return languages;\n};\n\nvar languages = getLanguages();\n\nvar PanelTranslate = function PanelTranslate() {\n  var _useStore = useStore(),\n      selectedText = _useStore.selectedText,\n      highlightText = _useStore.highlightText,\n      language = _useStore.language,\n      modelResponse = _useStore.modelResponse,\n      error = _useStore.error,\n      isAnalyzing = _useStore.isAnalyzing;\n\n  var _React$useState = react.useState(0),\n      _React$useState2 = PanelTranslate_slicedToArray(_React$useState, 2),\n      responseIteration = _React$useState2[0],\n      setResponseIteration = _React$useState2[1]; // default value in the dropdown when component first instantiated\n\n\n  var _React$useState3 = react.useState(\'python\'),\n      _React$useState4 = PanelTranslate_slicedToArray(_React$useState3, 2),\n      outputLanguage = _React$useState4[0],\n      setOutputLanguage = _React$useState4[1];\n\n  var handleOnChange = function handleOnChange(newValue) {\n    setOutputLanguage(newValue);\n  };\n\n  var onHandleClick = function onHandleClick() {\n    useStore.setState({\n      isAnalyzing: true,\n      modelResponse: null,\n      error: null\n    });\n    analyzeCode();\n    setResponseIteration(function (iteration) {\n      return iteration + 1;\n    });\n  };\n\n  var analyzeCode = function analyzeCode() {\n    var message = {\n      command: \'translate\',\n      payload: {\n        code: selectedText,\n        inputLanguage: language,\n        outputLanguage: outputLanguage\n      }\n    };\n    VSCodeAPI.postWebViewMessage(message);\n  }; // when selected text changes, clear the answer\n\n\n  (0,react.useEffect)(function () {\n    useStore.setState({\n      modelResponse: null,\n      error: null\n    });\n  }, [selectedText]);\n  return react.createElement("div", {\n    className: "relative text-sm outline-none pt-2 pb-16 space-y-4",\n    tabIndex: 0\n  }, selectedText ? react.createElement(CodeSyntax, {\n    htmlText: highlightText\n  }) : react.createElement("p", {\n    className: "italic"\n  }, "Highlight a block of code that you would like translate into another language."), selectedText ? react.createElement(react.Fragment, null, react.createElement("div", null, react.createElement("p", {\n    className: "text-xs mb-1"\n  }, "Translate code into"), react.createElement(VSCodeDropdown, {\n    onInput: function onInput(e) {\n      // @ts-ignore\n      handleOnChange(e.target.value);\n    },\n    className: "w-full",\n    value: outputLanguage\n  }, Object.keys(languages).filter(function (key) {\n    return key !== language;\n  }).map(function (lang) {\n    return react.createElement(VSCodeOption, {\n      key: lang,\n      value: lang\n    }, lang);\n  }))), react.createElement("div", {\n    className: "relative"\n  }, react.createElement(AskCopilotButton, {\n    disabled: isAnalyzing,\n    onClick: onHandleClick\n  }), isAnalyzing ? react.createElement("div", {\n    className: "flex justify-center my-8"\n  }, react.createElement(VSCodeProgressRing, null)) : null)) : null, modelResponse !== null ? react.createElement("div", {\n    className: "space-y-4"\n  }, react.createElement(CodeSyntax, {\n    htmlText: modelResponse\n  }), react.createElement(Feedback, {\n    responseIteration: responseIteration\n  })) : null, error && react.createElement(ResponseText, {\n    text: error,\n    isError: true\n  }));\n};\n\n/* harmony default export */ const sidebar_PanelTranslate = (PanelTranslate);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/sidebar/index.css\nvar sidebar = __webpack_require__(69);\n;// CONCATENATED MODULE: ./src/sidebar/index.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar sidebar_options = {};\n\nsidebar_options.styleTagTransform = (styleTagTransform_default());\nsidebar_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      sidebar_options.insert = insertBySelector_default().bind(null, "head");\n    \nsidebar_options.domAPI = (styleDomAPI_default());\nsidebar_options.insertStyleElement = (insertStyleElement_default());\n\nvar sidebar_update = injectStylesIntoStyleTag_default()(sidebar/* default */.Z, sidebar_options);\n\n\n\n\n       /* harmony default export */ const src_sidebar = (sidebar/* default */.Z && sidebar/* default.locals */.Z.locals ? sidebar/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/sidebar/index.tsx\n\n\n\n\n\n\nvar root = document.getElementById(\'root\');\nwindow.addEventListener(\'message\', function (e) {\n  var message = e.data;\n\n  if (message.command === \'setLoadingState\') {\n    useStore.setState({\n      isLoading: message.isLoading\n    });\n  } else if (message.command === \'setStartingLine\') {\n    useStore.setState({\n      startingLine: message.startingLine\n    });\n  } else if (message.command === \'setSelectedText\') {\n    useStore.setState({\n      isLoading: false,\n      selectedText: message.selectedText,\n      highlightText: message.highlightText,\n      language: message.language\n    });\n  } else if (message.command === \'setModelResponse\') {\n    useStore.setState({\n      isAnalyzing: false,\n      modelResponse: message.response.trim() // trim whitespace\n\n    });\n  } else if (message.command === \'setError\') {\n    useStore.setState({\n      isAnalyzing: false,\n      error: message.error\n    });\n  }\n});\nvar panels = {\n  explain: react.createElement(sidebar_PanelExplain, null),\n  translate: react.createElement(sidebar_PanelTranslate, null)\n};\nreact_dom.render(react.createElement(react.StrictMode, null, panels[window.type]), root);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQjtBQUM1RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7OztBQzlNRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxS2dDO0FBQ007QUFDZ0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDTyxtQkFBbUIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHNCQUFzQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixLQUFLO0FBQ2xDLCtCQUErQixLQUFLO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsYUFBYTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBUyxtQkFBUTtBQUN4QiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLHFCQUFxQixZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTzs7O0FDaFh5QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU0sNEJBQWE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQWE7QUFDYixRQUFRLDhCQUE4QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsaUNBQWlDLDRCQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDRCQUFhO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx1Q0FBdUMsNEJBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxhQUFhO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxXQUFXO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGNBQWM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1F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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGdCQUFnQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsY0FBYztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELElBQUk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixVQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDLGtEQUFrRCxtQ0FBbUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsUUFBUTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFFBQVE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFFBQVE7QUFDdkQ7QUFDQTtB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LFFBQVEsc0JBQXNCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLElBQUksVUFBVTtBQUNkO0FBQ0EsU0FBUyxtQkFBTTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLCtCQUErQjtBQUMvRDtBQUNBO0FBQ087QUFDUCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FB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QTtBQUNPLDBCQUEwQjtBQUNqQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTywyQkFBMkI7QUFDbEM7QUFDQTtBQUNBO0FBQ08sNEJBQTRCO0FBQ25DO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQjtBQUNsQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPLGlDQUFpQztBQUN4QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdlgrRjtBQUN0QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLFFBQVE7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFVBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUksR0FBRyxpQkFBaUI7QUFDNUIsSUFBSSxJQUFJLEdBQUcsc0NBQXNDO0FBQ2pELElBQUksSUFBSSxHQUFHLDRCQUE0QjtBQUN2QyxJQUFJLElBQUk7QUFDUixJQUFJLElBQUksR0FBRyxpQkFBaUI7QUFDNUIsSUFBSSxVQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUJBQWlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGtCQUFrQjtBQUNqRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakUsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0FBaUIvQyxJQUFqQixFQUZELENBRTBCOztBQUYxQixLQUFsQjtBQUlILEdBTE0sTUFLQSxJQUFJL0ssT0FBTyxDQUFDb0MsT0FBUixLQUFvQixVQUF4QixFQUFvQztBQUN2Q2xELElBQUFBLGlCQUFBLENBQWtCO0FBQ2RRLGlCQUFXLEVBQUUsS0FEQztBQUVkRSxXQUFLLEVBQUVJLE9BQU8sQ0FBQ0o7QUFGRCxLQUFsQjtBQUlIO0FBQ0osQ0F4QkQ7QUEwQkEsSUFBTW1PLE1BQU0sR0FBd0M7QUFDaERDLFNBQU8sRUFBRXhOLG1CQUFBQSxDQUFDK0wsb0JBQUQsRUFBYSxJQUFiLENBRHVDO0FBRWhEMEIsV0FBUyxFQUFFek4sbUJBQUFBLENBQUN5TSxzQkFBRCxFQUFlLElBQWY7QUFGcUMsQ0FBcEQ7QUFLQVEsZ0JBQUEsQ0FBZ0JqTixtQkFBQUEsQ0FBQ0EsZ0JBQUQsRUFBaUIsSUFBakIsRUFBbUJ1TixNQUFNLENBQUMzTixNQUFNLENBQUM0TCxJQUFSLENBQXpCLENBQWhCLEVBQTRFMEIsSUFBNUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20uanM/YWRmYSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vaW5kZXguanM/OTRhNiIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZWJhci9zdG9yZS50cz8xYTUzIiwid2VicGFjazovLy8uL3NyYy9zaWRlYmFyL1ZTQ29kZUFQSS50c3g/ZWU1MCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL3N0eWxlcy92czIwMTUuY3NzPzY3ZjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NpZGViYXIvY29tcG9uZW50cy9Db2RlU3ludGF4LnRzeD84NjFiIiwid2VicGFjazovLy8uL3NyYy9zaWRlYmFyL2NvbXBvbmVudHMvUmVzcG9uc2VUZXh0LnRzeD9lOTY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pY29ucy9saWIvZXNtL2ljb25zTWFuaWZlc3QuanM/MjZjZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaWNvbnMvbGliL2VzbS9pY29uQ29udGV4dC5qcz9kZWFiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pY29ucy9saWIvZXNtL2ljb25CYXNlLmpzPzY4MjMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zL2xpYi9lc20vaW5kZXguanM/MmU3YyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaWNvbnMvdnNjL2luZGV4LmVzbS5qcz84NzU5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZWxlbWVudC9kaXN0L2VzbS9wbGF0Zm9ybS5qcz81MGNhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZWxlbWVudC9kaXN0L2VzbS9kb20uanM/YmFlNiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vb2JzZXJ2YXRpb24vbm90aWZpZXIuanM/ZWJiMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vb2JzZXJ2YXRpb24vb2JzZXJ2YWJsZS5qcz8wOGZlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZWxlbWVudC9kaXN0L2VzbS9zdHlsZXMvZWxlbWVudC1zdHlsZXMuanM/NmZjMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vY29tcG9uZW50cy9hdHRyaWJ1dGVzLmpzP2E0ZDQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL2NvbXBvbmVudHMvZmFzdC1kZWZpbml0aW9ucy5qcz9jZTI1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanM/OWFiNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vY29tcG9uZW50cy9jb250cm9sbGVyLmpzPzk4ZGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL2NvbXBvbmVudHMvZmFzdC1lbGVtZW50LmpzP2ZjYjUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2RpL2RpLmpzPzZmNGQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2Rlc2lnbi1zeXN0ZW0vY29tcG9uZW50LXByZXNlbnRhdGlvbi5qcz80MTc4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9mb3VuZGF0aW9uLWVsZW1lbnQvZm91bmRhdGlvbi1lbGVtZW50LmpzPzhmMzIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1yZWFjdC13cmFwcGVyL2Rpc3QvZXNtL2luZGV4LmpzP2U3YTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2JhZGdlL2JhZGdlLmpzPzQxYzMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvaHRtbC1kaXJlY3RpdmUuanM/MzFiYSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vdGVtcGxhdGluZy9iaW5kaW5nLmpzPzYzNWIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvY29tcGlsZXIuanM/MDQzMCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vdGVtcGxhdGluZy92aWV3LmpzPzgyZTUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvdGVtcGxhdGUuanM/NzVhNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vYmFkZ2UvYmFkZ2UudGVtcGxhdGUuanM/ZGZmNiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vc3R5bGVzL2Nzcy1kaXJlY3RpdmUuanM/ODY2NSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vc3R5bGVzL2Nzcy5qcz80NmZhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS91dGlsaXRpZXMvc3R5bGUvZGlzcGxheS5qcz9mNzQyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS91dGlsaXRpZXMvY29tcG9zZWQtcGFyZW50LmpzPzlkOTciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3V0aWxpdGllcy9jb21wb3NlZC1jb250YWlucy5qcz80OGU3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9kZXNpZ24tdG9rZW4vY3VzdG9tLXByb3BlcnR5LW1hbmFnZXIuanM/YTg3OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGVzaWduLXRva2VuL2Rlc2lnbi10b2tlbi5qcz9jZjYzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3V0aWxpdGllcy90aGVtZS9hcHBseVRoZW1lLmpzPzcwMDMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvdXRpbGl0aWVzL2Rlc2lnbi10b2tlbnMvY3JlYXRlLmpzPzRmNGUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvZGVzaWduLXRva2Vucy5qcz9jYzMxIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2JhZGdlL2JhZGdlLnN0eWxlcy5qcz82MGJkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2JhZGdlL2luZGV4LmpzPzhlZjAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3BhdHRlcm5zL2FyaWEtZ2xvYmFsLmpzPzY5MDkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvcmVmLmpzP2ZiNzMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3BhdHRlcm5zL3N0YXJ0LWVuZC5qcz9kZWMzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS91dGlsaXRpZXMvYXBwbHktbWl4aW5zLmpzPzQ3NDYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3Qva2V5LWNvZGVzLmpzP2Y4ZTciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2Zvcm0tYXNzb2NpYXRlZC9mb3JtLWFzc29jaWF0ZWQuanM/M2ExMyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vYnV0dG9uL2J1dHRvbi5mb3JtLWFzc29jaWF0ZWQuanM/MjIyNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vYnV0dG9uL2J1dHRvbi5qcz8zYmQ0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZWxlbWVudC9kaXN0L2VzbS90ZW1wbGF0aW5nL25vZGUtb2JzZXJ2YXRpb24uanM/OGY1NCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vdGVtcGxhdGluZy9zbG90dGVkLmpzPzc5Y2UiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2J1dHRvbi9idXR0b24udGVtcGxhdGUuanM/Yzg5ZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhlbnYtZXM2L2Rpc3QvY2FuLXVzZS1kb20uanM/NWY5NyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXMvZGlzdC9kb20uanM/YmU4ZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vdXRpbGl0aWVzL3N0eWxlL2ZvY3VzLmpzP2EzYTMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3V0aWxpdGllcy9zdHlsZS9kaXNhYmxlZC5qcz84ZjFmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2J1dHRvbi9idXR0b24uc3R5bGVzLmpzPzZiYWEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvYnV0dG9uL2luZGV4LmpzPzA4Y2EiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2NoZWNrYm94L2NoZWNrYm94LmZvcm0tYXNzb2NpYXRlZC5qcz9mZmFjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9jaGVja2JveC9jaGVja2JveC5qcz9lMjFmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9jaGVja2JveC9jaGVja2JveC50ZW1wbGF0ZS5qcz9hYzQ3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2NoZWNrYm94L2NoZWNrYm94LnN0eWxlcy5qcz83NThmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2NoZWNrYm94L2luZGV4LmpzPzA1NGQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL29ic2VydmF0aW9uL2FycmF5LWNoYW5nZS1yZWNvcmRzLmpzPzUxZDUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL29ic2VydmF0aW9uL2FycmF5LW9ic2VydmVyLmpzPzRmOGIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvcmVwZWF0LmpzP2I3YWMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3QvZXZlbnRzLmpzP2UwZjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2RhdGEtZ3JpZC9kYXRhLWdyaWQub3B0aW9ucy5qcz8xODBjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9kYXRhLWdyaWQvZGF0YS1ncmlkLmpzP2U5NzIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50L2Rpc3QvZXNtL3RlbXBsYXRpbmcvY2hpbGRyZW4uanM/MGZkMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGF0YS1ncmlkL2RhdGEtZ3JpZC1yb3cuanM/NjFhYiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGF0YS1ncmlkL2RhdGEtZ3JpZC50ZW1wbGF0ZS5qcz80MmViIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9kYXRhLWdyaWQvZGF0YS1ncmlkLWNlbGwuanM/ZmRiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGF0YS1ncmlkL2RhdGEtZ3JpZC1yb3cudGVtcGxhdGUuanM/Y2Q2OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGF0YS1ncmlkL2RhdGEtZ3JpZC1jZWxsLnRlbXBsYXRlLmpzP2Y5MTYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvZGF0YS1ncmlkL2RhdGEtZ3JpZC5zdHlsZXMuanM/OGVjOCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9kYXRhLWdyaWQvZGF0YS1ncmlkLXJvdy5zdHlsZXMuanM/Mjc4MSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9kYXRhLWdyaWQvZGF0YS1ncmlkLWNlbGwuc3R5bGVzLmpzP2E2OTEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvZGF0YS1ncmlkL2luZGV4LmpzPzM5ZmMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3QvYXJpYS5qcz9lMGYzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9kaXZpZGVyL2RpdmlkZXIub3B0aW9ucy5qcz9kYTA0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9kaXZpZGVyL2RpdmlkZXIuanM/NmM5ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGl2aWRlci9kaXZpZGVyLnRlbXBsYXRlLmpzP2ZlZTUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvZGl2aWRlci9kaXZpZGVyLnN0eWxlcy5qcz85MjVmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L2RpdmlkZXIvaW5kZXguanM/YWNlNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXMvZGlzdC9zdHJpbmdzLmpzP2Y0MGEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3QvYXJyYXkuanM/ZmIzOSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vbGlzdGJveC1vcHRpb24vbGlzdGJveC1vcHRpb24uanM/NWJlOSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vbGlzdGJveC9saXN0Ym94LmpzPzI0YzIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3NlbGVjdC9zZWxlY3QuZm9ybS1hc3NvY2lhdGVkLmpzP2E5YzMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3NlbGVjdC9zZWxlY3Qub3B0aW9ucy5qcz84ZmI2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9zZWxlY3Qvc2VsZWN0LmpzPzcxYmUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3NlbGVjdC9zZWxlY3QudGVtcGxhdGUuanM/MDdhMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9kcm9wZG93bi9kcm9wZG93bi5zdHlsZXMuanM/N2JmYiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9kcm9wZG93bi9pbmRleC5qcz8xZmI5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9hbmNob3IvYW5jaG9yLmpzPzY1NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL2FuY2hvci9hbmNob3IudGVtcGxhdGUuanM/NTRjOCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9saW5rL2xpbmsuc3R5bGVzLmpzPzMwZmEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvbGluay9pbmRleC5qcz9mMDdhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9saXN0Ym94LW9wdGlvbi9saXN0Ym94LW9wdGlvbi50ZW1wbGF0ZS5qcz81YWFiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L29wdGlvbi9vcHRpb24uc3R5bGVzLmpzP2NmODIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3Qvb3B0aW9uL2luZGV4LmpzPzFiYmQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3QvbnVtYmVycy5qcz9mYmUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS90YWJzL3RhYnMuanM/MTRhMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQvZGlzdC9lc20vdGVtcGxhdGluZy93aGVuLmpzPzhkNDEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RhYnMvdGFicy50ZW1wbGF0ZS5qcz8zYTRhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS90YWIvdGFiLmpzPzhjZjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RhYi90YWIudGVtcGxhdGUuanM/Yjc0MyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vdGFiLXBhbmVsL3RhYi1wYW5lbC5qcz9mNmMwIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS90YWItcGFuZWwvdGFiLXBhbmVsLnRlbXBsYXRlLmpzPzA3MWIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvcGFuZWxzL3BhbmVscy5zdHlsZXMuanM/NzYzNSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9wYW5lbHMvcGFuZWwtdGFiLnN0eWxlcy5qcz9jODc5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3BhbmVscy9wYW5lbC12aWV3LnN0eWxlcy5qcz9lZWM0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3BhbmVscy9pbmRleC5qcz9kNWE0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9wcm9ncmVzcy9iYXNlLXByb2dyZXNzLmpzP2IwZjUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3Byb2dyZXNzLXJpbmcvcHJvZ3Jlc3MtcmluZy50ZW1wbGF0ZS5qcz9mNTI2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3Byb2dyZXNzLXJpbmcvcHJvZ3Jlc3MtcmluZy5zdHlsZXMuanM/Mzc1OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9wcm9ncmVzcy1yaW5nL2luZGV4LmpzP2M0MDUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3JhZGlvL3JhZGlvLmZvcm0tYXNzb2NpYXRlZC5qcz8yMjRjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9yYWRpby9yYWRpby5qcz9kM2NhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS9yYWRpby9yYWRpby50ZW1wbGF0ZS5qcz9kOWQxIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3JhZGlvL3JhZGlvLnN0eWxlcy5qcz9kOTA2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3JhZGlvL2luZGV4LmpzPzQwN2EiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzL2Rpc3QvbG9jYWxpemF0aW9uLmpzP2FkZTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3V0aWxpdGllcy9kaXJlY3Rpb24uanM/MjZhNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vcmFkaW8tZ3JvdXAvcmFkaW8tZ3JvdXAuanM/MjMzNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vcmFkaW8tZ3JvdXAvcmFkaW8tZ3JvdXAudGVtcGxhdGUuanM/NmRmOCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9yYWRpby1ncm91cC9yYWRpby1ncm91cC5zdHlsZXMuanM/MGMxNSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC9yYWRpby1ncm91cC9pbmRleC5qcz85YTMyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3RhZy90YWcuc3R5bGVzLmpzPzg5MTYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvdGFnL2luZGV4LmpzPzExNmEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RleHQtZmllbGQvdGV4dC1maWVsZC5mb3JtLWFzc29jaWF0ZWQuanM/YWFmMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vdGV4dC1maWVsZC90ZXh0LWZpZWxkLm9wdGlvbnMuanM/NjczYiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vdGV4dC1maWVsZC90ZXh0LWZpZWxkLmpzP2Y2NGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RleHQtYXJlYS90ZXh0LWFyZWEuZm9ybS1hc3NvY2lhdGVkLmpzPzU4ZWQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RleHQtYXJlYS90ZXh0LWFyZWEub3B0aW9ucy5qcz9mNmQ4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS90ZXh0LWFyZWEvdGV4dC1hcmVhLmpzPzA2YjYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uL2Rpc3QvZXNtL3RleHQtYXJlYS90ZXh0LWFyZWEudGVtcGxhdGUuanM/MmRlYyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvZGlzdC90ZXh0LWFyZWEvdGV4dC1hcmVhLnN0eWxlcy5qcz8zM2RhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3RleHQtYXJlYS9pbmRleC5qcz84ZTcyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbi9kaXN0L2VzbS91dGlsaXRpZXMvd2hpdGVzcGFjZS1maWx0ZXIuanM/NTI4MiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vdGV4dC1maWVsZC90ZXh0LWZpZWxkLnRlbXBsYXRlLmpzPzIwMzYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvdGV4dC1maWVsZC90ZXh0LWZpZWxkLnN0eWxlcy5qcz84YWU2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9kaXN0L3RleHQtZmllbGQvaW5kZXguanM/MGE0NiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24vZGlzdC9lc20vZGVzaWduLXN5c3RlbS9kZXNpZ24tc3lzdGVtLmpzPzg3OWMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L2Rpc3QvdnNjb2RlLWRlc2lnbi1zeXN0ZW0uanM/MWJkNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvcmVhY3QvaW5kZXguanM/ODQ5ZSIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZWJhci9jb21wb25lbnRzL0ZlZWRiYWNrLnRzeD9jOWRlIiwid2VicGFjazovLy8uL3NyYy9zaWRlYmFyL2NvbXBvbmVudHMvQ29sbGFwc2UudHN4PzQ1NGYiLCJ3ZWJwYWNrOi8vLy4uL2xpYi9zcmMvd2Vidmlld3MvbGFuZ3VhZ2VzLnRzP2MyNWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NpZGViYXIvY29tcG9uZW50cy9Qcm9tcHRFZGl0b3IudHN4PzViYjIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NpZGViYXIvY29tcG9uZW50cy9Mb2dvLnRzeD9hZTMwIiwid2VicGFjazovLy8uL3NyYy9zaWRlYmFyL2NvbXBvbmVudHMvYXNrLWNvcGlsb3QtYnV0dG9uLnRzeD8xNzBjIiwid2VicGFjazovLy8uL3NyYy9zaWRlYmFyL1BhbmVsRXhwbGFpbi50c3g/MjRlNCIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZWJhci9QYW5lbFRyYW5zbGF0ZS50c3g/NmNmZSIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZWJhci9pbmRleC5jc3M/NWI4MyIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZWJhci9pbmRleC50c3g/NTVkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBuKG4pe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkocj4xP3ItMTowKSxlPTE7ZTxyO2UrKyl0W2UtMV09YXJndW1lbnRzW2VdO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBpPVlbbl0sbz1pP1wiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShudWxsLHQpOmk6XCJ1bmtub3duIGVycm9yIG5yOiBcIituO3Rocm93IEVycm9yKFwiW0ltbWVyXSBcIitvKX10aHJvdyBFcnJvcihcIltJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6IFwiK24rKHQubGVuZ3RoP1wiIFwiK3QubWFwKChmdW5jdGlvbihuKXtyZXR1cm5cIidcIituK1wiJ1wifSkpLmpvaW4oXCIsXCIpOlwiXCIpK1wiLiBGaW5kIHRoZSBmdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmXCIpfWZ1bmN0aW9uIHIobil7cmV0dXJuISFuJiYhIW5bUV19ZnVuY3Rpb24gdChuKXtyZXR1cm4hIW4mJihmdW5jdGlvbihuKXtpZighbnx8XCJvYmplY3RcIiE9dHlwZW9mIG4pcmV0dXJuITE7dmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO2lmKG51bGw9PT1yKXJldHVybiEwO3ZhciB0PU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsXCJjb25zdHJ1Y3RvclwiKSYmci5jb25zdHJ1Y3RvcjtyZXR1cm4gdD09PU9iamVjdHx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KT09PVp9KG4pfHxBcnJheS5pc0FycmF5KG4pfHwhIW5bTF18fCEhbi5jb25zdHJ1Y3RvcltMXXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcih0KXx8bigyMyx0KSx0W1FdLnR9ZnVuY3Rpb24gaShuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLDA9PT1vKG4pPyh0P09iamVjdC5rZXlzOm5uKShuKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0JiZcInN5bWJvbFwiPT10eXBlb2YgZXx8cihlLG5bZV0sbil9KSk6bi5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiByKGUsdCxuKX0pKX1mdW5jdGlvbiBvKG4pe3ZhciByPW5bUV07cmV0dXJuIHI/ci5pPjM/ci5pLTQ6ci5pOkFycmF5LmlzQXJyYXkobik/MTpzKG4pPzI6dihuKT8zOjB9ZnVuY3Rpb24gdShuLHIpe3JldHVybiAyPT09byhuKT9uLmhhcyhyKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKX1mdW5jdGlvbiBhKG4scil7cmV0dXJuIDI9PT1vKG4pP24uZ2V0KHIpOm5bcl19ZnVuY3Rpb24gZihuLHIsdCl7dmFyIGU9byhuKTsyPT09ZT9uLnNldChyLHQpOjM9PT1lPyhuLmRlbGV0ZShyKSxuLmFkZCh0KSk6bltyXT10fWZ1bmN0aW9uIGMobixyKXtyZXR1cm4gbj09PXI/MCE9PW58fDEvbj09MS9yOm4hPW4mJnIhPXJ9ZnVuY3Rpb24gcyhuKXtyZXR1cm4gWCYmbiBpbnN0YW5jZW9mIE1hcH1mdW5jdGlvbiB2KG4pe3JldHVybiBxJiZuIGluc3RhbmNlb2YgU2V0fWZ1bmN0aW9uIHAobil7cmV0dXJuIG4ub3x8bi50fWZ1bmN0aW9uIGwobil7aWYoQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobik7dmFyIHI9cm4obik7ZGVsZXRlIHJbUV07Zm9yKHZhciB0PW5uKHIpLGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIGk9dFtlXSxvPXJbaV07ITE9PT1vLndyaXRhYmxlJiYoby53cml0YWJsZT0hMCxvLmNvbmZpZ3VyYWJsZT0hMCksKG8uZ2V0fHxvLnNldCkmJihyW2ldPXtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsZW51bWVyYWJsZTpvLmVudW1lcmFibGUsdmFsdWU6bltpXX0pfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSxyKX1mdW5jdGlvbiBkKG4sZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx5KG4pfHxyKG4pfHwhdChuKT9uOihvKG4pPjEmJihuLnNldD1uLmFkZD1uLmNsZWFyPW4uZGVsZXRlPWgpLE9iamVjdC5mcmVlemUobiksZSYmaShuLChmdW5jdGlvbihuLHIpe3JldHVybiBkKHIsITApfSksITApLG4pfWZ1bmN0aW9uIGgoKXtuKDIpfWZ1bmN0aW9uIHkobil7cmV0dXJuIG51bGw9PW58fFwib2JqZWN0XCIhPXR5cGVvZiBufHxPYmplY3QuaXNGcm96ZW4obil9ZnVuY3Rpb24gYihyKXt2YXIgdD10bltyXTtyZXR1cm4gdHx8bigxOCxyKSx0fWZ1bmN0aW9uIG0obixyKXt0bltuXXx8KHRuW25dPXIpfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHxuKDApLFV9ZnVuY3Rpb24gaihuLHIpe3ImJihiKFwiUGF0Y2hlc1wiKSxuLnU9W10sbi5zPVtdLG4udj1yKX1mdW5jdGlvbiBPKG4pe2cobiksbi5wLmZvckVhY2goUyksbi5wPW51bGx9ZnVuY3Rpb24gZyhuKXtuPT09VSYmKFU9bi5sKX1mdW5jdGlvbiB3KG4pe3JldHVybiBVPXtwOltdLGw6VSxoOm4sbTohMCxfOjB9fWZ1bmN0aW9uIFMobil7dmFyIHI9bltRXTswPT09ci5pfHwxPT09ci5pP3IuaigpOnIuTz0hMH1mdW5jdGlvbiBQKHIsZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09ciYmciE9PWk7cmV0dXJuIGUuaC5nfHxiKFwiRVM1XCIpLlMoZSxyLG8pLG8/KGlbUV0uUCYmKE8oZSksbig0KSksdChyKSYmKHI9TShlLHIpLGUubHx8eChlLHIpKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXS50LHIsZS51LGUucykpOnI9TShlLGksW10pLE8oZSksZS51JiZlLnYoZS51LGUucyksciE9PUg/cjp2b2lkIDB9ZnVuY3Rpb24gTShuLHIsdCl7aWYoeShyKSlyZXR1cm4gcjt2YXIgZT1yW1FdO2lmKCFlKXJldHVybiBpKHIsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHIsaSxvLHQpfSksITApLHI7aWYoZS5BIT09bilyZXR1cm4gcjtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubztpKDM9PT1lLmk/bmV3IFNldChvKTpvLChmdW5jdGlvbihyLGkpe3JldHVybiBBKG4sZSxvLHIsaSx0KX0pKSx4KG4sbywhMSksdCYmbi51JiZiKFwiUGF0Y2hlc1wiKS5SKGUsdCxuLnUsbi5zKX1yZXR1cm4gZS5vfWZ1bmN0aW9uIEEoZSxpLG8sYSxjLHMpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHIoYykpe3ZhciB2PU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuRCxhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHYpLCFyKHYpKXJldHVybjtlLm09ITF9aWYodChjKSYmIXkoYykpe2lmKCFlLmguRiYmZS5fPDEpcmV0dXJuO00oZSxjKSxpJiZpLkEubHx8eChlLGMpfX1mdW5jdGlvbiB4KG4scix0KXt2b2lkIDA9PT10JiYodD0hMSksbi5oLkYmJm4ubSYmZChyLHQpfWZ1bmN0aW9uIHoobixyKXt2YXIgdD1uW1FdO3JldHVybih0P3AodCk6bilbcl19ZnVuY3Rpb24gSShuLHIpe2lmKHIgaW4gbilmb3IodmFyIHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO3Q7KXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYoZSlyZXR1cm4gZTt0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KX19ZnVuY3Rpb24gayhuKXtuLlB8fChuLlA9ITAsbi5sJiZrKG4ubCkpfWZ1bmN0aW9uIEUobil7bi5vfHwobi5vPWwobi50KSl9ZnVuY3Rpb24gUihuLHIsdCl7dmFyIGU9cyhyKT9iKFwiTWFwU2V0XCIpLk4ocix0KTp2KHIpP2IoXCJNYXBTZXRcIikuVChyLHQpOm4uZz9mdW5jdGlvbihuLHIpe3ZhciB0PUFycmF5LmlzQXJyYXkobiksZT17aTp0PzE6MCxBOnI/ci5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnIsdDpuLGs6bnVsbCxvOm51bGwsajpudWxsLEM6ITF9LGk9ZSxvPWVuO3QmJihpPVtlXSxvPW9uKTt2YXIgdT1Qcm94eS5yZXZvY2FibGUoaSxvKSxhPXUucmV2b2tlLGY9dS5wcm94eTtyZXR1cm4gZS5rPWYsZS5qPWEsZn0ocix0KTpiKFwiRVM1XCIpLkoocix0KTtyZXR1cm4odD90LkE6XygpKS5wLnB1c2goZSksZX1mdW5jdGlvbiBEKGUpe3JldHVybiByKGUpfHxuKDIyLGUpLGZ1bmN0aW9uIG4ocil7aWYoIXQocikpcmV0dXJuIHI7dmFyIGUsdT1yW1FdLGM9byhyKTtpZih1KXtpZighdS5QJiYodS5pPDR8fCFiKFwiRVM1XCIpLksodSkpKXJldHVybiB1LnQ7dS5JPSEwLGU9RihyLGMpLHUuST0hMX1lbHNlIGU9RihyLGMpO3JldHVybiBpKGUsKGZ1bmN0aW9uKHIsdCl7dSYmYSh1LnQscik9PT10fHxmKGUscixuKHQpKX0pKSwzPT09Yz9uZXcgU2V0KGUpOmV9KGUpfWZ1bmN0aW9uIEYobixyKXtzd2l0Y2gocil7Y2FzZSAyOnJldHVybiBuZXcgTWFwKG4pO2Nhc2UgMzpyZXR1cm4gQXJyYXkuZnJvbShuKX1yZXR1cm4gbChuKX1mdW5jdGlvbiBOKCl7ZnVuY3Rpb24gdChuLHIpe3ZhciB0PXNbbl07cmV0dXJuIHQ/dC5lbnVtZXJhYmxlPXI6c1tuXT10PXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTpyLGdldDpmdW5jdGlvbigpe3ZhciByPXRoaXNbUV07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihyKSxlbi5nZXQocixuKX0sc2V0OmZ1bmN0aW9uKHIpe3ZhciB0PXRoaXNbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZih0KSxlbi5zZXQodCxuLHIpfX0sdH1mdW5jdGlvbiBlKG4pe2Zvcih2YXIgcj1uLmxlbmd0aC0xO3I+PTA7ci0tKXt2YXIgdD1uW3JdW1FdO2lmKCF0LlApc3dpdGNoKHQuaSl7Y2FzZSA1OmEodCkmJmsodCk7YnJlYWs7Y2FzZSA0Om8odCkmJmsodCl9fX1mdW5jdGlvbiBvKG4pe2Zvcih2YXIgcj1uLnQsdD1uLmssZT1ubih0KSxpPWUubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPWVbaV07aWYobyE9PVEpe3ZhciBhPXJbb107aWYodm9pZCAwPT09YSYmIXUocixvKSlyZXR1cm4hMDt2YXIgZj10W29dLHM9ZiYmZltRXTtpZihzP3MudCE9PWE6IWMoZixhKSlyZXR1cm4hMH19dmFyIHY9ISFyW1FdO3JldHVybiBlLmxlbmd0aCE9PW5uKHIpLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEobil7dmFyIHI9bi5rO2lmKHIubGVuZ3RoIT09bi50Lmxlbmd0aClyZXR1cm4hMDt2YXIgdD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsci5sZW5ndGgtMSk7aWYodCYmIXQuZ2V0KXJldHVybiEwO2Zvcih2YXIgZT0wO2U8ci5sZW5ndGg7ZSsrKWlmKCFyLmhhc093blByb3BlcnR5KGUpKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIGYocil7ci5PJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbihuLHIpe3ZhciBlPUFycmF5LmlzQXJyYXkobiksaT1mdW5jdGlvbihuLHIpe2lmKG4pe2Zvcih2YXIgZT1BcnJheShyLmxlbmd0aCksaT0wO2k8ci5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSx0KGksITApKTtyZXR1cm4gZX12YXIgbz1ybihyKTtkZWxldGUgb1tRXTtmb3IodmFyIHU9bm4obyksYT0wO2E8dS5sZW5ndGg7YSsrKXt2YXIgZj11W2FdO29bZl09dChmLG58fCEhb1tmXS5lbnVtZXJhYmxlKX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yociksbyl9KGUsbiksbz17aTplPzU6NCxBOnI/ci5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnIsdDpuLGs6aSxvOm51bGwsTzohMSxDOiExfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGksUSx7dmFsdWU6byx3cml0YWJsZTohMH0pLGl9LFM6ZnVuY3Rpb24obix0LG8pe28/cih0KSYmdFtRXS5BPT09biYmZShuLnApOihuLnUmJmZ1bmN0aW9uIG4ocil7aWYociYmXCJvYmplY3RcIj09dHlwZW9mIHIpe3ZhciB0PXJbUV07aWYodCl7dmFyIGU9dC50LG89dC5rLGY9dC5ELGM9dC5pO2lmKDQ9PT1jKWkobywoZnVuY3Rpb24ocil7ciE9PVEmJih2b2lkIDAhPT1lW3JdfHx1KGUscik/ZltyXXx8bihvW3JdKTooZltyXT0hMCxrKHQpKSl9KSksaShlLChmdW5jdGlvbihuKXt2b2lkIDAhPT1vW25dfHx1KG8sbil8fChmW25dPSExLGsodCkpfSkpO2Vsc2UgaWYoNT09PWMpe2lmKGEodCkmJihrKHQpLGYubGVuZ3RoPSEwKSxvLmxlbmd0aDxlLmxlbmd0aClmb3IodmFyIHM9by5sZW5ndGg7czxlLmxlbmd0aDtzKyspZltzXT0hMTtlbHNlIGZvcih2YXIgdj1lLmxlbmd0aDt2PG8ubGVuZ3RoO3YrKylmW3ZdPSEwO2Zvcih2YXIgcD1NYXRoLm1pbihvLmxlbmd0aCxlLmxlbmd0aCksbD0wO2w8cDtsKyspby5oYXNPd25Qcm9wZXJ0eShsKXx8KGZbbF09ITApLHZvaWQgMD09PWZbbF0mJm4ob1tsXSl9fX19KG4ucFswXSksZShuLnApKX0sSzpmdW5jdGlvbihuKXtyZXR1cm4gND09PW4uaT9vKG4pOmEobil9fSl9ZnVuY3Rpb24gVCgpe2Z1bmN0aW9uIGUobil7aWYoIXQobikpcmV0dXJuIG47aWYoQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gbi5tYXAoZSk7aWYocyhuKSlyZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKG4uZW50cmllcygpKS5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybltuWzBdLGUoblsxXSldfSkpKTtpZih2KG4pKXJldHVybiBuZXcgU2V0KEFycmF5LmZyb20obikubWFwKGUpKTt2YXIgcj1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSk7Zm9yKHZhciBpIGluIG4pcltpXT1lKG5baV0pO3JldHVybiB1KG4sTCkmJihyW0xdPW5bTF0pLHJ9ZnVuY3Rpb24gZihuKXtyZXR1cm4gcihuKT9lKG4pOm59dmFyIGM9XCJhZGRcIjttKFwiUGF0Y2hlc1wiLHskOmZ1bmN0aW9uKHIsdCl7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7Zm9yKHZhciBpPXQucGF0aCx1PXQub3AsZj1yLHM9MDtzPGkubGVuZ3RoLTE7cysrKXt2YXIgdj1vKGYpLHA9XCJcIitpW3NdOzAhPT12JiYxIT09dnx8XCJfX3Byb3RvX19cIiE9PXAmJlwiY29uc3RydWN0b3JcIiE9PXB8fG4oMjQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJlwicHJvdG90eXBlXCI9PT1wJiZuKDI0KSxcIm9iamVjdFwiIT10eXBlb2YoZj1hKGYscCkpJiZuKDE1LGkuam9pbihcIi9cIikpfXZhciBsPW8oZiksZD1lKHQudmFsdWUpLGg9aVtpLmxlbmd0aC0xXTtzd2l0Y2godSl7Y2FzZVwicmVwbGFjZVwiOnN3aXRjaChsKXtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOm4oMTYpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlIGM6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm5cIi1cIj09PWg/Zi5wdXNoKGQpOmYuc3BsaWNlKGgsMCxkKTtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOnJldHVybiBmLmFkZChkKTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZVwicmVtb3ZlXCI6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gZi5zcGxpY2UoaCwxKTtjYXNlIDI6cmV0dXJuIGYuZGVsZXRlKGgpO2Nhc2UgMzpyZXR1cm4gZi5kZWxldGUodC52YWx1ZSk7ZGVmYXVsdDpyZXR1cm4gZGVsZXRlIGZbaF19ZGVmYXVsdDpuKDE3LHUpfX0pKSxyfSxSOmZ1bmN0aW9uKG4scix0LGUpe3N3aXRjaChuLmkpe2Nhc2UgMDpjYXNlIDQ6Y2FzZSAyOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgbz1uLnQscz1uLm87aShuLkQsKGZ1bmN0aW9uKG4saSl7dmFyIHY9YShvLG4pLHA9YShzLG4pLGw9aT91KG8sbik/XCJyZXBsYWNlXCI6YzpcInJlbW92ZVwiO2lmKHYhPT1wfHxcInJlcGxhY2VcIiE9PWwpe3ZhciBkPXIuY29uY2F0KG4pO3QucHVzaChcInJlbW92ZVwiPT09bD97b3A6bCxwYXRoOmR9OntvcDpsLHBhdGg6ZCx2YWx1ZTpwfSksZS5wdXNoKGw9PT1jP3tvcDpcInJlbW92ZVwiLHBhdGg6ZH06XCJyZW1vdmVcIj09PWw/e29wOmMscGF0aDpkLHZhbHVlOmYodil9OntvcDpcInJlcGxhY2VcIixwYXRoOmQsdmFsdWU6Zih2KX0pfX0pKX0obixyLHQsZSk7Y2FzZSA1OmNhc2UgMTpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIGk9bi50LG89bi5ELHU9bi5vO2lmKHUubGVuZ3RoPGkubGVuZ3RoKXt2YXIgYT1bdSxpXTtpPWFbMF0sdT1hWzFdO3ZhciBzPVtlLHRdO3Q9c1swXSxlPXNbMV19Zm9yKHZhciB2PTA7djxpLmxlbmd0aDt2KyspaWYob1t2XSYmdVt2XSE9PWlbdl0pe3ZhciBwPXIuY29uY2F0KFt2XSk7dC5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6Zih1W3ZdKX0pLGUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYoaVt2XSl9KX1mb3IodmFyIGw9aS5sZW5ndGg7bDx1Lmxlbmd0aDtsKyspe3ZhciBkPXIuY29uY2F0KFtsXSk7dC5wdXNoKHtvcDpjLHBhdGg6ZCx2YWx1ZTpmKHVbbF0pfSl9aS5sZW5ndGg8dS5sZW5ndGgmJmUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpyLmNvbmNhdChbXCJsZW5ndGhcIl0pLHZhbHVlOmkubGVuZ3RofSl9KG4scix0LGUpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIGk9bi50LG89bi5vLHU9MDtpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFvLmhhcyhuKSl7dmFyIGk9ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOlwicmVtb3ZlXCIscGF0aDppLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOmMscGF0aDppLHZhbHVlOm59KX11Kyt9KSksdT0wLG8uZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIWkuaGFzKG4pKXt2YXIgbz1yLmNvbmNhdChbdV0pO3QucHVzaCh7b3A6YyxwYXRoOm8sdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6XCJyZW1vdmVcIixwYXRoOm8sdmFsdWU6bn0pfXUrK30pKX0obixyLHQsZSl9fSxNOmZ1bmN0aW9uKG4scix0LGUpe3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpbXSx2YWx1ZTpyPT09SD92b2lkIDA6cn0pLGUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpbXSx2YWx1ZTpufSl9fSl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIHIobixyKXtmdW5jdGlvbiB0KCl7dGhpcy5jb25zdHJ1Y3Rvcj1ufWEobixyKSxuLnByb3RvdHlwZT0odC5wcm90b3R5cGU9ci5wcm90b3R5cGUsbmV3IHQpfWZ1bmN0aW9uIGUobil7bi5vfHwobi5EPW5ldyBNYXAsbi5vPW5ldyBNYXAobi50KSl9ZnVuY3Rpb24gbyhuKXtuLm98fChuLm89bmV3IFNldCxuLnQuZm9yRWFjaCgoZnVuY3Rpb24ocil7aWYodChyKSl7dmFyIGU9UihuLkEuaCxyLG4pO24ucC5zZXQocixlKSxuLm8uYWRkKGUpfWVsc2Ugbi5vLmFkZChyKX0pKSl9ZnVuY3Rpb24gdShyKXtyLk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIGE9ZnVuY3Rpb24obixyKXtyZXR1cm4oYT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24obixyKXtuLl9fcHJvdG9fXz1yfXx8ZnVuY3Rpb24obixyKXtmb3IodmFyIHQgaW4gcilyLmhhc093blByb3BlcnR5KHQpJiYoblt0XT1yW3RdKX0pKG4scil9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MixsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLEQ6dm9pZCAwLHQ6bixrOnRoaXMsQzohMSxPOiExfSx0aGlzfXIobixNYXApO3ZhciBvPW4ucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxvLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gcCh0aGlzW1FdKS5oYXMobil9LG8uc2V0PWZ1bmN0aW9uKG4scil7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSxwKHQpLmhhcyhuKSYmcCh0KS5nZXQobik9PT1yfHwoZSh0KSxrKHQpLHQuRC5zZXQobiwhMCksdC5vLnNldChuLHIpLHQuRC5zZXQobiwhMCkpLHRoaXN9LG8uZGVsZXRlPWZ1bmN0aW9uKG4pe2lmKCF0aGlzLmhhcyhuKSlyZXR1cm4hMTt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLGUociksayhyKSxyLnQuaGFzKG4pP3IuRC5zZXQobiwhMSk6ci5ELmRlbGV0ZShuKSxyLm8uZGVsZXRlKG4pLCEwfSxvLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKGUobiksayhuKSxuLkQ9bmV3IE1hcCxpKG4udCwoZnVuY3Rpb24ocil7bi5ELnNldChyLCExKX0pKSxuLm8uY2xlYXIoKSl9LG8uZm9yRWFjaD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXM7cCh0aGlzW1FdKS5mb3JFYWNoKChmdW5jdGlvbihlLGkpe24uY2FsbChyLHQuZ2V0KGkpLGksdCl9KSl9LG8uZ2V0PWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07dShyKTt2YXIgaT1wKHIpLmdldChuKTtpZihyLkl8fCF0KGkpKXJldHVybiBpO2lmKGkhPT1yLnQuZ2V0KG4pKXJldHVybiBpO3ZhciBvPVIoci5BLmgsaSxyKTtyZXR1cm4gZShyKSxyLm8uc2V0KG4sbyksb30sby5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkua2V5cygpfSxvLnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuLHI9dGhpcyx0PXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiByLnZhbHVlcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtyZXR1cm4gbi5kb25lP246e2RvbmU6ITEsdmFsdWU6ci5nZXQobi52YWx1ZSl9fSxufSxvLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci5lbnRyaWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXQubmV4dCgpO2lmKG4uZG9uZSlyZXR1cm4gbjt2YXIgZT1yLmdldChuLnZhbHVlKTtyZXR1cm57ZG9uZTohMSx2YWx1ZTpbbi52YWx1ZSxlXX19LG59LG9bVl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCl9LG59KCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4gdGhpc1tRXT17aTozLGw6cixBOnI/ci5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsdDpuLGs6dGhpcyxwOm5ldyBNYXAsTzohMSxDOiExfSx0aGlzfXIobixTZXQpO3ZhciB0PW4ucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSx0Lmhhcz1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLHIubz8hIXIuby5oYXMobil8fCEoIXIucC5oYXMobil8fCFyLm8uaGFzKHIucC5nZXQobikpKTpyLnQuaGFzKG4pfSx0LmFkZD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLHRoaXMuaGFzKG4pfHwobyhyKSxrKHIpLHIuby5hZGQobikpLHRoaXN9LHQuZGVsZXRlPWZ1bmN0aW9uKG4pe2lmKCF0aGlzLmhhcyhuKSlyZXR1cm4hMTt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLG8ociksayhyKSxyLm8uZGVsZXRlKG4pfHwhIXIucC5oYXMobikmJnIuby5kZWxldGUoci5wLmdldChuKSl9LHQuY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYobyhuKSxrKG4pLG4uby5jbGVhcigpKX0sdC52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLG8obiksbi5vLnZhbHVlcygpfSx0LmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLG8obiksbi5vLmVudHJpZXMoKX0sdC5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHRbVl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sdC5mb3JFYWNoPWZ1bmN0aW9uKG4scil7Zm9yKHZhciB0PXRoaXMudmFsdWVzKCksZT10Lm5leHQoKTshZS5kb25lOyluLmNhbGwocixlLnZhbHVlLGUudmFsdWUsdGhpcyksZT10Lm5leHQoKX0sbn0oKTttKFwiTWFwU2V0XCIse046ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGYobixyKX0sVDpmdW5jdGlvbihuLHIpe3JldHVybiBuZXcgYyhuLHIpfX0pfWZ1bmN0aW9uIEooKXtOKCksQygpLFQoKX1mdW5jdGlvbiBLKG4pe3JldHVybiBufWZ1bmN0aW9uICQobil7cmV0dXJuIG59dmFyIEcsVSxXPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2woXCJ4XCIpLFg9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1hcCxxPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQsQj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJveHkmJnZvaWQgMCE9PVByb3h5LnJldm9jYWJsZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QsSD1XP1N5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpOigoRz17fSlbXCJpbW1lci1ub3RoaW5nXCJdPSEwLEcpLEw9Vz9TeW1ib2wuZm9yKFwiaW1tZXItZHJhZnRhYmxlXCIpOlwiX18kaW1tZXJfZHJhZnRhYmxlXCIsUT1XP1N5bWJvbC5mb3IoXCJpbW1lci1zdGF0ZVwiKTpcIl9fJGltbWVyX3N0YXRlXCIsVj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLFk9ezA6XCJJbGxlZ2FsIHN0YXRlXCIsMTpcIkltbWVyIGRyYWZ0cyBjYW5ub3QgaGF2ZSBjb21wdXRlZCBwcm9wZXJ0aWVzXCIsMjpcIlRoaXMgb2JqZWN0IGhhcyBiZWVuIGZyb3plbiBhbmQgc2hvdWxkIG5vdCBiZSBtdXRhdGVkXCIsMzpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCB1c2UgYSBwcm94eSB0aGF0IGhhcyBiZWVuIHJldm9rZWQuIERpZCB5b3UgcGFzcyBhbiBvYmplY3QgZnJvbSBpbnNpZGUgYW4gaW1tZXIgZnVuY3Rpb24gdG8gYW4gYXN5bmMgcHJvY2Vzcz8gXCIrbn0sNDpcIkFuIGltbWVyIHByb2R1Y2VyIHJldHVybmVkIGEgbmV3IHZhbHVlICphbmQqIG1vZGlmaWVkIGl0cyBkcmFmdC4gRWl0aGVyIHJldHVybiBhIG5ldyB2YWx1ZSAqb3IqIG1vZGlmeSB0aGUgZHJhZnQuXCIsNTpcIkltbWVyIGZvcmJpZHMgY2lyY3VsYXIgcmVmZXJlbmNlc1wiLDY6XCJUaGUgZmlyc3Qgb3Igc2Vjb25kIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIiw3OlwiVGhlIHRoaXJkIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgdW5kZWZpbmVkXCIsODpcIkZpcnN0IGFyZ3VtZW50IHRvIGBjcmVhdGVEcmFmdGAgbXVzdCBiZSBhIHBsYWluIG9iamVjdCwgYW4gYXJyYXksIG9yIGFuIGltbWVyYWJsZSBvYmplY3RcIiw5OlwiRmlyc3QgYXJndW1lbnQgdG8gYGZpbmlzaERyYWZ0YCBtdXN0IGJlIGEgZHJhZnQgcmV0dXJuZWQgYnkgYGNyZWF0ZURyYWZ0YFwiLDEwOlwiVGhlIGdpdmVuIGRyYWZ0IGlzIGFscmVhZHkgZmluYWxpemVkXCIsMTE6XCJPYmplY3QuZGVmaW5lUHJvcGVydHkoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEyOlwiT2JqZWN0LnNldFByb3RvdHlwZU9mKCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMzpcIkltbWVyIG9ubHkgc3VwcG9ydHMgZGVsZXRpbmcgYXJyYXkgaW5kaWNlc1wiLDE0OlwiSW1tZXIgb25seSBzdXBwb3J0cyBzZXR0aW5nIGFycmF5IGluZGljZXMgYW5kIHRoZSAnbGVuZ3RoJyBwcm9wZXJ0eVwiLDE1OmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IGFwcGx5IHBhdGNoLCBwYXRoIGRvZXNuJ3QgcmVzb2x2ZTogXCIrbn0sMTY6J1NldHMgY2Fubm90IGhhdmUgXCJyZXBsYWNlXCIgcGF0Y2hlcy4nLDE3OmZ1bmN0aW9uKG4pe3JldHVyblwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIitufSwxODpmdW5jdGlvbihuKXtyZXR1cm5cIlRoZSBwbHVnaW4gZm9yICdcIituK1wiJyBoYXMgbm90IGJlZW4gbG9hZGVkIGludG8gSW1tZXIuIFRvIGVuYWJsZSB0aGUgcGx1Z2luLCBpbXBvcnQgYW5kIGNhbGwgYGVuYWJsZVwiK24rXCIoKWAgd2hlbiBpbml0aWFsaXppbmcgeW91ciBhcHBsaWNhdGlvbi5cIn0sMjA6XCJDYW5ub3QgdXNlIHByb3hpZXMgaWYgUHJveHksIFByb3h5LnJldm9jYWJsZSBvciBSZWZsZWN0IGFyZSBub3QgYXZhaWxhYmxlXCIsMjE6ZnVuY3Rpb24obil7cmV0dXJuXCJwcm9kdWNlIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGluZ3MgdGhhdCBhcmUgZHJhZnRhYmxlOiBwbGFpbiBvYmplY3RzLCBhcnJheXMsIE1hcCwgU2V0IG9yIGNsYXNzZXMgdGhhdCBhcmUgbWFya2VkIHdpdGggJ1tpbW1lcmFibGVdOiB0cnVlJy4gR290ICdcIituK1wiJ1wifSwyMjpmdW5jdGlvbihuKXtyZXR1cm5cIidjdXJyZW50JyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjM6ZnVuY3Rpb24obil7cmV0dXJuXCInb3JpZ2luYWwnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyNDpcIlBhdGNoaW5nIHJlc2VydmVkIGF0dHJpYnV0ZXMgbGlrZSBfX3Byb3RvX18sIHByb3RvdHlwZSBhbmQgY29uc3RydWN0b3IgaXMgbm90IGFsbG93ZWRcIn0sWj1cIlwiK09iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3Isbm49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3Qub3duS2V5cz9SZWZsZWN0Lm93bktleXM6dm9pZCAwIT09T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobikpfTpPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxybj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc3x8ZnVuY3Rpb24obil7dmFyIHI9e307cmV0dXJuIG5uKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JbdF09T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLHQpfSkpLHJ9LHRuPXt9LGVuPXtnZXQ6ZnVuY3Rpb24obixyKXtpZihyPT09USlyZXR1cm4gbjt2YXIgZT1wKG4pO2lmKCF1KGUscikpcmV0dXJuIGZ1bmN0aW9uKG4scix0KXt2YXIgZSxpPUkocix0KTtyZXR1cm4gaT9cInZhbHVlXCJpbiBpP2kudmFsdWU6bnVsbD09PShlPWkuZ2V0KXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKG4uayk6dm9pZCAwfShuLGUscik7dmFyIGk9ZVtyXTtyZXR1cm4gbi5JfHwhdChpKT9pOmk9PT16KG4udCxyKT8oRShuKSxuLm9bcl09UihuLkEuaCxpLG4pKTppfSxoYXM6ZnVuY3Rpb24obixyKXtyZXR1cm4gciBpbiBwKG4pfSxvd25LZXlzOmZ1bmN0aW9uKG4pe3JldHVybiBSZWZsZWN0Lm93bktleXMocChuKSl9LHNldDpmdW5jdGlvbihuLHIsdCl7dmFyIGU9SShwKG4pLHIpO2lmKG51bGw9PWU/dm9pZCAwOmUuc2V0KXJldHVybiBlLnNldC5jYWxsKG4uayx0KSwhMDtpZighbi5QKXt2YXIgaT16KHAobiksciksbz1udWxsPT1pP3ZvaWQgMDppW1FdO2lmKG8mJm8udD09PXQpcmV0dXJuIG4ub1tyXT10LG4uRFtyXT0hMSwhMDtpZihjKHQsaSkmJih2b2lkIDAhPT10fHx1KG4udCxyKSkpcmV0dXJuITA7RShuKSxrKG4pfXJldHVybiBuLm9bcl09PT10JiZcIm51bWJlclwiIT10eXBlb2YgdCYmKHZvaWQgMCE9PXR8fHIgaW4gbi5vKXx8KG4ub1tyXT10LG4uRFtyXT0hMCwhMCl9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMCE9PXoobi50LHIpfHxyIGluIG4udD8obi5EW3JdPSExLEUobiksayhuKSk6ZGVsZXRlIG4uRFtyXSxuLm8mJmRlbGV0ZSBuLm9bcl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihuLHIpe3ZhciB0PXAobiksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PW4uaXx8XCJsZW5ndGhcIiE9PXIsZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6dFtyXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXtuKDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuLnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe24oMTIpfX0sb249e307aShlbiwoZnVuY3Rpb24obixyKXtvbltuXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxvbi5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihyLHQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxMyksb24uc2V0LmNhbGwodGhpcyxyLHQsdm9pZCAwKX0sb24uc2V0PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09dCYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHJbMF0sdCxlLHJbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIpe3ZhciBlPXRoaXM7dGhpcy5nPUIsdGhpcy5GPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbihyLGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXI7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciB0O3JldHVybih0PWkpLmNhbGwuYXBwbHkodCxbcixuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNyksdChyKSl7dmFyIGM9dyhlKSxzPVIoZSxyLHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P08oYyk6ZyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBPKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCFyfHxcIm9iamVjdFwiIT10eXBlb2Ygcil7aWYodm9pZCAwPT09KGY9aShyKSkmJihmPXIpLGY9PT1IJiYoZj12b2lkIDApLGUuRiYmZChmLCEwKSxvKXt2YXIgcD1bXSxsPVtdO2IoXCJQYXRjaGVzXCIpLk0ocixmLHAsbCksbyhwLGwpfXJldHVybiBmfW4oMjEscil9LHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gZnVuY3Rpb24ocil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWlbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGUucHJvZHVjZVdpdGhQYXRjaGVzKHIsKGZ1bmN0aW9uKHIpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbcl0uY29uY2F0KGkpKX0pKX07dmFyIHQsaSxvPWUucHJvZHVjZShuLHIsKGZ1bmN0aW9uKG4scil7dD1uLGk9cn0pKTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmbyBpbnN0YW5jZW9mIFByb21pc2U/by50aGVuKChmdW5jdGlvbihuKXtyZXR1cm5bbix0LGldfSkpOltvLHQsaV19LFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHIudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUoci5hdXRvRnJlZXplKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXt0KGUpfHxuKDgpLHIoZSkmJihlPUQoZSkpO3ZhciBpPXcodGhpcyksbz1SKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsZyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKHIsdCl7dmFyIGU9ciYmcltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHxuKDkpLGUuSSYmbigxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHQpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24obil7dGhpcy5GPW59LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihyKXtyJiYhQiYmbigyMCksdGhpcy5nPXJ9LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKG4sdCl7dmFyIGU7Zm9yKGU9dC5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9dFtlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXtuPWkudmFsdWU7YnJlYWt9fWU+LTEmJih0PXQuc2xpY2UoZSsxKSk7dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gcihuKT9vKG4sdCk6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sdCl9KSl9LGV9KCksYW49bmV3IHVuLGZuPWFuLnByb2R1Y2UsY249YW4ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoYW4pLHNuPWFuLnNldEF1dG9GcmVlemUuYmluZChhbiksdm49YW4uc2V0VXNlUHJveGllcy5iaW5kKGFuKSxwbj1hbi5hcHBseVBhdGNoZXMuYmluZChhbiksbG49YW4uY3JlYXRlRHJhZnQuYmluZChhbiksZG49YW4uZmluaXNoRHJhZnQuYmluZChhbik7ZXhwb3J0IGRlZmF1bHQgZm47ZXhwb3J0e3VuIGFzIEltbWVyLHBuIGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsbG4gYXMgY3JlYXRlRHJhZnQsRCBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxOIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxUIGFzIGVuYWJsZVBhdGNoZXMsZG4gYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsciBhcyBpc0RyYWZ0LHQgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsZm4gYXMgcHJvZHVjZSxjbiBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsc24gYXMgc2V0QXV0b0ZyZWV6ZSx2biBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRGVidWdWYWx1ZSwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKGNyZWF0ZVN0YXRlKSB7XG4gIGxldCBzdGF0ZTtcbiAgY29uc3QgbGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgY29uc3Qgc2V0U3RhdGUgPSAocGFydGlhbCwgcmVwbGFjZSkgPT4ge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHR5cGVvZiBwYXJ0aWFsID09PSBcImZ1bmN0aW9uXCIgPyBwYXJ0aWFsKHN0YXRlKSA6IHBhcnRpYWw7XG4gICAgaWYgKG5leHRTdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcbiAgICAgIHN0YXRlID0gcmVwbGFjZSA/IG5leHRTdGF0ZSA6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCBuZXh0U3RhdGUpO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcihzdGF0ZSwgcHJldmlvdXNTdGF0ZSkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiBzdGF0ZTtcbiAgY29uc3Qgc3Vic2NyaWJlV2l0aFNlbGVjdG9yID0gKGxpc3RlbmVyLCBzZWxlY3RvciA9IGdldFN0YXRlLCBlcXVhbGl0eUZuID0gT2JqZWN0LmlzKSA9PiB7XG4gICAgY29uc29sZS53YXJuKFwiW0RFUFJFQ0FURURdIFBsZWFzZSB1c2UgYHN1YnNjcmliZVdpdGhTZWxlY3RvcmAgbWlkZGxld2FyZVwiKTtcbiAgICBsZXQgY3VycmVudFNsaWNlID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyVG9BZGQoKSB7XG4gICAgICBjb25zdCBuZXh0U2xpY2UgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgICBpZiAoIWVxdWFsaXR5Rm4oY3VycmVudFNsaWNlLCBuZXh0U2xpY2UpKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2xpY2UgPSBjdXJyZW50U2xpY2U7XG4gICAgICAgIGxpc3RlbmVyKGN1cnJlbnRTbGljZSA9IG5leHRTbGljZSwgcHJldmlvdXNTbGljZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXJUb0FkZCk7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXJUb0FkZCk7XG4gIH07XG4gIGNvbnN0IHN1YnNjcmliZSA9IChsaXN0ZW5lciwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pID0+IHtcbiAgICBpZiAoc2VsZWN0b3IgfHwgZXF1YWxpdHlGbikge1xuICAgICAgcmV0dXJuIHN1YnNjcmliZVdpdGhTZWxlY3RvcihsaXN0ZW5lciwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gKCkgPT4gbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gIH07XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgY29uc3QgYXBpID0geyBzZXRTdGF0ZSwgZ2V0U3RhdGUsIHN1YnNjcmliZSwgZGVzdHJveSB9O1xuICBzdGF0ZSA9IGNyZWF0ZVN0YXRlKHNldFN0YXRlLCBnZXRTdGF0ZSwgYXBpKTtcbiAgcmV0dXJuIGFwaTtcbn1cblxuY29uc3QgaXNTU1IgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cubmF2aWdhdG9yIHx8IC9TZXJ2ZXJTaWRlUmVuZGVyaW5nfF5EZW5vXFwvLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBpc1NTUiA/IHVzZUVmZmVjdCA6IHVzZUxheW91dEVmZmVjdDtcbmZ1bmN0aW9uIGNyZWF0ZShjcmVhdGVTdGF0ZSkge1xuICBjb25zdCBhcGkgPSB0eXBlb2YgY3JlYXRlU3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNyZWF0ZVN0b3JlKGNyZWF0ZVN0YXRlKSA6IGNyZWF0ZVN0YXRlO1xuICBjb25zdCB1c2VTdG9yZSA9IChzZWxlY3RvciA9IGFwaS5nZXRTdGF0ZSwgZXF1YWxpdHlGbiA9IE9iamVjdC5pcykgPT4ge1xuICAgIGNvbnN0IFssIGZvcmNlVXBkYXRlXSA9IHVzZVJlZHVjZXIoKGMpID0+IGMgKyAxLCAwKTtcbiAgICBjb25zdCBzdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHN0YXRlUmVmID0gdXNlUmVmKHN0YXRlKTtcbiAgICBjb25zdCBzZWxlY3RvclJlZiA9IHVzZVJlZihzZWxlY3Rvcik7XG4gICAgY29uc3QgZXF1YWxpdHlGblJlZiA9IHVzZVJlZihlcXVhbGl0eUZuKTtcbiAgICBjb25zdCBlcnJvcmVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBjdXJyZW50U2xpY2VSZWYgPSB1c2VSZWYoKTtcbiAgICBpZiAoY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgfVxuICAgIGxldCBuZXdTdGF0ZVNsaWNlO1xuICAgIGxldCBoYXNOZXdTdGF0ZVNsaWNlID0gZmFsc2U7XG4gICAgaWYgKHN0YXRlUmVmLmN1cnJlbnQgIT09IHN0YXRlIHx8IHNlbGVjdG9yUmVmLmN1cnJlbnQgIT09IHNlbGVjdG9yIHx8IGVxdWFsaXR5Rm5SZWYuY3VycmVudCAhPT0gZXF1YWxpdHlGbiB8fCBlcnJvcmVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIG5ld1N0YXRlU2xpY2UgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgICBoYXNOZXdTdGF0ZVNsaWNlID0gIWVxdWFsaXR5Rm4oY3VycmVudFNsaWNlUmVmLmN1cnJlbnQsIG5ld1N0YXRlU2xpY2UpO1xuICAgIH1cbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChoYXNOZXdTdGF0ZVNsaWNlKSB7XG4gICAgICAgIGN1cnJlbnRTbGljZVJlZi5jdXJyZW50ID0gbmV3U3RhdGVTbGljZTtcbiAgICAgIH1cbiAgICAgIHN0YXRlUmVmLmN1cnJlbnQgPSBzdGF0ZTtcbiAgICAgIHNlbGVjdG9yUmVmLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICAgIGVxdWFsaXR5Rm5SZWYuY3VycmVudCA9IGVxdWFsaXR5Rm47XG4gICAgICBlcnJvcmVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICBjb25zdCBzdGF0ZUJlZm9yZVN1YnNjcmlwdGlvblJlZiA9IHVzZVJlZihzdGF0ZSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcbiAgICAgICAgICBjb25zdCBuZXh0U3RhdGVTbGljZSA9IHNlbGVjdG9yUmVmLmN1cnJlbnQobmV4dFN0YXRlKTtcbiAgICAgICAgICBpZiAoIWVxdWFsaXR5Rm5SZWYuY3VycmVudChjdXJyZW50U2xpY2VSZWYuY3VycmVudCwgbmV4dFN0YXRlU2xpY2UpKSB7XG4gICAgICAgICAgICBzdGF0ZVJlZi5jdXJyZW50ID0gbmV4dFN0YXRlO1xuICAgICAgICAgICAgY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPSBuZXh0U3RhdGVTbGljZTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGVycm9yZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gYXBpLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gICAgICBpZiAoYXBpLmdldFN0YXRlKCkgIT09IHN0YXRlQmVmb3JlU3Vic2NyaXB0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3Qgc2xpY2VUb1JldHVybiA9IGhhc05ld1N0YXRlU2xpY2UgPyBuZXdTdGF0ZVNsaWNlIDogY3VycmVudFNsaWNlUmVmLmN1cnJlbnQ7XG4gICAgdXNlRGVidWdWYWx1ZShzbGljZVRvUmV0dXJuKTtcbiAgICByZXR1cm4gc2xpY2VUb1JldHVybjtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbih1c2VTdG9yZSwgYXBpKTtcbiAgdXNlU3RvcmVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUud2FybihcIlt1c2VTdG9yZSwgYXBpXSA9IGNyZWF0ZSgpIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NFwiKTtcbiAgICBjb25zdCBpdGVtcyA9IFt1c2VTdG9yZSwgYXBpXTtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgZG9uZSA9IGl0ZW1zLmxlbmd0aCA8PSAwO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogaXRlbXMuc2hpZnQoKSwgZG9uZSB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHJldHVybiB1c2VTdG9yZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBwcm9kdWNlLCB7RHJhZnR9IGZyb20gJ2ltbWVyJztcbmltcG9ydCBjcmVhdGUsIHtTdGF0ZSwgU3RhdGVDcmVhdG9yfSBmcm9tICd6dXN0YW5kJztcblxuY29uc3QgaW1tZXIgPVxuICAgIDxUIGV4dGVuZHMgU3RhdGU+KGNvbmZpZzogU3RhdGVDcmVhdG9yPFQsIChmbjogKGRyYWZ0OiBEcmFmdDxUPikgPT4gdm9pZCkgPT4gdm9pZD4pOiBTdGF0ZUNyZWF0b3I8VD4gPT5cbiAgICAoc2V0LCBnZXQsIGFwaSkgPT5cbiAgICAgICAgY29uZmlnKGZuID0+IHNldChwcm9kdWNlPFQ+KGZuKSksIGdldCwgYXBpKTtcblxudHlwZSBTdG9yZVN0YXRlID0ge1xuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICBzdGFydGluZ0xpbmU6IG51bWJlcjtcbiAgICBzZWxlY3RlZFRleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgaGlnaGxpZ2h0VGV4dDogc3RyaW5nIHwgbnVsbDtcbiAgICBwcm9tcHQ6IHN0cmluZztcbiAgICBzdG9wOiBzdHJpbmdbXTtcbiAgICBpc0FuYWx5emluZzogYm9vbGVhbjtcbiAgICBtb2RlbFJlc3BvbnNlOiBzdHJpbmcgfCBudWxsO1xuICAgIGVycm9yOiBzdHJpbmcgfCBudWxsO1xuICAgIGxhbmd1YWdlOiBzdHJpbmc7XG4gICAgdXBkYXRlOiAoZm46IChkcmFmdDogRHJhZnQ8U3RvcmVTdGF0ZT4pID0+IHZvaWQpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlU3RvcmUgPSBjcmVhdGU8U3RvcmVTdGF0ZT4oXG4gICAgaW1tZXIoc2V0ID0+ICh7XG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgc3RhcnRpbmdMaW5lOiAxLFxuICAgICAgICBzZWxlY3RlZFRleHQ6IG51bGwsXG4gICAgICAgIGhpZ2hsaWdodFRleHQ6IG51bGwsXG4gICAgICAgIGxhbmd1YWdlOiBudWxsLFxuICAgICAgICBwcm9tcHQ6ICcnLFxuICAgICAgICBzdG9wOiBbXSxcbiAgICAgICAgaXNBbmFseXppbmc6IGZhbHNlLFxuICAgICAgICBtb2RlbFJlc3BvbnNlOiBudWxsLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdXBkYXRlOiBmbiA9PiB7XG4gICAgICAgICAgICBzZXQoZm4pO1xuICAgICAgICB9LFxuICAgIH0pKVxuKTtcbiIsImltcG9ydCB7V2Vidmlld01lc3NhZ2V9IGZyb20gJy4uLy4uLy4uL2xpYi9zcmMvd2Vidmlld3MvbWVzc2FnZSc7XG5cbmRlY2xhcmUgY29uc3QgYWNxdWlyZVZzQ29kZUFwaTogKCkgPT4gVlNDb2RlQXBpO1xuXG5pbnRlcmZhY2UgVlNDb2RlQXBpIHtcbiAgICBnZXRTdGF0ZTogKCkgPT4gYW55O1xuICAgIHNldFN0YXRlOiAobmV3U3RhdGU6IGFueSkgPT4gYW55O1xuICAgIHBvc3RNZXNzYWdlOiAobWVzc2FnZTogYW55KSA9PiB2b2lkO1xufVxuXG5jbGFzcyBWU0NvZGVXcmFwcGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZzY29kZUFwaTogVlNDb2RlQXBpID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xuXG4gICAgLyoqXG4gICAgICogU2VuZCBtZXNzYWdlIHRvIHRoZSBleHRlbnNpb24gZnJhbWV3b3JrLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICovXG4gICAgcHVibGljIHBvc3RXZWJWaWV3TWVzc2FnZShtZXNzYWdlOiBXZWJ2aWV3TWVzc2FnZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnZzY29kZUFwaS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgbGlzdGVuZXIgZm9yIG1lc3NhZ2VzIGZyb20gZXh0ZW5zaW9uIGZyYW1ld29yay5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIGV4dGVuc2lvbiBzZW5kcyBhIG1lc3NhZ2VcbiAgICAgKiBAcmV0dXJucyBmdW5jdGlvbiB0byBjbGVhbiB1cCB0aGUgbWVzc2FnZSBldmVudExpc3RlbmVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBvbk1lc3NhZ2UoY2FsbGJhY2s6IChtZXNzYWdlOiBhbnkpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbi8vIFNpbmdsZXRvbiB0byBwcmV2ZW50IG11bHRpcGxlIGZldGNoZXMgb2YgVnNDb2RlQVBJLlxuZXhwb3J0IGNvbnN0IFZTQ29kZUFQSTogVlNDb2RlV3JhcHBlciA9IG5ldyBWU0NvZGVXcmFwcGVyKCk7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi92czIwMTUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZzMjAxNS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdoaWdobGlnaHQuanMvc3R5bGVzL3ZzMjAxNS5jc3MnO1xuXG5pbnRlcmZhY2UgQ29kZVN5bnRheFByb3BzIHtcbiAgICBodG1sVGV4dDogc3RyaW5nOyAvLyB0ZXh0IGFzIGh0bWxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvZGVTeW50YXgocHJvcHM6IENvZGVTeW50YXhQcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlbGF0aXZlIGdyb3VwIG92ZXJmbG93LWhpZGRlbiBvdmVyZmxvdy15LWF1dG9cIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcyMGVtJyxcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LXhzIGZvbnQtbW9ubyB3aGl0ZXNwYWNlLXByZSBwLTQgYmctdnNjb2RlLWlucHV0LWJhY2tncm91bmQgb3ZlcmZsb3cteS1hdXRvXCJcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcHJvcHMuaHRtbFRleHR9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBSZXNwb25zZVRleHQge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBpc0Vycm9yPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlVGV4dChwcm9wczogUmVzcG9uc2VUZXh0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBncm91cCBvdmVyZmxvdy1oaWRkZW4gdGV4dC1iYXNlIHBiLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMiBtYi00IHRleHQteHMgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGVzdCB0ZXh0LXZzY29kZS1mb3JlZ3JvdW5kXCI+UmVzdWx0PC9kaXY+XG4gICAgICAgICAgICB7cHJvcHMudGV4dCA/IChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHdoaXRlc3BhY2UtcHJlLXdyYXAgdGV4dC1zbSAke1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuaXNFcnJvciA/ICd0ZXh0LXZzY29kZS1kZWJ1Z0NvbnNvbGUtZXJyb3JGb3JlZ3JvdW5kJyA6ICd0ZXh0LXZzY29kZS1mb3JlZ3JvdW5kJ1xuICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy50ZXh0fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IHByb3BzLnRleHQgPT09ICcnID8gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRhbGljIG9wYWNpdHktNTAgdGV4dC1zbSB0ZXh0LXZzY29kZS1kZWJ1Z0NvbnNvbGUtZXJyb3JGb3JlZ3JvdW5kXCI+XG4gICAgICAgICAgICAgICAgICAgIE5vIHJlc3BvbnNlIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiIsImV4cG9ydCB2YXIgSWNvbnNNYW5pZmVzdCA9IFtcbiAge1xuICAgIFwiaWRcIjogXCJmYVwiLFxuICAgIFwibmFtZVwiOiBcIkZvbnQgQXdlc29tZVwiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL1wiLFxuICAgIFwibGljZW5zZVwiOiBcIkNDIEJZIDQuMCBMaWNlbnNlXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzQuMC9cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImlvXCIsXG4gICAgXCJuYW1lXCI6IFwiSW9uaWNvbnMgNFwiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vaW9uaWNvbnMuY29tL1wiLFxuICAgIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljb25zL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImlvNVwiLFxuICAgIFwibmFtZVwiOiBcIklvbmljb25zIDVcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2lvbmljb25zLmNvbS9cIixcbiAgICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pY29ucy9ibG9iL21hc3Rlci9MSUNFTlNFXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtZFwiLFxuICAgIFwibmFtZVwiOiBcIk1hdGVyaWFsIERlc2lnbiBpY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHA6Ly9nb29nbGUuZ2l0aHViLmlvL21hdGVyaWFsLWRlc2lnbi1pY29ucy9cIixcbiAgICBcImxpY2Vuc2VcIjogXCJBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbWF0ZXJpYWwtZGVzaWduLWljb25zL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInRpXCIsXG4gICAgXCJuYW1lXCI6IFwiVHlwaWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwOi8vcy1pbmdzLmNvbS90eXBpY29ucy9cIixcbiAgICBcImxpY2Vuc2VcIjogXCJDQyBCWS1TQSAzLjBcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMy4wL1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZ29cIixcbiAgICBcIm5hbWVcIjogXCJHaXRodWIgT2N0aWNvbnMgaWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL29jdGljb25zLmdpdGh1Yi5jb20vXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ByaW1lci9vY3RpY29ucy9ibG9iL21hc3Rlci9MSUNFTlNFXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJmaVwiLFxuICAgIFwibmFtZVwiOiBcIkZlYXRoZXJcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2ZlYXRoZXJpY29ucy5jb20vXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2ZlYXRoZXJpY29ucy9mZWF0aGVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImdpXCIsXG4gICAgXCJuYW1lXCI6IFwiR2FtZSBJY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZ2FtZS1pY29ucy5uZXQvXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiQ0MgQlkgMy4wXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC9cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIndpXCIsXG4gICAgXCJuYW1lXCI6IFwiV2VhdGhlciBJY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZXJpa2Zsb3dlcnMuZ2l0aHViLmlvL3dlYXRoZXItaWNvbnMvXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiU0lMIE9GTCAxLjFcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwOi8vc2NyaXB0cy5zaWwub3JnL09GTFwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZGlcIixcbiAgICBcIm5hbWVcIjogXCJEZXZpY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vdm9yaWxsYXouZ2l0aHViLmlvL2Rldmljb25zL1wiLFxuICAgIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJhaVwiLFxuICAgIFwibmFtZVwiOiBcIkFudCBEZXNpZ24gSWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduLWljb25zXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImJzXCIsXG4gICAgXCJuYW1lXCI6IFwiQm9vdHN0cmFwIEljb25zXCIsXG4gICAgXCJwcm9qZWN0VXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvaWNvbnNcIixcbiAgICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicmlcIixcbiAgICBcIm5hbWVcIjogXCJSZW1peCBJY29uXCIsXG4gICAgXCJwcm9qZWN0VXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1JlbWl4LURlc2lnbi9SZW1peEljb25cIixcbiAgICBcImxpY2Vuc2VcIjogXCJBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImZjXCIsXG4gICAgXCJuYW1lXCI6IFwiRmxhdCBDb2xvciBJY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9pY29uczgvZmxhdC1jb2xvci1pY29uc1wiLFxuICAgIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJnclwiLFxuICAgIFwibmFtZVwiOiBcIkdyb21tZXQtSWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZ3JvbW1ldC9ncm9tbWV0LWljb25zXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjBcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJoaVwiLFxuICAgIFwibmFtZVwiOiBcIkhlcm9pY29uc1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS90YWlsd2luZGxhYnMvaGVyb2ljb25zXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNpXCIsXG4gICAgXCJuYW1lXCI6IFwiU2ltcGxlIEljb25zXCIsXG4gICAgXCJwcm9qZWN0VXJsXCI6IFwiaHR0cHM6Ly9zaW1wbGVpY29ucy5vcmcvXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiQ0MwIDEuMCBVbml2ZXJzYWxcIixcbiAgICBcImxpY2Vuc2VVcmxcIjogXCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wL1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiaW1cIixcbiAgICBcIm5hbWVcIjogXCJJY29Nb29uIEZyZWVcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vS2V5YW1vb24vSWNvTW9vbi1GcmVlXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiQ0MgQlkgNC4wIExpY2Vuc2VcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImJpXCIsXG4gICAgXCJuYW1lXCI6IFwiQm94SWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYXRpc2F3ZC9ib3hpY29uc1wiLFxuICAgIFwibGljZW5zZVwiOiBcIkNDIEJZIDQuMCBMaWNlbnNlXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJjZ1wiLFxuICAgIFwibmFtZVwiOiBcImNzcy5nZ1wiLFxuICAgIFwicHJvamVjdFVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9hc3RyaXQvY3NzLmdnXCIsXG4gICAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gICAgXCJsaWNlbnNlVXJsXCI6IFwiaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInZzY1wiLFxuICAgIFwibmFtZVwiOiBcIlZTIENvZGUgSWNvbnNcIixcbiAgICBcInByb2plY3RVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS1jb2RpY29uc1wiLFxuICAgIFwibGljZW5zZVwiOiBcIkNDIEJZIDQuMFwiLFxuICAgIFwibGljZW5zZVVybFwiOiBcImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS80LjAvXCJcbiAgfVxuXSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIERlZmF1bHRDb250ZXh0ID0ge1xuICBjb2xvcjogdW5kZWZpbmVkLFxuICBzaXplOiB1bmRlZmluZWQsXG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICBzdHlsZTogdW5kZWZpbmVkLFxuICBhdHRyOiB1bmRlZmluZWRcbn07XG5leHBvcnQgdmFyIEljb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCAmJiBSZWFjdC5jcmVhdGVDb250ZXh0KERlZmF1bHRDb250ZXh0KTsiLCJ2YXIgX19hc3NpZ24gPSB0aGlzICYmIHRoaXMuX19hc3NpZ24gfHwgZnVuY3Rpb24gKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHMgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb25Db250ZXh0LCBEZWZhdWx0Q29udGV4dCB9IGZyb20gJy4vaWNvbkNvbnRleHQnO1xuXG5mdW5jdGlvbiBUcmVlMkVsZW1lbnQodHJlZSkge1xuICByZXR1cm4gdHJlZSAmJiB0cmVlLm1hcChmdW5jdGlvbiAobm9kZSwgaSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KG5vZGUudGFnLCBfX2Fzc2lnbih7XG4gICAgICBrZXk6IGlcbiAgICB9LCBub2RlLmF0dHIpLCBUcmVlMkVsZW1lbnQobm9kZS5jaGlsZCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdlbkljb24oZGF0YSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJhc2UsIF9fYXNzaWduKHtcbiAgICAgIGF0dHI6IF9fYXNzaWduKHt9LCBkYXRhLmF0dHIpXG4gICAgfSwgcHJvcHMpLCBUcmVlMkVsZW1lbnQoZGF0YS5jaGlsZCkpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEljb25CYXNlKHByb3BzKSB7XG4gIHZhciBlbGVtID0gZnVuY3Rpb24gKGNvbmYpIHtcbiAgICB2YXIgYXR0ciA9IHByb3BzLmF0dHIsXG4gICAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgICB0aXRsZSA9IHByb3BzLnRpdGxlLFxuICAgICAgICBzdmdQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiYXR0clwiLCBcInNpemVcIiwgXCJ0aXRsZVwiXSk7XG5cbiAgICB2YXIgY29tcHV0ZWRTaXplID0gc2l6ZSB8fCBjb25mLnNpemUgfHwgXCIxZW1cIjtcbiAgICB2YXIgY2xhc3NOYW1lO1xuICAgIGlmIChjb25mLmNsYXNzTmFtZSkgY2xhc3NOYW1lID0gY29uZi5jbGFzc05hbWU7XG4gICAgaWYgKHByb3BzLmNsYXNzTmFtZSkgY2xhc3NOYW1lID0gKGNsYXNzTmFtZSA/IGNsYXNzTmFtZSArICcgJyA6ICcnKSArIHByb3BzLmNsYXNzTmFtZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7XG4gICAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgICAgc3Ryb2tlV2lkdGg6IFwiMFwiXG4gICAgfSwgY29uZi5hdHRyLCBhdHRyLCBzdmdQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogX19hc3NpZ24oX19hc3NpZ24oe1xuICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IgfHwgY29uZi5jb2xvclxuICAgICAgfSwgY29uZi5zdHlsZSksIHByb3BzLnN0eWxlKSxcbiAgICAgIGhlaWdodDogY29tcHV0ZWRTaXplLFxuICAgICAgd2lkdGg6IGNvbXB1dGVkU2l6ZSxcbiAgICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICB9KSwgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlKSwgcHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBJY29uQ29udGV4dCAhPT0gdW5kZWZpbmVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbmYpIHtcbiAgICByZXR1cm4gZWxlbShjb25mKTtcbiAgfSkgOiBlbGVtKERlZmF1bHRDb250ZXh0KTtcbn0iLCJleHBvcnQgKiBmcm9tIFwiLi9pY29uc01hbmlmZXN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pY29uQmFzZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaWNvbkNvbnRleHRcIjsiLCIvLyBUSElTIEZJTEUgSVMgQVVUTyBHRU5FUkFURURcbmltcG9ydCB7IEdlbkljb24gfSBmcm9tICcuLi9saWInO1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0FjY291bnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTYgNy45OTJDMTYgMy41OCAxMi40MTYgMCA4IDBTMCAzLjU4IDAgNy45OTJjMCAyLjQzIDEuMTA0IDQuNjIgMi44MzIgNi4wOS4wMTYuMDE2LjAzMi4wMTYuMDMyLjAzMi4xNDQuMTEyLjI4OC4yMjQuNDQ4LjMzNi4wOC4wNDguMTQ0LjExMS4yMjQuMTc1QTcuOTggNy45OCAwIDAgMCA4LjAxNiAxNmE3Ljk4IDcuOTggMCAwIDAgNC40OC0xLjM3NWMuMDgtLjA0OC4xNDQtLjExMS4yMjQtLjE2LjE0NC0uMTExLjMwNC0uMjIzLjQ0OC0uMzM1LjAxNi0uMDE2LjAzMi0uMDE2LjAzMi0uMDMyIDEuNjk2LTEuNDg3IDIuOC0zLjY3NiAyLjgtNi4xMDZ6bS04IDcuMDAxYy0xLjUwNCAwLTIuODgtLjQ4LTQuMDE2LTEuMjc5LjAxNi0uMTI4LjA0OC0uMjU1LjA4LS4zODNhNC4xNyA0LjE3IDAgMCAxIC40MTYtLjk5MWMuMTc2LS4zMDQuMzg0LS41NzYuNjQtLjgxNi4yNC0uMjQuNTI4LS40NjMuODE2LS42MzkuMzA0LS4xNzYuNjI0LS4zMDQuOTc2LS40QTQuMTUgNC4xNSAwIDAgMSA4IDEwLjM0MmE0LjE4NSA0LjE4NSAwIDAgMSAyLjkyOCAxLjE2NmMuMzY4LjM2OC42NTYuOC44NjQgMS4yOTUuMTEyLjI4OC4xOTIuNTkyLjI0LjkxMUE3LjAzIDcuMDMgMCAwIDEgOCAxNC45OTN6bS0yLjQ0OC03LjRhMi40OSAyLjQ5IDAgMCAxLS4yMDgtMS4wMjRjMC0uMzUxLjA2NC0uNzAzLjIwOC0xLjAyMy4xNDQtLjMyLjMzNi0uNjA3LjU3Ni0uODQ3LjI0LS4yNC41MjgtLjQzMS44NDgtLjU3NS4zMi0uMTQ0LjY3Mi0uMjA4IDEuMDI0LS4yMDguMzY4IDAgLjcwNC4wNjQgMS4wMjQuMjA4LjMyLjE0NC42MDguMzM2Ljg0OC41NzUuMjQuMjQuNDMyLjUyOC41NzYuODQ3LjE0NC4zMi4yMDguNjcyLjIwOCAxLjAyMyAwIC4zNjgtLjA2NC43MDQtLjIwOCAxLjAyM2EyLjg0IDIuODQgMCAwIDEtLjU3Ni44NDggMi44NCAyLjg0IDAgMCAxLS44NDguNTc1IDIuNzE1IDIuNzE1IDAgMCAxLTIuMDY0IDAgMi44NCAyLjg0IDAgMCAxLS44NDgtLjU3NSAyLjUyNiAyLjUyNiAwIDAgMS0uNTYtLjg0OHptNy40MjQgNS4zMDZjMC0uMDMyLS4wMTYtLjA0OC0uMDE2LS4wOGE1LjIyIDUuMjIgMCAwIDAtLjY4OC0xLjQwNiA0Ljg4MyA0Ljg4MyAwIDAgMC0xLjA4OC0xLjEzNSA1LjIwNyA1LjIwNyAwIDAgMC0xLjA0LS42MDggMi44MiAyLjgyIDAgMCAwIC40NjQtLjM4MyA0LjIgNC4yIDAgMCAwIC42MjQtLjc4NCAzLjYyNCAzLjYyNCAwIDAgMCAuNTI4LTEuOTM0IDMuNzEgMy43MSAwIDAgMC0uMjg4LTEuNDcgMy43OTkgMy43OTkgMCAwIDAtLjgxNi0xLjE5OSAzLjg0NSAzLjg0NSAwIDAgMC0xLjItLjggMy43MiAzLjcyIDAgMCAwLTEuNDcyLS4yODcgMy43MiAzLjcyIDAgMCAwLTEuNDcyLjI4OCAzLjYzMSAzLjYzMSAwIDAgMC0xLjIuODE1IDMuODQgMy44NCAwIDAgMC0uOCAxLjE5OSAzLjcxIDMuNzEgMCAwIDAtLjI4OCAxLjQ3YzAgLjM1Mi4wNDguNjg4LjE0NCAxLjAwNy4wOTYuMzM2LjIyNC42NC40LjkyNy4xNi4yODguMzg0LjU0NC42MjQuNzg0LjE0NC4xNDQuMzA0LjI3MS40OC4zODNhNS4xMiA1LjEyIDAgMCAwLTEuMDQuNjI0Yy0uNDE2LjMyLS43ODQuNzAzLTEuMDg4IDEuMTE5YTQuOTk5IDQuOTk5IDAgMCAwLS42ODggMS40MDZjLS4wMTYuMDMyLS4wMTYuMDY0LS4wMTYuMDhDMS43NzYgMTEuNjM2Ljk5MiA5LjkxLjk5MiA3Ljk5Mi45OTIgNC4xNCA0LjE0NC45OTEgOCAuOTkxczcuMDA4IDMuMTQ5IDcuMDA4IDcuMDAxYTYuOTYgNi45NiAwIDAgMS0yLjAzMiA0LjkwN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQWN0aXZhdGVCcmVha3BvaW50cyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNSA1LjVhNC4zOTQgNC4zOTQgMCAwIDEtNCA0LjUgMi45NTUgMi45NTUgMCAwIDAtLjItMUEzLjU2NSAzLjU2NSAwIDAgMCAxNCA1LjVhMy41MDcgMy41MDcgMCAwIDAtNy0uM0EzLjU1MiAzLjU1MiAwIDAgMCA2IDVhNC42MjIgNC42MjIgMCAwIDEgNC41LTRBNC40ODEgNC40ODEgMCAwIDEgMTUgNS41ek01LjUgNmE0LjUgNC41IDAgMSAwIDAgOS4wMDEgNC41IDQuNSAwIDAgMCAwLTl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0FkZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNCA3djFIOHY2SDdWOEgxVjdoNlYxaDF2Nmg2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NBcmNoaXZlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQuNSAxaC0xM2wtLjUuNXYzbC41LjVIMnY4LjVsLjUuNWgxMWwuNS0uNVY1aC41bC41LS41di0zbC0uNS0uNXptLTEgM0gyVjJoMTJ2MmgtLjV6TTMgMTNWNWgxMHY4SDN6bTgtNkg1djFoNlY3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NBcnJvd0JvdGggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zIDlsMi4xNDYgMi4xNDYtLjcwNy43MDgtMy0zdi0uNzA4bDMtMyAuNzA3LjcwOEwzIDhoMTBsLTIuMTQ2LTIuMTQ2LjcwNy0uNzA4IDMgM3YuNzA4bC0zIDMtLjcwNy0uNzA3TDEzIDlIM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQXJyb3dEb3duIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMy4xNDcgOWw1IDVoLjcwN2w1LTUtLjcwNy0uNzA3TDkgMTIuNDM5VjJIOHYxMC40NEwzLjg1NCA4LjI5MiAzLjE0NyA5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NBcnJvd0xlZnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03IDMuMDkzbC01IDVWOC44bDUgNSAuNzA3LS43MDctNC4xNDYtNC4xNDdIMTR2LTFIMy41Nkw3LjcwOCAzLjggNyAzLjA5M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQXJyb3dSaWdodCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTkgMTMuODg3bDUtNVY4LjE4bC01LTUtLjcwNy43MDcgNC4xNDYgNC4xNDdIMnYxaDEwLjQ0TDguMjkyIDEzLjE4bC43MDcuNzA3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NBcnJvd1NtYWxsRG93biAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMC43IDguNjRsLTIuNSAyLjVoLS43TDUgOC42NGwuNy0uNzEgMS42NSAxLjY0VjRoMXY1LjU3TDEwIDcuOTJsLjcuNzJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Fycm93U21hbGxMZWZ0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTYuNSAxMC43TDQgOC4ydi0uN0w2LjUgNWwuNzEuNy0xLjY0IDEuNjVoNS41N3YxSDUuNTdMNy4yMiAxMGwtLjcyLjd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Fycm93U21hbGxSaWdodCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjY0IDVsMi41IDIuNXYuN2wtMi41IDIuNS0uNzEtLjcgMS42NC0xLjY1SDR2LTFoNS41N0w3LjkyIDUuN2wuNzItLjd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Fycm93U21hbGxVcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk01IDYuNUw3LjUgNGguN2wyLjUgMi41LS43LjcxLTEuNjUtMS42NHY1LjU3aC0xVjUuNTdMNS43IDcuMjIgNSA2LjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Fycm93U3dhcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTQuMjA3IDE1LjA2MUwxIDExLjg1NHYtLjcwN0w0LjIwNyA3Ljk0bC43MDcuNzA3LTIuMzUzIDIuMzU0SDE1djFIMi41NmwyLjM1NCAyLjM1My0uNzA3LjcwN3ptNy41ODYtN0wxNSA0Ljg1NHYtLjcwN0wxMS43OTMuOTRsLS43MDcuNzA3TDEzLjQzOSA0SDF2MWgxMi40NGwtMi4zNTQgMi4zNTQuNzA3LjcwN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQXJyb3dVcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjg1NCA3bC01LTVoLS43MDdsLTUgNSAuNzA3LjcwN0w4IDMuNTYxVjE0aDFWMy41Nmw0LjE0NiA0LjE0Ny43MDgtLjcwN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQXp1cmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNS4zNzAyIDEzLjY3OTlMMTEuMzcwMiAxLjY3OTg5QzExLjMwMDYgMS40NzI5MSAxMS4xNjUyIDEuMjk0MzggMTAuOTg0NiAxLjE3MTU5QzEwLjgwNCAxLjA0ODggMTAuNTg4MiAwLjk4ODUxMyAxMC4zNzAyIDAuOTk5ODk2SDUuNjMwMTdDNS40MjA1MiAwLjk5OTM1NCA1LjIxNTk4IDEuMDY0NyA1LjA0NTUxIDEuMTg2NzJDNC44NzUwNCAxLjMwODc1IDQuNzQ3MjQgMS40ODEyNyA0LjY4MDE1IDEuNjc5ODlMMC42MzAxNjUgMTMuNjc5OUMwLjU3NzY0NiAxMy44MzQ2IDAuNTYzODIgMTMuOTk5OCAwLjU4OTk0MyAxNC4xNjExQzAuNjE2MDY2IDE0LjMyMjUgMC42ODEzMzUgMTQuNDc0OSAwLjc4MDAwNyAxNC42MDUyQzAuODc4Njc4IDE0LjczNTQgMS4wMDc3OCAxNC44Mzk1IDEuMTU1OTggMTQuOTA4M0MxLjMwNDE5IDE0Ljk3NzEgMS40NjY5OSAxNS4wMDg2IDEuNjMwMTcgMTQuOTk5OUg0LjU2MDE2QzQuNzY4MDkgMTQuOTk4NCA0Ljk3MDM1IDE0LjkzMiA1LjEzODgzIDE0LjgxMDFDNS4zMDczMSAxNC42ODgzIDUuNDMzNjMgMTQuNTE2OSA1LjUwMDE2IDE0LjMxOTlMNi4xMTAxNSAxMi41Mzk5TDkuMTEwMTUgMTQuODA5OUM5LjI4NDQ4IDE0LjkzNjIgOS40OTQ5NSAxNS4wMDI4IDkuNzEwMTggMTQuOTk5OUgxNC4zOTAyQzE0LjU1MTcgMTUuMDA1MiAxNC43MTIxIDE0Ljk3MTIgMTQuODU3NiAxNC45MDFDMTUuMDAzMiAxNC44MzA3IDE1LjEyOTUgMTQuNzI2MyAxNS4yMjU5IDE0LjU5NjVDMTUuMzIyMiAxNC40NjY4IDE1LjM4NTYgMTQuMzE1NiAxNS40MTA3IDE0LjE1NkMxNS40MzU5IDEzLjk5NjMgMTUuNDIyIDEzLjgzMyAxNS4zNzAyIDEzLjY3OTlaTTkuNzUwMTYgMTQuMzM5OUM5LjY3NzQ4IDE0LjMzOTkgOS42MDY5MyAxNC4zMTUzIDkuNTUwMTUgMTQuMjY5OUwzLjkwMDE4IDEwLjA3OTlMMy44MTAxNiAxMC4wMDk5SDYuODEwMTZMNi44OTAxNyA5Ljc5OTg4TDcuODkwMTcgNy4yNjk4OEwxMC4xMzAyIDEzLjg5OTlDMTAuMTQ4MiAxMy45NTU1IDEwLjE1MTUgMTQuMDE0OCAxMC4xMzk5IDE0LjA3MkMxMC4xMjgzIDE0LjEyOTMgMTAuMTAyMiAxNC4xODI2IDEwLjA2NCAxNC4yMjY5QzEwLjAyNTggMTQuMjcxMSA5Ljk3Njg5IDE0LjMwNDcgOS45MjE5MSAxNC4zMjQ1QzkuODY2OTQgMTQuMzQ0MyA5LjgwNzc4IDE0LjM0OTYgOS43NTAxNiAxNC4zMzk5VjE0LjMzOTlaTTE0LjQyMDEgMTQuMzM5OUgxMC43MDAyQzEwLjc3NDkgMTQuMTI2MiAxMC43NzQ5IDEzLjg5MzUgMTAuNzAwMiAxMy42Nzk5TDYuNjUwMTggMS42Nzk4OUgxMC4zNzAyQzEwLjQ0MDggMS42ODAyNCAxMC41MDk1IDEuNzAyNTggMTAuNTY2OSAxLjc0Mzc5QzEwLjYyNDIgMS43ODUwMSAxMC42NjczIDEuODQzMDggMTAuNjkwMiAxLjkwOTlMMTQuNzQwMiAxMy45MDk5QzE0Ljc1MzggMTMuOTU5NyAxNC43NTYgMTQuMDEyIDE0Ljc0NjQgMTQuMDYyOEMxNC43MzY5IDE0LjExMzYgMTQuNzE1OSAxNC4xNjE1IDE0LjY4NTEgMTQuMjAzQzE0LjY1NDIgMTQuMjQ0NCAxNC42MTQ0IDE0LjI3ODMgMTQuNTY4NSAxNC4zMDJDMTQuNTIyNiAxNC4zMjU3IDE0LjQ3MTggMTQuMzM4NyAxNC40MjAxIDE0LjMzOTlWMTQuMzM5OVpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQmVha2VyU3RvcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIuOTk5OTQgMTUuMDA2SDguMDA3NDZDNy42Mjk4MyAxNC43MjM0IDcuMjkzNDggMTQuMzg4OCA3LjAwOTA4IDE0LjAxMjZMMi45OTk5NCAxNC4wMTdMNC41NDA5NCAxMS4wMDZINS45OTk5N0w1Ljk5OTk3IDExQzUuOTk5OTcgMTAuNjU5NyA2LjAzMzk4IDEwLjMyNzMgNi4wOTg3OCAxMC4wMDZINS4wNDg5NEw2Ljg5Mjk0IDYuNDA4TDYuOTk5OTQgNi4xOTNWMi4wMzZMOC45OTk5NCAyLjAxMlY2LjAwN1Y2LjI0OUw5LjA3MDU4IDYuMzg1ODRDOS4zODA0MyA2LjI1NjEzIDkuNzA2MSA2LjE1NjcyIDEwLjA0MzkgNi4wOTEzMUw5Ljk5OTk0IDYuMDA2VjIuMDA2SDEwLjk5OTlWMS4wMDZIOS45OTM5NFYxTDkuNTM3OTQgMS4wMDVINC45OTk5NFYySDUuOTk5OTRWNS45NTJMMi4xMDU5NCAxMy41NjFDMi4wMzAyMyAxMy43MTMzIDEuOTk0NjUgMTMuODgyNSAyLjAwMjU0IDE0LjA1MjRDMi4wMTA0NCAxNC4yMjI0IDIuMDYxNTYgMTQuMzg3NSAyLjE1MTA2IDE0LjUzMjFDMi4yNDA1NyAxNC42NzY4IDIuMzY1NSAxNC43OTYyIDIuNTE0MDQgMTQuODc5MkMyLjY2MjU4IDE0Ljk2MjEgMi44Mjk4MiAxNS4wMDU3IDIuOTk5OTQgMTUuMDA2Wk04Ljc3NzY5IDcuNjc0MDdDOS40MzU0OCA3LjIzNDU1IDEwLjIwODkgNyAxMSA3QzEyLjA2MDggNyAxMy4wNzgyIDcuNDIxNDkgMTMuODI4MyA4LjE3MTYzQzE0LjU3ODUgOC45MjE3OCAxNSA5LjkzOTEzIDE1IDExQzE1IDExLjc5MTEgMTQuNzY1NCAxMi41NjQ1IDE0LjMyNTkgMTMuMjIyM0MxMy44ODY0IDEzLjg4MDEgMTMuMjYxNiAxNC4zOTI4IDEyLjUzMDcgMTQuNjk1NkMxMS43OTk4IDE0Ljk5ODMgMTAuOTk1NSAxNS4wNzc0IDEwLjIxOTYgMTQuOTIzMUM5LjQ0MzY2IDE0Ljc2ODggOC43MzEwMiAxNC4zODc4IDguMTcxNjEgMTMuODI4NEM3LjYxMjIgMTMuMjY5IDcuMjMxMjIgMTIuNTU2MyA3LjA3Njg4IDExLjc4MDRDNi45MjI1NCAxMS4wMDQ1IDcuMDAxNjcgMTAuMjAwMSA3LjMwNDQyIDkuNDY5MjRDNy42MDcxNyA4LjczODMzIDguMTE5ODkgOC4xMTM2IDguNzc3NjkgNy42NzQwN1pNOC44Nzg2NCAxMy4xMjEzQzkuNDQxMjUgMTMuNjgzOSAxMC4yMDQzIDE0IDExIDE0QzExLjYyMyAxNC4wMDE4IDEyLjIzMTIgMTMuODA5NSAxMi43NCAxMy40NUw4LjU1MDAzIDkuMjYwMDFDOC4xOTA0NiA5Ljc2ODgzIDcuOTk4MTggMTAuMzc3IDcuOTk5OTggMTFDNy45OTk5OCAxMS43OTU2IDguMzE2MDMgMTIuNTU4NyA4Ljg3ODY0IDEzLjEyMTNaTTkuMjU5OTkgOC41NTAwNUwxMy40NDk5IDEyLjc0QzEzLjgwOTUgMTIuMjMxMiAxNC4wMDE4IDExLjYyMyAxNCAxMUMxNCAxMC4yMDQ0IDEzLjY4MzkgOS40NDEyNyAxMy4xMjEzIDguODc4NjZDMTIuNTU4NyA4LjMxNjA1IDExLjc5NTYgOCAxMSA4QzEwLjM3NjkgNy45OTgyIDkuNzY4OCA4LjE5MDQ4IDkuMjU5OTkgOC41NTAwNVpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQmVha2VyIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEzLjg5MyAxMy41NThMMTAgNi4wMDZ2LTRoMXYtMUg5Ljk5NFYxbC0uNDU2LjAwNUg1VjJoMXYzLjk1MmwtMy44OTQgNy42MDlBMSAxIDAgMCAwIDMgMTUuMDA2aDEwYTEgMSAwIDAgMCAuODkzLTEuNDQ4em0tNy03LjE1TDcgNi4xOTNWMi4wMzZsMi0uMDI0djQuMjM3bC4xMS4yMTUgMS44MjcgMy41NDJINS4wNDlsMS44NDQtMy41OTh6TTMgMTQuMDE3bDEuNTQtMy4wMTFoNi45MTZsMS41NDcgM0wzIDE0LjAxN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQmVsbERvdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzIDguOWMuMS42LjIgMS4xLjQgMS43bC42IDEuNy0uNS43SDEwYzAgLjUtLjIgMS0uNiAxLjQtLjQuNC0uOS42LTEuNC42LS41IDAtMS4xLS4yLTEuNC0uNi0uNC0uNC0uNi0uOS0uNi0xLjRIMi41bC0uNS0uNy42LTEuN2MuMi0uOC40LTEuNi40LTIuNFY2YzAtLjcuMS0xLjQuNC0yIC4zLS43LjctMS4yIDEuMi0xLjdzMS4xLS44IDEuOC0xQzYuOSAxLjEgNy41IDEgOCAxYy0uMi4zLS40LjctLjYgMS4xLS4yIDAtLjQgMC0uNy4yLS41LjEtMSAuNC0xLjQuOC0uNC4zLS44LjgtMSAxLjMtLjIuNS0uMyAxLS4zIDEuNnYyLjJjMCAuOS0uMiAxLjgtLjQgMi43TDMuMiAxMmg5LjZsLS40LTEuMWMtLjE3NS0uNTI2LS4yNzQtMS4xMy0uMzYzLTEuNjc0TDEyIDljLjQgMCAuNyAwIDEtLjF6TTggMTRjLjIgMCAuNS0uMS43LS4zLjItLjIuMy0uNC4zLS43SDdjMCAuMy4xLjUuMy43LjIuMi41LjMuNy4zem03LTEwYTMgMyAwIDEgMS02IDAgMyAzIDAgMCAxIDYgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQmVsbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy4zNzcgMTAuNTczYTcuNjMgNy42MyAwIDAgMS0uMzgzLTIuMzhWNi4xOTVhNS4xMTUgNS4xMTUgMCAwIDAtMS4yNjgtMy40NDYgNS4xMzggNS4xMzggMCAwIDAtMy4yNDItMS43MjJjLS42OTQtLjA3Mi0xLjQgMC0yLjA3LjIyNy0uNjcuMjE1LTEuMjguNTc0LTEuNzk0IDEuMDUzYTQuOTIzIDQuOTIzIDAgMCAwLTEuMjA4IDEuNjc1IDUuMDY3IDUuMDY3IDAgMCAwLS40MzEgMi4wMjJ2Mi4yYTcuNjEgNy42MSAwIDAgMS0uMzgzIDIuMzdMMiAxMi4zNDNsLjQ3OS42NThoMy41MDVjMCAuNTI2LjIxNSAxLjA0LjU4NiAxLjQxMi4zNy4zNy44ODUuNTg2IDEuNDEyLjU4Ni41MjYgMCAxLjA0LS4yMTUgMS40MTEtLjU4NnMuNTg3LS44ODYuNTg3LTEuNDEyaDMuNTA1bC40NzgtLjY1OC0uNTg2LTEuNzd6bS00LjY5IDMuMTQ3YS45OTcuOTk3IDAgMCAxLS43MDUuMjk5Ljk5Ny45OTcgMCAwIDEtLjcwNi0uMy45OTcuOTk3IDAgMCAxLS4zLS43MDVoMS45OTlhLjkzOS45MzkgMCAwIDEtLjI4Ny43MDZ6bS01LjUxNS0xLjcxbC4zNzEtMS4xMTRhOC42MzMgOC42MzMgMCAwIDAgLjQ0My0yLjY5MVY2LjAwNGMwLS41NjMuMTItMS4xMTMuMzQ3LTEuNjE2LjIyNy0uNTE0LjU1LS45NjkuOTY5LTEuMzQuNDE5LS4zODIuOTEtLjY3IDEuNDM2LS44MzcuNTM4LS4xOCAxLjEtLjI0IDEuNjUtLjE4YTQuMTQ3IDQuMTQ3IDAgMCAxIDIuNTk3IDEuNCA0LjEzMyA0LjEzMyAwIDAgMSAxLjAwNCAyLjc3NnYyLjAxYzAgLjkwOS4xNDQgMS44MTguNDQzIDIuNjkxbC4zNzEgMS4xMTNoLTkuNjN2LS4wMTJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0JvbGQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNSAxM1YzaDMuMzYyYzEuMTE2IDAgMS45NTQuMjI0IDIuNTE1LjY3My41NjUuNDQ5Ljg0OCAxLjExMy44NDggMS45OTIgMCAuNDY3LS4xMzcuODgxLS40MSAxLjI0My0uMjczLjM1Ny0uNjQ1LjYzNC0xLjExNi44MzEuNTU2LjE1MS45OTMuNDQgMS4zMTQuODY1LjMyNS40MjIuNDg3LjkyNS40ODcgMS41MTEgMCAuODk4LS4yOTkgMS42MDMtLjg5NyAyLjExNi0uNTk4LjUxMy0xLjQ0My43NjktMi41MzYuNzY5SDV6bTEuMzU2LTQuNjc3djMuNTk5aDIuMjRjLjYzIDAgMS4xMjctLjE1OCAxLjQ5LS40NzQuMzY3LS4zMi41NS0uNzYuNTUtMS4zMTkgMC0xLjIwNC0uNjczLTEuODA2LTIuMDItMS44MDZoLTIuMjZ6bTAtMS4wNThoMi4wNDljLjU5MyAwIDEuMDY2LS4xNDQgMS40Mi0uNDMzLjM1Ny0uMjg4LjUzNi0uNjguNTM2LTEuMTc0IDAtLjU1LS4xNjUtLjk0OC0uNDk0LTEuMTk1LS4zMy0uMjUyLS44MzEtLjM3OC0xLjUwNS0uMzc4SDYuMzU2djMuMTh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Jvb2sgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC41IDJIOWwtLjM1LjE1LS42NS42NC0uNjUtLjY0TDcgMkgxLjVsLS41LjV2MTBsLjUuNWg1LjI5bC44Ni44NWguN2wuODYtLjg1aDUuMjlsLjUtLjV2LTEwbC0uNS0uNXptLTcgMTAuMzJsLS4xOC0uMTdMNyAxMkgyVjNoNC43OWwuNzQuNzQtLjAzIDguNTh6TTE0IDEySDlsLS4zNS4xNS0uMTQuMTNWMy43bC43LS43SDE0djl6TTYgNUgzdjFoM1Y1em0wIDRIM3YxaDNWOXpNMyA3aDN2MUgzVjd6bTEwLTJoLTN2MWgzVjV6bS0zIDJoM3YxaC0zVjd6bTAgMmgzdjFoLTNWOXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQm9va21hcmsgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTIuNSAxaC05bC0uNS41djEzbC44NzIuMzM1TDggMTAuMjQ3bDQuMTI4IDQuNTg4TDEzIDE0LjV2LTEzbC0uNS0uNXpNMTIgMTMuMkw4LjM3MiA5LjE2NWgtLjc0NEw0IDEzLjJWMmg4djExLjJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0JyYWNrZXREb3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02IDIuOTcxODRWMi45ODM2MUg1LjkxMDgzQzUuNzExMTMgMi45ODM2MSA1LjUyMzggMy4wMjQyNyA1LjM0ODAyIDMuMTA1MTNDNS4xNzQ2MSAzLjE4Mjc1IDUuMDIxOTMgMy4yODk0MiA0Ljg5MDg2IDMuNDI0MzdDNC43NjQyMSAzLjU1NDc1IDQuNjYxMzUgMy43MTAzNCA0LjU4MjM4IDMuODkyMDVDNC41MDgzMyA0LjA3MTUyIDQuNDcxMzQgNC4yNjAxOSA0LjQ3MTM0IDQuNDU5MDJDNC40NzEzNCA0LjY4NzI1IDQuNDc1MyA0LjkxMzQgNC40ODMyMSA1LjEzNzQ5QzQuNDkxMjUgNS4zNjEwNSA0LjQ5MTI3IDUuNTgyNjIgNC40ODMyNCA1LjgwMjE5QzQuNDc5MTQgNi4wMTk3MyA0LjQ2MDgyIDYuMjMzMyA0LjQyODI2IDYuNDQyODVDNC4zOTUxMyA2LjY1MTc1IDQuMzM5MTMgNi44NTI2MyA0LjI2MDM5IDcuMDQ0NjRDNC4xODA5MSA3LjIzODQzIDQuMDcyNTggNy40MjI1NCAzLjkzNjE2IDcuNTk3MDJDMy44MjM0NSA3Ljc0MTE5IDMuNjg1MzggNy44NzUzOCAzLjUyMjgzIDhDMy42ODUzOCA4LjEyNDYyIDMuODIzNDUgOC4yNTg4MSAzLjkzNjE2IDguNDAyOThDNC4wNzI1OCA4LjU3NzQ2IDQuMTgwOTEgOC43NjE1NyA0LjI2MDM5IDguOTU1MzZDNC4zMzkyMSA5LjE0NzU3IDQuMzk1MTMgOS4zNTAyNCA0LjQyODIzIDkuNTYzMTJDNC40NjA4NCA5Ljc2ODgzIDQuNDc5MTQgOS45ODI0NiA0LjQ4MzI0IDEwLjIwMzlDNC40OTEyNyAxMC40MTk1IDQuNDkxMjUgMTAuNjQxMSA0LjQ4MzIxIDEwLjg2ODZDNC40NzUzIDExLjA4ODUgNC40NzEzNCAxMS4zMTI3IDQuNDcxMzQgMTEuNTQxQzQuNDcxMzQgMTEuNzQ0IDQuNTA4MzggMTEuOTM0NiA0LjU4MjIzIDEyLjExMzdDNC42NjEwNCAxMi4yOTExIDQuNzYzODYgMTIuNDQ2OSA0Ljg5MDg2IDEyLjU4MThDNS4wMjE5NCAxMi43MTI2IDUuMTczOTYgMTIuODE5MSA1LjM0NzYzIDEyLjkwMDhDNS41MjM0NiAxMi45Nzc3IDUuNzEwOTUgMTMuMDE2NCA1LjkxMDgzIDEzLjAxNjRINlYxMy4yVjE0SDUuOTEwODNDNS41OTc0MyAxNCA1LjI5NDA3IDEzLjkzODQgNS4wMDEyOCAxMy44MTUzQzQuNzA4MTggMTMuNjkyIDQuNDQ5NDIgMTMuNTE1MyA0LjIyNTc4IDEzLjI4NUM0LjAwMzExIDEzLjA1NTggMy44Mzc5MyAxMi44MDUgMy43MzI4MyAxMi41MzIzTDMuNzMyMzIgMTIuNTMxQzMuNjMzODcgMTIuMjY1IDMuNTY4MTkgMTEuOTkwMyAzLjUzNTM1IDExLjcwNzJMMy41MzUxNiAxMS43MDU1QzMuNTA2NzcgMTEuNDIxNSAzLjQ5ODcgMTEuMTMxNiAzLjUxMDg0IDEwLjgzNTdDMy41MjI3MiAxMC41NDYyIDMuNTI4NjYgMTAuMjU2NyAzLjUyODY2IDkuOTY3MjFDMy41Mjg2NiA5Ljc2ODgzIDMuNDg5ODYgOS41ODA0NyAzLjQxMjAxIDkuNDAxMDhMMy40MTEyOSA5LjM5OTQyQzMuMzM2NTkgOS4yMTg3MSAzLjIzNDI4IDkuMDYzNyAzLjEwNDEyIDguOTMzNTJMMy4xMDIyMSA4LjkzMTYxQzIuOTc1NzcgOC43OTc2MiAyLjgyNDU3IDguNjkxNTcgMi42NDc0MiA4LjYxMzk2TDIuNjQ2MDEgOC42MTMzNEMyLjQ3MDAxIDguNTMyMzggMi4yODQ2NSA4LjQ5MTggMi4wODkxNyA4LjQ5MThIMlY4LjRWNy42VjcuNTA4MkgyLjA4OTE3QzIuMjg0OTcgNy41MDgyIDIuNDcwNiA3LjQ2OTU0IDIuNjQ2NzIgNy4zOTI1QzIuODI0NjYgNy4zMTA1NSAyLjk3NjQ0IDcuMjA0MDUgMy4xMDMxNyA3LjA3MzU5QzMuMjM0MjMgNi45Mzg2NiAzLjMzNjg3IDYuNzgyOTYgMy40MTE2IDYuNjA2MDFMMy40MTIgNi42MDUwN0MzLjQ4OTc0IDYuNDI1OTQgMy41Mjg2NiA2LjIzNTU2IDMuNTI4NjYgNi4wMzI3OUMzLjUyODY2IDUuNzQzMjkgMy41MjI3MiA1LjQ1Mzc5IDMuNTEwODQgNS4xNjQyOEMzLjQ5ODcgNC44Njg0NCAzLjUwNjc4IDQuNTgwNSAzLjUzNTE5IDQuMzAwNTNMMy41MzUzMyA0LjI5OTE3QzMuNTY4MTQgNC4wMTIwMSAzLjYzMzgyIDMuNzM1MiAzLjczMjMzIDMuNDY4OThMMy43MzI4MiAzLjQ2NzY2QzMuODM3OTIgMy4xOTQ5OCA0LjAwMzExIDIuOTQ0MjIgNC4yMjU3OCAyLjcxNDk4QzQuNDQ5NDIgMi40ODQ3NCA0LjcwODE4IDIuMzA3OTggNS4wMDEyOCAyLjE4NDczQzUuMjk0MDcgMi4wNjE2MSA1LjU5NzQzIDIgNS45MTA4MyAySDZWMi45NzE4NFpNMTMuOTIzMiA4LjQ5MThIMTRWOC40VjcuNlY3LjUwODJIMTMuOTEwOEMxMy43MTUzIDcuNTA4MiAxMy41MyA3LjQ2NzYyIDEzLjM1NCA3LjM4NjY2TDEzLjM1MjYgNy4zODYwNEMxMy4xNzU0IDcuMzA4NDQgMTMuMDI0MiA3LjIwMjM4IDEyLjg5NzggNy4wNjgzOUwxMi44OTU5IDcuMDY2NDhDMTIuNzY1NyA2LjkzNjMgMTIuNjYzNCA2Ljc4MTI5IDEyLjU4ODcgNi42MDA1OEwxMi41ODggNi41OTg5MkMxMi41MTAxIDYuNDE5NTMgMTIuNDcxMyA2LjIzMTE3IDEyLjQ3MTMgNi4wMzI3OUMxMi40NzEzIDUuNzQzMjkgMTIuNDc3MyA1LjQ1Mzc5IDEyLjQ4OTIgNS4xNjQyOEMxMi41MDEzIDQuODY4NDIgMTIuNDkzMiA0LjU3ODQ4IDEyLjQ2NDggNC4yOTQ1NEwxMi40NjQ2IDQuMjkyODVDMTIuNDMxOCA0LjAwOTcxIDEyLjM2NjEgMy43MzUwMiAxMi4yNjc3IDMuNDY4OTdMMTIuMjY3MiAzLjQ2NzY2QzEyLjE2MjEgMy4xOTQ5OSAxMS45OTY5IDIuOTQ0MjIgMTEuNzc0MiAyLjcxNDk4QzExLjU1MDYgMi40ODQ3NCAxMS4yOTE4IDIuMzA3OTggMTAuOTk4NyAyLjE4NDczQzEwLjcwNTkgMi4wNjE2MSAxMC40MDI2IDIgMTAuMDg5MiAySDEwVjIuOFYyLjk4MzYxSDEwLjA4OTJDMTAuMjg5MSAyLjk4MzYxIDEwLjQ3NjUgMy4wMjIzIDEwLjY1MjQgMy4wOTkxN0MxMC44MjYgMy4xODA5MiAxMC45NzgxIDMuMjg3MzYgMTEuMTA5MSAzLjQxODIzQzExLjIzNjEgMy41NTMwNSAxMS4zMzkgMy43MDg4OSAxMS40MTc4IDMuODg2MjhDMTEuNDkxNiA0LjA2NTQgMTEuNTI4NyA0LjI1NTk2IDExLjUyODcgNC40NTkwMkMxMS41Mjg3IDQuNjg3MjcgMTEuNTI0NyA0LjkxMTQ1IDExLjUxNjggNS4xMzE0MkMxMS41MDg4IDUuMzU4OTQgMTEuNTA4NyA1LjU4MDQ5IDExLjUxNjggNS43OTYwNUMxMS41MjA5IDYuMDE3NTQgMTEuNTM5MiA2LjIzMTE3IDExLjU3MTggNi40MzY4OEMxMS42MDQ5IDYuNjQ5NzYgMTEuNjYwOCA2Ljg1MjQzIDExLjczOTYgNy4wNDQ2NEMxMS44MTkxIDcuMjM4NDMgMTEuOTI3NCA3LjQyMjU0IDEyLjA2MzggNy41OTcwMkMxMi4xNzY1IDcuNzQxMTkgMTIuMzE0NiA3Ljg3NTM4IDEyLjQ3NzIgOEMxMi40NjY2IDguMDA4MTQgMTIuNDU2IDguMDE2MzIgMTIuNDQ1NiA4LjAyNDU1QzEyLjk3NjQgOC4wODMzOCAxMy40NzU4IDguMjQ2MDUgMTMuOTIzMiA4LjQ5MThaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTIgOUMxMS40MDY3IDkgMTAuODI2NiA5LjE3NTk1IDEwLjMzMzMgOS41MDU1OUM5LjgzOTk0IDkuODM1MjQgOS40NTU0MyAxMC4zMDM4IDkuMjI4MzYgMTAuODUxOUM5LjAwMTMgMTEuNDAwMSA4Ljk0MTg5IDEyLjAwMzMgOS4wNTc2NSAxMi41ODUzQzkuMTczNCAxMy4xNjcyIDkuNDU5MTIgMTMuNzAxOCA5Ljg3ODY4IDE0LjEyMTNDMTAuMjk4MiAxNC41NDA5IDEwLjgzMjggMTQuODI2NiAxMS40MTQ3IDE0Ljk0MjRDMTEuOTk2NyAxNS4wNTgxIDEyLjU5OTkgMTQuOTk4NyAxMy4xNDgxIDE0Ljc3MTZDMTMuNjk2MiAxNC41NDQ2IDE0LjE2NDggMTQuMTYwMSAxNC40OTQ0IDEzLjY2NjdDMTQuODI0MSAxMy4xNzM0IDE1IDEyLjU5MzMgMTUgMTJDMTQuOTk5IDExLjIwNDcgMTQuNjgyNiAxMC40NDIyIDE0LjEyMDIgOS44Nzk3NkMxMy41NTc4IDkuMzE3MzYgMTIuNzk1NCA5LjAwMDk4IDEyIDlaXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0JyYWNrZXRFcnJvciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTYgMi45NzE4NFYyLjk4MzYxSDUuOTEwODNDNS43MTExMyAyLjk4MzYxIDUuNTIzOCAzLjAyNDI3IDUuMzQ4MDIgMy4xMDUxM0M1LjE3NDYxIDMuMTgyNzUgNS4wMjE5MyAzLjI4OTQyIDQuODkwODYgMy40MjQzN0M0Ljc2NDIxIDMuNTU0NzUgNC42NjEzNSAzLjcxMDM0IDQuNTgyMzggMy44OTIwNUM0LjUwODMzIDQuMDcxNTIgNC40NzEzNCA0LjI2MDE5IDQuNDcxMzQgNC40NTkwMkM0LjQ3MTM0IDQuNjg3MjUgNC40NzUzIDQuOTEzNCA0LjQ4MzIxIDUuMTM3NDlDNC40OTEyNSA1LjM2MTA1IDQuNDkxMjcgNS41ODI2MiA0LjQ4MzI0IDUuODAyMTlDNC40NzkxNCA2LjAxOTczIDQuNDYwODIgNi4yMzMzIDQuNDI4MjYgNi40NDI4NUM0LjM5NTEzIDYuNjUxNzUgNC4zMzkxMyA2Ljg1MjYzIDQuMjYwMzkgNy4wNDQ2NEM0LjE4MDkxIDcuMjM4NDMgNC4wNzI1OCA3LjQyMjU0IDMuOTM2MTYgNy41OTcwMkMzLjgyMzQ1IDcuNzQxMTkgMy42ODUzOCA3Ljg3NTM4IDMuNTIyODMgOEMzLjY4NTM4IDguMTI0NjIgMy44MjM0NSA4LjI1ODgxIDMuOTM2MTYgOC40MDI5OEM0LjA3MjU4IDguNTc3NDYgNC4xODA5MSA4Ljc2MTU3IDQuMjYwMzkgOC45NTUzNkM0LjMzOTIxIDkuMTQ3NTcgNC4zOTUxMyA5LjM1MDI0IDQuNDI4MjMgOS41NjMxMkM0LjQ2MDg0IDkuNzY4ODMgNC40NzkxNCA5Ljk4MjQ2IDQuNDgzMjQgMTAuMjAzOUM0LjQ5MTI3IDEwLjQxOTUgNC40OTEyNSAxMC42NDExIDQuNDgzMjEgMTAuODY4NkM0LjQ3NTMgMTEuMDg4NSA0LjQ3MTM0IDExLjMxMjcgNC40NzEzNCAxMS41NDFDNC40NzEzNCAxMS43NDQgNC41MDgzOCAxMS45MzQ2IDQuNTgyMjMgMTIuMTEzN0M0LjY2MTA0IDEyLjI5MTEgNC43NjM4NiAxMi40NDY5IDQuODkwODYgMTIuNTgxOEM1LjAyMTk0IDEyLjcxMjYgNS4xNzM5NiAxMi44MTkxIDUuMzQ3NjMgMTIuOTAwOEM1LjUyMzQ2IDEyLjk3NzcgNS43MTA5NSAxMy4wMTY0IDUuOTEwODMgMTMuMDE2NEg2VjEzLjJWMTRINS45MTA4M0M1LjU5NzQzIDE0IDUuMjk0MDcgMTMuOTM4NCA1LjAwMTI4IDEzLjgxNTNDNC43MDgxOCAxMy42OTIgNC40NDk0MiAxMy41MTUzIDQuMjI1NzggMTMuMjg1QzQuMDAzMTEgMTMuMDU1OCAzLjgzNzkzIDEyLjgwNSAzLjczMjgzIDEyLjUzMjNMMy43MzIzMiAxMi41MzFDMy42MzM4NyAxMi4yNjUgMy41NjgxOSAxMS45OTAzIDMuNTM1MzUgMTEuNzA3MkwzLjUzNTE2IDExLjcwNTVDMy41MDY3NyAxMS40MjE1IDMuNDk4NyAxMS4xMzE2IDMuNTEwODQgMTAuODM1N0MzLjUyMjcyIDEwLjU0NjIgMy41Mjg2NiAxMC4yNTY3IDMuNTI4NjYgOS45NjcyMUMzLjUyODY2IDkuNzY4ODMgMy40ODk4NiA5LjU4MDQ3IDMuNDEyMDEgOS40MDEwOEwzLjQxMTI5IDkuMzk5NDJDMy4zMzY1OSA5LjIxODcxIDMuMjM0MjggOS4wNjM3IDMuMTA0MTIgOC45MzM1MkwzLjEwMjIxIDguOTMxNjFDMi45NzU3NyA4Ljc5NzYyIDIuODI0NTcgOC42OTE1NyAyLjY0NzQyIDguNjEzOTZMMi42NDYwMSA4LjYxMzM0QzIuNDcwMDEgOC41MzIzOCAyLjI4NDY1IDguNDkxOCAyLjA4OTE3IDguNDkxOEgyVjguNFY3LjZWNy41MDgySDIuMDg5MTdDMi4yODQ5NyA3LjUwODIgMi40NzA2IDcuNDY5NTQgMi42NDY3MiA3LjM5MjVDMi44MjQ2NiA3LjMxMDU1IDIuOTc2NDQgNy4yMDQwNSAzLjEwMzE3IDcuMDczNTlDMy4yMzQyMyA2LjkzODY2IDMuMzM2ODcgNi43ODI5NiAzLjQxMTYgNi42MDYwMUwzLjQxMiA2LjYwNTA3QzMuNDg5NzQgNi40MjU5NCAzLjUyODY2IDYuMjM1NTYgMy41Mjg2NiA2LjAzMjc5QzMuNTI4NjYgNS43NDMyOSAzLjUyMjcyIDUuNDUzNzkgMy41MTA4NCA1LjE2NDI4QzMuNDk4NyA0Ljg2ODQ0IDMuNTA2NzggNC41ODA1IDMuNTM1MTkgNC4zMDA1M0wzLjUzNTMzIDQuMjk5MTdDMy41NjgxNCA0LjAxMjAxIDMuNjMzODIgMy43MzUyIDMuNzMyMzMgMy40Njg5OEwzLjczMjgyIDMuNDY3NjZDMy44Mzc5MiAzLjE5NDk4IDQuMDAzMTEgMi45NDQyMiA0LjIyNTc4IDIuNzE0OThDNC40NDk0MiAyLjQ4NDc0IDQuNzA4MTggMi4zMDc5OCA1LjAwMTI4IDIuMTg0NzNDNS4yOTQwNyAyLjA2MTYxIDUuNTk3NDMgMiA1LjkxMDgzIDJINlYyLjk3MTg0Wk0xMy45MjMyIDguNDkxOEgxNFY4LjRWNy42VjcuNTA4MkgxMy45MTA4QzEzLjcxNTMgNy41MDgyIDEzLjUzIDcuNDY3NjIgMTMuMzU0IDcuMzg2NjZMMTMuMzUyNiA3LjM4NjA0QzEzLjE3NTQgNy4zMDg0NCAxMy4wMjQyIDcuMjAyMzggMTIuODk3OCA3LjA2ODM5TDEyLjg5NTkgNy4wNjY0OEMxMi43NjU3IDYuOTM2MyAxMi42NjM0IDYuNzgxMjkgMTIuNTg4NyA2LjYwMDU4TDEyLjU4OCA2LjU5ODkyQzEyLjUxMDEgNi40MTk1MyAxMi40NzEzIDYuMjMxMTcgMTIuNDcxMyA2LjAzMjc5QzEyLjQ3MTMgNS43NDMyOSAxMi40NzczIDUuNDUzNzkgMTIuNDg5MiA1LjE2NDI4QzEyLjUwMTMgNC44Njg0MiAxMi40OTMyIDQuNTc4NDggMTIuNDY0OCA0LjI5NDU0TDEyLjQ2NDYgNC4yOTI4NUMxMi40MzE4IDQuMDA5NzEgMTIuMzY2MSAzLjczNTAyIDEyLjI2NzcgMy40Njg5N0wxMi4yNjcyIDMuNDY3NjZDMTIuMTYyMSAzLjE5NDk5IDExLjk5NjkgMi45NDQyMiAxMS43NzQyIDIuNzE0OThDMTEuNTUwNiAyLjQ4NDc0IDExLjI5MTggMi4zMDc5OCAxMC45OTg3IDIuMTg0NzNDMTAuNzA1OSAyLjA2MTYxIDEwLjQwMjYgMiAxMC4wODkyIDJIMTBWMi44VjIuOTgzNjFIMTAuMDg5MkMxMC4yODkxIDIuOTgzNjEgMTAuNDc2NSAzLjAyMjMgMTAuNjUyNCAzLjA5OTE3QzEwLjgyNiAzLjE4MDkyIDEwLjk3ODEgMy4yODczNiAxMS4xMDkxIDMuNDE4MjNDMTEuMjM2MSAzLjU1MzA1IDExLjMzOSAzLjcwODg5IDExLjQxNzggMy44ODYyOEMxMS40OTE2IDQuMDY1NCAxMS41Mjg3IDQuMjU1OTYgMTEuNTI4NyA0LjQ1OTAyQzExLjUyODcgNC42ODcyNyAxMS41MjQ3IDQuOTExNDUgMTEuNTE2OCA1LjEzMTQyQzExLjUwODggNS4zNTg5NCAxMS41MDg3IDUuNTgwNDkgMTEuNTE2OCA1Ljc5NjA1QzExLjUyMDkgNi4wMTc1NCAxMS41MzkyIDYuMjMxMTcgMTEuNTcxOCA2LjQzNjg4QzExLjYwNDkgNi42NDk3NiAxMS42NjA4IDYuODUyNDMgMTEuNzM5NiA3LjA0NDY0QzExLjgxOTEgNy4yMzg0MyAxMS45Mjc0IDcuNDIyNTQgMTIuMDYzOCA3LjU5NzAyQzEyLjE3NjUgNy43NDExOSAxMi4zMTQ2IDcuODc1MzggMTIuNDc3MiA4TDEyLjQ0NTYgOC4wMjQ1NUMxMi45NzY0IDguMDgzMzggMTMuNDc1OCA4LjI0NjA1IDEzLjkyMzIgOC40OTE4WlwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAuMzMzMyA5LjUwNTU5QzEwLjgyNjYgOS4xNzU5NSAxMS40MDY3IDkgMTIgOUMxMi43OTU0IDkuMDAwOTggMTMuNTU3OCA5LjMxNzM2IDE0LjEyMDIgOS44Nzk3NkMxNC42ODI2IDEwLjQ0MjIgMTQuOTk5IDExLjIwNDcgMTUgMTJDMTUgMTIuNTkzMyAxNC44MjQxIDEzLjE3MzQgMTQuNDk0NCAxMy42NjY3QzE0LjE2NDggMTQuMTYwMSAxMy42OTYyIDE0LjU0NDYgMTMuMTQ4MSAxNC43NzE2QzEyLjU5OTkgMTQuOTk4NyAxMS45OTY3IDE1LjA1ODEgMTEuNDE0NyAxNC45NDI0QzEwLjgzMjggMTQuODI2NiAxMC4yOTgyIDE0LjU0MDkgOS44Nzg2OCAxNC4xMjEzQzkuNDU5MTIgMTMuNzAxOCA5LjE3MzQgMTMuMTY3MiA5LjA1NzY1IDEyLjU4NTNDOC45NDE4OSAxMi4wMDMzIDkuMDAxMyAxMS40MDAxIDkuMjI4MzYgMTAuODUxOUM5LjQ1NTQzIDEwLjMwMzggOS44Mzk5NCA5LjgzNTI0IDEwLjMzMzMgOS41MDU1OVpNMTMuMTQ2NCAxMC4xNDY0TDEyIDExLjI5MjlMMTAuODUzNiAxMC4xNDY0TDEwLjE0NjUgMTAuODUzNUwxMS4yOTI5IDEyTDEwLjE0NjQgMTMuMTQ2NEwxMC44NTM2IDEzLjg1MzZMMTIgMTIuNzA3MUwxMy4xNDY1IDEzLjg1MzVMMTMuODUzNiAxMy4xNDY0TDEyLjcwNzEgMTJMMTMuODUzNiAxMC44NTM2TDEzLjE0NjQgMTAuMTQ2NFpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQnJpZWZjYXNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjUgNEgxMVYyLjVsLS41LS41aC01bC0uNS41VjRIMS41bC0uNS41djhsLjUuNWgxM2wuNS0uNXYtOGwtLjUtLjV6TTYgM2g0djFINlYzem04IDJ2Ljc2TDEwIDh2LS41TDkuNTEgN2gtM0w2IDcuNVY4TDIgNS43MVY1aDEyek05IDh2MUg3VjhoMnptLTcgNFY2Ljg2bDQgMi4yOXYuMzVsLjUuNWgzbC41LS41di0uMzFsNC0yLjI4VjEySDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Jyb2FkY2FzdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk00LjY2NyAyLjAxMUE2IDYgMCAwIDEgOCAxYTYuMDA3IDYuMDA3IDAgMCAxIDYgNiA2IDYgMCAwIDEtMy45OTYgNS42NTV2LS4wNDRjLjAxNi0uMDE0LjAzMS0uMDMuMDQ2LS4wNDVhMS40OCAxLjQ4IDAgMCAwIC40MzQtMS4wNDZ2LS4xMzdBNS4wNDIgNS4wNDIgMCAwIDAgMTIuMTkgNC4yYTUuMDQgNS4wNCAwIDEgMC02LjY5IDcuMTc2di4xNDRhMS40OCAxLjQ4IDAgMCAwIC40OCAxLjA5di4wNEE1Ljk5OSA1Ljk5OSAwIDAgMSA0LjY2NyAyLjAxelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTkuMzQzIDExLjg2YS40OC40OCAwIDAgMS0uMzQuMTR2Mi41MmEuNDguNDggMCAwIDEtLjQ4LjQ4SDcuNDZjLjAxMSAwLS4wMDQtLjAwNC0uMDM0LS4wMTItLjA3NS0uMDItLjI0MS0uMDY0LS4zMDUtLjEyOWEuNDguNDggMCAwIDEtLjE0MS0uMzRWMTJhLjQ4LjQ4IDAgMCAxLS40OC0uNDhWOS41YTEgMSAwIDAgMSAxLTFoLjk4NGExIDEgMCAwIDEgMSAxdjIuMDJhLjQ4LjQ4IDAgMCAxLS4xMzcuMzM1bC0uMDA0LjAwNHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMC42NCA3YzAgLjUyNS0uMTU3IDEuMDM0LS40NDUgMS40NjUuMTgzLjMwMi4yODkuNjU2LjI4OSAxLjAzNXYuMTA2YTMuNTk2IDMuNTk2IDAgMCAwIC4wNi01LjE1QTMuNiAzLjYgMCAxIDAgNS41IDkuNTlWOS41YzAtLjM4NC4xMDgtLjc0My4yOTYtMS4wNDdBMi42NCAyLjY0IDAgMSAxIDEwLjY0IDd6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOSA3YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQnJvd3NlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEuNSAxaDEzbC41LjV2MTJsLS41LjVoLTEzbC0uNS0uNXYtMTJsLjUtLjV6TTIgNXY4aDEyVjVIMnptMC0xaDEyVjJIMnYyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NCdWcgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMC44NzcgNC41di0uNTgyYTIuOTE4IDIuOTE4IDAgMSAwLTUuODM2IDBWNC41aC0uODMzTDIuNTQ1IDIuODI5bC0uNTkzLjU5IDEuNjExIDEuNjE5LS4wMTkuMDQ5YTguMDMgOC4wMyAwIDAgMC0uNTAzIDIuODMxYzAgLjE5Ni4wMDcuMzkuMDIuNThsLjAwMy4wNDVIMXYuODM2aDIuMTY5bC4wMDYuMDM0Yy4xNzIuOTQxLjUwNCAxLjgwMi45NTQgMi41MzFsLjAzNC4wNTVMMi4yIDEzLjk2MmwuNTkyLjU5MiAxLjg3MS0xLjg3Mi4wNTguMDY2Yy44NjguOTkyIDIuMDAyIDEuNTg5IDMuMjM4IDEuNTg5IDEuMjE4IDAgMi4zMzYtLjU3OSAzLjE5OS0xLjU0NGwuMDU3LS4wNjQgMS45MSAxLjkyLjU5My0uNTkxLTEuOTk2LTIuMDA2LjAzNS0uMDU2Yy40NjctLjc0LjgxLTEuNjE5Ljk4Ni0yLjU4M2wuMDA2LS4wMzRoMi4xNzF2LS44MzZoLTIuMDY1bC4wMDMtLjA0NGE4LjQzIDguNDMgMCAwIDAgLjAyLS41OCA4LjAyIDguMDIgMCAwIDAtLjUxNy0yLjg2NmwtLjAxOS0uMDUgMS41Ny0xLjU3LS41OTItLjU5TDExLjY2MiA0LjVoLS43ODV6bS01IDB2LS41ODJhMi4wODIgMi4wODIgMCAxIDEgNC4xNjQgMFY0LjVINS44Nzh6bTUuNjk3LjgzN2wuMDIuMDUzYy4yODMuNzUzLjQ0NyAxLjYxLjQ0NyAyLjUyOCAwIDEuNjEtLjUwMyAzLjAzNC0xLjI3NCA0LjAzNy0uNzcgMS4wMDEtMS43NzEgMS41NDUtMi44MDggMS41NDUtMS4wMzYgMC0yLjAzNy0uNTQ0LTIuODA3LTEuNTQ1LS43NzItMS4wMDMtMS4yNzUtMi40MjctMS4yNzUtNC4wMzcgMC0uOTE4LjE2NC0xLjc3NS40NDgtMi41MjhsLjAyLS4wNTNoNy4yMjl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NhbGVuZGFyIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQuNSAySDEzVjFoLTF2MUg0VjFIM3YxSDEuNWwtLjUuNXYxMmwuNS41aDEzbC41LS41di0xMmwtLjUtLjV6TTE0IDE0SDJWNWgxMnY5em0wLTEwSDJWM2gxMnYxek00IDhIM3YxaDFWOHptLTEgMmgxdjFIM3YtMXptMSAySDN2MWgxdi0xem0yLTRoMXYxSDZWOHptMSAySDZ2MWgxdi0xem0tMSAyaDF2MUg2di0xem0xLTZINnYxaDFWNnptMiAyaDF2MUg5Vjh6bTEgMkg5djFoMXYtMXptLTEgMmgxdjFIOXYtMXptMS02SDl2MWgxVjZ6bTIgMmgxdjFoLTFWOHptMSAyaC0xdjFoMXYtMXptLTEtNGgxdjFoLTFWNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2FsbEluY29taW5nIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTIuNTQ3IDkuMzI4YTEuNTY3IDEuNTY3IDAgMCAwLS41OTQtLjExNyAxLjIwMiAxLjIwMiAwIDAgMC0uNTU1LjEwMSAyLjc2MiAyLjc2MiAwIDAgMC0uNDMuMjU4IDIuMTY2IDIuMTY2IDAgMCAwLS4zNTkuMzI4Yy0uMTA0LjEyLS4yMDUuMjMtLjMwNC4zMjlhMi40MDkgMi40MDkgMCAwIDEtLjI5LjI1LjUzNC41MzQgMCAwIDEtLjY5NS0uMDYzIDMyLjE3IDMyLjE3IDAgMCAxLS4zMjgtLjMxMmMtLjE0LS4xMzYtLjMxMi0uMy0uNTE1LS40OTNBNjEuNzc2IDYxLjc3NiAwIDAgMSA3Ljg0NCA5bC0uNjgtLjY2NGEyNS44NDcgMjUuODQ3IDAgMCAxLTEuMjEtMS4yNjYgNS4zMTIgNS4zMTIgMCAwIDEtLjM5MS0uNDg0Yy0uMDk0LS4xMzUtLjE0MS0uMjM0LS4xNDEtLjI5N2EuNDYuNDYgMCAwIDEgLjEwMS0uMzEyYy4wNzMtLjA5NC4xNi0uMTkuMjU4LS4yOS4xLS4wOTguMjA5LS4yMDMuMzI4LS4zMTIuMTItLjExLjIzLS4yMjcuMzI5LS4zNTIuMDk4LS4xMjUuMTgyLS4yNjguMjUtLjQzLjA2Ny0uMTYuMTAxLS4zNDMuMTAxLS41NDZhMS41NjcgMS41NjcgMCAwIDAtLjQ1My0xLjEwMiA3LjYwNCA3LjYwNCAwIDAgMS0uNTMxLS41NzggNi40ODcgNi40ODcgMCAwIDAtLjYxNy0uNjQgNC4yMDcgNC4yMDcgMCAwIDAtLjY5Ni0uNTE2QTEuNDYgMS40NiAwIDAgMCAzLjc0MiAxYTEuNTY3IDEuNTY3IDAgMCAwLTEuMTAxLjQ1M2MtLjI3MS4yNzEtLjUwOC41MTMtLjcxMS43MjdhNC4wMDYgNC4wMDYgMCAwIDAtLjUxNi42NjQgMi42MyAyLjYzIDAgMCAwLS4zMTIuNzY1QTQuMzkgNC4zOSAwIDAgMCAxIDQuNjI1YzAgLjU1Mi4wODkgMS4xMjUuMjY2IDEuNzE5LjE3Ny41OTMuNDE2IDEuMTg1LjcxOCAxLjc3My4zMDIuNTg5LjY3IDEuMTY3IDEuMTAyIDEuNzM1LjQzMi41NjcuOTAxIDEuMTA2IDEuNDA2IDEuNjE3LjUwNS41MSAxLjA0Mi45ODIgMS42MSAxLjQxNC41NjcuNDMyIDEuMTQ4LjgwNSAxLjc0MiAxLjExNy41OTMuMzEzIDEuMTkuNTU3IDEuNzg5LjczNGE2LjE1NyA2LjE1NyAwIDAgMCAxLjc1LjI2NiA0LjY5NiA0LjY5NiAwIDAgMCAxLjAwOC0uMTEgMi41OSAyLjU5IDAgMCAwIC43NzMtLjMxMmMuMjMtLjE0LjQ1LS4zMTIuNjY0LS41MTUuMjE0LS4yMDQuNDUzLS40MzguNzE5LS43MDRBMS41NjggMS41NjggMCAwIDAgMTUgMTIuMjU3YTIuMDA5IDIuMDA5IDAgMCAwLS4xMDItLjUxNSAxLjY3NCAxLjY3NCAwIDAgMC0uMjU3LS40ODQgNy4yNCA3LjI0IDAgMCAwLS4zNjgtLjQ0NSA1LjM4MSA1LjM4MSAwIDAgMC0uNDIxLS40MjIgOTEuNTQ5IDkxLjU0OSAwIDAgMC0uNDMtLjM4MyA4LjI3NyA4LjI3NyAwIDAgMS0uMzY3LS4zNDQgMS41MTYgMS41MTYgMCAwIDAtLjUwOC0uMzM2em0tLjM2NyA0LjU4NmEzLjEzIDMuMTMgMCAwIDEtLjc5Ny4wODYgNS41MjYgNS41MjYgMCAwIDEtMS41MTYtLjI0MiA4LjM2MiA4LjM2MiAwIDAgMS0xLjU4Ni0uNjY0IDEzLjIwNSAxMy4yMDUgMCAwIDEtMy4wNDctMi4yOTcgMTcuMTUgMTcuMTUgMCAwIDEtMS4yODktMS40NjEgMTAuNTAyIDEwLjUwMiAwIDAgMS0xLjAzLTEuNTc4IDkuMTIgOS4xMiAwIDAgMS0uNjczLTEuNjFBNS4zMDggNS4zMDggMCAwIDEgMiA0LjYwMmEzLjM0IDMuMzQgMCAwIDEgLjA5NC0uNzljLjA1Ny0uMjE4LjE0My0uNDE0LjI1OC0uNTg1LjExNC0uMTcyLjI1NS0uMzM5LjQyMS0uNS4xNjctLjE2Mi4zNTctLjM1LjU3LS41NjNhLjU0Mi41NDIgMCAwIDEgLjQtLjE2NGMuMDYyLS4wMDUuMTU4LjAzNi4yODguMTI1LjEzLjA4OS4yNzEuMTk1LjQyMi4zMmE3LjA1OCA3LjA1OCAwIDAgMSAuODk5Ljg5OWMuMTI1LjE1LjIyOS4yODkuMzEyLjQxNC4wODMuMTI1LjEyNS4yMjEuMTI1LjI4OWEuNDI5LjQyOSAwIDAgMS0uMTAxLjMxMmMtLjA3My4wODQtLjE2LjE4LS4yNTguMjktLjEuMTA5LS4yMDkuMjEzLS4zMjguMzEyLS4xMi4wOTktLjIzLjIxNi0uMzI5LjM1MWEyLjI2NiAyLjI2NiAwIDAgMC0uMjUuNDM4IDEuMzQ1IDEuMzQ1IDAgMCAwLS4xMDEuNTRjLjAwNS4yMTMuMDQ3LjQxMy4xMjUuNi4wNzguMTg4LjE5LjM1NS4zMzYuNWwzLjcyNiAzLjcyN2ExLjUyNyAxLjUyNyAwIDAgMCAxLjEwMi40NiAxLjIgMS4yIDAgMCAwIC41NDctLjEgMi40MTQgMi40MTQgMCAwIDAgLjc4OS0uNTg2Yy4xMS0uMTIuMjEtLjIzLjMwNS0uMzI5LjA5My0uMDk4LjE5LS4xODIuMjg5LS4yNWEuNTQ1LjU0NSAwIDAgMSAuMzEyLS4xMDFjLjA3MyAwIC4xNzIuMDQyLjI5Ny4xMjUuMTI1LjA4My4yNjMuMTkuNDE0LjMyLjE1MS4xMy4zMDcuMjc0LjQ2OS40My4xNjEuMTU2LjMwNS4zMTIuNDMuNDY5LjEyNC4xNTYuMjI5LjI5Ny4zMTIuNDIyLjA4My4xMjUuMTI1LjIyLjEyNS4yODlhLjUzMy41MzMgMCAwIDEtLjE2NC4zOWMtLjIyNC4yMTktLjQxNC40MS0uNTcuNTdhMy4xNTkgMy4xNTkgMCAwIDEtLjUuNDIyIDEuOTMgMS45MyAwIDAgMS0uNTg2LjI2NnpNMTUgMS43MDRsLTQuNjQgNC42NDhoMy4yODh2MWgtNXYtNWgxVjUuNjRMMTQuMjk3IDFsLjcwMy43MDN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NhbGxPdXRnb2luZyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjY0OCA2LjY0OEwxMy4yOSAySDEwVjFoNXY1aC0xVjIuNzFMOS4zNTIgNy4zNTNsLS43MDQtLjcwNHptMy4zMDUgMi41NjNhMS41NjcgMS41NjcgMCAwIDEgMS4xMDIuNDUzYy4xMS4xMS4yMzIuMjI0LjM2Ny4zNDRsLjQzLjM4M2MuMTUuMTM1LjI5MS4yNzYuNDIxLjQyMS4xMy4xNDYuMjUzLjI5NS4zNjguNDQ2LjExNC4xNS4yLjMxMi4yNTcuNDg0LjA1OC4xNzIuMDkyLjM0NC4xMDIuNTE2YTEuNTY4IDEuNTY4IDAgMCAxLS40NTMgMS4xMDFjLS4yNjYuMjY2LS41MDUuNS0uNzE5LjcwNGE0LjAwNiA0LjAwNiAwIDAgMS0uNjY0LjUxNWMtLjIzLjE0LS40ODcuMjQ1LS43NzMuMzEzYTQuNjk2IDQuNjk2IDAgMCAxLTEuMDA4LjEwOSA2LjE1NyA2LjE1NyAwIDAgMS0xLjc1LS4yNjZBOS44MTkgOS44MTkgMCAwIDEgNy44NDMgMTRhMTIuNDQ1IDEyLjQ0NSAwIDAgMS0xLjc0MS0xLjExNyAxNS4zMjkgMTUuMzI5IDAgMCAxLTEuNjEtMS40MTRjLS41MDUtLjUxLS45NzQtMS4wNS0xLjQwNi0xLjYxN2ExMS42NCAxMS42NCAwIDAgMS0xLjEwMi0xLjczNSAxMC4zOCAxMC4zOCAwIDAgMS0uNzE4LTEuNzczQTYuMDA1IDYuMDA1IDAgMCAxIDEgNC42MjVjMC0uMzk2LjAzNC0uNzM0LjEwMi0xLjAxNmEyLjYzIDIuNjMgMCAwIDEgLjMxMi0uNzY1Yy4xNC0uMjMuMzEzLS40NS41MTYtLjY2NC4yMDMtLjIxNC40NC0uNDU2LjcxLS43MjdBMS41NjcgMS41NjcgMCAwIDEgMy43NDMgMWMuMjYgMCAuNTEuMDcuNzUuMjEuMjQuMTQyLjQ3Mi4zMTMuNjk2LjUxNy4yMjMuMjAzLjQzLjQxNi42MTcuNjQuMTg3LjIyNC4zNjQuNDE3LjUzLjU3OGExLjU2NyAxLjU2NyAwIDAgMSAuNDUzIDEuMTAyIDEuNCAxLjQgMCAwIDEtLjEuNTQ3IDEuODI0IDEuODI0IDAgMCAxLS4yNS40MyAyLjk4MyAyLjk4MyAwIDAgMS0uMzI5LjM1MWMtLjEyLjExLS4yMjkuMjE0LS4zMjguMzEzYTMuMTI4IDMuMTI4IDAgMCAwLS4yNTguMjg5LjQ2LjQ2IDAgMCAwLS4xMDEuMzEyYzAgLjA2My4wNDcuMTYyLjE0LjI5N2E1LjMgNS4zIDAgMCAwIC4zOTEuNDg0IDI0LjM4NiAyNC4zODYgMCAwIDAgMS4yMTEgMS4yNjZjLjIzNC4yMy40NjEuNDUuNjguNjY0LjIxOC4yMTQuNDMuNDE3LjYzMy42MS4yMDMuMTkyLjM3NS4zNTYuNTE1LjQ5Mi4xNC4xMzUuMjUuMjQuMzI4LjMxMmEuNTM0LjUzNCAwIDAgMCAuNjk2LjA2M2MuMDkzLS4wNjguMTktLjE1Mi4yODktLjI1LjA5OS0uMS4yLS4yMDkuMzA0LS4zMjkuMTA0LS4xMi4yMjQtLjIyOS4zNi0uMzI4LjEzNS0uMDk5LjI3OC0uMTg1LjQzLS4yNThhMS4yMSAxLjIxIDAgMCAxIC41NTQtLjEwMXpNMTEuMzgzIDE0Yy4zMTggMCAuNTgzLS4wMjkuNzk3LS4wODZhMS45MyAxLjkzIDAgMCAwIC41ODYtLjI2NmMuMTc3LS4xMi4zNDMtLjI2LjUtLjQyMS4xNTYtLjE2Mi4zNDYtLjM1Mi41Ny0uNTcuMTEtLjExLjE2NC0uMjQuMTY0LS4zOTEgMC0uMDY4LS4wNDItLjE2NC0uMTI1LS4yOWE2LjEyMiA2LjEyMiAwIDAgMC0uMzEzLS40MjEgNS4wMSA1LjAxIDAgMCAwLS40My0uNDdjLS4xNi0uMTU1LS4zMTctLjI5OS0uNDY4LS40MjlhNC4zMjIgNC4zMjIgMCAwIDAtLjQxNC0uMzJjLS4xMjUtLjA4My0uMjI0LS4xMjUtLjI5Ny0uMTI1YS41NDUuNTQ1IDAgMCAwLS4zMTIuMTAxIDEuODAxIDEuODAxIDAgMCAwLS4yOS4yNWMtLjA5My4xLS4xOTUuMjA5LS4zMDQuMzI5LS4xMS4xMi0uMjMuMjI5LS4zNi4zMjgtLjEzLjA5OS0uMjczLjE4NS0uNDMuMjU4YTEuMjA4IDEuMjA4IDAgMCAxLS41NDYuMTAxIDEuNTI3IDEuNTI3IDAgMCAxLTEuMTAyLS40Nkw0Ljg4MyA3LjM5YTEuNTM3IDEuNTM3IDAgMCAxLS4zMzYtLjUgMS42NTUgMS42NTUgMCAwIDEtLjEyNS0uNjAyYzAtLjIwMy4wMzQtLjM4My4xMDEtLjUzOS4wNjgtLjE1Ni4xNTEtLjMwMi4yNS0uNDM4LjEtLjEzNS4yMDktLjI1Mi4zMjktLjM1MS4xMi0uMDk5LjIyOS0uMjAzLjMyOC0uMzEzLjA5OS0uMTA5LjE4NS0uMjA1LjI1OC0uMjg5YS40MjkuNDI5IDAgMCAwIC4xMDEtLjMxMmMwLS4wNjgtLjA0Mi0uMTY0LS4xMjUtLjI5YTUuMDg1IDUuMDg1IDAgMCAwLS4zMTItLjQxMyA2Ljc5MSA2Ljc5MSAwIDAgMC0uNDMtLjQ2OSA2Ljc4NyA2Ljc4NyAwIDAgMC0uNDY5LS40MyA1LjY3NCA1LjY3NCAwIDAgMC0uNDIyLS4zMmMtLjEzLS4wODktLjIyNi0uMTMtLjI4OS0uMTI1YS41NDIuNTQyIDAgMCAwLS4zOTguMTY0IDY1LjI0IDY1LjI0IDAgMCAxLS41Ny41NjMgMy4wNzMgMy4wNzMgMCAwIDAtLjQyMi41IDEuOSAxLjkgMCAwIDAtLjI1OC41ODZBMy4zNzcgMy4zNzcgMCAwIDAgMiA0LjYwMWMwIC41LjA4IDEuMDE1LjI0MiAxLjU0NmE5LjEyIDkuMTIgMCAwIDAgLjY3MiAxLjYxYy4yODcuNTQxLjYzIDEuMDY4IDEuMDMxIDEuNTc4LjQwMS41MS44MzEuOTk3IDEuMjkgMS40NmExMy4yMDUgMTMuMjA1IDAgMCAwIDMuMDQ2IDIuMjk4IDguMzcgOC4zNyAwIDAgMCAxLjU4Ni42NjQgNS41MjYgNS41MjYgMCAwIDAgMS41MTYuMjQyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDYXNlU2Vuc2l0aXZlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy40OTUgOS4wNTJsLjg5MSAyLjM1aDEuMDkxTDYuMjM3IDNoLTEuMDJMMiAxMS40MDJoMS4wOTVsLjgzOC0yLjM1aDMuNTYyek01LjgxMSA0LjQ1M2wuMDQ0LjEzNSAxLjMxOCAzLjU3NEg0LjI1NWwxLjMwNy0zLjU3NC4wNDQtLjEzNS4wMzgtLjE1Ni4wMzItLjE1Mi4wMjEtLjEyNmguMDIzbC4wMjQuMTI2LjAyOS4xNTIuMDM4LjE1NnptNy45ODQgNi4wMTF2LjkzNmguOTZWNy40OThjMC0uNzE5LS4xOC0xLjI3Mi0uNTM5LTEuNjYxLS4zNTktLjM4OS0uODg5LS41ODMtMS41ODgtLjU4My0uMTk5IDAtLjQwMS4wMTktLjYwNi4wNTZhNC44NzUgNC44NzUgMCAwIDAtMS4wNzguMzI2IDIuMDgxIDIuMDgxIDAgMCAwLS4zNDMuMTg4di45ODRjLjI2Ni0uMjMuNTY2LS40MTEuOTA0LS41NGEyLjkyNyAyLjkyNyAwIDAgMSAxLjA1Mi0uMTkzYy4xODggMCAuMzU4LjAyOC41MTMuMDg1YS45OC45OCAwIDAgMSAuMzk2LjI2N2MuMTA5LjEyMS4xOTMuMjc5LjI1Mi40NzIuMDU5LjE5My4wODguNDI3LjA4OC43bC0xLjgxMS4yNTJjLS4zNDQuMDQ3LS42NC4xMjYtLjg4OC4yMzdhMS45NDcgMS45NDcgMCAwIDAtLjYxNS40MTkgMS42IDEuNiAwIDAgMC0uMzYuNTggMi4xMzQgMi4xMzQgMCAwIDAtLjExNy43MjFjMCAuMjQ2LjA0Mi40NzUuMTI0LjY4OC4wODIuMjEzLjIwMy4zOTcuMzYzLjU1MS4xNi4xNTQuMzYuMjc2LjU5OC4zNjYuMjM4LjA5LjUxMy4xMzUuODI2LjEzNS40MDIgMCAuNzYtLjA5MiAxLjA3NS0uMjc4LjMxNS0uMTg2LjU3Mi0uNDU0Ljc3MS0uODA2aC4wMjN6bS0yLjEyOC0xLjc0M2MuMTc2LS4wNjQuNDAxLS4xMTQuNjc0LS4xNDlsMS40NjUtLjIwNXYuNjA5YzAgLjI0Ni0uMDQxLjQ3NS0uMTIzLjY4OGExLjcyNyAxLjcyNyAwIDAgMS0uMzQzLjU1NyAxLjU3MyAxLjU3MyAwIDAgMS0uNTI0LjM3MiAxLjYzIDEuNjMgMCAwIDEtLjY2OC4xMzVjLS4xODcgMC0uMzUzLS4wMjUtLjQ5NS0uMDc2YTEuMDMgMS4wMyAwIDAgMS0uMzU3LS4yMTEuODk2Ljg5NiAwIDAgMS0uMjItLjMxNkExLjAwNSAxLjAwNSAwIDAgMSAxMSA5LjczMmExLjYgMS42IDAgMCAxIC4wNTUtLjQ0LjczOS43MzkgMCAwIDEgLjIwMi0uMzM0IDEuMTYgMS4xNiAwIDAgMSAuNDEtLjIzN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2hlY2tBbGwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNS42MiAzLjU5Nkw3LjgxNSAxMi44MWwtLjcyOC0uMDMzTDQgOC4zODJsLjc1NC0uNTMgMi43NDQgMy45MDdMMTQuOTE3IDNsLjcwMy41OTZ6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjIzNCA4Ljc3NGw0LjM4Ni01LjE3OEwxMC45MTcgM2wtNC4yMyA0Ljk5NC41NDcuNzh6bS0xLjU1LjQwM2wuNTQ4Ljc4LS41NDctLjc4em0tMS42MTcgMS45MWwuNTQ3Ljc4LS43OTkuOTQzLS43MjgtLjAzM0wwIDguMzgybC43NTQtLjUzIDIuNzQ0IDMuOTA3LjU3LS42NzJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NoZWNrIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQuNDMxIDMuMzIzbC04LjQ3IDEwLS43OS0uMDM2LTMuMzUtNC43Ny44MTgtLjU3NCAyLjk3OCA0LjI0IDguMDUxLTkuNTA2Ljc2NC42NDZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NoZWNrbGlzdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTMuNzUgNC40OGgtLjcxTDIgMy40M2wuNzEtLjcuNjkuNjhMNC44MSAybC43MS43MS0xLjc3IDEuNzd6TTYuOTkgM2g4djFoLThWM3ptMCAzaDh2MWgtOFY2em04IDNoLTh2MWg4Vjl6bS04IDNoOHYxaC04di0xek0zLjA0IDcuNDhoLjcxbDEuNzctMS43Ny0uNzEtLjdMMy40IDYuNDJsLS42OS0uNjktLjcxLjcxIDEuMDQgMS4wNHptLjcxIDMuMDFoLS43MUwyIDkuNDVsLjcxLS43MS42OS42OSAxLjQxLTEuNDIuNzEuNzEtMS43NyAxLjc3em0tLjcxIDMuMDFoLjcxbDEuNzctMS43Ny0uNzEtLjcxLTEuNDEgMS40Mi0uNjktLjY5LS43MS43IDEuMDQgMS4wNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2hldnJvbkRvd24gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03Ljk3NiAxMC4wNzJsNC4zNTctNC4zNTcuNjIuNjE4TDguMjg0IDExaC0uNjE4TDMgNi4zMzNsLjYxOS0uNjE4IDQuMzU3IDQuMzU3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaGV2cm9uTGVmdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUuOTI4IDcuOTc2bDQuMzU3IDQuMzU3LS42MTguNjJMNSA4LjI4NHYtLjYxOEw5LjY2NyAzbC42MTguNjE5LTQuMzU3IDQuMzU3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaGV2cm9uUmlnaHQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMC4wNzIgOC4wMjRMNS43MTUgMy42NjdsLjYxOC0uNjJMMTEgNy43MTZ2LjYxOEw2LjMzMyAxM2wtLjYxOC0uNjE5IDQuMzU3LTQuMzU3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaGV2cm9uVXAgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjAyNCA1LjkyOGwtNC4zNTcgNC4zNTctLjYyLS42MThMNy43MTYgNWguNjE4TDEzIDkuNjY3bC0uNjE5LjYxOC00LjM1Ny00LjM1N3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2hyb21lQ2xvc2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjExNiA4bC00LjU1OCA0LjU1OC44ODQuODg0TDggOC44ODRsNC41NTggNC41NTguODg0LS44ODRMOC44ODQgOGw0LjU1OC00LjU1OC0uODg0LS44ODRMOCA3LjExNiAzLjQ0MiAyLjU1OGwtLjg4NC44ODRMNy4xMTYgOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2hyb21lTWF4aW1pemUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMyAzdjEwaDEwVjNIM3ptOSA5SDRWNGg4djh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Nocm9tZU1pbmltaXplIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0IDh2MUgzVjhoMTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Nocm9tZVJlc3RvcmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMyA1djloOVY1SDN6bTggOEg0VjZoN3Y3elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNSA1aDFWNGg3djdoLTF2MWgyVjNINXYyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaXJjbGVGaWxsZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOCA0Yy4zNjcgMCAuNzIxLjA0OCAxLjA2My4xNDVhMy45NDMgMy45NDMgMCAwIDEgMS43NjIgMS4wMzEgMy45NDQgMy45NDQgMCAwIDEgMS4wMyAxLjc2MmMuMDk3LjM0LjE0NS42OTUuMTQ1IDEuMDYyIDAgLjM2Ny0uMDQ4LjcyMS0uMTQ1IDEuMDYzYTMuOTQgMy45NCAwIDAgMS0xLjAzIDEuNzY1IDQuMDE3IDQuMDE3IDAgMCAxLTEuNzYyIDEuMDMxQzguNzIgMTEuOTUzIDguMzY3IDEyIDggMTJzLS43MjEtLjA0Ny0xLjA2My0uMTRhNC4wNTYgNC4wNTYgMCAwIDEtMS43NjUtMS4wMzJBNC4wNTUgNC4wNTUgMCAwIDEgNC4xNCA5LjA2MiAzLjk5MiAzLjk5MiAwIDAgMSA0IDhjMC0uMzY3LjA0Ny0uNzIxLjE0LTEuMDYzYTQuMDIgNC4wMiAwIDAgMSAuNDA3LS45NTNBNC4wODkgNC4wODkgMCAwIDEgNS45OCA0LjU0NmEzLjk0IDMuOTQgMCAwIDEgLjk1Ny0uNDAxQTMuODkgMy44OSAwIDAgMSA4IDR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NpcmNsZUxhcmdlRmlsbGVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTggMWE2LjggNi44IDAgMCAxIDEuODYuMjUzIDYuODk5IDYuODk5IDAgMCAxIDMuMDgzIDEuODA1IDYuOTAzIDYuOTAzIDAgMCAxIDEuODA0IDMuMDgzQzE0LjkxNiA2LjczOCAxNSA3LjM1NyAxNSA4cy0uMDg0IDEuMjYyLS4yNTMgMS44NmE2LjkgNi45IDAgMCAxLS43MDQgMS42NzQgNy4xNTcgNy4xNTcgMCAwIDEtMi41MTYgMi41MDkgNi45NjYgNi45NjYgMCAwIDEtMS42NjguNzFBNi45ODQgNi45ODQgMCAwIDEgOCAxNWE2Ljk4NCA2Ljk4NCAwIDAgMS0xLjg2LS4yNDYgNy4wOTggNy4wOTggMCAwIDEtMS42NzQtLjcxMSA3LjMgNy4zIDAgMCAxLTEuNDE1LTEuMDk0IDcuMjk1IDcuMjk1IDAgMCAxLTEuMDk0LTEuNDE1IDcuMDk4IDcuMDk4IDAgMCAxLS43MS0xLjY3NUE2Ljk4NSA2Ljk4NSAwIDAgMSAxIDhjMC0uNjQzLjA4Mi0xLjI2Mi4yNDYtMS44NmE2Ljk2OCA2Ljk2OCAwIDAgMSAuNzExLTEuNjY3IDcuMTU2IDcuMTU2IDAgMCAxIDIuNTA5LTIuNTE2IDYuODk1IDYuODk1IDAgMCAxIDEuNjc1LS43MDRBNi44MDggNi44MDggMCAwIDEgOCAxelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaXJjbGVMYXJnZU91dGxpbmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk05LjU4OCAyLjIxNUE1LjgwOCA1LjgwOCAwIDAgMCA4IDJjLS41NTQgMC0xLjA4Mi4wNzMtMS41ODguMjE1bC0uMDA2LjAwMmMtLjUxNC4xNDEtLjk5LjM0Mi0xLjQzMi42MDFBNi4xNTYgNi4xNTYgMCAwIDAgMi44MiA0Ljk4bC0uMDAyLjAwNEE1Ljk2NyA1Ljk2NyAwIDAgMCAyLjIxIDYuNDEgNS45ODYgNS45ODYgMCAwIDAgMiA4YzAgLjU1NS4wNyAxLjA4NS4yMSAxLjU5MWE2LjA1IDYuMDUgMCAwIDAgMS41NDggMi42NTFjLjM3LjM2NS43NzQuNjc3IDEuMjE2Ljk0YTYuMSA2LjEgMCAwIDAgMS40MzUuNjA5QTYuMDIgNi4wMiAwIDAgMCA4IDE0Yy41NTUgMCAxLjA4NS0uMDcgMS41OTEtLjIxLjUxNS0uMTQ1Ljk5LS4zNDggMS40MjYtLjYwN2wuMDA0LS4wMDJhNi4xNiA2LjE2IDAgMCAwIDIuMTYxLTIuMTU1IDUuODUgNS44NSAwIDAgMCAuNi0xLjQzMmwuMDAzLS4wMDZBNS44MDcgNS44MDcgMCAwIDAgMTQgOGMwLS41NTQtLjA3Mi0xLjA4Mi0uMjE1LTEuNTg4bC0uMDAyLS4wMDZhNS43NzIgNS43NzIgMCAwIDAtLjYtMS40MjNsLS4wMDItLjAwNGE1LjkgNS45IDAgMCAwLS45NDItMS4yMWwtLjAwOC0uMDA4YTUuOTAyIDUuOTAyIDAgMCAwLTEuMjEtLjk0MmwtLjAwNC0uMDAyYTUuNzcyIDUuNzcyIDAgMCAwLTEuNDIzLS42bC0uMDA2LS4wMDJ6bTQuNDU1IDkuMzJhNy4xNTcgNy4xNTcgMCAwIDEtMi41MTYgMi41MDggNi45NjYgNi45NjYgMCAwIDEtMS42NjguNzFBNi45ODQgNi45ODQgMCAwIDEgOCAxNWE2Ljk4NCA2Ljk4NCAwIDAgMS0xLjg2LS4yNDYgNy4wOTggNy4wOTggMCAwIDEtMS42NzQtLjcxMSA3LjMgNy4zIDAgMCAxLTEuNDE1LTEuMDk0IDcuMjk1IDcuMjk1IDAgMCAxLTEuMDk0LTEuNDE1IDcuMDk4IDcuMDk4IDAgMCAxLS43MS0xLjY3NUE2Ljk4NSA2Ljk4NSAwIDAgMSAxIDhjMC0uNjQzLjA4Mi0xLjI2Mi4yNDYtMS44NmE2Ljk2OCA2Ljk2OCAwIDAgMSAuNzExLTEuNjY3IDcuMTU2IDcuMTU2IDAgMCAxIDIuNTA5LTIuNTE2IDYuODk1IDYuODk1IDAgMCAxIDEuNjc1LS43MDRBNi44MDggNi44MDggMCAwIDEgOCAxYTYuOCA2LjggMCAwIDEgMS44Ni4yNTMgNi44OTkgNi44OTkgMCAwIDEgMy4wODMgMS44MDUgNi45MDMgNi45MDMgMCAwIDEgMS44MDQgMy4wODNDMTQuOTE2IDYuNzM4IDE1IDcuMzU3IDE1IDhzLS4wODQgMS4yNjItLjI1MyAxLjg2YTYuOSA2LjkgMCAwIDEtLjcwNCAxLjY3NHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2lyY2xlT3V0bGluZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTggMTJhNCA0IDAgMSAwIDAtOCA0IDQgMCAwIDAgMCA4em0yLjYxLTRhMi42MSAyLjYxIDAgMSAxLTUuMjIgMCAyLjYxIDIuNjEgMCAwIDEgNS4yMiAwek04IDUuMjQ2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDaXJjbGVTbGFzaCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04IDFhNyA3IDAgMSAxLTcgNyA3LjAwOCA3LjAwOCAwIDAgMSA3LTd6TTIgOGMwIDEuNDE4LjUwNCAyLjc5IDEuNDIzIDMuODdsOC40NDctOC40NDdBNS45OTMgNS45OTMgMCAwIDAgMiA4em0xMiAwYzAtMS40MTgtLjUwNC0yLjc5LTEuNDIzLTMuODdMNC4xMyAxMi41NzdBNS45OTMgNS45OTMgMCAwIDAgMTQgOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2lyY3VpdEJvYXJkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjUgMWgtMTNsLS41LjV2MTNsLjUuNWgxM2wuNS0uNXYtMTNsLS41LS41ek0xNCAxNEg1di0yaDIuM2MuMy42IDEgMSAxLjcgMSAxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDJINHYzSDJWMmgydjIuM2MtLjYuMy0xIDEtMSAxLjcgMCAxLjEuOSAyIDIgMnMyLS45IDItMmgyYzAgMS4xLjkgMiAyIDJzMi0uOSAyLTItLjktMi0yLTJjLS43IDAtMS40LjQtMS43IDFINi43Yy0uMy0uNi0xLTEtMS43LTFWMmg5djEyem0tNi0zYzAtLjYuNC0xIDEtMXMxIC40IDEgMS0uNCAxLTEgMS0xLS40LTEtMXpNNSA1Yy42IDAgMSAuNCAxIDFzLS40IDEtMSAxLTEtLjQtMS0xIC40LTEgMS0xem02IDBjLjYgMCAxIC40IDEgMXMtLjQgMS0xIDEtMS0uNC0xLTEgLjQtMSAxLTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NsZWFyQWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEwIDEyLjZsLjcuNyAxLjYtMS42IDEuNiAxLjYuOC0uN0wxMyAxMWwxLjctMS42LS44LS44LTEuNiAxLjctMS42LTEuNy0uNy44IDEuNiAxLjYtMS42IDEuNnpNMSA0aDE0VjNIMXYxem0wIDNoMTRWNkgxdjF6bTggMi41VjlIMXYxaDh2LS41ek05IDEzdi0xSDF2MWg4elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDbGlwcHkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03IDEzLjk5Mkg0di05aDh2Mmgxdi0yLjVsLS41LS41SDExdi0xaC0xYTIgMiAwIDAgMC00IDBINC45NHYxSDMuNWwtLjUuNXYxMGwuNS41SDd2LTF6bTAtMTEuMmExIDEgMCAwIDEgLjgtLjggMSAxIDAgMCAxIC41OC4wNi45NC45NCAwIDAgMSAuNDUuMzYgMSAxIDAgMSAxLTEuNzUuOTQgMSAxIDAgMCAxLS4wOC0uNTZ6bTcuMDggOS40NkwxMyAxMy4zNDJ2LTUuMzVoLTF2NS4zNGwtMS4wOC0xLjA4LS43MS43MSAxLjk0IDEuOTNoLjcxbDEuOTMtMS45My0uNzEtLjcxem0tNS45Mi00LjE2aC43MWwxLjkzIDEuOTMtLjcxLjcxLTEuMDgtMS4wOHY1LjM0aC0xdi01LjM1bC0xLjA4IDEuMDktLjcxLS43MSAxLjk0LTEuOTN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Nsb3NlQWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC42MjEgOC4wODZsLS43MDctLjcwN0w2LjUgOC43OTMgNS4wODYgNy4zNzlsLS43MDcuNzA3TDUuNzkzIDkuNWwtMS40MTQgMS40MTQuNzA3LjcwN0w2LjUgMTAuMjA3bDEuNDE0IDEuNDE0LjcwNy0uNzA3TDcuMjA3IDkuNWwxLjQxNC0xLjQxNHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUgM2wxLTFoN2wxIDF2N2wtMSAxaC0ydjJsLTEgMUgzbC0xLTFWNmwxLTFoMlYzem0xIDJoNGwxIDF2NGgyVjNINnYyem00IDFIM3Y3aDdWNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2xvc2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04IDguNzA3bDMuNjQ2IDMuNjQ3LjcwOC0uNzA3TDguNzA3IDhsMy42NDctMy42NDYtLjcwNy0uNzA4TDggNy4yOTMgNC4zNTQgMy42NDZsLS43MDcuNzA4TDcuMjkzIDhsLTMuNjQ2IDMuNjQ2LjcwNy43MDhMOCA4LjcwN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2xvdWREb3dubG9hZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExLjk1NyA2aC4wNWEyLjk5IDIuOTkgMCAwIDEgMi4xMTYuODc5IDMuMDAzIDMuMDAzIDAgMCAxIDAgNC4yNDIgMi45OSAyLjk5IDAgMCAxLTIuMTE3Ljg3OXYtMWEyLjAwMiAyLjAwMiAwIDAgMCAwLTRoLS45MTRsLS4xMjMtLjg1N2EyLjQ5IDIuNDkgMCAwIDAtMi4xMjYtMi4xMjJBMi40NzggMi40NzggMCAwIDAgNi4yMzEgNS41bC0uMzMzLjc2Mi0uODA5LS4xODlBMi40OSAyLjQ5IDAgMCAwIDQuNTIzIDZjLS42NjIgMC0xLjI5Ny4yNjMtMS43NjQuNzMyQTIuNTAzIDIuNTAzIDAgMCAwIDQuNTIzIDExaC40OTh2MWgtLjQ5OGEzLjQ4NiAzLjQ4NiAwIDAgMS0yLjYyOC0xLjE2IDMuNTAyIDMuNTAyIDAgMCAxIDEuOTU4LTUuNzggMy40NjIgMy40NjIgMCAwIDEgMS40NjguMDQgMy40ODYgMy40ODYgMCAwIDEgMy42NTctMi4wNkEzLjQ3OSAzLjQ3OSAwIDAgMSAxMS45NTcgNnptLTUuMjUgNS4xMjFsMS4zMTQgMS4zMTRWN2guOTk0djUuNGwxLjI3OC0xLjI3OS43MDcuNzA3LTIuMTQ2IDIuMTQ3aC0uNzA4TDYgMTEuODI5bC43MDctLjcwOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ2xvdWRVcGxvYWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS45NTYgNmguMDVhMi45OSAyLjk5IDAgMCAxIDIuMTE3Ljg3OSAzLjAwMyAzLjAwMyAwIDAgMSAwIDQuMjQyIDIuOTkgMi45OSAwIDAgMS0yLjExNy44NzloLTEuOTk1di0xaDEuOTk1YTIuMDAyIDIuMDAyIDAgMCAwIDAtNGgtLjkxNGwtLjEyMy0uODU3YTIuNDkgMi40OSAwIDAgMC0yLjEyNi0yLjEyMkEyLjQ3OCAyLjQ3OCAwIDAgMCA2LjIzIDUuNWwtLjMzMy43NjItLjgwOS0uMTg5QTIuNDkgMi40OSAwIDAgMCA0LjUyMyA2Yy0uNjYyIDAtMS4yOTcuMjYzLTEuNzY0LjczMkEyLjUwMyAyLjUwMyAwIDAgMCA0LjUyMyAxMWgyLjQ5NHYxSDQuNTIzYTMuNDg2IDMuNDg2IDAgMCAxLTIuNjI4LTEuMTYgMy41MDIgMy41MDIgMCAwIDEtLjQtNC4xMzdBMy40OTcgMy40OTcgMCAwIDEgMy44NTMgNS4wNmMuNDg2LS4wOS45ODctLjA3NyAxLjQ2OC4wNDFhMy40ODYgMy40ODYgMCAwIDEgMy42NTctMi4wNkEzLjQ3OSAzLjQ3OSAwIDAgMSAxMS45NTYgNnptLTEuNjYzIDMuODUzTDguOTc5IDguNTR2NS40MzZoLS45OTR2LTUuNEw2LjcwNyA5Ljg1NCA2IDkuMTQ2IDguMTQ2IDdoLjcwOEwxMSA5LjE0NmwtLjcwNy43MDd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Nsb3VkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTEuOTU3IDZoLjA1YTIuOTkgMi45OSAwIDAgMSAyLjExNi44NzkgMy4wMDMgMy4wMDMgMCAwIDEgMCA0LjI0MiAyLjk5IDIuOTkgMCAwIDEtMi4xMTcuODc5di0uMDEzTDEyIDEySDQuNTIzYTMuNDg2IDMuNDg2IDAgMCAxLTIuNjI4LTEuMTYgMy41MDIgMy41MDIgMCAwIDEgMS45NTgtNS43OCAzLjQ2MiAzLjQ2MiAwIDAgMSAxLjQ2OC4wNCAzLjQ4NiAzLjQ4NiAwIDAgMSAzLjY1Ny0yLjA2QTMuNDc5IDMuNDc5IDAgMCAxIDExLjk1NyA2ek01IDExaDcuMDFhMS45OTQgMS45OTQgMCAwIDAgMS45OTItMiAyLjAwMiAyLjAwMiAwIDAgMC0xLjk5Ni0yaC0uOTE0bC0uMTIzLS44NTdhMi40OSAyLjQ5IDAgMCAwLTIuMTI2LTIuMTIyQTIuNDc4IDIuNDc4IDAgMCAwIDYuMjMxIDUuNWwtLjMzMy43NjItLjgwOS0uMTg5QTIuNDkgMi40OSAwIDAgMCA0LjUyMyA2Yy0uNjYyIDAtMS4yOTcuMjYzLTEuNzY0LjczMkEyLjUwMyAyLjUwMyAwIDAgMCA0LjUyMyAxMUg1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDb2RlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTQuNzA4IDUuNTc4TDIuMDYxIDguMjI0bDIuNjQ3IDIuNjQ2LS43MDguNzA4LTMtM1Y3Ljg3bDMtMyAuNzA4LjcwOHptNy0uNzA4TDExIDUuNTc4bDIuNjQ3IDIuNjQ2TDExIDEwLjg3bC43MDguNzA4IDMtM1Y3Ljg3bC0zLTN6TTQuOTA4IDEzbC44OTQuNDQ4IDUtMTBMOS45MDggM2wtNSAxMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ29sbGFwc2VBbGwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOSA5SDR2MWg1Vjl6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDNsMS0xaDdsMSAxdjdsLTEgMWgtMnYybC0xIDFIM2wtMS0xVjZsMS0xaDJWM3ptMSAyaDRsMSAxdjRoMlYzSDZ2MnptNCAxSDN2N2g3VjZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NvbG9yTW9kZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04IDFhNyA3IDAgMSAwIDAgMTRBNyA3IDAgMCAwIDggMXptMCAxM1YyYTYgNiAwIDEgMSAwIDEyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDb21iaW5lIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDFsLS41LjV2M2wuNS41aDNsLjUtLjV2LTNMNC41IDFoLTN6TTIgNFYyaDJ2Mkgyem0tLjUgMmwtLjUuNXYzbC41LjVoM2wuNS0uNXYtM0w0LjUgNmgtM3pNMiA5VjdoMnYySDJ6bS0xIDIuNWwuNS0uNWgzbC41LjV2M2wtLjUuNWgtM2wtLjUtLjV2LTN6bTEgLjV2Mmgydi0ySDJ6bTEwLjUtN2wtLjUuNXY2bC41LjVoM2wuNS0uNXYtNmwtLjUtLjVoLTN6TTE1IDhoLTJWNmgydjJ6bTAgM2gtMlY5aDJ2MnpNOS4xIDhINnYxaDMuMWwtMSAxIC43LjYgMS44LTEuOHYtLjdMOC44IDYuM2wtLjcuNyAxIDF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NvbW1lbnREaXNjdXNzaW9uIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNCAxMS4yOWwxLTF2MS40MmwtMS4xNSAxLjE0TDMgMTIuNVYxMEgxLjVMMSA5LjV2LThsLjUtLjVoMTJsLjUuNVY2aC0xVjJIMnY3aDEuNWwuNS41djEuNzl6TTEwLjI5IDEzbDEuODYgMS44NS44NS0uMzVWMTNoMS41bC41LS41di01bC0uNS0uNWgtOGwtLjUuNXY1bC41LjVoMy43OXptLjIxLTFIN1Y4aDd2NGgtMS41bC0uNS41di43OWwtMS4xNS0xLjE0LS4zNS0uMTV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NvbW1lbnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQuNSAyaC0xM2wtLjUuNXY5bC41LjVINHYyLjVsLjg1NC4zNTRMNy43MDcgMTJIMTQuNWwuNS0uNXYtOWwtLjUtLjV6bS0uNSA5SDcuNWwtLjM1NC4xNDZMNSAxMy4yOTNWMTEuNWwtLjUtLjVIMlYzaDEydjh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0NvbXBhc3NBY3RpdmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk05LjEwMTQ2IDEzLjg5OTFDOC45MDQxOSAxMy45MzU3IDguNzAzNTMgMTMuOTYyNyA4LjQ5OTk5IDEzLjk3OTVWMTNINy40OTk5OVYxMy45Nzk1QzQuNTcyMzMgMTMuNzM3OSAyLjI0MDY3IDExLjM5NDUgMi4wMTc1IDguNDYxNjdIM1Y3LjQ2MTY3SDIuMDIzODJDMi4yODE0MSA0LjU2NDc1IDQuNTk3ODggMi4yNTk5NiA3LjQ5OTk5IDIuMDIwNTRWM0g4LjQ5OTk5VjIuMDIwNTRDMTEuNDE0OSAyLjI2MTAxIDEzLjczOSA0LjU4NTEgMTMuOTc5NSA3LjVIMTNWOC41SDEzLjk3OTVDMTMuOTYyNyA4LjcwMzU0IDEzLjkzNTcgOC45MDQxOSAxMy44OTkxIDkuMTAxNDZDMTQuMjMzOCA5LjE3ODMzIDE0LjU1MjQgOS4yOTcxOCAxNC44NDkyIDkuNDUyMTdDMTQuOTQ4IDguOTgzNjggMTUgOC40OTc5MSAxNSA4QzE1IDQuMTM0MDEgMTEuODY2IDEgOCAxQzQuMTM0MDEgMSAxIDQuMTM0MDEgMSA4QzEgMTEuODY2IDQuMTM0MDEgMTUgOCAxNUM4LjQ5NzkxIDE1IDguOTgzNjggMTQuOTQ4IDkuNDUyMTcgMTQuODQ5MkM5LjI5NzE4IDE0LjU1MjQgOS4xNzgzMyAxNC4yMzM4IDkuMTAxNDYgMTMuODk5MVpNOS45MDM2OSAxMC40Njc1TDYuOTkxMTUgOS4wMDg3NEw0Ljk2NjY3IDQuOTY2NTVMOS4wMDg4NSA2Ljk5MTAzTDEwLjQ2NzYgOS45MDM1OUMxMC4yNjE0IDEwLjA3MjQgMTAuMDcyNSAxMC4yNjEzIDkuOTAzNjkgMTAuNDY3NVpNOS40MzU0MiA5LjQzNTNMOC40ODA3MyA3LjUxOTE2TDYuNTY0NTggNi41NjQ0N0w3LjUxOTI3IDguNDgwNjJMOS40MzU0MiA5LjQzNTNaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS4zMzMzIDEwLjUwNTZDMTEuODI2NiAxMC4xNzU5IDEyLjQwNjcgMTAgMTMgMTBDMTMuNzk1NCAxMC4wMDEgMTQuNTU3OCAxMC4zMTc0IDE1LjEyMDIgMTAuODc5OEMxNS42ODI2IDExLjQ0MjIgMTUuOTk5IDEyLjIwNDYgMTYgMTNDMTYgMTMuNTkzMyAxNS44MjQxIDE0LjE3MzQgMTUuNDk0NCAxNC42NjY3QzE1LjE2NDggMTUuMTYwMSAxNC42OTYyIDE1LjU0NDYgMTQuMTQ4MSAxNS43NzE2QzEzLjU5OTkgMTUuOTk4NyAxMi45OTY3IDE2LjA1ODEgMTIuNDE0NyAxNS45NDI0QzExLjgzMjggMTUuODI2NiAxMS4yOTgyIDE1LjU0MDkgMTAuODc4NyAxNS4xMjEzQzEwLjQ1OTEgMTQuNzAxOCAxMC4xNzM0IDE0LjE2NzIgMTAuMDU3NiAxMy41ODUzQzkuOTQxODkgMTMuMDAzMyAxMC4wMDEzIDEyLjQwMDEgMTAuMjI4NCAxMS44NTE5QzEwLjQ1NTQgMTEuMzAzOCAxMC44Mzk5IDEwLjgzNTIgMTEuMzMzMyAxMC41MDU2Wk0xMy4wMzE1IDE0LjMyMjZMMTQuODIxMyAxMS45MzYzTDE0LjAyMTMgMTEuMzM2M0wxMi41NDEgMTMuMzA5OUwxMS42NjU1IDEyLjYwOTVMMTEuMDQwOCAxMy4zOTAzTDEyLjMxOTIgMTQuNDEzTDEzLjAzMTUgMTQuMzIyNlpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ29tcGFzc0RvdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTkuMTAxNDYgMTMuODk5MUM4LjkwNDE5IDEzLjkzNTcgOC43MDM1MyAxMy45NjI3IDguNDk5OTkgMTMuOTc5NVYxM0g3LjQ5OTk5VjEzLjk3OTVDNC41NzIzMyAxMy43Mzc5IDIuMjQwNjcgMTEuMzk0NSAyLjAxNzUgOC40NjE2N0gzVjcuNDYxNjdIMi4wMjM4MkMyLjI4MTQxIDQuNTY0NzUgNC41OTc4OCAyLjI1OTk2IDcuNDk5OTkgMi4wMjA1NFYzSDguNDk5OTlWMi4wMjA1NEMxMS40MTQ5IDIuMjYxMDEgMTMuNzM5IDQuNTg1MSAxMy45Nzk1IDcuNUgxM1Y4LjVIMTMuOTc5NUMxMy45NjI3IDguNzAzNTQgMTMuOTM1NyA4LjkwNDE5IDEzLjg5OTEgOS4xMDE0NkMxNC4yMzM4IDkuMTc4MzMgMTQuNTUyNCA5LjI5NzE4IDE0Ljg0OTIgOS40NTIxN0MxNC45NDggOC45ODM2OCAxNSA4LjQ5NzkxIDE1IDhDMTUgNC4xMzQwMSAxMS44NjYgMSA4IDFDNC4xMzQwMSAxIDEgNC4xMzQwMSAxIDhDMSAxMS44NjYgNC4xMzQwMSAxNSA4IDE1QzguNDk3OTEgMTUgOC45ODM2OCAxNC45NDggOS40NTIxNyAxNC44NDkyQzkuMjk3MTggMTQuNTUyNCA5LjE3ODMzIDE0LjIzMzggOS4xMDE0NiAxMy44OTkxWk05LjkwMzY5IDEwLjQ2NzVMNi45OTExNSA5LjAwODc0TDQuOTY2NjcgNC45NjY1NUw5LjAwODg1IDYuOTkxMDNMMTAuNDY3NiA5LjkwMzU5QzEwLjI2MTQgMTAuMDcyNCAxMC4wNzI1IDEwLjI2MTMgOS45MDM2OSAxMC40Njc1Wk05LjQzNTQyIDkuNDM1M0w4LjQ4MDczIDcuNTE5MTZMNi41NjQ1OCA2LjU2NDQ3TDcuNTE5MjcgOC40ODA2Mkw5LjQzNTQyIDkuNDM1M1pcIn19LHtcInRhZ1wiOlwiY2lyY2xlXCIsXCJhdHRyXCI6e1wiY3hcIjpcIjEzXCIsXCJjeVwiOlwiMTNcIixcInJcIjpcIjNcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjQ29tcGFzcyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk05LjAwODg1IDYuOTkxMDNMMTEuMDMzMyAxMS4wMzMyTDYuOTkxMTQgOS4wMDg3NEw0Ljk2NjY2IDQuOTY2NTVMOS4wMDg4NSA2Ljk5MTAzWk05LjQzNTQxIDkuNDM1M0w4LjQ4MDcyIDcuNTE5MTZMNi41NjQ1OCA2LjU2NDQ3TDcuNTE5MjYgOC40ODA2Mkw5LjQzNTQxIDkuNDM1M1pcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjk3OTUgOC41QzEzLjczOSAxMS40MTQ5IDExLjQxNDkgMTMuNzM5IDguNDk5OTkgMTMuOTc5NVYxM0g3LjQ5OTk5VjEzLjk3OTVDNC41NzIzMyAxMy43Mzc5IDIuMjQwNjcgMTEuMzk0NSAyLjAxNzUgOC40NjE2N0gzVjcuNDYxNjdIMi4wMjM4MkMyLjI4MTQxIDQuNTY0NzUgNC41OTc4OCAyLjI1OTk2IDcuNDk5OTkgMi4wMjA1NFYzSDguNDk5OTlWMi4wMjA1NEMxMS40MTQ5IDIuMjYxMDEgMTMuNzM5IDQuNTg1MSAxMy45Nzk1IDcuNUgxM1Y4LjVIMTMuOTc5NVpNOCAxNUMxMS44NjYgMTUgMTUgMTEuODY2IDE1IDhDMTUgNC4xMzQwMSAxMS44NjYgMSA4IDFDNC4xMzQwMSAxIDEgNC4xMzQwMSAxIDhDMSAxMS44NjYgNC4xMzQwMSAxNSA4IDE1WlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDb3B5IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNCA0bDEtMWg1LjQxNEwxNCA2LjU4NlYxNGwtMSAxSDVsLTEtMVY0em05IDNsLTMtM0g1djEwaDhWN3pcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTMgMUwyIDJ2MTBsMSAxVjJoNi40MTRsLTEtMUgzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NDcmVkaXRDYXJkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQgNXYxSDJWNWgxMnpNMiA3aDEydjVIMlY3em0xMi0zSDJhMSAxIDAgMCAwLTEgMXY3YTEgMSAwIDAgMCAxIDFoMTJhMSAxIDAgMCAwIDEtMVY1YTEgMSAwIDAgMC0xLTF6bS0zIDZoMnYxaC0ydi0xelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEYXNoIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTUgOGg2djFINXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGFzaGJvYXJkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMy44ODkgMi4wOTVhNi41IDYuNSAwIDEgMSA3LjIyMiAxMC44MUE2LjUgNi41IDAgMCAxIDMuODkgMi4wOTR6bS41NTUgOS45NzhBNS41IDUuNSAwIDAgMCA3LjUgMTMgNS41MDYgNS41MDYgMCAwIDAgMTMgNy41YTUuNSA1LjUgMCAxIDAtOC41NTYgNC41NzN6TTEwLjI5NCA0bC43MDYuNzA3LTIuMTUgMi4xNWExLjUxNCAxLjUxNCAwIDEgMS0uNzA3LS43MDdMMTAuMjkzIDR6TTcuMjIxIDcuOTE2YS41LjUgMCAxIDAgLjU1Ni0uODMyLjUuNSAwIDAgMC0uNTU2LjgzMnptNC4yODYtMi40NDlsLS43NjMuNzYzYy4xNjYuNDAzLjI1My44MzQuMjU1IDEuMjdhMy40NjMgMy40NjMgMCAwIDEtLjUgMS43NzdsLjczNS43MzVhNC40NzcgNC40NzcgMCAwIDAgLjI3NC00LjU0NWgtLjAwMXpNOC43MzMgNC4yNDJBMy4zNzMgMy4zNzMgMCAwIDAgNy41IDQgMy41IDMuNSAwIDAgMCA0IDcuNWEzLjQ2IDMuNDYgMCAwIDAgLjUgMS43NzdsLS43MzQuNzM1QTQuNSA0LjUgMCAwIDEgOS41IDMuNDczbC0uNzY3Ljc2OXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGF0YWJhc2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTMgMy41QzEzIDIuMTE5IDEwLjc2MSAxIDggMVMzIDIuMTE5IDMgMy41YzAgLjA0LjAyLjA3Ny4wMjQuMTE3SDN2OC44NzJsLjA1Ni4zNTdDMy4zMzYgMTQuMDU2IDUuNDI5IDE1IDggMTVjMi41NzEgMCA0LjY2NC0uOTQ0IDQuOTQ0LTIuMTU0bC4wNTYtLjM1N1YzLjYxN2gtLjAyNGMuMDA0LS4wNC4wMjQtLjA3Ny4wMjQtLjExN3pNOCAyLjAzMmMyLjQ0MiAwIDQgLjk2NCA0IDEuNDY4cy0xLjU1OCAxLjQ2OC00IDEuNDY4UzQgNCA0IDMuNXMxLjU1OC0xLjQ2OCA0LTEuNDY4em00IDEwLjQ1OGwtLjAzLjEzMUMxMS44NTUgMTMuMTE2IDEwLjQzMSAxNCA4IDE0cy0zLjg1NS0uODg0LTMuOTctMS4zNzlMNCAxMi40OXYtNy41QTcuNDE0IDcuNDE0IDAgMCAwIDggNmE3LjQxNCA3LjQxNCAwIDAgMCA0LTEuMDE0djcuNTA0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0FsbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk03LjI5MzMzIDkuMDA2MzFMNi40MTMzMyA5Ljg4NTUyQzYuMjc5NDkgOS4zNDcxNyA1Ljk2OTE3IDguODY5MDUgNS41MzE4MSA4LjUyNzM1QzUuMDk0NDUgOC4xODU2NCA0LjU1NTIxIDggNCA4QzMuNDQ0NzkgOCAyLjkwNTU1IDguMTg1NjQgMi40NjgxOSA4LjUyNzM1QzIuMDMwODMgOC44NjkwNSAxLjcyMDUxIDkuMzQ3MTcgMS41ODY2NyA5Ljg4NTUyTDAuNzA2NjY3IDkuMDA2MzFMMCA5LjcxMjM0TDEuMTQ2NjcgMTAuODU4TDEgMTEuMDA0NVYxMi4wMDM2SDBWMTMuMDAyN0gxVjEzLjA1NkMxLjA1MSAxMy4zODE1IDEuMTQyODMgMTMuNjk5MyAxLjI3MzMzIDE0LjAwMThMMCAxNS4yOTRMMC43MDY2NjcgMTZMMS44MDY2NyAxNC45MDFDMi4wNjgzOCAxNS4yMzQ2IDIuNDAwNzggMTUuNTA2MiAyLjc4MDAxIDE1LjY5NjJDMy4xNTkyNCAxNS44ODYyIDMuNTc1ODcgMTUuOTkgNCAxNkM0LjQyNDEzIDE1Ljk5IDQuODQwNzYgMTUuODg2MiA1LjIxOTk5IDE1LjY5NjJDNS41OTkyMiAxNS41MDYyIDUuOTMxNjIgMTUuMjM0NiA2LjE5MzMzIDE0LjkwMUw3LjI5MzMzIDE2TDggMTUuMjk0TDYuNzI2NjcgMTQuMDAxOEM2Ljg1ODc5IDEzLjY5MjkgNi45NTA2NSAxMy4zNjgzIDcgMTMuMDM2VjEyLjk2OTRIOFYxMi4wMDM2SDdWMTEuMDA0NUw2Ljg1MzMzIDEwLjg1OEw4IDkuNzEyMzRMNy4yOTMzMyA5LjAwNjMxWk00IDkuMDA2MzFDNC4zOTc4MiA5LjAwNjMxIDQuNzc5MzYgOS4xNjQyMSA1LjA2MDY2IDkuNDQ1MjZDNS4zNDE5NiA5LjcyNjMxIDUuNSAxMC4xMDc1IDUuNSAxMC41MDVIMi41QzIuNSAxMC4xMDc1IDIuNjU4MDQgOS43MjYzMSAyLjkzOTM0IDkuNDQ1MjZDMy4yMjA2NCA5LjE2NDIxIDMuNjAyMTggOS4wMDYzMSA0IDkuMDA2MzFaTTYgMTMuMDAyN0M1Ljk1MTE2IDEzLjUxNjEgNS43MjQ3NiAxMy45OTY1IDUuMzU5NzQgMTQuMzYxMkM0Ljk5NDcyIDE0LjcyNTkgNC41MTM5IDE0Ljk1MjEgNCAxNS4wMDA5QzMuNDg2MSAxNC45NTIxIDMuMDA1MjggMTQuNzI1OSAyLjY0MDI2IDE0LjM2MTJDMi4yNzUyNCAxMy45OTY1IDIuMDQ4ODQgMTMuNTE2MSAyIDEzLjAwMjdWMTEuNTA0MUg2VjEzLjAwMjdaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjc3OTUxIDJMMi45OTk1MSAyLjQxVjdIMy45OTk1MVYzLjM1TDExLjU5OTUgOC40Mkw5IDEwLjE1MDdWMTEuMzQ5N0wxMi43Nzk1IDguODNWOEwzLjc3OTUxIDJaTTkgMTMuMzQ5N1YxMi4xNDgyTDE0LjU5OTUgOC40MjAwNkw2Ljk5OTUxIDMuMzUwMDZWMi4xNDY3M0wxNS43Nzk1IDguMDAwMDZWOC44MzAwNkw5IDEzLjM0OTdaXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnQWx0U21hbGwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNy4yOTMgOS4wMDZsLS44OC44OEEyLjQ4NCAyLjQ4NCAwIDAgMCA0IDhhMi40ODggMi40ODggMCAwIDAtMi40MTMgMS44ODZsLS44OC0uODhMMCA5LjcxMmwxLjE0NyAxLjE0Ni0uMTQ3LjE0NnYxSDB2Ljk5OWgxdi4wNTNjLjA1MS4zMjYuMTQzLjY0My4yNzMuOTQ2TDAgMTUuMjk0LjcwNyAxNmwxLjEtMS4wOTlBMi44NzMgMi44NzMgMCAwIDAgNCAxNmEyLjg3NSAyLjg3NSAwIDAgMCAyLjE5My0xLjA5OUw3LjI5MyAxNiA4IDE1LjI5NGwtMS4yNzMtMS4yOTJBMy45MiAzLjkyIDAgMCAwIDcgMTMuMDM2di0uMDY3aDF2LS45NjVIN3YtMWwtLjE0Ny0uMTQ2TDggOS43MTJsLS43MDctLjcwNnpNNCA5LjAwNmExLjUgMS41IDAgMCAxIDEuNSAxLjQ5OWgtM0ExLjQ5OCAxLjQ5OCAwIDAgMSA0IDkuMDA2em0yIDMuOTk3QTIuMjE3IDIuMjE3IDAgMCAxIDQgMTVhMi4yMiAyLjIyIDAgMCAxLTItMS45OTh2LTEuNDk5aDR2MS40OTl6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDIuNDFMNS43OCAybDkgNnYuODNMOSAxMi42ODN2LTEuMmw0LjYtMy4wNjNMNiAzLjM1VjdINVYyLjQxelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0FsdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMjQgMjRcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMC45NCAxMy41bC0xLjMyIDEuMzJhMy43MyAzLjczIDAgMCAwLTcuMjQgMEwxLjA2IDEzLjUgMCAxNC41NmwxLjcyIDEuNzItLjIyLjIyVjE4SDB2MS41aDEuNXYuMDhjLjA3Ny40ODkuMjE0Ljk2Ni40MSAxLjQyTDAgMjIuOTQgMS4wNiAyNGwxLjY1LTEuNjVBNC4zMDggNC4zMDggMCAwIDAgNiAyNGE0LjMxIDQuMzEgMCAwIDAgMy4yOS0xLjY1TDEwLjk0IDI0IDEyIDIyLjk0IDEwLjA5IDIxYy4xOTgtLjQ2NC4zMzYtLjk1MS40MS0xLjQ1di0uMUgxMlYxOGgtMS41di0xLjVsLS4yMi0uMjJMMTIgMTQuNTZsLTEuMDYtMS4wNnpNNiAxMy41YTIuMjUgMi4yNSAwIDAgMSAyLjI1IDIuMjVoLTQuNUEyLjI1IDIuMjUgMCAwIDEgNiAxMy41em0zIDZhMy4zMyAzLjMzIDAgMCAxLTMgMyAzLjMzIDMuMzMgMCAwIDEtMy0zdi0yLjI1aDZ2Mi4yNXptMTQuNzYtOS45djEuMjZMMTMuNSAxNy4zN1YxNS42bDguNS01LjM3TDkgMnY5LjQ2YTUuMDcgNS4wNyAwIDAgMC0xLjUtLjcyVi42M0w4LjY0IDBsMTUuMTIgOS42elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0JyZWFrcG9pbnRDb25kaXRpb25hbFVudmVyaWZpZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01Ljc3OCA0LjY3NGE0IDQgMCAxIDEgNC40NDQgNi42NTIgNCA0IDAgMCAxLTQuNDQ0LTYuNjUyem0uNjk0IDUuNjEyYTIuNzUgMi43NSAwIDEgMCAzLjA1Ni00LjU3MiAyLjc1IDIuNzUgMCAwIDAtMy4wNTYgNC41NzJ6TTkuNSA2LjVoLTN2MWgzdi0xem0wIDJoLTN2MWgzdi0xelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0JyZWFrcG9pbnRDb25kaXRpb25hbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTggNGE0IDQgMCAxIDAgMCA4IDQgNCAwIDAgMCAwLTh6bTIgNXYxSDZWOWg0em0wLTN2MUg2VjZoNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdCcmVha3BvaW50RGF0YVVudmVyaWZpZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOS45MzEgNGgtNC42MmwtMi4zMSA0IDIuMzEgNGg0LjYybDIuMzEtNC0yLjMxLTR6bS0uNzUgNi43aC0zLjEyTDQuNTAxIDhsMS41Ni0yLjdoMy4xMmwxLjU2IDIuNy0xLjU2IDIuN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdCcmVha3BvaW50RGF0YSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMi4yMzggOGwtMi4zMSA0SDUuMzFMMyA4bDIuMzEtNGg0LjYxOGwyLjMxIDR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnQnJlYWtwb2ludEZ1bmN0aW9uVW52ZXJpZmllZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTQgMTFoOEw4IDRsLTQgN3ptMi4xNTQtMS4yNWgzLjY5Mkw4IDYuNTIgNi4xNTQgOS43NXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdCcmVha3BvaW50RnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOCA0bDQgNi45MDVINEw4IDR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnQnJlYWtwb2ludExvZ1VudmVyaWZpZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjAyIDcuOThMOCAzbDQuOTggNC45OEw4IDEyLjk2IDMuMDIgNy45OHpNOCAxMC43N2wyLjc5LTIuNzlMOCA1LjE5IDUuMjEgNy45OCA4IDEwLjc3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0JyZWFrcG9pbnRMb2cgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOCAzbDUgNS01IDUtNS01IDUtNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdCcmVha3BvaW50VW5zdXBwb3J0ZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS4zMjYgMTAuMjIyYTQgNCAwIDEgMC02LjY1My00LjQ0NCA0IDQgMCAwIDAgNi42NTMgNC40NDR6TTguNjUgMTBINy40djFoMS4yNXYtMXpNNy40IDlWNWgxLjI1djRINy40elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0NvbnNvbGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjA0IDEuMzYxbC4xMzktLjA1N0gyMS4zMmwuMTQuMDU3IDEuMTc4IDEuMTc5LjA1Ny4xMzlWMTYuODJsLS4wNTcuMTQtMS4xNzkgMS4xNzgtLjEzOS4wNTdIMTRWMThhMS45OSAxLjk5IDAgMCAwLS41NDgtMS4zNzVoNy42NzNWMi44NzVINy4zNzV2Ny4yODJhNS43MyA1LjczIDAgMCAwLTEuNTcxLS4xNjRWMi42NzlsLjA1Ny0uMTRMNy4wNCAxLjM2MnptOS41MzEgOS40NTJsLTIuODA5IDIuOGEyIDIgMCAwIDAtLjM0OC0uNDY3bC0uNDE5LS40MiAyLjIzNi0yLjIzNS0zLjYwNi0zLjY5NC44MTMtLjgzMyA0LjEzMyA0LjEzM3YuNzE2ek05LjYyIDE0LjgybDEuMzItMS4zMkwxMiAxNC41NmwtMS43MiAxLjcyLjIyLjIyVjE4SDEydjEuNDVoLTEuNXYuMWE1Ljg4OCA1Ljg4OCAwIDAgMS0uNDEgMS40NUwxMiAyMi45NCAxMC45NCAyNGwtMS42NS0xLjY1QTQuMzA4IDQuMzA4IDAgMCAxIDYgMjRhNC4zMSA0LjMxIDAgMCAxLTMuMjktMS42NUwxLjA2IDI0IDAgMjIuOTQgMS45MSAyMWE1Ljg4OSA1Ljg4OSAwIDAgMS0uNDEtMS40MnYtLjA4SDBWMThoMS41di0xLjVsLjIyLS4yMkwwIDE0LjU2bDEuMDYtMS4wNiAxLjMyIDEuMzJhMy43MyAzLjczIDAgMCAxIDcuMjQgMHptLTIuMDI5LS42NjFBMi4yNSAyLjI1IDAgMCAwIDMuNzUgMTUuNzVoNC41YTIuMjUgMi4yNSAwIDAgMC0uNjU5LTEuNTkxem0uNDQ5IDcuMzhBMy4zMyAzLjMzIDAgMCAwIDkgMTkuNXYtMi4yNUgzdjIuMjVhMy4zMyAzLjMzIDAgMCAwIDMgMyAzLjMzIDMuMzMgMCAwIDAgMi4wNC0uOTZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnQ29udGludWVTbWFsbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTQgMkgzVjE0SDRWMlpNNy4yOTA2MiAyLjU5MzE0TDYuNSAzLjAwMDAxVjEzTDcuMjkwNjIgMTMuNDA2OUwxNC4yOTA2IDguNDA2ODdWNy41OTMxNEw3LjI5MDYyIDIuNTkzMTRaTTEzLjEzOTggOC4wMDAwMUw3LjUgMTIuMDI4NFYzLjk3MTZMMTMuMTM5OCA4LjAwMDAxWlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0NvbnRpbnVlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMi41IDJINHYxMkgyLjVWMnptNC45MzYuMzlMNi4yNSAzdjEwbDEuMTg2LjYxIDctNVY3LjM5bC03LTV6TTEyLjcxIDhsLTQuOTYgMy41NDNWNC40NTdMMTIuNzEgOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdDb3ZlcmFnZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUgMi40MUw1Ljc4IDJMMTQuNzggOFY4LjgzTDkgMTIuNjgzM1YxMS40ODI2TDEzLjYgOC40Mkw2IDMuMzVWN0g1VjIuNDFaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02LjEzMDQxIDEyLjEyMzZDNS45NDc5NiAxMi4zMDMyIDUuODA3NzcgMTIuNTAzIDUuNzA5MjcgMTIuNzIzMkM1LjYxMzM3IDEyLjk0MjcgNS41NjUxNiAxMy4xODEgNS41NjUxNiAxMy40Mzg5VjE0LjMwMDdDNS41NjUxNiAxNC4zOTczIDUuNTQ2OTQgMTQuNDg4NiA1LjUxMDE2IDE0LjU3NDFDNS40NzM4IDE0LjY1ODcgNS40MjM4NyAxNC43MzI4IDUuMzYwMzYgMTQuNzk2MUM1LjI5Njg3IDE0Ljg1OTQgNS4yMjI1IDE0LjkwOTEgNS4xMzc3NCAxNC45NDUzQzUuMDUyMDMgMTQuOTgxOSA0Ljk2MDQ5IDE1IDQuODYzNjYgMTVIMy45OTg4QzMuOTAxOTcgMTUgMy44MTA0MyAxNC45ODE5IDMuNzI0NzIgMTQuOTQ1M0MzLjYzOTk2IDE0LjkwOTEgMy41NjU2IDE0Ljg1OTQgMy41MDIxIDE0Ljc5NjFDMy40Mzg2IDE0LjczMjggMy4zODg2NiAxNC42NTg3IDMuMzUyMyAxNC41NzQxQzMuMzE1NTIgMTQuNDg4NiAzLjI5NzMgMTQuMzk3MyAzLjI5NzMgMTQuMzAwN1YxMy40Mzg5QzMuMjk3MyAxMy4xODExIDMuMjQ4IDEyLjk0MjggMy4xNDk5IDEyLjcyMzRDMy4wNTM2OCAxMi41MDMzIDIuOTE0NDggMTIuMzAzMSAyLjczMjA1IDEyLjEyMzZDMi40OTc5MSAxMS44OTI2IDIuMzE3MTMgMTEuNjM0NiAyLjE5MDQxIDExLjM1QzIuMDYzMyAxMS4wNjQ0IDIgMTAuNzU1MiAyIDEwLjQyMjhDMiAxMC4yMDA1IDIuMDI4NzYgOS45ODU4NiAyLjA4NjQxIDkuNzc5MDZDMi4xNDM5MiA5LjU3Mjc5IDIuMjI1NjUgOS4zOCAyLjMzMTY2IDkuMjAwODdDMi40Mzc1NCA5LjAxOTcyIDIuNTY0MTkgOC44NTU2NyAyLjcxMTU2IDguNzA4ODRDMi44NTg4NiA4LjU2MjA2IDMuMDIyMzEgOC40MzU5IDMuMjAxODIgOC4zMzA0MkMzLjM4MzczIDguMjI0ODggMy41Nzg0OCA4LjE0MzM0IDMuNzg1NDIgOC4wODYwNkMzLjk5Mjg4IDguMDI4NjUgNC4yMDgyIDggNC40MzEyMyA4QzQuNjU0MjYgOCA0Ljg2OTU5IDguMDI4NjUgNS4wNzcwNCA4LjA4NjA2QzUuMjgzOTggOC4xNDMzNCA1LjQ3NzQgOC4yMjQ3NSA1LjY1NzE0IDguMzMwMzVDNS44Mzg5IDguNDM1ODIgNi4wMDM1MyA4LjU2MTk5IDYuMTUwOTEgOC43MDg4NEM2LjI5ODI3IDguODU1NjcgNi40MjQ5MiA5LjAxOTcyIDYuNTMwNzkgOS4yMDA4NkM2LjYzNjgxIDkuMzc5OTkgNi43MTg1NCA5LjU3Mjc4IDYuNzc2MDUgOS43NzkwNkM2LjgzMzcgOS45ODU4NiA2Ljg2MjQ2IDEwLjIwMDUgNi44NjI0NiAxMC40MjI4QzYuODYyNDYgMTAuNzU1MiA2Ljc5OTE2IDExLjA2NDQgNi42NzIwNiAxMS4zNUM2LjU0NTMzIDExLjYzNDYgNi4zNjQ1NiAxMS44OTI2IDYuMTMwNDEgMTIuMTIzNlpNNS4wMjcwMyAxMy4xMTU0SDMuODM1NDRWMTQuMzAwN0MzLjgzNTQ0IDE0LjM0NDMgMy44NTA4IDE0LjM4MTQgMy44ODQwMSAxNC40MTQ1QzMuOTE3MjQgMTQuNDQ3NiAzLjk1NDY1IDE0LjQ2MzEgMy45OTg4IDE0LjQ2MzFINC44NjM2NkM0LjkwNzgxIDE0LjQ2MzEgNC45NDUyMyAxNC40NDc2IDQuOTc4NDUgMTQuNDE0NUM1LjAxMTY2IDE0LjM4MTQgNS4wMjcwMyAxNC4zNDQzIDUuMDI3MDMgMTQuMzAwN1YxMy4xMTU0WlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z0Rpc2Nvbm5lY3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMy42MTcgMy44NDRhMi44NyAyLjg3IDAgMCAwLS40NTEtLjg2OGwxLjM1NC0xLjM2TDEzLjkwNCAxbC0xLjM2IDEuMzU0YTIuODc3IDIuODc3IDAgMCAwLS44NjgtLjQ1MiAzLjA3MyAzLjA3MyAwIDAgMC0yLjE0LjA3NSAzLjAzIDMuMDMgMCAwIDAtLjk5MS42NjRMNyA0LjE5Mmw0LjMyNyA0LjMyOCAxLjU1Mi0xLjU0NWMuMjg3LS4yODcuNTA4LS42MTguNjYzLS45OTJhMy4wNzQgMy4wNzQgMCAwIDAgLjA3NS0yLjE0em0tLjg4OSAxLjgwNGEyLjE1IDIuMTUgMCAwIDEtLjQ3MS43MDVsLS45My45My0zLjA5LTMuMDkuOTMtLjkzYTIuMTUgMi4xNSAwIDAgMSAuNzA0LS40NzIgMi4xMzQgMi4xMzQgMCAwIDEgMS42ODkuMDA3Yy4yNjQuMTE0LjQ5NC4yNzEuNjkuNDcyLjIuMTk1LjM1OC40MjYuNDcyLjY5YTIuMTM0IDIuMTM0IDAgMCAxIC4wMDcgMS42ODh6bS00LjgyNCA0Ljk5NGwxLjQ4NC0xLjU0NS0uNjE2LS42MjItMS40OSAxLjU1MS0xLjg2LTEuODU5IDEuNDkxLTEuNTUyTDYuMjkxIDYgNC44MDggNy41NDVsLS42MTYtLjYxNS0xLjU1MSAxLjU0NWEzIDMgMCAwIDAtLjY2My45OTggMy4wMjMgMy4wMjMgMCAwIDAtLjIzMyAxLjE2OWMwIC4zMzIuMDUuNjU2LjE1Ljk3LjEwNS4zMS4yNTguNTk3LjQ1OS44NjJMMSAxMy44MzRsLjYxNS42MTUgMS4zNi0xLjM1M2MuMjY1LjIuNTUyLjM1My44NjIuNDU4LjMxNC4xLjYzOC4xNS45Ny4xNS40MDYgMCAuNzk2LS4wNzcgMS4xNy0uMjMyLjM3OC0uMTU1LjcxLS4zNzYuOTk4LS42NjNsMS41NDUtMS41NTItLjYxNi0uNjE1em0tMi4yNjIgMi4wMjNhMi4xNiAyLjE2IDAgMCAxLS44MzQuMTY0Yy0uMzAxIDAtLjU4Ni0uMDU3LS44NTUtLjE3YTIuMjc4IDIuMjc4IDAgMCAxLS42OTctLjQ2NiAyLjI4IDIuMjggMCAwIDEtLjQ2NS0uNjk3IDIuMTY3IDIuMTY3IDAgMCAxLS4xNy0uODU0IDIuMTYgMi4xNiAwIDAgMSAuNjQyLTEuNTQ1bC45My0uOTMgMy4wOSAzLjA5LS45My45M2EyLjIyIDIuMjIgMCAwIDEtLjcxMS40Nzh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnTGluZUJ5TGluZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk02IDEwVjloOXYxSDZ6bTQtNGg1djFoLTVWNnptNS0zdjFINlYzaDl6bS05IDl2MWg5di0xSDZ6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDIuNzk1bC43ODMtLjQxOSA1LjM3MSAzLjU4MXYuODM4bC01LjM3MSAzLjU4MUwxIDkuOTU3VjIuNzk1em0xLjAwNy45NHY1LjI4MWwzLjk2LTIuNjQtMy45Ni0yLjY0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z1BhdXNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTQuNSAzSDZ2MTBINC41VjN6bTcgMHYxMEgxMFYzaDEuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdSZXJ1biAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuMTY3IDEyYTMgMyAwIDAgMS01Ljc0IDEuMjIzbC0uOTI4LjM3NkE0LjAwMSA0LjAwMSAwIDEgMCAxIDkuNTU2VjguMzMzSDBWMTFsLjUuNWgyLjMzM3YtMUgxLjU2OEEzIDMgMCAwIDEgNy4xNjcgMTJ6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDIuNDFMNS43OCAybDkgNnYuODNMMTAgMTIuMDE3di0xLjJsMy42LTIuMzk3TDYgMy4zNVY3SDVWMi40MXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdSZXN0YXJ0RnJhbWUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDEwVjloNS4yMDdhNS40OCA1LjQ4IDAgMCAwLS4xODUgMUgxem02LjI1Ny0zYTUuNTQgNS41NCAwIDAgMSAxLjA4LTFIMXYxaDYuMjU3ek02LjYgMTNhNS40NjUgNS40NjUgMCAwIDEtLjM5My0xSDF2MWg1LjZ6TTE1IDN2MUgxVjNoMTR6bS0zLjM2IDEwLjAzMWEyLjUzMSAyLjUzMSAwIDEgMC0yLjE5Mi0zLjc5N2gxLjA2OHYuODQ0aC0xLjk3bC0uNDIxLS40MjJ2LTIuMjVoLjg0NHYxLjAzMmEzLjM3NSAzLjM3NSAwIDEgMS0uNDIzIDMuNDEybC43ODItLjMxOGEyLjUzMiAyLjUzMiAwIDAgMCAyLjMxMyAxLjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnUmVzdGFydCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEyLjc1IDhhNC41IDQuNSAwIDAgMS04LjYxIDEuODM0bC0xLjM5MS41NjVBNi4wMDEgNi4wMDEgMCAwIDAgMTQuMjUgOCA2IDYgMCAwIDAgMy41IDQuMzM0VjIuNUgydjRsLjc1Ljc1aDMuNXYtMS41SDQuMzUyQTQuNSA0LjUgMCAwIDEgMTIuNzUgOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdSZXZlcnNlQ29udGludWUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMy41IDJIMTJ2MTJoMS41VjJ6bS00LjkzNi4zOUw5Ljc1IDN2MTBsLTEuMTg2LjYxLTctNVY3LjM5bDctNXpNMy4yOSA4bDQuOTYgMy41NDNWNC40NTdMMy4yOSA4elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z1N0YWNrZnJhbWVBY3RpdmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1wiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEwIDhhMiAyIDAgMSAxLTQgMCAyIDIgMCAwIDEgNCAwelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjUgNy4xNWwtNC4yNi00Ljc0TDkuMzEgMkg0LjI1TDMgMy4yNXY5LjQ4bDEuMjUgMS4yNWg1LjA2bC45My0uNDIgNC4yNi00Ljc0VjcuMTV6bS01LjE5IDUuNThINC4yNVYzLjI1aDUuMDZsNC4yNiA0LjczLTQuMjYgNC43NXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdTdGFja2ZyYW1lRG90IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMCA4YTIgMiAwIDEgMS00IDAgMiAyIDAgMCAxIDQgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdTdGFja2ZyYW1lIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNC41IDcuMTVsLTQuMjYtNC43NEw5LjMxIDJINC4yNUwzIDMuMjV2OS40OGwxLjI1IDEuMjVoNS4wNmwuOTMtLjQyIDQuMjYtNC43NFY3LjE1em0tNS4xOSA1LjU4SDQuMjVWMy4yNWg1LjA2bDQuMjYgNC43My00LjI2IDQuNzV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnU3RhcnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00LjI1IDNsMS4xNjYtLjYyNCA4IDUuMzMzdjEuMjQ4bC04IDUuMzM0LTEuMTY2LS42MjRWM3ptMS41IDEuNDAxdjcuODY0bDUuODk4LTMuOTMyTDUuNzUgNC40MDF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnU3RlcEJhY2sgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjc1IDUuNzV2LTRoMS41djIuNTQyYzEuMTQ1LTEuMzU5IDIuOTExLTIuMjA5IDQuODQtMi4yMDkgMy4xNzcgMCA1LjkyIDIuMzA3IDYuMTYgNS4zOThsLjAyLjI2OWgtMS41bC0uMDIyLS4yMjZjLS4yMTItMi4xOTUtMi4yMDItMy45NC00LjY1Ni0zLjk0LTEuNzM2IDAtMy4yNDQuODc1LTQuMDUgMi4xNjZoMi44M3YxLjVIMi43MDdsLS45NjEtLjk3NVY1Ljc1aC4wMDN6TTggMTRhMiAyIDAgMSAxIDAtNCAyIDIgMCAwIDEgMCA0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z1N0ZXBJbnRvIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOCA5LjUzMmguNTQybDMuOTA1LTMuOTA1LTEuMDYxLTEuMDYtMi42MzcgMi42MVYxSDcuMjUxdjYuMTc3bC0yLjYzNy0yLjYxLTEuMDYxIDEuMDYgMy45MDUgMy45MDVIOHptMS45NTYgMy40ODFhMiAyIDAgMSAxLTQgMCAyIDIgMCAwIDEgNCAwelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1Z1N0ZXBPdXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04IDFoLS41NDJMMy41NTMgNC45MDVsMS4wNjEgMS4wNiAyLjYzNy0yLjYxdjYuMTc3aDEuNDk4VjMuMzU1bDIuNjM3IDIuNjEgMS4wNjEtMS4wNkw4LjU0MiAxSDh6bTEuOTU2IDEyLjAxM2EyIDIgMCAxIDEtNCAwIDIgMiAwIDAgMSA0IDB6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RlYnVnU3RlcE92ZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC4yNSA1Ljc1di00aC0xLjV2Mi41NDJjLTEuMTQ1LTEuMzU5LTIuOTExLTIuMjA5LTQuODQtMi4yMDktMy4xNzcgMC01LjkyIDIuMzA3LTYuMTYgNS4zOThsLS4wMi4yNjloMS41MDFsLjAyMi0uMjI2Yy4yMTItMi4xOTUgMi4yMDItMy45NCA0LjY1Ni0zLjk0IDEuNzM2IDAgMy4yNDQuODc1IDQuMDUgMi4xNjZoLTIuODN2MS41aDQuMTYzbC45NjItLjk3NVY1Ljc1aC0uMDA0ek04IDE0YTIgMiAwIDEgMCAwLTQgMiAyIDAgMCAwIDAgNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVidWdTdG9wIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTIgMnYxMmgxMlYySDJ6bTEwLjc1IDEwLjc1aC05LjV2LTkuNWg5LjV2OS41elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEZWJ1ZyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMjQgMjRcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0zLjQ2MyAxMi44NmwtLjAwNS0uMDcuMDA1LjA3em03LjI2NC42OWwtMy4wMzQtMy4wNDkgMS4wMTQtMS4wMTQgMy4yMDkgMy4yMjUgMy4xNjMtMy4xNjMgMS4wMTQgMS4wMTQtMy4wMzQgMy4wMzQgMy4wMzQgMy4wNS0xLjAxNCAxLjAxNC0zLjIwOS0zLjIyNUw4LjcwNyAxNy42bC0xLjAxNC0xLjAxNCAzLjAzNC0zLjAzNHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTE2LjkzMyA1LjAwM1Y2aDEuMzQ1bDIuODQzLTIuODQyIDEuMDE0IDEuMDE0LTIuNjkyIDIuNjkxLjAzMy4wODVhMTMuNzUgMTMuNzUgMCAwIDEgLjg4NSA0LjkxMmMwIC4zMzUtLjAxMS42NjctLjAzNC45OTVsLS4wMDUuMDc1aDMuNTR2MS40MzRoLTMuNzJsLS4wMS4wNThjLS4zMDMgMS42NTMtLjg5MSAzLjE2LTEuNjkyIDQuNDI5bC0uMDYuMDk0IDMuNDIzIDMuNDQtMS4wMTcgMS4wMTItMy4yNzQtMy4yOS0uMDk5LjExYy0xLjQ3OSAxLjY1NC0zLjM5NSAyLjY0Ni01LjQ4MyAyLjY0Ni0yLjEyIDAtNC4wNjMtMS4wMjMtNS41NTItMi43MjNsLS4wOTgtLjExMy0zLjIwOSAzLjIwOC0xLjAxNC0xLjAxNCAzLjM2Ni0zLjM2NS0uMDU5LS4wOTVjLS43NzItMS4yNS0xLjM0LTIuNzI1LTEuNjM2LTQuMzRsLS4wMS0uMDU3SDBWMTIuOTNoMy41MzhsLS4wMDUtLjA3NWExNC4yMyAxNC4yMyAwIDAgMS0uMDM0LS45OTVjMC0xLjc0My4zMS0zLjM5Ljg2My00Ljg1NGwuMDMyLS4wODQtMi43NjItMi43NzZMMi42NSAzLjEzNSA1LjUgNmgxLjQyN3YtLjk5N2E1LjAwMyA1LjAwMyAwIDAgMSAxMC4wMDYgMHptLTguNTcyIDBWNkgxNS41di0uOTk3YTMuNTY5IDMuNTY5IDAgMCAwLTcuMTM4IDB6bTkuOCAyLjUyMmwtLjAzNC0uMDlINS43MzNsLS4wMzQuMDlhMTIuMzI4IDEyLjMyOCAwIDAgMC0uNzY2IDQuMzM1YzAgMi43Ni44NjIgNS4yMDEgMi4xODQgNi45MiAxLjMyIDEuNzE2IDMuMDM2IDIuNjQ5IDQuODEzIDIuNjQ5IDEuNzc3IDAgMy40OTItLjkzMyA0LjgxMy0yLjY1IDEuMzIyLTEuNzE4IDIuMTg0LTQuMTYgMi4xODQtNi45MTkgMC0xLjU3NC0uMjgtMy4wNDQtLjc2Ni00LjMzNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGVza3RvcERvd25sb2FkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNCAxNXYtMWMyIDAgMi0uNiAyLTFIMS41bC0uNS0uNXYtMTBsLjUtLjVoMTNsLjUuNXY5LjI0bC0xLTFWM0gydjloNS43M2wtLjUuNSAyLjUgMi41SDR6bTcuODYgMGwyLjUtMi41LS43MS0uN0wxMiAxMy40NVY3aC0xdjYuNDRsLTEuNjQtMS42NS0uNzEuNzEgMi41IDIuNWguNzF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RldmljZUNhbWVyYVZpZGVvIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjI1IDQuNzRMMTEgNi42MlY0LjVsLS41LS41aC05bC0uNS41djdsLjUuNWg5bC41LS41di0ybDMuMjUgMS44Ny43NS0uNDdWNS4xOGwtLjc1LS40NHpNMTAgMTFIMlY1aDh2NnptNC0xbC0zLTEuN3YtLjUyTDE0IDZ2NHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGV2aWNlQ2FtZXJhIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAuNzA3IDNIMTQuNWwuNS41djlsLS41LjVoLTEzbC0uNS0uNXYtOWwuNS0uNWgzLjc5M2wuODUzLS44NTRMNi41IDJoM2wuMzU0LjE0Ni44NTMuODU0ek0yIDEyaDEyVjRoLTMuNWwtLjM1NC0uMTQ2TDkuMjkzIDNINi43MDdsLS44NTMuODU0TDUuNSA0SDJ2OHptMS41LTdhLjUuNSAwIDEgMCAwIDEgLjUuNSAwIDAgMCAwLTF6TTggNmEyIDIgMCAxIDEgMCA0IDIgMiAwIDAgMSAwLTR6bTAtMWEzIDMgMCAxIDAgMCA2IDMgMyAwIDAgMCAwLTZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RldmljZU1vYmlsZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTQuNSAxaDhsLjUuNXYxM2wtLjUuNWgtOGwtLjUtLjV2LTEzbC41LS41ek01IDE0aDdWMkg1djEyem0yLjUtMmgydjFoLTJ2LTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0RpZmZBZGRlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEuNSAxaDEybC41LjV2MTJsLS41LjVoLTEybC0uNS0uNXYtMTJsLjUtLjV6TTIgMTNoMTFWMkgydjExelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOCA0SDd2M0g0djFoM3YzaDFWOGgzVjdIOFY0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEaWZmSWdub3JlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEuNSAxaDEzbC41LjV2MTNsLS41LjVoLTEzbC0uNS0uNXYtMTNsLjUtLjV6TTIgMTRoMTJWMkgydjEyem04LTEwaDJ2MmwtNiA2SDR2LTJsNi02elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEaWZmTW9kaWZpZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMWgxM2wuNS41djEzbC0uNS41aC0xM2wtLjUtLjV2LTEzbC41LS41ek0yIDJ2MTJoMTJWMkgyem02IDlhMyAzIDAgMSAwIDAtNiAzIDMgMCAwIDAgMCA2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEaWZmUmVtb3ZlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMCA3djFINVY3aDV6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMWgxMmwuNS41djEybC0uNS41aC0xMmwtLjUtLjV2LTEybC41LS41ek0yIDEzaDExVjJIMnYxMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRGlmZlJlbmFtZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMWgxM2wuNS41djEzbC0uNS41aC0xM2wtLjUtLjV2LTEzbC41LS41ek0yIDE0aDEyVjJIMnYxMnptMi01aDN2M2w1LTQtNS00djNINHYyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NEaWZmIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMiAzLjVsLjUtLjVoNWwuNS41djlsLS41LjVoLTVsLS41LS41di05ek0zIDEyaDRWNkgzdjZ6bTAtN2g0VjRIM3Yxem02LjUtMmg1bC41LjV2OWwtLjUuNWgtNWwtLjUtLjV2LTlsLjUtLjV6bS41IDloNHYtMmgtNHYyem0wLTRoNFY0aC00djR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Rpc2NhcmQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjUgMnYzLjVMNCA2aDMuNVY1SDQuOTc5bC45NDEtLjk0MWEzLjU1MiAzLjU1MiAwIDEgMSA1LjAyMyA1LjAyM0w1Ljc0NiAxNC4yOGwuNzIuNzIgNS4xOTgtNS4xOThBNC41NyA0LjU3IDAgMCAwIDUuMiAzLjMzOWwtLjcuN1YyaC0xelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NFZGl0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEzLjIzIDFoLTEuNDZMMy41MiA5LjI1bC0uMTYuMjJMMSAxMy41OSAyLjQxIDE1bDQuMTItMi4zNi4yMi0uMTZMMTUgNC4yM1YyLjc3TDEzLjIzIDF6TTIuNDEgMTMuNTlsMS41MS0zIDEuNDUgMS40NS0yLjk2IDEuNTV6bTMuODMtMi4wNkw0LjQ3IDkuNzZsOC04IDEuNzcgMS43Ny04IDh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0VkaXRvckxheW91dCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNSA2LjVsLS40Ny0uNUg3VjEuNDdMNi41MyAxSDEuNDdMMSAxLjQ3djguMDZsLjQ3LjQ3SDR2NC41M2wuNDcuNDdoMTAuMDZsLjQ3LS40N1Y2LjV6TTIgOVYzaDR2Nkgyem0xMiA1SDV2LTRoMS41M0w3IDkuNTNWOC4wMTNoN1YxNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRWxsaXBzaXMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNCA4YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHptNSAwYTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHptNSAwYTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRW1wdHlXaW5kb3cgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00IDRoM3YxSDR2M0gzVjVIMFY0aDNWMWgxdjN6TTEgMTQuNVY5aDF2NWgxMlY3SDhWNmg2VjRIOFYzaDYuNWwuNS41djExbC0uNS41aC0xM2wtLjUtLjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0Vycm9yIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC42IDFjMS42LjEgMy4xLjkgNC4yIDIgMS4zIDEuNCAyIDMuMSAyIDUuMSAwIDEuNi0uNiAzLjEtMS42IDQuNC0xIDEuMi0yLjQgMi4xLTQgMi40LTEuNi4zLTMuMi4xLTQuNi0uNy0xLjQtLjgtMi41LTItMy4xLTMuNUMuOSA5LjIuOCA3LjUgMS4zIDZjLjUtMS42IDEuNC0yLjkgMi44LTMuOEM1LjQgMS4zIDcgLjkgOC42IDF6bS41IDEyLjljMS4zLS4zIDIuNS0xIDMuNC0yLjEuOC0xLjEgMS4zLTIuNCAxLjItMy44IDAtMS42LS42LTMuMi0xLjctNC4zLTEtMS0yLjItMS42LTMuNi0xLjctMS4zLS4xLTIuNy4yLTMuOCAxLTEuMS44LTEuOSAxLjktMi4zIDMuMy0uNCAxLjMtLjQgMi43LjIgNCAuNiAxLjMgMS41IDIuMyAyLjcgMyAxLjIuNyAyLjYuOSAzLjkuNnpNNy45IDcuNUwxMC4zIDVsLjcuNy0yLjQgMi41IDIuNCAyLjUtLjcuNy0yLjQtMi41LTIuNCAyLjUtLjctLjcgMi40LTIuNS0yLjQtMi41LjctLjcgMi40IDIuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRXhjbHVkZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTkuNDEyIDFINi41ODhsLS40ODQgMi40MjMtMi4wNTYtMS4zNy0xLjk5NiAxLjk5NSAxLjM3IDIuMDU2TDEgNi41ODh2Mi44MjRsMi40MjMuNDg0LTEuMzcgMi4wNTYgMS45OTUgMS45OTYgMi4wNTYtMS4zN0w2LjU4OCAxNWgyLjA4M2E0LjUyNiA0LjUyNiAwIDAgMS0uOTE3LTEuMDA1aC0uMzQybC0uMjg4LTEuNDQxYTQuNDczIDQuNDczIDAgMCAxLS4wNjctLjMzNGwtLjExNi0uNTgzLS43NjQtLjMxNi0yIDEuMzM0LS44MzItLjgzMUw0LjY4IDkuODIzbC0uMzE2LS43NjQtMi4zNTgtLjQ3MVY3LjQxMmwyLjM1OC0uNDcxLjMxNi0uNzY0LTEuMzM0LTIgLjgzMS0uODMyIDIgMS4zMzUuNzY0LS4zMTYuNDcxLTIuMzU4aDEuMTc2bC40NzEgMi4zNTguNzY0LjMxNiAyLTEuMzM0LjgzMi44MzEtMS4zMzQgMi4wMDEuMzE2Ljc2NC41ODIuMTE2Yy4xMTMuMDE4LjIyNS4wNC4zMzUuMDY3bDEuNDQxLjI4OHYuMzQyYy4zOC4yNTQuNzE5LjU2MyAxLjAwNS45MTdWNi41ODhsLTIuNDIyLS40ODQgMS4zNy0yLjA1Ni0xLjk5Ni0xLjk5Ni0yLjA1NiAxLjM3TDkuNDEyIDF6TTggNmEyIDIgMCAwIDEgMS44NzUgMS4zMDIgNC40NiA0LjQ2IDAgMCAwLS45LjQ3MyAxIDEgMCAxIDAtMS4yIDEuMiA0LjQ2IDQuNDYgMCAwIDAtLjQ3My45QTIgMiAwIDAgMSA4IDZ6bTEuMjggMi43OTVhMy41IDMuNSAwIDEgMSA0LjQ0IDUuNDEgMy41IDMuNSAwIDAgMS00LjQ0LTUuNDF6TTkgMTF2MWg1di0xSDl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0V4cGFuZEFsbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk05IDlINHYxaDVWOXpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk03IDEyVjdINnY1aDF6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDNsMS0xaDdsMSAxdjdsLTEgMWgtMnYybC0xIDFIM2wtMS0xVjZsMS0xaDJWM3ptMSAyaDRsMSAxdjRoMlYzSDZ2MnptNCAxSDN2N2g3VjZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0V4cG9ydCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjA4NiA3bC0yLjM5LTIuMzk4LjcwMi0uNzA0TDE1IDcuNWwtMy42MDIgMy42MDItLjcwMy0uNzA0IDIuMzgzLTIuMzgyVjhIM1Y3aDEwLjA4NnpNMSA0aDF2N0gxVjR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0V4dGVuc2lvbnMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMy41IDEuNUwxNSAwaDcuNUwyNCAxLjVWOWwtMS41IDEuNUgxNUwxMy41IDlWMS41em0xLjUgMFY5aDcuNVYxLjVIMTV6TTAgMTVWNmwxLjUtMS41SDlMMTAuNSA2djcuNUgxOGwxLjUgMS41djcuNUwxOCAyNEgxLjVMMCAyMi41VjE1em05LTEuNVY2SDEuNXY3LjVIOXpNOSAxNUgxLjV2Ny41SDlWMTV6bTEuNSA3LjVIMThWMTVoLTcuNXY3LjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0V5ZUNsb3NlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTggMmMtMS41IDAtMi44LjQtMy45IDEuMmwuOC43QzUuOCAzLjMgNi44IDMgOCAzYzMuMyAwIDYgMi43IDYgNmgxYzAtMy45LTMuMS03LTctN3pNMSAzbDEuNiAxLjVDMS42IDUuNyAxIDcuMyAxIDloMWMwLTEuNS41LTIuOCAxLjQtMy44bDIuMiAyQzUuMiA3LjcgNSA4LjMgNSA5YzAgMS43IDEuMyAzIDMgMyAuOCAwIDEuNS0uMyAyLS44bDMgMi44LjctLjctMTItMTFMMSAzem01LjMgNC45bDIuOSAyLjdjLS4zLjItLjcuNC0xLjIuNC0xLjEgMC0yLS45LTItMiAwLS40LjEtLjguMy0xLjF6TTExIDkuNWwtMS0uOWMtLjItLjgtLjktMS41LTEuOC0xLjZsLTEtLjljLjMtLjEuNS0uMS44LS4xIDEuNyAwIDMgMS4zIDMgM3YuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRXllIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMSAxMGMwLTMuOSAzLjEtNyA3LTdzNyAzLjEgNyA3aC0xYzAtMy4zLTIuNy02LTYtNnMtNiAyLjctNiA2SDF6bTQgMGMwLTEuNyAxLjMtMyAzLTNzMyAxLjMgMyAzLTEuMyAzLTMgMy0zLTEuMy0zLTN6bTEgMGMwIDEuMS45IDIgMiAyczItLjkgMi0yLS45LTItMi0yLTIgLjktMiAyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGZWVkYmFjayAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk03LjU0OSAxMC4wNzhjLjQ2LjE4Mi44OC40MjQgMS4yNTguNzI1LjM3OC4zLjcwMS42NS45NyAxLjA0NmE0LjgyOSA0LjgyOSAwIDAgMSAuODQ4IDIuNzE0VjE1SDkuNzV2LS40MzhhMy44OTQgMy44OTQgMCAwIDAtMS4xNTUtMi43ODIgNC4wNTQgNC4wNTQgMCAwIDAtMS4yNTEtLjg0IDMuODk4IDMuODk4IDAgMCAwLTEuNTMyLS4zMTVBMy44OTQgMy44OTQgMCAwIDAgMy4wMyAxMS43OGE0LjA2IDQuMDYgMCAwIDAtLjg0IDEuMjUxYy0uMjA2LjQ3NC0uMzEuOTg1LS4zMTUgMS41MzFWMTVIMXYtLjQzOGE0LjcyNCA0LjcyNCAwIDAgMSAuODQ4LTIuNzEzIDQuOTE4IDQuOTE4IDAgMCAxIDIuMjI5LTEuNzcgMi45OTQgMi45OTQgMCAwIDEtLjU1NS0uNDkzIDMuMTU2IDMuMTU2IDAgMCAxLS40MTctLjYwMiAyLjk0MiAyLjk0MiAwIDAgMS0uMjYtLjY4MyAzLjM0NSAzLjM0NSAwIDAgMS0uMDk1LS43MzljMC0uNDIzLjA4LS44Mi4yNC0xLjE4OWEzLjA5NSAzLjA5NSAwIDAgMSAxLjYyNi0xLjYyNyAzLjA2NyAzLjA2NyAwIDAgMSAyLjM4Ni0uMDA3IDMuMDk1IDMuMDk1IDAgMCAxIDEuNjI3IDEuNjI3IDMuMDY3IDMuMDY3IDAgMCAxIC4xNTcgMS45MjhjLS4wNi4yMzctLjE0OC40NjUtLjI2Ni42ODRhMy41MDYgMy41MDYgMCAwIDEtLjQxNy42MDhjLS4xNi4xODctLjM0NS4zNS0uNTU0LjQ5MnpNNS44MTIgOS43NWMuMzAxIDAgLjU4NC0uMDU3Ljg0OC0uMTdhMi4xOTQgMi4xOTQgMCAwIDAgMS4xNjItMS4xNjNjLjExOS0uMjY5LjE3OC0uNTU0LjE3OC0uODU0YTIuMTM4IDIuMTM4IDAgMCAwLS42NDMtMS41MzggMi4zODMgMi4zODMgMCAwIDAtLjY5Ny0uNDcyIDIuMDQ4IDIuMDQ4IDAgMCAwLS44NDgtLjE3OGMtLjMgMC0uNTgzLjA1Ny0uODQ3LjE3YTIuMjE4IDIuMjE4IDAgMCAwLTEuMTcgMS4xN2MtLjExMy4yNjQtLjE3LjU0Ny0uMTcuODQ4IDAgLjMuMDU3LjU4My4xNy44NDcuMTE1LjI2NC4yNy40OTcuNDY2LjY5N2EyLjE2OCAyLjE2OCAwIDAgMCAxLjU1Mi42NDN6TTE1IDF2N2gtMS43NWwtMi42MjUgMi42MjVWOEg5Ljc1di0uODc1aDEuNzV2MS4zODhsMS4zODgtMS4zODhoMS4yMzd2LTUuMjVoLTguNzV2MS41NzJhNy4yNTUgNy4yNTUgMCAwIDAtLjQzOC4wNjkgMi42MiAyLjYyIDAgMCAwLS40MzcuMTIzVjFIMTV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZpbGVCaW5hcnkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMC41NyAxLjE0bDMuMjggMy4zLjE1LjM2djkuN2wtLjUuNWgtMTFsLS41LS41di0xM2wuNS0uNWg3LjcybC4zNS4xNHpNMyAydjEyaDEwVjVsLTMtM0gzem0xLjQ2IDQuMDUyYzAgMS4yODcuNDU4IDEuOTMgMS4zNzQgMS45My40NTcgMCAuODA3LS4xNzMgMS4wNS0uNTIuMjQ2LS4zNDguMzY4LS44NDcuMzY4LTEuNDk5QzcuMjUyIDQuNjU0IDYuODA1IDQgNS45MSA0Yy0uNDcxIDAtLjgzMS4xNzUtMS4wOC41MjYtLjI0Ny4zNS0uMzcuODU4LS4zNyAxLjUyNnptLjg2Mi0uMDIyYzAtLjkyMi4xODMtMS4zODMuNTUtMS4zODMuMzQ0IDAgLjUxNi40NDguNTE2IDEuMzQzcy0uMTc2IDEuMzQzLS41MjcgMS4zNDNjLS4zNiAwLS41NC0uNDM0LS41NC0xLjMwM3ptMy4xODcgMS44ODZoMi40MzV2LS42NzJoLS43OTJWNGwtMS42NjUuMzM2di42ODdsLjgyLS4xNzd2Mi4zOThoLS43OTh2LjY3MnptLTEuMzM3IDVINC43MzZ2LS42NzJoLjc5OFY5Ljg0NmwtLjgyLjE3N3YtLjY4N0w2LjM4IDl2My4yNDRoLjc5MnYuNjcxem0xLjAzNS0xLjkzMWMwIDEuMjg3LjQ1OCAxLjkzIDEuMzc1IDEuOTMuNDU3IDAgLjgwNy0uMTczIDEuMDUtLjUyLjI0NS0uMzQ4LjM2OC0uODQ3LjM2OC0xLjQ5OSAwLTEuMzA5LS40NDgtMS45NjMtMS4zNDMtMS45NjMtLjQ3IDAtLjgzLjE3NS0xLjA4LjUyNi0uMjQ2LjM1LS4zNy44NTgtLjM3IDEuNTI2em0uODYyLS4wMjJjMC0uOTIyLjE4NC0xLjM4My41NS0xLjM4My4zNDQgMCAuNTE2LjQ0OC41MTYgMS4zNDNzLS4xNzUgMS4zNDMtLjUyNiAxLjM0M2MtLjM2IDAtLjU0LS40MzQtLjU0LTEuMzAzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGaWxlQ29kZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEwLjU3IDEuMTRsMy4yOCAzLjMuMTUuMzZ2OS43bC0uNS41aC0xMWwtLjUtLjV2LTEzbC41LS41aDcuNzJsLjM1LjE0ek0xMCA1aDNsLTMtM3Yzek0zIDJ2MTJoMTBWNkg5LjVMOSA1LjVWMkgzem0yLjA2MiA3LjUzM2wxLjgxNy0xLjgyOEw2LjE3IDcgNCA5LjE3OXYuNzA3bDIuMTcxIDIuMTc0LjcwNy0uNzA3LTEuODE2LTEuODJ6TTguOCA3LjcxNGwuNy0uNzA5IDIuMTg5IDIuMTc1di43MDlMOS41IDEyLjA2MmwtLjcwNS0uNzA5IDEuODMxLTEuODJMOC44IDcuNzE0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGaWxlTWVkaWEgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDJoNnYzLjVsLjUuNUgxMnYxaDFWNC44bC0uMTUtLjM2LTMuMjgtMy4zTDkuMjIgMUgxLjVsLS41LjV2MTNsLjUuNUg1di0xSDJWMnptNyAwbDMgM0g5VjJ6bTUuNSA2aC04bC0uNS41djZsLjUuNWg4bC41LS41di02bC0uNS0uNXpNMTQgOXY0bC0xLjYzLTEuNmgtLjcxbC0xLjE2IDEuMTctMi4xMy0yLjEzaC0uNzFMNyAxMS4xVjloN3ptLTIuOCA0LjI3bC44MS0uODFMMTMuNTUgMTRoLTEuNjJsLS43My0uNzN6TTcgMTR2LTEuNDlsMS0xTDEwLjUyIDE0SDd6bTUuNS0zLjVhLjUuNSAwIDEgMCAwLTEgLjUuNSAwIDAgMCAwIDF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZpbGVQZGYgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMy44NSA0LjQ0bC0zLjI4LTMuMy0uMzUtLjE0SDIuNWwtLjUuNVY3aDFWMmg2djMuNWwuNS41SDEzdjFoMVY0LjhsLS4xNS0uMzZ6TTEwIDVWMmwzIDNoLTN6TTIuNSA4bC0uNS41djZsLjUuNWgxMWwuNS0uNXYtNmwtLjUtLjVoLTExek0xMyAxM3YxSDNWOWgxMHY0em0tOC0xaC0uMzJ2MUg0di0zaDEuMDZjLjc1IDAgMS4xMy4zNiAxLjEzIDFhLjk0Ljk0IDAgMCAxLS4zMi43MkExLjMzIDEuMzMgMCAwIDEgNSAxMnptLS4wNi0xLjQ1aC0uMjZ2LjkzaC4yNmMuMzYgMCAuNTQtLjE2LjU0LS40NyAwLS4zMS0uMTgtLjQ2LS41NC0uNDZ6TTkgMTIuNThhMS40OCAxLjQ4IDAgMCAwIC40NC0xLjEyYzAtMS0uNTMtMS40Ni0xLjYtMS40Nkg2Ljc4djNoMS4wNkExLjYgMS42IDAgMCAwIDkgMTIuNTh6bS0xLjU1LS4xM3YtMS45aC4zM2EuOTQuOTQgMCAwIDEgLjcuMjUuOTEuOTEgMCAwIDEgLjI1LjY3IDEgMSAwIDAgMS0uMjUuNzIuOTQuOTQgMCAwIDEtLjY5LjI2aC0uMzR6bTQuNDUtLjYxaC0uOTdWMTNoLS42OHYtM2gxLjc0di41NWgtMS4wNnYuNzRoLjk3di41NXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsZVN1Ym1vZHVsZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIgMTFoMVY2Ljk5SDJWMTF6bTEtNS4wMVY1LjVsLjUtLjVoNC40M2wuNDMuMjUuNDMuNzVoNS43MWwuNS41djhsLS41LjVoLTExbC0uNS0uNVYxMkgxLjVsLS41LS41di05bC41LS41aDQuNDJsLjQ0LjI1LjQzLjc1aDUuNzFsLjUuNVY2bC0xLS4wM1Y0SDYuNWwtLjQzLS4yNUw1LjY0IDNIMnYyLjk5aDF6bTUuMDcuNzZMNy42NCA2SDR2M2gzLjE1bC40MS0uNzRMOCA4aDZWN0g4LjVsLS40My0uMjV6TTcuNDUgMTBINHY0aDEwVjlIOC4zbC0uNDEuNzQtLjQ0LjI2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGaWxlU3ltbGlua0RpcmVjdG9yeSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuNzEgM2g2Ljc5bC41MS41djEwbC0uNS41aC0xM2wtLjUtLjV2LTExbC41LS41aDVsLjM1LjE1Ljg1Ljg1em02LjI4IDEwdi0xLjUxbC4wMS00di0xLjVINy43bC0uODYuODYtLjM1LjE1SDJ2NmgxMS45OXptLTYuNS04aDYuNWwuMDEtLjk5SDcuNWwtLjM2LS4xNS0uODUtLjg1SDJ2M2g0LjI4bC44Ni0uODYuMzUtLjE1em0yLjI5IDQuMDdMOC40MiA3LjdsLjc0LS42OSAyLjIyIDIuMjJ2LjcxbC0yLjI5IDIuMjEtLjctLjcyIDEuNC0xLjM1SDguNDJhMiAyIDAgMCAwLTEuMzUuNjFBMS44IDEuOCAwIDAgMCA2LjU0IDEyaC0xYTIuNzYgMi43NiAwIDAgMSAuODEtMiAzIDMgMCAwIDEgMi0uOTNoMS40M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsZVN5bWxpbmtGaWxlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAuNTcgMS4xNGwzLjI4IDMuMy4xNS4zNnY5LjdsLS41LjVIMTB2LTFoM1Y2SDkuNUw5IDUuNVYySDN2NEgyVjEuNWwuNS0uNWg3LjcybC4zNS4xNHpNMTAgNWgzbC0zLTN2M3pNOC41IDdoLTdsLS41LjV2N2wuNS41aDdsLjUtLjV2LTdMOC41IDd6TTggMTRIMlY4aDZ2NnpNNyA5LjV2M0g2di0xLjc5M2wtMi42NDYgMi42NDctLjcwOC0uNzA4TDUuMjkzIDEwSDMuNTNWOUg2LjVsLjUuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsZVppcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIuNSAxaDExbC41LjV2NWwtLjE1LjM1LS44NS44NnY2Ljc5bC0uNS41aC0xMGwtLjUtLjV2LTEzbC41LS41ek02IDJINXYyaDFWMnptMCAxMmg0VjcuNjhsLS44NS0uODVMOSA2LjQ3VjJIN3YyLjVsLS41LjVINnYxSDVWNWgtLjVMNCA0LjVWMkgzdjEyaDJ2LTFoMXYxem0wLTJ2MWgxdi0xSDZ6bTAtMXYxSDV2LTFoMXptMC0xaDF2MUg2di0xem0wLTF2MUg1VjloMXptMC0xaDF2MUg2Vjh6bTAtMXYxSDVWN2gxem0wIDBoMVY2SDZ2MXptNi4xNS4xNWwuODUtLjg2VjJoLTN2NC4yN2wuODUuODUuMTUuMzVWMTRoMVY3LjVsLjE1LS4zNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjcxIDQuMjlsLTMtM0wxMCAxSDRMMyAydjEybDEgMWg5bDEtMVY1bC0uMjktLjcxek0xMyAxNEg0VjJoNXY0aDR2OHptLTMtOVYybDMgM2gtM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsZXMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTcuNSAwaC05TDcgMS41VjZIMi41TDEgNy41djE1LjA3TDIuNSAyNGgxMi4wN0wxNiAyMi41N1YxOGg0LjdsMS4zLTEuNDNWNC41TDE3LjUgMHptMCAyLjEybDIuMzggMi4zOEgxNy41VjIuMTJ6bS0zIDIwLjM4aC0xMnYtMTVIN3Y5LjA3TDguNSAxOGg2djQuNXptNi02aC0xMnYtMTVIMTZWNmg0LjV2MTAuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjRmlsdGVyRmlsbGVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTUgMnYxLjY3bC01IDQuNzU5VjE0SDZWOC40MjlsLTUtNC43NlYyaDE0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGaWx0ZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNSAydjEuNjdsLTUgNC43NTlWMTRINlY4LjQyOWwtNS00Ljc2VjJoMTR6TTcgOHY1aDJWOGw1LTQuNzZWM0gydi4yNEw3IDh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZsYW1lIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTkuMTMgMTVsLS41My0uNzdhMS44NSAxLjg1IDAgMCAwLS4yOC0yLjU0IDMuNTEgMy41MSAwIDAgMS0xLjE5LTJjLTEuNTYgMi4yMy0uNzUgMy40NiAwIDQuNTVsLS41NS43NkE0LjQgNC40IDAgMCAxIDMgMTAuNDZTMi43OSA4LjMgNS4yOCA2LjE5YzAgMCAyLjgyLTIuNjEgMS44NC00LjU0TDcuODMgMWE2LjU3IDYuNTcgMCAwIDEgMi42MSA2Ljk0IDIuNTcgMi41NyAwIDAgMCAuNTYtLjgxbC44Ny0uMDdjLjA3LjEyIDEuODQgMi45My44OSA1LjNBNC43MiA0LjcyIDAgMCAxIDkuMTMgMTV6bS0yLTYuOTVsLjg3LjM5YTMgMyAwIDAgMCAuOTIgMi40OCAyLjY0IDIuNjQgMCAwIDEgMSAyLjhBMy4yNDEgMy4yNDEgMCAwIDAgMTEuOCAxMmE0Ljg3IDQuODcgMCAwIDAtLjQxLTMuNjMgMS44NSAxLjg1IDAgMCAxLTEuODQuODZsLS4zNS0uNjhhNS4zMSA1LjMxIDAgMCAwLS44OS01LjhDOC4xNyA0Ljg3IDYgNi44MyA1LjkzIDYuOTQgMy44NiA4LjcgNCAxMC4zMyA0IDEwLjRhMy40NyAzLjQ3IDAgMCAwIDEuNTkgMy4xNEM1IDEyLjE0IDUgMTAuNDYgNy4xNiA4LjA1aC0uMDN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZvbGREb3duIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQuMjA3IDEuNzA3TDEzLjUgMWwtNiA2LTYtNi0uNzA3LjcwNyA2LjM1MyA2LjM1NGguNzA4bDYuMzUzLTYuMzU0em0wIDZMMTMuNSA3bC02IDYtNi02LS43MDcuNzA3IDYuMzUzIDYuMzU0aC43MDhsNi4zNTMtNi4zNTR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZvbGRVcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xIDcuNGwuNy43IDYtNiA2IDYgLjctLjdMOC4xIDFoLS43TDEgNy40em0wIDZsLjcuNyA2LTYgNiA2IC43LS43TDguMSA3aC0uN0wxIDEzLjR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZvbGQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS45NTIgMi4zODFMNy45NzYgNi4zNTcgNCAyLjM4MSAzLjM4IDNsNC4yODYgNC4yODVoLjYxOUwxMi41NyAzbC0uNjE4LS42MTl6TTMuOTA0IDE0bDQuMDcyLTQuMDcyTDEyLjA0NyAxNGwuNjItLjYxOUw4LjI4NCA5aC0uNjE5bC00LjM4MSA0LjM4MS42MTkuNjE5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGb2xkZXJBY3RpdmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjcxIDNoNi43OWwuNTEuNXY0LjUwN0E0Ljk5NyA0Ljk5NyAwIDAgMCAxNCA3LjQxNlY1Ljk5SDcuNjlsLS44Ni44Ni0uMzUuMTVIMS45OXY2SDcuMWMuMDcuMzQ4LjE3Ny42ODIuMzE2IDFIMS41MWwtLjUtLjV2LTExbC41LS41aDVsLjM1LjE1Ljg1Ljg1em0tLjIyIDJoNi41bC4wMS0uOTlINy41bC0uMzYtLjE1LS44NS0uODVIMnYzaDQuMjhsLjg2LS44Ni4zNS0uMTV6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk05Ljc3OCA4LjY3NGE0IDQgMCAxIDEgNC40NDQgNi42NTIgNCA0IDAgMCAxLTQuNDQ0LTYuNjUyem0yLjEzIDQuOTlsMi4zODctMy4xODItLjgtLjYtMi4wNzcgMi43NjktMS4zMDEtMS4wNDEtLjYyNS43OCAxLjcwNCAxLjM2NC43MTMtLjA5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NGb2xkZXJMaWJyYXJ5IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy43MDk5NiAzSDE0LjVMMTUuMDEgMy41VjdIMTRWNS45ODk5OUg3LjY4OTk0TDYuODI5OTYgNi44NDk5OEw2LjQ3OTk4IDdIMS45ODk5OVY3LjQ4OTk5VjExLjQ5VjEzSDdWMTRIMS41MTAwMUwxLjAxMDAxIDEzLjVWNi41VjIuNUwxLjUxMDAxIDJINi41MTAwMUw2Ljg1OTk5IDIuMTUwMDJMNy43MDk5NiAzWk03LjQ4OTk5IDVIMTMuOTlMMTQgNC4wMTAwMUg3LjVMNy4xNDAwMSAzLjg1OTk5TDYuMjkwMDQgMy4wMTAwMUgyVjYuMDEwMDFINi4yODAwM0w3LjE0MDAxIDUuMTUwMDJMNy40ODk5OSA1WlwifX0se1widGFnXCI6XCJyZWN0XCIsXCJhdHRyXCI6e1wieFwiOlwiOFwiLFwieVwiOlwiOFwiLFwid2lkdGhcIjpcIjFcIixcImhlaWdodFwiOlwiNlwifX0se1widGFnXCI6XCJyZWN0XCIsXCJhdHRyXCI6e1wieFwiOlwiMTBcIixcInlcIjpcIjhcIixcIndpZHRoXCI6XCIxXCIsXCJoZWlnaHRcIjpcIjZcIn19LHtcInRhZ1wiOlwicmVjdFwiLFwiYXR0clwiOntcInhcIjpcIjEyLjAwNDFcIixcInlcIjpcIjguMzUxOTNcIixcIndpZHRoXCI6XCIxXCIsXCJoZWlnaHRcIjpcIjZcIixcInRyYW5zZm9ybVwiOlwicm90YXRlKC0yMCAxMi4wMDQxIDguMzUxOTMpXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZvbGRlck9wZW5lZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xLjUgMTRoMTFsLjQ4LS4zNyAyLjYzLTctLjQ4LS42M0gxNFYzLjVsLS41LS41SDcuNzFsLS44Ni0uODVMNi41IDJoLTVsLS41LjV2MTFsLjUuNXpNMiAzaDQuMjlsLjg2Ljg1LjM1LjE1SDEzdjJIOC41bC0uMzUuMTUtLjg2Ljg1SDMuNWwtLjQ3LjM0LTEgMy4wOEwyIDN6bTEwLjEzIDEwSDIuMTlsMS42Ny01SDcuNWwuMzUtLjE1Ljg2LS44NWg1Ljc5bC0yLjM3IDZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0ZvbGRlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNC41IDNINy43MWwtLjg1LS44NUw2LjUxIDJoLTVsLS41LjV2MTFsLjUuNWgxM2wuNS0uNXYtMTBMMTQuNSAzem0tLjUxIDguNDlWMTNoLTEyVjdoNC40OWwuMzUtLjE1Ljg2LS44NkgxNHYxLjVsLS4wMSA0em0wLTYuNDloLTYuNWwtLjM1LjE1LS44Ni44Nkgydi0zaDQuMjlsLjg1Ljg1LjM2LjE1SDE0bC0uMDEuOTl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dlYXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOS4xIDQuNEw4LjYgMkg3LjRsLS41IDIuNC0uNy4zLTItMS4zLS45LjggMS4zIDItLjIuNy0yLjQuNXYxLjJsMi40LjUuMy44LTEuMyAyIC44LjggMi0xLjMuOC4zLjQgMi4zaDEuMmwuNS0yLjQuOC0uMyAyIDEuMy44LS44LTEuMy0yIC4zLS44IDIuMy0uNFY3LjRsLTIuNC0uNS0uMy0uOCAxLjMtMi0uOC0uOC0yIDEuMy0uNy0uMnpNOS40IDFsLjUgMi40TDEyIDIuMWwyIDItMS40IDIuMSAyLjQuNHYyLjhsLTIuNC41TDE0IDEybC0yIDItMi4xLTEuNC0uNSAyLjRINi42bC0uNS0yLjRMNCAxMy45bC0yLTIgMS40LTIuMUwxIDkuNFY2LjZsMi40LS41TDIuMSA0bDItMiAyLjEgMS40LjQtMi40aDIuOHptLjYgN2MwIDEuMS0uOSAyLTIgMnMtMi0uOS0yLTIgLjktMiAyLTIgMiAuOSAyIDJ6TTggOWMuNiAwIDEtLjQgMS0xcy0uNC0xLTEtMS0xIC40LTEgMSAuNCAxIDEgMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2lmdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41IDRoLTEuNmMuMS0uNC4xLS44LjEtMS4yLS4xLS4zLS4yLS42LS40LS45LS4yLS4zLS40LS41LS43LS42LS4zLS4xLS42LS4zLS45LS4zLS4zIDAtLjYgMC0uOS4yLS43LjItMS4yLjctMS42IDEuMy0uNC0uNi0uOS0xLjEtMS42LTEuMy0uMy0uMS0uNi0uMi0uOS0uMi0uMyAwLS42LjEtLjkuMy0uMy4xLS41LjMtLjcuNi0uMi4yLS4zLjYtLjQuOSAwIC40IDAgLjguMSAxLjJIMS41bC0uNS41djlsLjUuNWgxMmwuNS0uNXYtOWwtLjUtLjV6TTcgMTNIMlY1aDV2OHptMC05SDR2LS4yYy0uMS0uMy0uMS0uNS0uMS0uOC4xLS4yLjEtLjQuMy0uNS4xLS4yLjMtLjMuNS0uNC4xLS4xLjMtLjEuNS0uMXMuNCAwIC42LjFjLjMuMS42LjMuOC42LjIuMy40LjYuNCAxVjR6bTEtLjNjMC0uNC4yLS43LjQtMSAuMi0uMy41LS41LjgtLjYuMi0uMS40LS4xLjYtLjEuMiAwIC40IDAgLjYuMS4yLjEuMy4yLjUuNC4xLjEuMS4zLjIuNSAwIC4zIDAgLjUtLjEuOCAwIC4xIDAgLjEtLjEuMkg4di0uM3ptNSA5LjNIOFY1aDV2OHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2lzdFNlY3JldCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTMgMTRoNHYuOTFsLjA5LjA5SDIuNWwtLjUtLjV2LTEzbC41LS41aDcuNzJsLjM1LjE0IDMuMjggMy4zLjE1LjM2djIuNTRhMy4xIDMuMSAwIDAgMC0xLS45NFY2SDkuNUw5IDUuNVYySDN2MTJ6bTEwLTlsLTMtM3YzaDN6bS41IDR2MWgxbC41LjV2NGwtLjUuNWgtNmwtLjUtLjV2LTRsLjUtLjVoMVY5YTIgMiAwIDAgMSA0IDB6bS0yLjcwNy0uNzA3QTEgMSAwIDAgMCAxMC41IDl2MWgyVjlhMSAxIDAgMCAwLTEuNzA3LS43MDd6TTkgMTF2M2g1di0zSDl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dpc3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMC41NyAxLjE0bDMuMjggMy4zLjE1LjM2djkuN2wtLjUuNWgtMTFsLS41LS41di0xM2wuNS0uNWg3LjcybC4zNS4xNHpNMTAgNWgzbC0zLTN2M3pNMyAydjEyaDEwVjZIOS41TDkgNS41VjJIM3ptMi4wNjIgNy41MzNsMS44MTctMS44MjhMNi4xNyA3IDQgOS4xNzl2LjcwN2wyLjE3MSAyLjE3NC43MDctLjcwNy0xLjgxNi0xLjgyek04LjggNy43MTRsLjctLjcwOSAyLjE4OSAyLjE3NXYuNzA5TDkuNSAxMi4wNjJsLS43MDUtLjcwOSAxLjgzMS0xLjgyTDguOCA3LjcxNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2l0Q29tbWl0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEwLjk3OSA1YTMuNDIgMy40MiAwIDAgMC0yLTFWMGgtMXY0YTMuNSAzLjUgMCAwIDAtLjE4IDYuODloLjE4djRoMXYtNGEzLjA4IDMuMDggMCAwIDAgLjg0LS4yMyAzLjQyIDMuNDIgMCAwIDAgMS41Ny0xLjI5IDMuNDYgMy40NiAwIDAgMC0uNDEtNC4zN3ptLS43IDQuMjRhMi41MSAyLjUxIDAgMCAxLTMuMTU5LjMxIDIuNSAyLjUgMCAwIDEtLjkyLTEuMTIgMi40OSAyLjQ5IDAgMCAxIDEuODItMy40MSAyLjcyIDIuNzIgMCAwIDEgLjQ5IDAgMi41IDIuNSAwIDAgMSAyLjU0IDIuNSAyLjUxIDIuNTEgMCAwIDEtLjggMS43NWwuMDMtLjAzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHaXRDb21wYXJlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy4zODkgMTIuOTlsLTEuMjctMS4yNy42Ny0uNyAyLjEzIDIuMTN2LjdsLTIuMTMgMi4xMy0uNzEtLjcxTDcuMzQ5IDE0aC0xLjg1YTIuNDkgMi40OSAwIDAgMS0yLjUtMi41VjUuOTVhMi41OSAyLjU5IDAgMCAxLTEuMjctLjY4IDIuNTIgMi41MiAwIDAgMS0uNTQtMi43M0EyLjUgMi41IDAgMCAxIDMuNDk5IDFhMi40NSAyLjQ1IDAgMCAxIDEgLjE5IDIuNDggMi40OCAwIDAgMSAxLjM1IDEuMzVjLjEzMy4zMTcuMTk3LjY1OC4xOSAxYTIuNSAyLjUgMCAwIDEtMiAyLjQ1djUuNWExLjUgMS41IDAgMCAwIDEuNSAxLjVoMS44NXptLTQuNjgtOC4yNWExLjUgMS41IDAgMCAwIDIuMDgtMi4wOCAxLjU1IDEuNTUgMCAwIDAtLjY4LS41NiAxLjQ5IDEuNDkgMCAwIDAtLjg2LS4wOCAxLjQ5IDEuNDkgMCAwIDAtMS4xOCAxLjE4IDEuNDkgMS40OSAwIDAgMCAuMDguODZjLjExNy4yNzcuMzExLjUxMy41Ni42OHptMTAuMzMgNi4zYy40OC4wOTguOTIyLjMzNSAxLjI3LjY4YTIuNTEgMi41MSAwIDAgMSAuMzEgMy4xNTkgMi41IDIuNSAwIDEgMS0zLjQ3LTMuNDY4Yy4yNjktLjE4Mi41NzEtLjMwOC44OS0uMzdWNS40OWExLjUgMS41IDAgMCAwLTEuNS0xLjVoLTEuODVsMS4yNyAxLjI3LS43MS43MS0yLjEzLTIuMTN2LS43bDIuMTMtMi4xMy43MS43MS0xLjI3IDEuMjdoMS44NWEyLjQ5IDIuNDkgMCAwIDEgMi41IDIuNXY1LjU1em0tLjM1MSAzLjk0M2ExLjUgMS41IDAgMCAwIDEuMS0yLjMyMiAxLjU1IDEuNTUgMCAwIDAtLjY4LS41NiAxLjQ5IDEuNDkgMCAwIDAtLjg1OS0uMDggMS40OSAxLjQ5IDAgMCAwLTEuMTggMS4xOCAxLjQ5IDEuNDkgMCAwIDAgLjA4Ljg2IDEuNSAxLjUgMCAwIDAgMS41MzkuOTIyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHaXRNZXJnZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy4yNzMgNy43M2EyLjUxIDIuNTEgMCAwIDAtMy4xNTktLjMxIDIuNSAyLjUgMCAwIDAtLjkyMSAxLjEyIDIuMjMgMi4yMyAwIDAgMC0uMTMuNDQgNC41MiA0LjUyIDAgMCAxLTQtNCAyLjIzIDIuMjMgMCAwIDAgLjQ0LS4xMyAyLjUgMi41IDAgMCAwIDEuNTQtMi4zMSAyLjQ1IDIuNDUgMCAwIDAtLjE5LTFBMi40OCAyLjQ4IDAgMCAwIDUuNTAzLjE5YTIuNDUgMi40NSAwIDAgMC0xLS4xOSAyLjUgMi41IDAgMCAwLTIuMzEgMS41NCAyLjUyIDIuNTIgMCAwIDAgLjU0IDIuNzNjLjM1LjM0My43OS41NzkgMS4yNy42OHY1LjFhMi40MTEgMi40MTEgMCAwIDAtLjg5LjM3IDIuNSAyLjUgMCAxIDAgMy40NyAzLjQ2OCAyLjUgMi41IDAgMCAwIC40Mi0xLjM4NyAyLjQ1IDIuNDUgMCAwIDAtLjE5LTEgMi40OCAyLjQ4IDAgMCAwLTEuODEtMS40OXYtMi40YTUuNTIgNS41MiAwIDAgMCAyIDEuNzMgNS42NSA1LjY1IDAgMCAwIDIuMDkuNiAyLjUgMi41IDAgMCAwIDQuOTUtLjQ5IDIuNTEgMi41MSAwIDAgMC0uNzctMS43MnptLTguMiAzLjM4Yy4yNzYuMTE3LjUxMi4zMTIuNjguNTZhMS41IDEuNSAwIDAgMS0yLjA4IDIuMDggMS41NSAxLjU1IDAgMCAxLS41Ni0uNjggMS40OSAxLjQ5IDAgMCAxLS4wOC0uODYgMS40OSAxLjQ5IDAgMCAxIDEuMTgtMS4xOCAxLjQ5IDEuNDkgMCAwIDEgLjg2LjA4ek00LjUwMyA0YTEuNSAxLjUgMCAwIDEtMS4zOS0uOTMgMS40OSAxLjQ5IDAgMCAxLS4wOC0uODYgMS40OSAxLjQ5IDAgMCAxIDEuMTgtMS4xOCAxLjQ5IDEuNDkgMCAwIDEgLjg2LjA4QTEuNSAxLjUgMCAwIDEgNC41MDMgNHptOC4wNiA2LjU2YTEuNSAxLjUgMCAwIDEtMi40NS0uNDkgMS40OSAxLjQ5IDAgMCAxLS4wOC0uODYgMS40OSAxLjQ5IDAgMCAxIDEuMTgtMS4xOCAxLjQ5IDEuNDkgMCAwIDEgLjg2LjA4IDEuNDk5IDEuNDk5IDAgMCAxIC40OSAyLjQ1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHaXRQdWxsUmVxdWVzdENsb3NlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUuNjE1OTQgNC45Mjc2OUM1LjM0MzA0IDUuMzM4OTkgNC45NTMxOSA1LjY2MDYyIDQuNDk3MDUgNS44NDk3QzQuMzQ4OTEgNS45MTAxMyA0LjAzODk3IDUuOTg4MSA0LjAzODk3IDUuOTg4MVYxMC45OTU4QzQuMTk2ODYgMTEuMDI3IDQuMzUwODYgMTEuMDczOCA0LjQ5OSAxMS4xMzYyQzQuOTU1MTMgMTEuMzI3MiA1LjM0MzA0IDExLjY0NjkgNS42MTc4OSAxMi4wNTgyQzUuODkwNzkgMTIuNDY5NSA2LjAzNjk5IDEyLjk1MjkgNi4wMzY5OSAxMy40NDYxQzYuMDQ0NzggMTMuNzg5MSA1Ljk4MDQ2IDE0LjEzMDMgNS44NDc5MSAxNC40NDZDNS43MjMxNSAxNC43NDgyIDUuNTM5OTIgMTUuMDIzIDUuMzA3OTYgMTUuMjU1QzUuMDc3OTQgMTUuNDg3IDQuODAxMTQgMTUuNjcwMiA0LjQ5OSAxNS43OTQ5QzQuMTgzMjIgMTUuOTI3NSAzLjg0MjA5IDE1Ljk5MTggMy40OTkwMiAxNS45ODRDMy4wMDU4NSAxNS45ODYgMi41MjI0MyAxNS44Mzk4IDIuMTExMTMgMTUuNTY0OUMxLjY5OTgzIDE1LjI5MiAxLjM3ODIgMTQuOTAyMiAxLjE4OTEyIDE0LjQ0NkMxLjAwMTk4IDEzLjk4OCAwLjk1MzI1MyAxMy40ODUgMS4wNDg3NyAxMi45OTk3QzEuMTQ0MjggMTIuNTE0MyAxLjM4MDE1IDEyLjA2NzkgMS43MjkwNyAxMS43MTdDMi4wNzc5OSAxMS4zNzQgMi41MTg1MyAxMS4xMzgxIDIuOTk4MDUgMTEuMDM2N1Y1Ljk0OTExQzIuNTIwNDggNS44NDU4IDIuMDc5OTQgNS42MTE4OSAxLjcyOTA3IDUuMjY4ODFDMS4zODAxNSA0LjkxNzk0IDEuMTQ0MjggNC40NzE1NSAxLjA0ODc3IDMuOTg2MThDMC45NTEzMDQgMy41MDA4MSAxLjAwMDA0IDIuOTk3ODkgMS4xODkxMiAyLjUzOTgxQzEuMzc4MiAyLjA4MzY4IDEuNjk5ODMgMS42OTM4MiAyLjExMTEzIDEuNDIwOTJDMi41MjA0OCAxLjE0NjA3IDMuMDAzOSAwLjk5OTg3NyAzLjQ5OTAyIDAuOTk5ODc3QzMuODQwMTQgMC45OTQwMyA0LjE4MTI3IDEuMDU4MzYgNC40OTcwNSAxLjE4ODk2QzQuNzk5MTkgMS4zMTM3MSA1LjA3NDA0IDEuNDk2OTUgNS4zMDYwMSAxLjcyODkxQzUuNTM3OTcgMS45NjA4NyA1LjcyMTIgMi4yMzc2NyA1Ljg0NTk2IDIuNTM5ODFDNS45Nzg1MSAyLjg1NTYgNi4wNDI4NCAzLjE5NjcyIDYuMDM1MDQgMy41Mzk4QzYuMDM2OTkgNC4wMzI5NiA1Ljg5MDc5IDQuNTE2MzkgNS42MTU5NCA0LjkyNzY5Wk00Ljg1OTYyIDEyLjc4OTJDNC43MzA5NyAxMi41NDk0IDQuNTM5OTQgMTIuMzQ4NiA0LjMwNzk3IDEyLjIxMDJDNC4wNzYwMSAxMi4wNjk5IDMuODA4OTYgMTEuOTk1OCAzLjUzOCAxMS45OTk3QzMuMjQxNzEgMTEuOTk5NyAyLjk1MzIyIDEyLjA4NTUgMi43MDc2MSAxMi4yNDkyQzIuNDYwMDUgMTIuNDE2OCAyLjI2NTEyIDEyLjY1MjcgMi4xNDgxNiAxMi45Mjk1QzIuMDM3MDYgMTMuMjAyNCAyLjAwOTc3IDEzLjUwMDYgMi4wNjgyNCAxMy43ODkxQzIuMTI0NzcgMTQuMDc5NiAyLjI2NzA3IDE0LjM0ODYgMi40Nzc1OSAxNC41NTkxQzIuNjg4MTIgMTQuNzY5NiAyLjk1NTE3IDE0LjkxMTkgMy4yNDc1NiAxNC45Njg1QzMuNTM2MDYgMTUuMDI2OSAzLjgzNDMgMTQuOTk5NiA0LjEwNzIgMTQuODg4NUM0LjM4Mzk5IDE0Ljc3MTYgNC42MTk4NiAxNC41NzY2IDQuNzg3NSAxNC4zMjkxQzQuOTM3NTkgMTQuMTAzIDUuMDIzMzYgMTMuODM5OCA1LjAzNyAxMy41Njg5QzUuMDQ4NyAxMy4yOTc5IDQuOTg4MjcgMTMuMDI4OSA0Ljg1OTYyIDEyLjc4OTJaTTIuNzA3NjEgNC43NDA1NkMyLjk1NTE3IDQuOTAyMzUgMy4yNDM2NiA0Ljk5MDA2IDMuNTM4IDQuOTkwMDZDMy44MDg5NiA0Ljk5MDA2IDQuMDc2MDEgNC45MTU5OSA0LjMwNzk3IDQuNzc5NTRDNC41Mzk5NCA0LjYzOTE5IDQuNzMwOTcgNC40NDAzNyA0Ljg1OTYyIDQuMjAwNkM0Ljk4ODI3IDMuOTYwODQgNS4wNTA2NSAzLjY5MTg0IDUuMDM3IDMuNDIwODlDNS4wMjMzNiAzLjE0OTk0IDQuOTM3NTkgMi44ODY3OSA0Ljc4NzUgMi42NjA2N0M0LjYxOTg2IDIuNDEzMTEgNC4zODM5OSAyLjIxODE4IDQuMTA3MiAyLjEwMTIyQzMuODM0MyAxLjk5MDExIDMuNTM2MDYgMS45NjI4MiAzLjI0NzU2IDIuMDIxM0MyLjk1NzEyIDIuMDc3ODMgMi42ODgxMiAyLjIyMDEzIDIuNDc3NTkgMi40MzA2NUMyLjI2NzA3IDIuNjQxMTggMi4xMjQ3NyAyLjkwODIzIDIuMDY4MjQgMy4yMDA2MkMyLjAwOTc3IDMuNDg5MTEgMi4wMzcwNiAzLjc4NzM1IDIuMTQ4MTYgNC4wNjAyNUMyLjI2NTEyIDQuMzM3MDUgMi40NjAwNSA0LjU3MjkyIDIuNzA3NjEgNC43NDA1NlpNMTMuMDM2OCAxMS4wMzY4QzEzLjUxNjQgMTEuMTM0MiAxMy45NTg4IDExLjM3MiAxNC4zMDU4IDExLjcxNzFDMTQuNzcxNyAxMi4xODY4IDE1LjAzNDggMTIuODI0MyAxNS4wMzA5IDEzLjQ4MzFDMTUuMDMyOSAxMy45NzYzIDE0Ljg4NjcgMTQuNDU5NyAxNC42MTE5IDE0Ljg3MUMxNC4zMzkgMTUuMjgyMyAxMy45NDkxIDE1LjYwMzkgMTMuNDkzIDE1Ljc5M0MxMy4wMzY4IDE1Ljk4NCAxMi41MzIgMTYuMDM0NyAxMi4wNDY2IDE1LjkzOTJDMTEuNTYxMiAxNS44NDM3IDExLjExNDggMTUuNjA1OSAxMC43NjQgMTUuMjU1QzEwLjQxNSAxNC45MDQxIDEwLjE3NTMgMTQuNDU3OCAxMC4wNzk4IDEzLjk3MjRDOS45ODQyNSAxMy40ODcgMTAuMDM0OSAxMi45ODQxIDEwLjIyNiAxMi41MjZDMTAuNDE4OSAxMi4wNzM4IDEwLjczODYgMTEuNjgzOSAxMS4xNDYgMTEuNDA3MUMxMS40MTMxIDExLjIyMzkgMTEuNzE3MiAxMS4wOTkxIDEyLjAzNDkgMTEuMDM2OFY3LjQ4OTFIMTMuMDM2OFYxMS4wMzY4Wk0xMy41OTQzIDE0LjU0NTVDMTMuODM5OSAxNC4zMDE4IDEzLjk5MiAxMy45ODAyIDE0LjAyNzEgMTMuNjM1MkMxNC4wNjIyIDEzLjI5MjEgMTMuOTc2NCAxMi45NDUxIDEzLjc4NTQgMTIuNjU2NkMxMy42MTc3IDEyLjQwOTEgMTMuMzgxOSAxMi4yMTQxIDEzLjEwNTEgMTIuMDk3MkMxMi44MzIyIDExLjk4NjEgMTIuNTMzOSAxMS45NTg4IDEyLjI0NTQgMTIuMDE3M0MxMS45NTUgMTIuMDczOCAxMS42ODYgMTIuMjE2MSAxMS40NzU1IDEyLjQyNjZDMTEuMjY0OSAxMi42MzcxIDExLjEyMjYgMTIuOTA0MiAxMS4wNjYxIDEzLjE5NjZDMTEuMDA3NiAxMy40ODUxIDExLjAzNDkgMTMuNzgzMyAxMS4xNDYgMTQuMDU2MkMxMS4yNjMgMTQuMzMzIDExLjQ1NzkgMTQuNTY4OSAxMS43MDU1IDE0LjczNjVDMTEuOTk0IDE0LjkyNzUgMTIuMzM5IDE1LjAxMzMgMTIuNjg0IDE0Ljk3ODJDMTMuMDI3MSAxNC45NDMxIDEzLjM1MDcgMTQuNzkxMSAxMy41OTQzIDE0LjU0NTVaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS42ODc2IDMuNDAwMzZMMTAgNS4wODhMMTAuNzA3MSA1Ljc5NTFMMTIuMzk0NyA0LjEwNzQ3TDE0LjA4MjQgNS43OTUxTDE0Ljc4OTUgNS4wODhMMTMuMTAxOSAzLjQwMDM2TDE0Ljc4OTUgMS43MTI3MkwxNC4wODI0IDEuMDA1NjJMMTIuMzk0NyAyLjY5MzI1TDEwLjcwNzEgMS4wMDU2MkwxMCAxLjcxMjcyTDExLjY4NzYgMy40MDAzNlpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2l0UHVsbFJlcXVlc3RDcmVhdGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01LjYxNiA0LjkyOGEyLjQ4NyAyLjQ4NyAwIDAgMS0xLjExOS45MjJjLS4xNDguMDYtLjQ1OC4xMzgtLjQ1OC4xMzh2NS4wMDhhMi41MSAyLjUxIDAgMCAxIDEuNTc5IDEuMDYyYy4yNzMuNDEyLjQxOS44OTUuNDE5IDEuMzg4LjAwOC4zNDMtLjA1Ny42ODQtLjE5IDFBMi40ODUgMi40ODUgMCAwIDEgMy41IDE1Ljk4NGEyLjQ4MiAyLjQ4MiAwIDAgMS0xLjM4OC0uNDE5QTIuNDg3IDIuNDg3IDAgMCAxIDEuMDUgMTNjLjA5NS0uNDg2LjMzMS0uOTMyLjY4LTEuMjgzLjM0OS0uMzQzLjc5LS41NzkgMS4yNjktLjY4VjUuOTQ5YTIuNiAyLjYgMCAwIDEtMS4yNjktLjY4IDIuNTAzIDIuNTAzIDAgMCAxLS42OC0xLjI4MyAyLjQ4NyAyLjQ4NyAwIDAgMSAxLjA2LTIuNTY1QTIuNDkgMi40OSAwIDAgMSAzLjUgMWEyLjUwNCAyLjUwNCAwIDAgMSAxLjgwNy43MjkgMi40OTMgMi40OTMgMCAwIDEgLjcyOSAxLjgxYy4wMDIuNDk0LS4xNDQuOTc4LS40MiAxLjM4OXptLS43NTYgNy44NjFhMS41IDEuNSAwIDAgMC0uNTUyLS41NzkgMS40NSAxLjQ1IDAgMCAwLS43Ny0uMjEgMS40OTUgMS40OTUgMCAwIDAtMS40NyAxLjc5IDEuNDkzIDEuNDkzIDAgMCAwIDEuMTggMS4xNzljLjI4OC4wNTguNTg2LjAzLjg2LS4wOC4yNzYtLjExNy41MTItLjMxMi42OC0uNTYuMTUtLjIyNi4yMzUtLjQ5LjI0OS0uNzZhMS41MSAxLjUxIDAgMCAwLS4xNzctLjc4ek0yLjcwOCA0Ljc0MWMuMjQ3LjE2MS41MzYuMjUuODMuMjUuMjcxIDAgLjUzOC0uMDc1Ljc3LS4yMTFhMS41MTQgMS41MTQgMCAwIDAgLjcyOS0xLjM1OSAxLjUxMyAxLjUxMyAwIDAgMC0uMjUtLjc2IDEuNTUxIDEuNTUxIDAgMCAwLS42OC0uNTYgMS40OSAxLjQ5IDAgMCAwLS44Ni0uMDggMS40OTQgMS40OTQgMCAwIDAtMS4xNzkgMS4xOGMtLjA1OC4yODgtLjAzLjU4Ni4wOC44Ni4xMTcuMjc2LjMxMi41MTIuNTYuNjh6TTEzLjAzNyA3aC0xLjAwMlY1LjQ5YTEuNSAxLjUgMCAwIDAtMS41LTEuNUg4LjY4N2wxLjI2OSAxLjI3LS43MS43MDlMNy4xMTcgMy44NHYtLjdsMi4xMy0yLjEzLjcxLjcxMS0xLjI2OSAxLjI3aDEuODVhMi40ODQgMi40ODQgMCAwIDEgMi4zMTIgMS41NDFjLjEyNS4zMDIuMTg5LjYyOC4xODcuOTU3Vjd6TTEzIDE2aC0xdi0zSDl2LTFoM1Y5aDF2M2gzdjFoLTN2M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2l0UHVsbFJlcXVlc3REcmFmdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk00LjQ5NzA1IDUuODQ5N0M0Ljk1MzE5IDUuNjYwNjIgNS4zNDMwNCA1LjMzODk5IDUuNjE1OTQgNC45Mjc2OUM1Ljg5MDc5IDQuNTE2MzkgNi4wMzY5OSA0LjAzMjk2IDYuMDM1MDQgMy41Mzk4QzYuMDQyODQgMy4xOTY3MiA1Ljk3ODUxIDIuODU1NiA1Ljg0NTk2IDIuNTM5ODFDNS43MjEyIDIuMjM3NjcgNS41Mzc5NyAxLjk2MDg3IDUuMzA2MDEgMS43Mjg5MUM1LjA3NDA0IDEuNDk2OTUgNC43OTkxOSAxLjMxMzcxIDQuNDk3MDUgMS4xODg5NkM0LjE4MTI3IDEuMDU4MzYgMy44NDAxNCAwLjk5NDAzIDMuNDk5MDIgMC45OTk4NzdDMy4wMDM5IDAuOTk5ODc3IDIuNTIwNDggMS4xNDYwNyAyLjExMTEzIDEuNDIwOTJDMS42OTk4MyAxLjY5MzgyIDEuMzc4MiAyLjA4MzY4IDEuMTg5MTIgMi41Mzk4MUMxLjAwMDA0IDIuOTk3ODkgMC45NTEzMDQgMy41MDA4MSAxLjA0ODc3IDMuOTg2MThDMS4xNDQyOCA0LjQ3MTU1IDEuMzgwMTUgNC45MTc5NCAxLjcyOTA3IDUuMjY4ODFDMi4wNzk5NCA1LjYxMTg5IDIuNTIwNDggNS44NDU4IDIuOTk4MDUgNS45NDkxMVYxMS4wMzY3QzIuNTE4NTMgMTEuMTM4MSAyLjA3Nzk5IDExLjM3NCAxLjcyOTA3IDExLjcxN0MxLjM4MDE1IDEyLjA2NzkgMS4xNDQyOCAxMi41MTQzIDEuMDQ4NzcgMTIuOTk5N0MwLjk1MzI1MyAxMy40ODUgMS4wMDE5OCAxMy45ODggMS4xODkxMiAxNC40NDZDMS4zNzgyIDE0LjkwMjIgMS42OTk4MyAxNS4yOTIgMi4xMTExMyAxNS41NjQ5QzIuNTIyNDMgMTUuODM5OCAzLjAwNTg1IDE1Ljk4NiAzLjQ5OTAyIDE1Ljk4NEMzLjg0MjA5IDE1Ljk5MTggNC4xODMyMiAxNS45Mjc1IDQuNDk5IDE1Ljc5NDlDNC44MDExNCAxNS42NzAyIDUuMDc3OTQgMTUuNDg3IDUuMzA3OTYgMTUuMjU1QzUuNTM5OTIgMTUuMDIzIDUuNzIzMTUgMTQuNzQ4MiA1Ljg0NzkxIDE0LjQ0NkM1Ljk4MDQ2IDE0LjEzMDMgNi4wNDQ3OCAxMy43ODkxIDYuMDM2OTkgMTMuNDQ2MUM2LjAzNjk5IDEyLjk1MjkgNS44OTA3OSAxMi40Njk1IDUuNjE3ODkgMTIuMDU4MkM1LjM0MzA0IDExLjY0NjkgNC45NTUxMyAxMS4zMjcyIDQuNDk5IDExLjEzNjJDNC4zNTA4NiAxMS4wNzM4IDQuMTk2ODYgMTEuMDI3IDQuMDM4OTcgMTAuOTk1OFY1Ljk4ODFDNC4wMzg5NyA1Ljk4ODEgNC4zNDg5MSA1LjkxMDEzIDQuNDk3MDUgNS44NDk3Wk00LjMwNzk3IDEyLjIxMDJDNC41Mzk5NCAxMi4zNDg2IDQuNzMwOTcgMTIuNTQ5NCA0Ljg1OTYyIDEyLjc4OTJDNC45ODgyNyAxMy4wMjg5IDUuMDQ4NyAxMy4yOTc5IDUuMDM3IDEzLjU2ODlDNS4wMjMzNiAxMy44Mzk4IDQuOTM3NTkgMTQuMTAzIDQuNzg3NSAxNC4zMjkxQzQuNjE5ODYgMTQuNTc2NiA0LjM4Mzk5IDE0Ljc3MTYgNC4xMDcyIDE0Ljg4ODVDMy44MzQzIDE0Ljk5OTYgMy41MzYwNiAxNS4wMjY5IDMuMjQ3NTYgMTQuOTY4NUMyLjk1NTE3IDE0LjkxMTkgMi42ODgxMiAxNC43Njk2IDIuNDc3NTkgMTQuNTU5MUMyLjI2NzA3IDE0LjM0ODYgMi4xMjQ3NyAxNC4wNzk2IDIuMDY4MjQgMTMuNzg5MUMyLjAwOTc3IDEzLjUwMDYgMi4wMzcwNiAxMy4yMDI0IDIuMTQ4MTYgMTIuOTI5NUMyLjI2NTEyIDEyLjY1MjcgMi40NjAwNSAxMi40MTY4IDIuNzA3NjEgMTIuMjQ5MkMyLjk1MzIyIDEyLjA4NTUgMy4yNDE3MSAxMS45OTk3IDMuNTM4IDExLjk5OTdDMy44MDg5NiAxMS45OTU4IDQuMDc2MDEgMTIuMDY5OSA0LjMwNzk3IDEyLjIxMDJaTTMuNTM4IDQuOTkwMDZDMy4yNDM2NiA0Ljk5MDA2IDIuOTU1MTcgNC45MDIzNSAyLjcwNzYxIDQuNzQwNTZDMi40NjAwNSA0LjU3MjkyIDIuMjY1MTIgNC4zMzcwNSAyLjE0ODE2IDQuMDYwMjVDMi4wMzcwNiAzLjc4NzM1IDIuMDA5NzcgMy40ODkxMSAyLjA2ODI0IDMuMjAwNjJDMi4xMjQ3NyAyLjkwODIzIDIuMjY3MDcgMi42NDExOCAyLjQ3NzU5IDIuNDMwNjVDMi42ODgxMiAyLjIyMDEzIDIuOTU3MTIgMi4wNzc4MyAzLjI0NzU2IDIuMDIxM0MzLjUzNjA2IDEuOTYyODIgMy44MzQzIDEuOTkwMTEgNC4xMDcyIDIuMTAxMjJDNC4zODM5OSAyLjIxODE4IDQuNjE5ODYgMi40MTMxMSA0Ljc4NzUgMi42NjA2N0M0LjkzNzU5IDIuODg2NzkgNS4wMjMzNiAzLjE0OTk0IDUuMDM3IDMuNDIwODlDNS4wNTA2NSAzLjY5MTg0IDQuOTg4MjcgMy45NjA4NCA0Ljg1OTYyIDQuMjAwNkM0LjczMDk3IDQuNDQwMzcgNC41Mzk5NCA0LjYzOTE5IDQuMzA3OTcgNC43Nzk1NEM0LjA3NjAxIDQuOTE1OTkgMy44MDg5NiA0Ljk5MDA2IDMuNTM4IDQuOTkwMDZaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNS4wNTQzIDEzLjVDMTUuMDU0MyAxNC44ODA3IDEzLjkzNSAxNiAxMi41NTQzIDE2QzExLjE3MzYgMTYgMTAuMDU0MyAxNC44ODA3IDEwLjA1NDMgMTMuNUMxMC4wNTQzIDEyLjExOTMgMTEuMTczNiAxMSAxMi41NTQzIDExQzEzLjkzNSAxMSAxNS4wNTQzIDEyLjExOTMgMTUuMDU0MyAxMy41Wk0xMi41NTQzIDE1QzEzLjM4MjcgMTUgMTQuMDU0MyAxNC4zMjg0IDE0LjA1NDMgMTMuNUMxNC4wNTQzIDEyLjY3MTYgMTMuMzgyNyAxMiAxMi41NTQzIDEyQzExLjcyNTggMTIgMTEuMDU0MyAxMi42NzE2IDExLjA1NDMgMTMuNUMxMS4wNTQzIDE0LjMyODQgMTEuNzI1OCAxNSAxMi41NTQzIDE1WlwifX0se1widGFnXCI6XCJjaXJjbGVcIixcImF0dHJcIjp7XCJjeFwiOlwiMTIuNTU0M1wiLFwiY3lcIjpcIjcuNzUwNzNcIixcInJcIjpcIjFcIn19LHtcInRhZ1wiOlwiY2lyY2xlXCIsXCJhdHRyXCI6e1wiY3hcIjpcIjEyLjU1NDNcIixcImN5XCI6XCIzLjUwMTQ2XCIsXCJyXCI6XCIxXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dpdFB1bGxSZXF1ZXN0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNS42MTYgNC45MjhhMi40ODcgMi40ODcgMCAwIDEtMS4xMTkuOTIyYy0uMTQ4LjA2LS40NTguMTM4LS40NTguMTM4djUuMDA4YTIuNTEgMi41MSAwIDAgMSAxLjU3OSAxLjA2MmMuMjczLjQxMi40MTkuODk1LjQxOSAxLjM4OC4wMDguMzQzLS4wNTcuNjg0LS4xOSAxQTIuNDg1IDIuNDg1IDAgMCAxIDMuNSAxNS45ODRhMi40ODIgMi40ODIgMCAwIDEtMS4zODgtLjQxOUEyLjQ4NyAyLjQ4NyAwIDAgMSAxLjA1IDEzYy4wOTUtLjQ4Ni4zMzEtLjkzMi42OC0xLjI4My4zNDktLjM0My43OS0uNTc5IDEuMjY5LS42OFY1Ljk0OWEyLjYgMi42IDAgMCAxLTEuMjY5LS42OCAyLjUwMyAyLjUwMyAwIDAgMS0uNjgtMS4yODMgMi40ODcgMi40ODcgMCAwIDEgMS4wNi0yLjU2NUEyLjQ5IDIuNDkgMCAwIDEgMy41IDFhMi41MDQgMi41MDQgMCAwIDEgMS44MDcuNzI5IDIuNDkzIDIuNDkzIDAgMCAxIC43MjkgMS44MWMuMDAyLjQ5NC0uMTQ0Ljk3OC0uNDIgMS4zODl6bS0uNzU2IDcuODYxYTEuNSAxLjUgMCAwIDAtLjU1Mi0uNTc5IDEuNDUgMS40NSAwIDAgMC0uNzctLjIxIDEuNDk1IDEuNDk1IDAgMCAwLTEuNDcgMS43OSAxLjQ5MyAxLjQ5MyAwIDAgMCAxLjE4IDEuMTc5Yy4yODguMDU4LjU4Ni4wMy44Ni0uMDguMjc2LS4xMTcuNTEyLS4zMTIuNjgtLjU2LjE1LS4yMjYuMjM1LS40OS4yNDktLjc2YTEuNTEgMS41MSAwIDAgMC0uMTc3LS43OHpNMi43MDggNC43NDFjLjI0Ny4xNjEuNTM2LjI1LjgzLjI1LjI3MSAwIC41MzgtLjA3NS43Ny0uMjExYTEuNTE0IDEuNTE0IDAgMCAwIC43MjktMS4zNTkgMS41MTMgMS41MTMgMCAwIDAtLjI1LS43NiAxLjU1MSAxLjU1MSAwIDAgMC0uNjgtLjU2IDEuNDkgMS40OSAwIDAgMC0uODYtLjA4IDEuNDk0IDEuNDk0IDAgMCAwLTEuMTc5IDEuMThjLS4wNTguMjg4LS4wMy41ODYuMDguODYuMTE3LjI3Ni4zMTIuNTEyLjU2LjY4em0xMC4zMjkgNi4yOTZjLjQ4LjA5Ny45MjIuMzM1IDEuMjY5LjY4LjQ2Ni40Ny43MjkgMS4xMDcuNzI1IDEuNzY2LjAwMi40OTMtLjE0NC45NzctLjQyIDEuMzg4YTIuNDk5IDIuNDk5IDAgMCAxLTQuNTMyLS44OTkgMi41IDIuNSAwIDAgMSAxLjA2Ny0yLjU2NWMuMjY3LS4xODMuNTcxLS4zMDguODg5LS4zN1Y1LjQ4OWExLjUgMS41IDAgMCAwLTEuNS0xLjQ5OUg4LjY4N2wxLjI2OSAxLjI3LS43MS43MDlMNy4xMTcgMy44NHYtLjdsMi4xMy0yLjEzLjcxLjcxMS0xLjI2OSAxLjI3aDEuODVhMi40ODQgMi40ODQgMCAwIDEgMi4zMTIgMS41NDFjLjEyNS4zMDIuMTg5LjYyOC4xODcuOTU3djUuNTQ4em0uNTU3IDMuNTA5YTEuNDkzIDEuNDkzIDAgMCAwIC4xOTEtMS44OSAxLjU1MiAxLjU1MiAwIDAgMC0uNjgtLjU1OSAxLjQ5IDEuNDkgMCAwIDAtLjg2LS4wOCAxLjQ5MyAxLjQ5MyAwIDAgMC0xLjE3OSAxLjE4IDEuNDkgMS40OSAwIDAgMCAuMDguODYgMS40OTYgMS40OTYgMCAwIDAgMi40NDguNDl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dpdGh1YkFjdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTMuMDQgMTBoMi41OGwuNjUgMUgyLjU0bC0uNS0uNXYtOWwuNS0uNWgxMmwuNS41djQuNzdsLTEtMS43NVYyaC0xMXY4em01LjU0IDFsLTEuNDEgMy40N2gyLjJMMTUgOC43IDE0LjI3IDdoLTEuNjNsLjgyLTEuNDZMMTIuNjMgNEg5Ljc2bC0uOTIuNTktMi4yOCA1TDcuNDcgMTFoMS4xMXptMS4xOC02aDIuODdsLTEuODcgM2gzLjUxbC01Ljc2IDUuODRMMTAuMiAxMEg3LjQ3bDIuMjktNXpNNi45NSA3SDQuMDRWNkg3LjRsLS40NSAxem0tLjkgMkg0LjA0VjhINi41bC0uNDUgMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2l0aHViQWx0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAyNCAyNFwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTIxLjAzNSA1LjI1N2MuOTEgMS4wOTIgMS4zNjQgMi4zNjYgMS4zNjQgMy44MjIgMCA1LjI3Ny0zLjAwMiA2LjgyNC01LjgyMyA3LjI3OS4zNjQuNjM3LjQ1NSAxLjM2NS40NTUgMi4wOTN2My43M2MwIC40NTUtLjI3My43MjgtLjYzNy43MjhhLjcxOC43MTggMCAwIDEtLjcyOC0uNzI4di0zLjczYTIuNDk3IDIuNDk3IDAgMCAwLS43MjgtMi4wOTNsLjQ1NS0xLjE4M2MyLjgyMS0uMzY0IDUuNzMzLTEuMjc0IDUuNzMzLTYuMTg3IDAtMS4xODMtLjQ1NS0yLjI3NS0xLjI3NC0zLjE4NWwtLjE4Mi0uNzI3YTQuMDQgNC4wNCAwIDAgMCAuMDktMi43M2MtLjQ1NC4wOS0xLjM2NC4yNzMtMi45MSAxLjM2NWwtLjU0Ny4wOWExMy4zMDcgMTMuMzA3IDAgMCAwLTYuNTUgMGwtLjU0Ny0uMDlDNy41NyAyLjcxIDYuNjYgMi40MzcgNi4yMDQgMi40MzdjLS4yNzMuOTEtLjI3MyAxLjkxLjA5IDIuNzNsLS4xODEuNzI3Yy0uOTEuOTEtMS4zNjUgMi4wOTMtMS4zNjUgMy4xODUgMCA0LjgyMiAyLjczIDUuODIzIDUuNzMyIDYuMTg3bC4zNjQgMS4xODNjLS41NDYuNTQ2LS44MTkgMS4yNzQtLjcyOCAyLjAwMnYzLjgyMWEuNzE4LjcxOCAwIDAgMS0uNzI4LjcyOC43MTguNzE4IDAgMCAxLS43MjgtLjcyOFYyMC4xOGMtMy4wMDIuNjM3LTQuMTg1LS45MS01LjA5NS0yLjA5Mi0uNDU1LS41NDYtLjgxOS0xLjAwMS0xLjI3NC0xLjA5Mi0uMDktLjA5MS0uMzY0LS40NTUtLjI3My0uODE5LjA5MS0uMzY0LjQ1NS0uNjM3LjgyLS40NTUuOTEuMTgyIDEuNDU1LjkxIDIgMS41NDcuODIgMS4wOTIgMS42MzkgMi4wOTIgNC4wOTUgMS41NDd2LS4zNjRjLS4wOS0uNzI4LjA5MS0xLjQ1Ni40NTUtMi4wOTMtMi43My0uNTQ2LTUuOTE0LTIuMDkzLTUuOTE0LTcuMjc5IDAtMS40NTYuNDU1LTIuNzMgMS4zNjUtMy44MjItLjI3My0xLjI3My0uMTgyLTIuNjM4LjI3My0zLjczbC40NTUtLjM2NEM1Ljc0OSAxLjA3MyA3LjAyMy44IDkuNjYgMi40MzdhMTMuNjczIDEzLjY3MyAwIDAgMSA2LjY0MiAwQzE4Ljg1MS43MDggMjAuMjE2Ljk4IDIwLjM5OCAxLjA3MmwuNDU1LjM2NGMuNDU1IDEuMjc0LjU0NiAyLjU0OC4xODIgMy44MjF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dpdGh1YkludmVydGVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy45NzYgMEE3Ljk3NyA3Ljk3NyAwIDAgMCAwIDcuOTc2YzAgMy41MjIgMi4zIDYuNTA3IDUuNDMxIDcuNTg0LjM5Mi4wNDkuNTM4LS4xOTYuNTM4LS4zOTJ2LTEuMzdjLTIuMjAxLjQ5LTIuNjktMS4wNzYtMi42OS0xLjA3Ni0uMzQzLS45My0uODgxLTEuMTc1LS44ODEtMS4xNzUtLjczNC0uNDg5LjA0OC0uNDg5LjA0OC0uNDg5Ljc4My4wNDkgMS4yMjQuODMyIDEuMjI0LjgzMi43MzQgMS4yMjMgMS44NTkuODggMi4zLjY4NS4wNDgtLjUzOC4yOTMtLjg4LjQ4OS0xLjA3Ni0xLjc2Mi0uMTk2LTMuNjIxLS44ODEtMy42MjEtMy45NjQgMC0uODguMjkzLTEuNTY2LjgzMi0yLjE1My0uMDUtLjE0Ny0uMzQzLS45NzguMDk4LTIuMDU1IDAgMCAuNjg1LS4xOTYgMi4yMDEuODMyLjYzNi0uMTk2IDEuMzIyLS4yNDUgMi4wMDctLjI0NXMxLjM3LjA5OCAyLjAwNi4yNDVjMS41MTctMS4wMjcgMi4yMDItLjgzMiAyLjIwMi0uODMyLjQ0IDEuMDc3LjE0NiAxLjkwOC4wOTcgMi4xMDRhMy4xNiAzLjE2IDAgMCAxIC44MzIgMi4xNTNjMCAzLjA4My0xLjg2IDMuNzE5LTMuNjIgMy45MTUuMjkzLjI0NC41MzguNzMzLjUzOCAxLjQ2N3YyLjIwMmMwIC4xOTYuMTQ2LjQ0LjUzOC4zOTJBNy45ODQgNy45ODQgMCAwIDAgMTYgNy45NzZDMTUuOTUxIDMuNTcyIDEyLjM4IDAgNy45NzYgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR2l0aHViIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAyNCAyNFwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEyIDBhMTIgMTIgMCAxIDAgMCAyNCAxMiAxMiAwIDAgMCAwLTI0em0zLjE2MyAyMS43ODNoLS4wOTNhLjUxMy41MTMgMCAwIDEtLjM4Mi0uMTQuNTEzLjUxMyAwIDAgMS0uMTQtLjM3MnYtMS40MDZjLjAwNi0uNDY3LjAxLS45NC4wMS0xLjQxNmEzLjY5MyAzLjY5MyAwIDAgMC0uMTUxLTEuMDI4IDEuODMyIDEuODMyIDAgMCAwLS41NDItLjg3NSA4LjAxNCA4LjAxNCAwIDAgMCAyLjAzOC0uNDcxIDQuMDUxIDQuMDUxIDAgMCAwIDEuNDY2LS45NjRjLjQwNy0uNDI3LjcxLS45NDMuODg1LTEuNTA2YTYuNzcgNi43NyAwIDAgMCAuMy0yLjEzIDQuMTM4IDQuMTM4IDAgMCAwLS4yNi0xLjQ3NiAzLjg5MiAzLjg5MiAwIDAgMC0uNzk1LTEuMjg0IDIuODEgMi44MSAwIDAgMCAuMTYyLS41ODJjLjAzMy0uMi4wNS0uNDAyLjA1LS42MDQgMC0uMjYtLjAzLS41Mi0uMDktLjc3M2E1LjMwOSA1LjMwOSAwIDAgMC0uMjIxLS43NjMuMjkzLjI5MyAwIDAgMC0uMTExLS4wMmgtLjExYy0uMjMuMDAyLS40NTYuMDQtLjY3NC4xMTFhNS4zNCA1LjM0IDAgMCAwLS43MDMuMjYgNi41MDMgNi41MDMgMCAwIDAtLjY2MS4zNDNjLS4yMTUuMTI3LS40MDUuMjQ5LS41NzMuMzYyYTkuNTc4IDkuNTc4IDAgMCAwLTUuMTQzIDAgMTMuNTA3IDEzLjUwNyAwIDAgMC0uNTcyLS4zNjIgNi4wMjIgNi4wMjIgMCAwIDAtLjY3Mi0uMzQyIDQuNTE2IDQuNTE2IDAgMCAwLS43MDUtLjI2MSAyLjIwMyAyLjIwMyAwIDAgMC0uNjYyLS4xMTFoLS4xMWEuMjkuMjkgMCAwIDAtLjExLjAyIDUuODQ0IDUuODQ0IDAgMCAwLS4yMy43NjNjLS4wNTQuMjU0LS4wOC41MTMtLjA4MS43NzMgMCAuMjAyLjAxNy40MDQuMDUxLjYwNC4wMzMuMTk5LjA4Ni4zOTQuMTYuNTgyQTMuODg4IDMuODg4IDAgMCAwIDUuNzAyIDEwYTQuMTQyIDQuMTQyIDAgMCAwLS4yNjMgMS40NzYgNi44NzEgNi44NzEgMCAwIDAgLjI5MiAyLjEyYy4xODEuNTYzLjQ4MyAxLjA4Ljg4NCAxLjUxNi40MTUuNDIyLjkxNS43NSAxLjQ2Ni45NjQuNjUzLjI1IDEuMzM3LjQxIDIuMDMzLjQ3NmExLjgyOCAxLjgyOCAwIDAgMC0uNDUyLjYzMyAyLjk5IDIuOTkgMCAwIDAtLjIuNzQ0IDIuNzU0IDIuNzU0IDAgMCAxLTEuMTc1LjI3IDEuNzg4IDEuNzg4IDAgMCAxLTEuMDY1LS4zIDIuOTA0IDIuOTA0IDAgMCAxLS43NTItLjgyNCAzLjEgMy4xIDAgMCAwLS4yOTItLjM4MiAyLjY5MyAyLjY5MyAwIDAgMC0uMzcyLS4zNDMgMS44NDEgMS44NDEgMCAwIDAtLjQzMi0uMjQgMS4yIDEuMiAwIDAgMC0uNDgxLS4xMDFjLS4wNC4wMDEtLjA4LjAwNS0uMTIuMDFhLjY0OS42NDkgMCAwIDAtLjE2Mi4wMi40MDguNDA4IDAgMCAwLS4xMy4wNi4xMTYuMTE2IDAgMCAwLS4wNi4xLjMzLjMzIDAgMCAwIC4xNC4yNDJjLjA5My4wNzQuMTcuMTMxLjIzMi4xNzFsLjAzLjAyMWMuMTMzLjEwMy4yNjEuMjE0LjM4Mi4zMzMuMTEyLjA5OC4yMTMuMjA5LjMuMzMuMDkuMTE5LjE2OC4yNDYuMjMxLjM4MS4wNzMuMTM0LjE1LjI4OC4yMzEuNDYzLjE4OC40NzQuNTIyLjg3NS45NTQgMS4xNDUuNDUzLjI0My45NjEuMzY0IDEuNDc2LjM1MS4xNzQgMCAuMzQ5LS4wMS41MjItLjAzLjE3Mi0uMDI4LjM0My0uMDU3LjUxNS0uMDkxdjEuNzQzYS41LjUgMCAwIDEtLjUzMy41MjFoLS4wNjJhMTAuMjg2IDEwLjI4NiAwIDEgMSA2LjMyNCAwdi4wMDV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dsb2JlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC41IDFhNi41IDYuNSAwIDEgMSAwIDEzIDYuNSA2LjUgMCAwIDEgMC0xM3ptNC44OTQgNGE1LjUyNyA1LjUyNyAwIDAgMC0zLjA1My0yLjY3NmMuNDQ0Ljg0Ljc2NSAxLjc0Ljk1MyAyLjY3NmgyLjF6bS41ODIgMi45OTVBNS4xMSA1LjExIDAgMCAwIDE0IDcuNWE1LjQ2NCA1LjQ2NCAwIDAgMC0uMjEzLTEuNWgtMi4zNDJjLjAzMi4zMzEuMDU1LjY2NC4wNTUgMWExMC4xMTQgMTAuMTE0IDAgMCAxLS4yMDYgMmgyLjQ5M2MuMDk1LS4zMjkuMTU4LS42NjUuMTktMS4wMDV6bS0zLjUzNSAwbC4wMDYtLjA1MUE5LjA0IDkuMDQgMCAwIDAgMTAuNSA3YTguOTk0IDguOTk0IDAgMCAwLS4wNzYtMUg2LjU3NkE4LjgyIDguODIgMCAwIDAgNi41IDdhOC45OCA4Ljk4IDAgMCAwIC4yMzMgMmgzLjUzNGMuMDc3LS4zMzIuMTM1LS42NjcuMTc0LTEuMDA1ek0xMC4yNDkgNWE4Ljk3NCA4Ljk3NCAwIDAgMC0xLjI1NS0yLjk3QzguODMgMi4wMTYgOC42NjYgMiA4LjUgMmEzLjYyIDMuNjIgMCAwIDAtLjMxMi4wMTVsLS4xODIuMDE1TDggMi4wNEE4Ljk3IDguOTcgMCAwIDAgNi43NTEgNWgzLjQ5OHpNNS43MDYgNWE5Ljk1OSA5Ljk1OSAwIDAgMSAuOTY2LTIuNjgxQTUuNTI3IDUuNTI3IDAgMCAwIDMuNjA2IDVoMi4xek0zLjIxMyA2QTUuNDggNS40OCAwIDAgMCAzIDcuNSA1LjQ4IDUuNDggMCAwIDAgMy4yMTMgOWgyLjQ5M0ExMC4wMTYgMTAuMDE2IDAgMCAxIDUuNSA3YzAtLjMzNi4wMjMtLjY2OS4wNTUtMUgzLjIxM3ptMi43NTQgNGgtMi4zNmE1LjUxNSA1LjUxNSAwIDAgMCAzLjgxOSAyLjg5M0ExMC4wMjMgMTAuMDIzIDAgMCAxIDUuOTY3IDEwek04LjUgMTIuNjQ0QTguOTQyIDguOTQyIDAgMCAwIDkuOTc4IDEwSDcuMDIyQTguOTQzIDguOTQzIDAgMCAwIDguNSAxMi42NDR6TTExLjAzMyAxMGExMC4wMjQgMTAuMDI0IDAgMCAxLTEuNDU5IDIuODkzQTUuNTE3IDUuNTE3IDAgMCAwIDEzLjM5MyAxMGgtMi4zNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR29Ub0ZpbGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02IDUuOTE0bDIuMDYtMi4wNnYtLjcwOEw1LjkxNSAxbC0uNzA3LjcwNy4wNDMuMDQzLjI1LjI1IDEgMWgtM2EyLjUgMi41IDAgMCAwIDAgNUg0VjdoLS41YTEuNSAxLjUgMCAxIDEgMC0zaDNMNS4yMDcgNS4yOTMgNS45MTQgNiA2IDUuOTE0ek0xMSAySDguMzI4bC0xLTFIMTJsLjcxLjI5IDMgM0wxNiA1djlsLTEgMUg2bC0xLTFWNi41bDEgLjg0N1YxNGg5VjZoLTRWMnptMSAwdjNoM2wtMy0zelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHcmFiYmVyIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTUgNkgxdjFoMTRWNnptMCAzSDF2MWgxNFY5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHcmFwaExlZnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yLjExOSA0TDMgNC44ODFsLS42MTkuNjE5TC43MTUgMy44MzN2LS42MThMMi4zOCAxLjU0OGwuNjIuNjE5TDIuMTY3IDNIMTV2MUgyLjExOXpNNCAxNC41NDZWNS40NTVMNC41IDVoMmwuNS40NTV2OS4wOUw2LjUgMTVoLTJsLS41LS40NTR6bTItLjQ1NVY1LjkwOUg1djguMTgyaDF6bTItMS41MzVWNS40NDRMOC41IDVoMmwuNS40NDR2Ny4xMTJsLS41LjQ0NGgtMmwtLjUtLjQ0NHptMi0uNDQ1VjUuODlIOXY2LjIyMmgxem0yLTYuNjgydjUuMTQzbC41LjQyOGgybC41LS40MjhWNS40MjlMMTQuNSA1aC0ybC0uNS40Mjl6bTIgLjQyOHY0LjI4NmgtMVY1Ljg1N2gxelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHcmFwaExpbmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUgMTNWMTRIMS41TDEgMTMuNVYwSDJWMTNIMTVaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTMgMy4yMDcxNEw3Ljg1MzUzIDguMzUzNTlINy4xNDY0Mkw1LjQ5OTk4IDYuNzA3MTRMMS44NTM1MyAxMC4zNTM2TDEuMTQ2NDIgOS42NDY0OEw1LjE0NjQyIDUuNjQ2NDhINS44NTM1M0w3LjQ5OTk4IDcuMjkyOTNMMTIuNjQ2NCAyLjE0NjQ4SDEzLjM1MzVMMTUuMzUzNSA0LjE0NjQ4TDE0LjY0NjQgNC44NTM1OUwxMyAzLjIwNzE0WlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NHcmFwaFNjYXR0ZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUgMTNWMTRIMS41TDEgMTMuNVYwSDJWMTNIMTVaXCJ9fSx7XCJ0YWdcIjpcInJlY3RcIixcImF0dHJcIjp7XCJ4XCI6XCI1XCIsXCJ5XCI6XCIyXCIsXCJ3aWR0aFwiOlwiMlwiLFwiaGVpZ2h0XCI6XCIyXCJ9fSx7XCJ0YWdcIjpcInJlY3RcIixcImF0dHJcIjp7XCJ4XCI6XCIxMlwiLFwieVwiOlwiMVwiLFwid2lkdGhcIjpcIjJcIixcImhlaWdodFwiOlwiMlwifX0se1widGFnXCI6XCJyZWN0XCIsXCJhdHRyXCI6e1wieFwiOlwiOFwiLFwieVwiOlwiNVwiLFwid2lkdGhcIjpcIjJcIixcImhlaWdodFwiOlwiMlwifX0se1widGFnXCI6XCJyZWN0XCIsXCJhdHRyXCI6e1wieFwiOlwiNVwiLFwieVwiOlwiOVwiLFwid2lkdGhcIjpcIjJcIixcImhlaWdodFwiOlwiMlwifX0se1widGFnXCI6XCJyZWN0XCIsXCJhdHRyXCI6e1wieFwiOlwiMTJcIixcInlcIjpcIjhcIixcIndpZHRoXCI6XCIyXCIsXCJoZWlnaHRcIjpcIjJcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR3JhcGggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMTRIMTV2LTFIMlYwSDF2MTMuNWwuNS41ek0zIDExLjV2LThsLjUtLjVoMmwuNS41djhsLS41LjVoLTJsLS41LS41em0yLS41VjRINHY3aDF6bTYtOS41djEwbC41LjVoMmwuNS0uNXYtMTBsLS41LS41aC0ybC0uNS41em0yIC41djloLTFWMmgxem0tNiA5LjV2LTZsLjUtLjVoMmwuNS41djZsLS41LjVoLTJsLS41LS41em0yLS41VjZIOHY1aDF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0dyaXBwZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNSAzaDJ2Mkg1em0wIDRoMnYySDV6bTAgNGgydjJINXptNC04aDJ2Mkg5em0wIDRoMnYySDl6bTAgNGgydjJIOXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjR3JvdXBCeVJlZlR5cGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMWgydjFIMnYxMmgxLjV2MWgtMmwtLjUtLjV2LTEzbC41LS41em02IDZoLTJMNSA2LjV2LTJsLjUtLjVoMmwuNS41djJsLS41LjV6TTYgNmgxVjVINnYxem03LjUgMWgtM2wtLjUtLjV2LTNsLjUtLjVoM2wuNS41djNsLS41LjV6TTExIDZoMlY0aC0ydjJ6bS0zLjUgNmgtMmwtLjUtLjV2LTJsLjUtLjVoMmwuNS41djJsLS41LjV6TTYgMTFoMXYtMUg2djF6bTcuNSAyaC0zbC0uNS0uNXYtM2wuNS0uNWgzbC41LjV2M2wtLjUuNXpNMTEgMTJoMnYtMmgtMnYyem0tMS0ySDh2MWgydi0xem0wLTVIOHYxaDJWNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSGVhcnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQuODggNC43OGEzLjQ4OSAzLjQ4OSAwIDAgMC0uMzctLjkgMy4yNCAzLjI0IDAgMCAwLS42LS43OSAzLjc4IDMuNzggMCAwIDAtMS4yMS0uODEgMy43NCAzLjc0IDAgMCAwLTIuODQgMCA0IDQgMCAwIDAtMS4xNi43NWwtLjA1LjA2LS42NS42NS0uNjUtLjY1LS4wNS0uMDZhNCA0IDAgMCAwLTEuMTYtLjc1IDMuNzQgMy43NCAwIDAgMC0yLjg0IDAgMy43OCAzLjc4IDAgMCAwLTEuMjEuODEgMy41NSAzLjU1IDAgMCAwLS45NyAxLjY5IDMuNzUgMy43NSAwIDAgMC0uMTIgMWMwIC4zMTcuMDQuNjMzLjEyLjk0YTQgNCAwIDAgMCAuMzYuODkgMy44IDMuOCAwIDAgMCAuNjEuNzlMOCAxNC4zMWw1LjkxLTUuOTFjLjIzNy0uMjMzLjQ0LS41LjYtLjc5QTMuNTc4IDMuNTc4IDAgMCAwIDE1IDUuNzhhMy43NDcgMy43NDcgMCAwIDAtLjEyLTF6bS0xIDEuNjNhMi42OSAyLjY5IDAgMCAxLS42OSAxLjIxbC01LjIxIDUuMi01LjIxLTUuMmEyLjkgMi45IDAgMCAxLS40NC0uNTcgMyAzIDAgMCAxLS4yNy0uNjUgMy4yNSAzLjI1IDAgMCAxLS4wOC0uNjlBMy4zNiAzLjM2IDAgMCAxIDIuMDYgNWEyLjggMi44IDAgMCAxIC4yNy0uNjVjLjEyLS4yMS4yNjgtLjQuNDQtLjU3YTIuOTEgMi45MSAwIDAgMSAuODktLjYgMi44IDIuOCAwIDAgMSAyLjA4IDBjLjMzLjEzNy42MjguMzM4Ljg4LjU5bDEuMzYgMS4zNyAxLjM2LTEuMzdhMi43MiAyLjcyIDAgMCAxIC44OC0uNTkgMi44IDIuOCAwIDAgMSAyLjA4IDBjLjMzMS4xNDMuNjMzLjM0Ny44OS42LjE3NC4xNjUuMzIuMzU3LjQzLjU3YTIuNjkgMi42OSAwIDAgMSAuMzUgMS4zNCAyLjYgMi42IDAgMCAxLS4wNi43MmgtLjAzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NIaXN0b3J5IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTMuNTA3IDEyLjMyNGE3IDcgMCAwIDAgLjA2NS04LjU2QTcgNyAwIDAgMCAyIDQuMzkzVjJIMXYzLjVsLjUuNUg1VjVIMi44MTFhNi4wMDggNi4wMDggMCAxIDEtLjEzNSA1Ljc3bC0uODg3LjQ2MmE3IDcgMCAwIDAgMTEuNzE4IDEuMDkyem0tMy4zNjEtLjk3bC43MDgtLjcwN0w4IDcuNzkyVjRIN3Y0bC4xNDYuMzU0IDMgM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSG9tZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTguMzYgMS4zN2w2LjM2IDUuOC0uNzEuNzFMMTMgNi45NjR2Ni41MjZsLS41LjVoLTNsLS41LS41di0zLjVIN3YzLjVsLS41LjVoLTNsLS41LS41VjYuOTcyTDIgNy44OGwtLjcxLS43MSA2LjM1LTUuOGguNzJ6TTQgNi4wNjN2Ni45MjdoMnYtMy41bC41LS41aDNsLjUuNXYzLjVoMlY2LjA1N0w4IDIuNDMgNCA2LjA2M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSG9yaXpvbnRhbFJ1bGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02LjQzMiAxMGguODIzVjRoLS44MjN2Mi42MWgtMi42MVY0SDN2NmguODIzVjcuMzk0aDIuNjFWMTB6bTUuNjY4IDBoLjlsLTEuMjgtMi42M2MuMTMxLS4wNTguMjYtLjEzNC4zODktLjIzYTEuNjY2IDEuNjY2IDAgMCAwIC41ODUtLjc5N2MuMDY0LS4xNzEuMDk2LS4zNjQuMDk2LS41OGExLjc3IDEuNzcgMCAwIDAtLjA4Mi0uNTU3IDEuNjQ0IDEuNjQ0IDAgMCAwLS4yMi0uNDQ2IDEuNTA0IDEuNTA0IDAgMCAwLS4zMS0uMzQxIDEuODY0IDEuODY0IDAgMCAwLS43MzctLjM3M0ExLjQ0NiAxLjQ0NiAwIDAgMCAxMS4xIDRIOC42NHY2aC44MjRWNy41MThoMS40NjdMMTIuMSAxMHptLS42ODEtMy4zMmEuODc0Ljg3NCAwIDAgMS0uMjkzLjA1NUg5LjQ2M1Y0Ljc4N2gxLjY2M2EuODcuODcgMCAwIDEgLjU3Ni4yNC45NTYuOTU2IDAgMCAxIC4zMDYuNzM3YzAgLjE2OC0uMDI5LjMxNC0uMDg3LjQzN2EuOTEuOTEgMCAwIDEtLjUwMy40Nzl6TTEzIDEySDN2MWgxMHYtMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSHVib3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjQ4IDRoNGwuNS41djIuMDNoLjUybC41LjVWOGwtLjUuNWgtLjUydjNsLS41LjVIOS4zNmwtMi41IDIuNzZMNiAxNC40VjEySDMuNWwtLjUtLjY0VjguNWgtLjVMMiA4di0uOTdsLjUtLjVIM1Y0LjM2TDMuNTMgNGg0VjIuODZBMSAxIDAgMCAxIDcgMmExIDEgMCAwIDEgMiAwIDEgMSAwIDAgMS0uNTIuODNWNHpNMTIgOFY1SDR2NS44NmwyLjUuMTRIN3YyLjE5bDEuOC0yLjA0LjM1LS4xNUgxMlY4em0tMi4xMi41MWEyLjcxIDIuNzEgMCAwIDEtMS4zNy43NHYtLjAxYTIuNzEgMi43MSAwIDAgMS0yLjQyLS43NGwtLjcuNzFjLjM0LjM0Ljc0NS42MDggMS4xOS43OS40NS4xODguOTMyLjI4NiAxLjQyLjI5YTMuNyAzLjcgMCAwIDAgMi41OC0xLjA3bC0uNy0uNzF6TTYuNDkgNi41aC0xdjFoMXYtMXptMyAwaDF2MWgtMXYtMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSW5ib3ggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMTRoMTNsLjUtLjVWOWwtMi43Ny03LjY2LS40Ny0uMzRINC4yN2wtLjQ3LjMzTDEgOC43NHY0Ljc2bC41LjV6TTE0IDEzSDJ2LTIuOThoMi41NWwuNzQgMS4yNS40My4yNGg0LjU3bC40NC0uMjYuNjktMS4yM0gxNFYxM3ptLS4wMjItMy45OEgxMS4xMmwtLjQzLjI2LS42OSAxLjIzSDYuMDFsLS43NS0xLjI1LS40My0uMjRIMlY5bDIuNjItN2g2Ljc4bDIuNTc4IDcuMDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0luZm8gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjU2OCAxLjAzMUE2LjggNi44IDAgMCAxIDEyLjc2IDMuMDVhNy4wNiA3LjA2IDAgMCAxIC40NiA5LjM5IDYuODUgNi44NSAwIDAgMS04LjU4IDEuNzQgNyA3IDAgMCAxLTMuMTItMy41IDcuMTIgNy4xMiAwIDAgMS0uMjMtNC43MSA3IDcgMCAwIDEgMi43Ny0zLjc5IDYuOCA2LjggMCAwIDEgNC41MDgtMS4xNDl6TTkuMDQgMTMuODhhNS44OSA1Ljg5IDAgMCAwIDMuNDEtMi4wNyA2LjA3IDYuMDcgMCAwIDAtLjQtOC4wNiA1LjgyIDUuODIgMCAwIDAtNy40My0uNzQgNi4wNiA2LjA2IDAgMCAwIC41IDEwLjI5IDUuODEgNS44MSAwIDAgMCAzLjkyLjU4ek03LjM3NSA2aDEuMjVWNWgtMS4yNXYxem0xLjI1IDF2NGgtMS4yNVY3aDEuMjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0luc3BlY3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDNsMS0xaDEybDEgMXY2aC0xVjNIMnY4aDV2MUgybC0xLTFWM3ptMTQuNzA3IDkuNzA3TDkgNnY5LjQxNGwyLjcwNy0yLjcwN2g0ek0xMCAxM1Y4LjQxNGwzLjI5MyAzLjI5M2gtMkwxMCAxM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjSXNzdWVEcmFmdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwiY2lyY2xlXCIsXCJhdHRyXCI6e1wiY3hcIjpcIjcuNTAwMDJcIixcImN5XCI6XCI3LjVcIixcInJcIjpcIjFcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjY4MzUgOS41MDkzMUwxMi43MzI0IDkuMjAwNDdDMTIuOTA1OCA4LjY2NjI0IDEzIDguMDk1MSAxMyA3LjVDMTMgNi45MDQ5IDEyLjkwNTggNi4zMzM3NiAxMi43MzI0IDUuNzk5NTNMMTMuNjgzNSA1LjQ5MDY5QzEzLjg4OSA2LjEyMzQ0IDE0IDYuNzk4NzUgMTQgNy41QzE0IDguMjAxMjUgMTMuODg5IDguODc2NTYgMTMuNjgzNSA5LjUwOTMxWk0xMy4yOTI4IDQuNTQ4NDJMMTIuNDAyMSA1LjAwMzEzQzExLjg3NDggMy45NzAyIDExLjAyOTggMy4xMjUyMyA5Ljk5Njg3IDIuNTk3ODdMMTAuNDUxNiAxLjcwNzIzQzExLjY3MjEgMi4zMzAzNyAxMi42Njk2IDMuMzI3OSAxMy4yOTI4IDQuNTQ4NDJaTTkuNTA5MzEgMS4zMTY1Mkw5LjIwMDQ3IDIuMjY3NjNDOC42NjYyNCAyLjA5NDE1IDguMDk1MSAyIDcuNSAyQzYuOTA0OSAyIDYuMzMzNzYgMi4wOTQxNSA1Ljc5OTUzIDIuMjY3NjNMNS40OTA2OSAxLjMxNjUyQzYuMTIzNDQgMS4xMTEwNSA2Ljc5ODc1IDEgNy41IDFDOC4yMDEyNSAxIDguODc2NTYgMS4xMTEwNSA5LjUwOTMxIDEuMzE2NTJaTTQuNTQ4NDIgMS43MDcyM0w1LjAwMzEzIDIuNTk3ODdDMy45NzAyIDMuMTI1MjMgMy4xMjUyMyAzLjk3MDIgMi41OTc4NyA1LjAwMzEzTDEuNzA3MjMgNC41NDg0MkMyLjMzMDM3IDMuMzI3OSAzLjMyNzkgMi4zMzAzNyA0LjU0ODQyIDEuNzA3MjNaTTEuMzE2NTIgNS40OTA2OUMxLjExMTA1IDYuMTIzNDQgMSA2Ljc5ODc1IDEgNy41QzEgOC4yMDEyNSAxLjExMTA1IDguODc2NTYgMS4zMTY1MiA5LjUwOTMxTDIuMjY3NjMgOS4yMDA0N0MyLjA5NDE1IDguNjY2MjQgMiA4LjA5NTEgMiA3LjVDMiA2LjkwNDkgMi4wOTQxNSA2LjMzMzc2IDIuMjY3NjMgNS43OTk1M0wxLjMxNjUyIDUuNDkwNjlaTTEuNzA3MjMgMTAuNDUxNkwyLjU5Nzg3IDkuOTk2ODdDMy4xMjUyMyAxMS4wMjk4IDMuOTcwMiAxMS44NzQ4IDUuMDAzMTMgMTIuNDAyMUw0LjU0ODQyIDEzLjI5MjhDMy4zMjc5IDEyLjY2OTYgMi4zMzAzNyAxMS42NzIxIDEuNzA3MjMgMTAuNDUxNlpNNS40OTA2OSAxMy42ODM1TDUuNzk5NTMgMTIuNzMyNEM2LjMzMzc2IDEyLjkwNTggNi45MDQ5IDEzIDcuNSAxM0M4LjA5NTEgMTMgOC42NjYyNCAxMi45MDU4IDkuMjAwNDcgMTIuNzMyNEw5LjUwOTMxIDEzLjY4MzVDOC44NzY1NiAxMy44ODkgOC4yMDEyNSAxNCA3LjUgMTRDNi43OTg3NSAxNCA2LjEyMzQ0IDEzLjg4OSA1LjQ5MDY5IDEzLjY4MzVaTTEwLjQ1MTYgMTMuMjkyOEw5Ljk5Njg3IDEyLjQwMjFDMTEuMDI5OCAxMS44NzQ4IDExLjg3NDggMTEuMDI5OCAxMi40MDIxIDkuOTk2ODdMMTMuMjkyOCAxMC40NTE2QzEyLjY2OTYgMTEuNjcyMSAxMS42NzIxIDEyLjY2OTYgMTAuNDUxNiAxMy4yOTI4WlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NJc3N1ZVJlb3BlbmVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNS4yOCA1LjY1NTU2TDIgNy4wMDU1NkwxLjM0IDYuNzQ1NTZMMCAzLjUwNTU2TDAuOTIgMy4xMjU1NkwxLjczIDUuMDc1NTZDMi4yNzM3NiAzLjcxNDc1IDMuMjYyNyAyLjU3ODQ0IDQuNTM1NDQgMS44NTIwN0M1LjgwODE3IDEuMTI1NyA3LjI4OTUzIDAuODUyMTc0IDguNzM3NzQgMS4wNzYxNEMxMC4xODU5IDEuMzAwMSAxMS41MTU1IDIuMDA4MzIgMTIuNTA5MyAzLjA4NTIxQzEzLjUwMzIgNC4xNjIxIDE0LjEwMjcgNS41NDQwNyAxNC4yMSA3LjAwNTU2SDEzLjIxQzEzLjA5NTYgNS43NTY4MyAxMi41NTY0IDQuNTg1MTEgMTEuNjgyNCAzLjY4NTk0QzEwLjgwODMgMi43ODY3NyA5LjY1MjM3IDIuMjE0NTYgOC40MDczOSAyLjA2NDc4QzcuMTYyNCAxLjkxNTAxIDUuOTAzNzEgMi4xOTY3NCA0Ljg0MTM3IDIuODYyOTdDMy43NzkwMyAzLjUyOTE5IDIuOTc3MzEgNC41Mzk1OSAyLjU3IDUuNzI1NTZMNC44OSA0LjcyNTU2TDUuMjggNS42NTU1NlpNMTQuMTQgOC4zMzU2MkwxNS40OCAxMS41NjU2TDE0LjU2IDEyLjAwNTZMMTMuNzQgMTAuMDA1NkMxMy4xOTE5IDExLjM3MTggMTIuMTk1OCAxMi41MTEgMTAuOTE0OSAxMy4yMzY0QzkuNjM0MTIgMTMuOTYxOCA4LjE0NDc2IDE0LjIzMDIgNi42OTEyNyAxMy45OTc3QzUuMjM3NzkgMTMuNzY1MSAzLjkwNjU0IDEzLjA0NTQgMi45MTU5OSAxMS45NTY2QzEuOTI1NDQgMTAuODY3OCAxLjMzNDQ1IDkuNDc0NTUgMS4yNDAwMSA4LjAwNTYySDIuMjQwMDFWNy41MDU2MkMyLjI0MjgxIDguNzkzMDggMi42OTgwMSAxMC4wMzg2IDMuNTI2MDIgMTEuMDI0NUM0LjM1NDA0IDEyLjAxMDQgNS41MDIyIDEyLjY3MzkgNi43Njk4MyAxMi44OTlDOC4wMzc0NSAxMy4xMjQyIDkuMzQzODggMTIuODk2NyAxMC40NjA4IDEyLjI1NjNDMTEuNTc3NyAxMS42MTU5IDEyLjQzNCAxMC42MDMzIDEyLjg4IDkuMzk1NjJMMTAuNjMgMTAuMzI1NkwxMC4yNCA5LjQwNTYxTDEzLjQ5IDguMDU1NjJMMTQuMTQgOC4zMzU2MlpcIn19LHtcInRhZ1wiOlwiY2lyY2xlXCIsXCJhdHRyXCI6e1wiY3hcIjpcIjcuNzQwMDFcIixcImN5XCI6XCI3LjUzOTU1XCIsXCJyXCI6XCIxXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0lzc3VlcyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk03LjUwMDAyIDFDNi4yMTQ0NSAxIDQuOTU3NzQgMS4zODEyMyAzLjg4ODgyIDIuMDk1NDZDMi44MTk5IDIuODA5NjkgMS45ODY3NCAzLjgyNDg1IDEuNDk0NzggNS4wMTI1N0MxLjAwMjgxIDYuMjAwMjkgMC44NzQwOTggNy41MDcxOSAxLjEyNDkgOC43NjgwN0MxLjM3NTcxIDEwLjAyODkgMS45OTQ3OSAxMS4xODcyIDIuOTAzODMgMTIuMDk2MkMzLjgxMjg3IDEzLjAwNTIgNC45NzEwOCAxMy42MjQzIDYuMjMxOTYgMTMuODc1MUM3LjQ5MjgzIDE0LjEyNTkgOC43OTk3MyAxMy45OTcyIDkuOTg3NDUgMTMuNTA1MkMxMS4xNzUyIDEzLjAxMzMgMTIuMTkwMyAxMi4xODAxIDEyLjkwNDYgMTEuMTExMkMxMy42MTg4IDEwLjA0MjMgMTQgOC43ODU1OCAxNCA3LjVDMTQgNS43NzYwOSAxMy4zMTUyIDQuMTIyOCAxMi4wOTYyIDIuOTAzODFDMTAuODc3MiAxLjY4NDgyIDkuMjIzOTMgMSA3LjUwMDAyIDFaTTcuNTAwMDIgMTNDNi40MTIyMyAxMyA1LjM0ODgzIDEyLjY3NzUgNC40NDQzNiAxMi4wNzMxQzMuNTM5ODkgMTEuNDY4OCAyLjgzNTAxIDEwLjYwOTcgMi40MTg3MyA5LjYwNDc0QzIuMDAyNDQgOC41OTk3NCAxLjg5MzUyIDcuNDkzOSAyLjEwNTc0IDYuNDI3QzIuMzE3OTYgNS4zNjAxMSAyLjg0MTggNC4zODAxNSAzLjYxMDk5IDMuNjEwOTZDNC4zODAxOCAyLjg0MTc3IDUuMzYwMTMgMi4zMTc5MyA2LjQyNzAzIDIuMTA1NzFDNy40OTM5MiAxLjg5MzQ5IDguNTk5NzcgMi4wMDI0MiA5LjYwNDc2IDIuNDE4N0MxMC42MDk4IDIuODM0OTggMTEuNDY4OCAzLjUzOTg3IDEyLjA3MzEgNC40NDQzNEMxMi42Nzc1IDUuMzQ4ODEgMTMgNi40MTIyIDEzIDcuNUMxMyA4Ljk1ODY5IDEyLjQyMDUgMTAuMzU3NiAxMS4zODkxIDExLjM4OUMxMC4zNTc2IDEyLjQyMDUgOC45NTg3MSAxMyA3LjUwMDAyIDEzWlwifX0se1widGFnXCI6XCJjaXJjbGVcIixcImF0dHJcIjp7XCJjeFwiOlwiNy41MDAwMlwiLFwiY3lcIjpcIjcuNVwiLFwiclwiOlwiMVwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NJdGFsaWMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOS4wMDEgMTMuNTkzbC0uMDk3LjMyNUg0bC4xMjMtLjMyNWMuNDkyLS4wMTIuODE3LS4wNTMuOTc2LS4xMjMuMjU3LS4xLjQ0OC0uMjM4LjU3LS40MTMuMTk0LS4yNzYuMzk0LS43NjguNTk5LTEuNDc3bDIuMDc0LTcuMTljLjE3Ni0uNTk3LjI2My0xLjA0OC4yNjMtMS4zNTNhLjY0My42NDMgMCAwIDAtLjExNC0uMzg3LjY4My42ODMgMCAwIDAtLjM1MS0uMjM3Yy0uMTUzLS4wNTktLjQ1NC0uMDg4LS45MDYtLjA4OEw3LjM0IDJoNC42MDVsLS4wOTYuMzI1Yy0uMzc1LS4wMDYtLjY1NC4wMzUtLjgzNS4xMjNhMS4zNTggMS4zNTggMCAwIDAtLjYwNy41MDFjLS4xMzQuMjE3LS4zMS42OTctLjUyNyAxLjQ0MmwtMi4wNjYgNy4xOWMtLjE4Ny42NjEtLjI4IDEuMDgzLS4yOCAxLjI2NSAwIC4xNDYuMDM0LjI3Mi4xMDUuMzc4LjA3Ni4xLjE5My4xNzguMzUxLjIzNy4xNjQuMDUzLjUwMS4wOTcgMS4wMTEuMTMyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NKZXJzZXkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTEuOTEgMTQuMjJINC4wNmwtLjUtLjVWNy4wNkgyLjE1bC0uNDgtLjM4TDEgNGwuMzMtLjZMNS41OSAybC42NC4zMmEyLjcgMi43IDAgMCAwIC4yMS40NGMuMDcxLjEwMy4xNTIuMi4yNC4yOS4xNjguMTY5LjM2OS4zMDIuNTkuMzlhMS44MiAxLjgyIDAgMCAwIDEuNDMgMCAxLjc0IDEuNzQgMCAwIDAgLjU5LS4zOWMuMDktLjA5NS4xNzMtLjE5NS4yNS0uM2wuMTUtLjI5YTEuMjEgMS4yMSAwIDAgMCAuMDUtLjE0bC42NC0uMzIgNC4yNiAxLjQyTDE1IDRsLS42NiAyLjY2LS40OS4zOGgtMS40NHY2LjY2bC0uNS41MnptLTcuMzUtMWg2Ljg1VjYuNTZsLjUtLjVoMS41MmwuNDYtMS44My0zLjQtMS4xNGExLjEzMiAxLjEzMiAwIDAgMS0uMTIuMjFjLS4xMS4xNjEtLjIzMy4zMTItLjM3LjQ1YTIuNzUgMi43NSAwIDAgMS0uOTEuNjEgMi44NSAyLjg1IDAgMCAxLTIuMjIgMEEyLjkyIDIuOTIgMCAwIDEgNiAzLjc1YTIuMTcgMi4xNyAwIDAgMS0uMzYtLjQ0bC0uMTMtLjIyLTMuNDMgMS4xNC40NiAxLjgzaDEuNTJsLjUuNXY2LjY2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NKc29uIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNiAyLjk4NFYyaC0uMDljLS4zMTMgMC0uNjE2LjA2Mi0uOTA5LjE4NWEyLjMzIDIuMzMgMCAwIDAtLjc3NS41MyAyLjIzIDIuMjMgMCAwIDAtLjQ5My43NTN2LjAwMWEzLjU0MiAzLjU0MiAwIDAgMC0uMTk4Ljgzdi4wMDJhNi4wOCA2LjA4IDAgMCAwLS4wMjQuODYzYy4wMTIuMjkuMDE4LjU4LjAxOC44NjkgMCAuMjAzLS4wNC4zOTMtLjExNy41NzJ2LjAwMWExLjUwNCAxLjUwNCAwIDAgMS0uNzY1Ljc4NyAxLjM3NiAxLjM3NiAwIDAgMS0uNTU4LjExNUgydi45ODRoLjA5Yy4xOTUgMCAuMzguMDQuNTU2LjEyMWwuMDAxLjAwMWMuMTc4LjA3OC4zMjkuMTg0LjQ1NS4zMThsLjAwMi4wMDJjLjEzLjEzLjIzMy4yODUuMzA3LjQ2NWwuMDAxLjAwMmMuMDc4LjE4LjExNy4zNjguMTE3LjU2NiAwIC4yOS0uMDA2LjU4LS4wMTguODY5LS4wMTIuMjk2LS4wMDQuNTg1LjAyNC44N3YuMDAxYy4wMzMuMjgzLjA5OS41NTguMTk3LjgyNHYuMDAxYy4xMDYuMjczLjI3MS41MjQuNDk0Ljc1My4yMjMuMjMuNDgyLjQwNy43NzUuNTMuMjkzLjEyMy41OTYuMTg1LjkxLjE4NUg2di0uOTg0aC0uMDljLS4yIDAtLjM4Ny0uMDM4LS41NjMtLjExNWExLjYxMyAxLjYxMyAwIDAgMS0uNDU3LS4zMiAxLjY1OSAxLjY1OSAwIDAgMS0uMzA5LS40NjdjLS4wNzQtLjE4LS4xMS0uMzctLjExLS41NzMgMC0uMjI4LjAwMy0uNDUzLjAxMS0uNjcyLjAwOC0uMjI4LjAwOC0uNDUgMC0uNjY1YTQuNjM5IDQuNjM5IDAgMCAwLS4wNTUtLjY0IDIuNjgyIDIuNjgyIDAgMCAwLS4xNjgtLjYwOUEyLjI4NCAyLjI4NCAwIDAgMCAzLjUyMiA4YTIuMjg0IDIuMjg0IDAgMCAwIC43MzgtLjk1NWMuMDgtLjE5Mi4xMzUtLjM5My4xNjgtLjYwMi4wMzMtLjIxLjA1MS0uNDIzLjA1NS0uNjQuMDA4LS4yMi4wMDgtLjQ0MiAwLS42NjYtLjAwOC0uMjI0LS4wMTItLjQ1LS4wMTItLjY3OGExLjQ3IDEuNDcgMCAwIDEgLjg3Ny0xLjM1NCAxLjMzIDEuMzMgMCAwIDEgLjU2My0uMTIxSDZ6bTQgMTAuMDMyVjE0aC4wOWMuMzEzIDAgLjYxNi0uMDYyLjkwOS0uMTg1LjI5My0uMTIzLjU1Mi0uMy43NzUtLjUzLjIyMy0uMjMuMzg4LS40OC40OTMtLjc1M3YtLjAwMWMuMS0uMjY2LjE2NS0uNTQzLjE5OC0uODN2LS4wMDJjLjAyOC0uMjguMDM2LS41NjcuMDI0LS44NjMtLjAxMi0uMjktLjAxOC0uNTgtLjAxOC0uODY5IDAtLjIwMy4wNC0uMzkzLjExNy0uNTcydi0uMDAxYTEuNTAyIDEuNTAyIDAgMCAxIC43NjUtLjc4NyAxLjM4IDEuMzggMCAwIDEgLjU1OC0uMTE1SDE0di0uOTg0aC0uMDljLS4xOTYgMC0uMzgxLS4wNC0uNTU3LS4xMjFsLS4wMDEtLjAwMWExLjM3NiAxLjM3NiAwIDAgMS0uNDU1LS4zMThsLS4wMDItLjAwMmExLjQxNSAxLjQxNSAwIDAgMS0uMzA3LS40NjV2LS4wMDJhMS40MDUgMS40MDUgMCAwIDEtLjExOC0uNTY2YzAtLjI5LjAwNi0uNTguMDE4LS44NjlhNi4xNzQgNi4xNzQgMCAwIDAtLjAyNC0uODd2LS4wMDFhMy41MzcgMy41MzcgMCAwIDAtLjE5Ny0uODI0di0uMDAxYTIuMjMgMi4yMyAwIDAgMC0uNDk0LS43NTMgMi4zMzEgMi4zMzEgMCAwIDAtLjc3NS0uNTMgMi4zMjUgMi4zMjUgMCAwIDAtLjkxLS4xODVIMTB2Ljk4NGguMDljLjIgMCAuMzg3LjAzOC41NjIuMTE1LjE3NC4wODIuMzI2LjE4OC40NTcuMzIuMTI3LjEzNC4yMy4yOS4zMDkuNDY3LjA3NC4xOC4xMS4zNy4xMS41NzMgMCAuMjI4LS4wMDMuNDUyLS4wMTEuNjcyLS4wMDguMjI4LS4wMDguNDUgMCAuNjY1LjAwNC4yMjIuMDIyLjQzNS4wNTUuNjQuMDMzLjIxNC4wODkuNDE2LjE2OC42MDlhMi4yODUgMi4yODUgMCAwIDAgLjczOC45NTUgMi4yODUgMi4yODUgMCAwIDAtLjczOC45NTUgMi42ODkgMi42ODkgMCAwIDAtLjE2OC42MDJjLS4wMzMuMjEtLjA1MS40MjMtLjA1NS42NGE5LjE1IDkuMTUgMCAwIDAgMCAuNjY2Yy4wMDguMjI0LjAxMi40NS4wMTIuNjc4YTEuNDcxIDEuNDcxIDAgMCAxLS44NzcgMS4zNTQgMS4zMyAxLjMzIDAgMCAxLS41NjMuMTIxSDEwelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NLZWJhYlZlcnRpY2FsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuNDQ0IDEzLjgzMmExIDEgMCAxIDAgMS4xMTEtMS42NjMgMSAxIDAgMCAwLTEuMTEgMS42NjJ6TTggOWExIDEgMCAxIDEgMC0yIDEgMSAwIDAgMSAwIDJ6bTAtNWExIDEgMCAxIDEgMC0yIDEgMSAwIDAgMSAwIDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0tleSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExLjM1MSAxLjA5MWE0LjUyOCA0LjUyOCAwIDAgMSAzLjQ0IDMuMTZjLjIxNS43MjQuMjQ3IDEuNDkuMDkzIDIuMjNhNC41ODMgNC41ODMgMCAwIDEtNC40MzcgMy42Yy0uNDM4IDAtLjg3NC0uMDYzLTEuMjkzLS4xOWwtLjguOTM4LS4zNzkuMTc1SDd2MS41bC0uNS41SDV2MS41bC0uNS41aC0zbC0uNS0uNXYtMi4zMDdsLjE0Ni0uMzUzTDYuMTIgNi44N2E0LjQ2NCA0LjQ2NCAwIDAgMS0uMi0xLjQwNSA0LjUyOCA0LjUyOCAwIDAgMSA1LjQzMS00LjM3NXptMS4zMTggNy4yYTMuNTY4IDMuNTY4IDAgMCAwIDEuMjM5LTIuMDA1bC4wMDQuMDA1QTMuNTQzIDMuNTQzIDAgMCAwIDkuNzIgMi4wOGEzLjU3NiAzLjU3NiAwIDAgMC0yLjggMy40Yy0uMDEuNDU2LjA3LjkwOC4yMzkgMS4zM2wtLjExLjU0M0wyIDEyLjQwNHYxLjZoMnYtMS41bC41LS41SDZ2LTEuNWwuNS0uNWgxLjI0NWwuODc2LTEuMDE2LjU2MS0uMTRhMy40NyAzLjQ3IDAgMCAwIDEuMjY5LjIzOCAzLjU2OCAzLjU2OCAwIDAgMCAyLjIxOC0uNzk1em0tLjgzOC0yLjczMmExIDEgMCAxIDAtMS42NjItMS4xMSAxIDEgMCAwIDAgMS42NjIgMS4xMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGF3IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjYzIDdMMTMgM2gxVjJIOVYxSDh2MUgzdjFoMUwyLjM4IDdIMnYxaC4xNWMuMTU2LjQ5OC40NzMuOTMuOSAxLjIzYTIuNDcgMi40NyAwIDAgMCAyLjkgMEEyLjQ0IDIuNDQgMCAwIDAgNi44NiA4SDdWN2gtLjQ1TDQuODggM0g4djhINmwtLjM5LjE4LTIgMi41MS4zOS44MWg5bC4zOS0uODEtMi0yLjUxTDExIDExSDlWM2gzLjEzbC0xLjY3IDRIMTB2MWguMTVhMi40OCAyLjQ4IDAgMCAwIDQuNzEgMEgxNVY3aC0uMzd6TTUuMjIgOC41MWExLjUyIDEuNTIgMCAwIDEtLjcyLjE5IDEuNDUgMS40NSAwIDAgMS0uNzEtLjE5QTEuNDcgMS40NyAwIDAgMSAzLjI1IDhoMi41YTEuNTIgMS41MiAwIDAgMS0uNTMuNTF6TTUuNDcgN2gtMmwxLTIuNCAxIDIuNHptNS4yOSA1TDEyIDEzLjVINUw2LjI0IDEyaDQuNTJ6bTEuNzgtNy4zOGwxIDIuNGgtMmwxLTIuNHptLjY4IDMuOTFhMS40MSAxLjQxIDAgMCAxLS43Mi4xOSAxLjM1IDEuMzUgMCAwIDEtLjcxLS4xOSAxLjU1IDEuNTUgMCAwIDEtLjU0LS41M2gyLjVhMS4zNyAxLjM3IDAgMCAxLS41My41M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGF5ZXJzQWN0aXZlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC4xODUzNSAxLjA4MzI1TDcuNjI3MDYgMS4wODcxN0wxLjcxNzk2IDUuMTI0MjJMMS43MjE1MiA1Ljk1MjMzTDcuNjMwNjIgOS45MTUyOEw4LjE4MTggOS45MTkxMkwxNC4yNzI3IDUuOTU2MTdMMTQuMjc2MiA1LjEyMDNMOC4xODUzNSAxLjA4MzI1Wk0yLjg5MTk4IDUuNTMzMjNMNy45MTMzNSAyLjEwMjY4TDEzLjA4OTEgNS41MzMyTDcuOTEzMjkgOC45MDA3OUwyLjg5MTk4IDUuNTMzMjNaTTcuNjMwNTkgMTIuNDE1M0wxLjc5MjU3IDguNUgzLjU4Nzk0TDcuOTEzMjYgMTEuNDAwOEwxMi4zNzE2IDguNUgxNC4yMDUzTDEzLjQwNTYgOS4wMjAzMUMxMy4yNzIyIDkuMDA2ODggMTMuMTM2OSA5IDEzIDlDMTEuMjI0IDkgOS43MTgzOSAxMC4xNTc0IDkuMTk2MjIgMTEuNzU5MUw4LjE4MTc3IDEyLjQxOTFMNy42MzA1OSAxMi40MTUzWk05LjAwNDQ3IDEzLjE5MDhMNy45MTMyNiAxMy45MDA4TDMuNTg3OTQgMTFIMS43OTI1N0w3LjYzMDU5IDE0LjkxNTNMOC4xODE3NyAxNC45MTkxTDkuMjAxMTMgMTQuMjU1OUM5LjA4OTY1IDEzLjkxODUgOS4wMjE4NyAxMy41NjEyIDkuMDA0NDcgMTMuMTkwOFpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExLjMzMzMgMTAuNTA1NkMxMS44MjY2IDEwLjE3NTkgMTIuNDA2NyAxMCAxMyAxMEMxMy43OTU0IDEwLjAwMSAxNC41NTc4IDEwLjMxNzQgMTUuMTIwMiAxMC44Nzk4QzE1LjY4MjYgMTEuNDQyMiAxNS45OTkgMTIuMjA0NiAxNiAxM0MxNiAxMy41OTMzIDE1LjgyNDEgMTQuMTczNCAxNS40OTQ0IDE0LjY2NjdDMTUuMTY0OCAxNS4xNjAxIDE0LjY5NjIgMTUuNTQ0NiAxNC4xNDgxIDE1Ljc3MTZDMTMuNTk5OSAxNS45OTg3IDEyLjk5NjcgMTYuMDU4MSAxMi40MTQ3IDE1Ljk0MjRDMTEuODMyOCAxNS44MjY2IDExLjI5ODIgMTUuNTQwOSAxMC44Nzg3IDE1LjEyMTNDMTAuNDU5MSAxNC43MDE4IDEwLjE3MzQgMTQuMTY3MiAxMC4wNTc2IDEzLjU4NTNDOS45NDE4OSAxMy4wMDMzIDEwLjAwMTMgMTIuNDAwMSAxMC4yMjg0IDExLjg1MTlDMTAuNDU1NCAxMS4zMDM4IDEwLjgzOTkgMTAuODM1MiAxMS4zMzMzIDEwLjUwNTZaTTEzLjAzMTUgMTQuMzIyNkwxNC44MjEzIDExLjkzNjNMMTQuMDIxMyAxMS4zMzYzTDEyLjU0MSAxMy4zMDk5TDExLjY2NTUgMTIuNjA5NUwxMS4wNDA4IDEzLjM5MDNMMTIuMzE5MiAxNC40MTNMMTMuMDMxNSAxNC4zMjI2WlwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMYXllcnNEb3QgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjE4NTM1IDEuMDgzMjVMNy42MjcwNiAxLjA4NzE3TDEuNzE3OTYgNS4xMjQyMkwxLjcyMTUyIDUuOTUyMzNMNy42MzA2MiA5LjkxNTI4TDguMTgxOCA5LjkxOTEyTDE0LjI3MjcgNS45NTYxN0wxNC4yNzYyIDUuMTIwM0w4LjE4NTM1IDEuMDgzMjVaTTIuODkxOTggNS41MzMyM0w3LjkxMzM1IDIuMTAyNjhMMTMuMDg5MSA1LjUzMzJMNy45MTMyOSA4LjkwMDc5TDIuODkxOTggNS41MzMyM1pNNy42MzA1OSAxMi40MTUzTDEuNzkyNTcgOC41SDMuNTg3OTRMNy45MTMyNiAxMS40MDA4TDEyLjM3MTYgOC41SDE0LjIwNTNMMTMuNDA1NiA5LjAyMDMxQzEzLjI3MjIgOS4wMDY4OCAxMy4xMzY5IDkgMTMgOUMxMS4yMjQgOSA5LjcxODM5IDEwLjE1NzQgOS4xOTYyMiAxMS43NTkxTDguMTgxNzcgMTIuNDE5MUw3LjYzMDU5IDEyLjQxNTNaTTkuMDA0NDcgMTMuMTkwOEw3LjkxMzI2IDEzLjkwMDhMMy41ODc5NCAxMUgxLjc5MjU3TDcuNjMwNTkgMTQuOTE1M0w4LjE4MTc3IDE0LjkxOTFMOS4yMDExMyAxNC4yNTU5QzkuMDg5NjUgMTMuOTE4NSA5LjAyMTg3IDEzLjU2MTIgOS4wMDQ0NyAxMy4xOTA4WlwifX0se1widGFnXCI6XCJjaXJjbGVcIixcImF0dHJcIjp7XCJjeFwiOlwiMTNcIixcImN5XCI6XCIxM1wiLFwiclwiOlwiM1wifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMYXllcnMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjYyNzA2IDEuMDg3MTdMOC4xODUzNSAxLjA4MzI1TDE0LjI3NjIgNS4xMjAzTDE0LjI3MjcgNS45NTYxN0w4LjE4MTggOS45MTkxMkw3LjYzMDYyIDkuOTE1MjhMMS43MjE1MiA1Ljk1MjMzTDEuNzE3OTYgNS4xMjQyMkw3LjYyNzA2IDEuMDg3MTdaTTcuOTEzMzUgMi4xMDI2OEwyLjg5MTk4IDUuNTMzMjNMNy45MTMyOSA4LjkwMDc5TDEzLjA4OTEgNS41MzMyTDcuOTEzMzUgMi4xMDI2OFpNMS43OTI1NyA4LjVMNy42MzA1OSAxMi40MTUzTDguMTgxNzcgMTIuNDE5MUwxNC4yMDUzIDguNUgxMi4zNzE2TDcuOTEzMjYgMTEuNDAwOEwzLjU4Nzk0IDguNUgxLjc5MjU3Wk03LjYzMDU5IDE0LjkxNTNMMS43OTI1NyAxMUgzLjU4Nzk0TDcuOTEzMjYgMTMuOTAwOEwxMi4zNzE2IDExSDE0LjIwNTNMOC4xODE3NyAxNC45MTkxTDcuNjMwNTkgMTQuOTE1M1pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlicmFyeSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUgMi41bC41LS41aDJsLjUuNXYxMWwtLjUuNWgtMmwtLjUtLjV2LTExek02IDN2MTBoMVYzSDZ6bTMuMTcxLjM0NWwuMjk5LS42NDEgMS44OC0uNjg0LjY0LjI5OSAzLjc2MiAxMC4zMzYtLjI5OS42NDEtMS44NzkuNjg0LS42NC0uMjk5TDkuMTcgMy4zNDV6bTEuMTEuMTI4bDMuNDIgOS4zOTYuOTQtLjM0MS0zLjQyLTkuMzk3LS45NC4zNDJ6TTEgMi41bC41LS41aDJsLjUuNXYxMWwtLjUuNWgtMmwtLjUtLjV2LTExek0yIDN2MTBoMVYzSDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0xpZ2h0YnVsYkF1dG9maXggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTIgOWEzIDMgMCAxIDAgMCA2IDMgMyAwIDAgMCAwLTZ6bTEuMzEgNUwxMiAxM2wtMS4zIDEgLjUtMS41My0xLjItLjgzaDEuNDdMMTIgMTBsLjU0IDEuNjRIMTRsLTEuMi44My41MSAxLjUzelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTEuMTcgOC4wODVBMy45NzkgMy45NzkgMCAwIDAgOC4yODggMTAuNUg2LjQwOXYyLjIwMWMwIC4wODEuMDI4LjE1LjA5LjIxMmEuMjkuMjkgMCAwIDAgLjIxMy4wOWgxLjQxM2MuMDg5LjM0OC4yMjMuNjc4LjM5Ni45ODItLjA2Ni4wMS0uMTM0LjAxNS0uMjAzLjAxNUg2LjcxMmExLjI4NSAxLjI4NSAwIDAgMS0uOTIyLS4zNzkgMS4zMDMgMS4zMDMgMCAwIDEtLjM4LS45MnYtMS42YzAtLjQ3OS0uMDkyLS45MjEtLjI3NC0xLjMyOWEzLjU1NiAzLjU1NiAwIDAgMC0uNzc2LTEuMTE0IDQuNjg5IDQuNjg5IDAgMCAxLTEuMDA2LTEuNDM3QTQuMTg3IDQuMTg3IDAgMCAxIDMgNS41YTQuNDMyIDQuNDMyIDAgMCAxIC42MTYtMi4yN2MuMTk3LS4zMzYuNDMyLS42NC43MDUtLjkxNGE0LjYgNC42IDAgMCAxIC45MTEtLjcwMmMuMzM4LS4xOTYuNy0uMzQ4IDEuMDg0LS40NTRhNC40NSA0LjQ1IDAgMCAxIDEuMi0uMTYgNC40NzYgNC40NzYgMCAwIDEgMi4yNzYuNjE0IDQuNDc1IDQuNDc1IDAgMCAxIDEuNjIyIDEuNjE2IDQuNDM4IDQuNDM4IDAgMCAxIC42MTYgMi4yN2MwIC42MTctLjExNyAxLjE5MS0uMzUzIDEuNzIxYTQuNTM3IDQuNTM3IDAgMCAxLS41MDYuODY0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMaWdodGJ1bGIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS42NyA4LjY1OGEzLjY2MSAzLjY2MSAwIDAgMC0uNzgxIDEuMTE0IDMuMjggMy4yOCAwIDAgMC0uMjY4IDEuMzI5djEuNmExLjMwNCAxLjMwNCAwIDAgMS0uNzk0IDEuMTk3IDEuMjgyIDEuMjgyIDAgMCAxLS41MDkuMTAySDcuNzEyYTEuMjg1IDEuMjg1IDAgMCAxLS45MjItLjM3OSAxLjMwMyAxLjMwMyAwIDAgMS0uMzgtLjkydi0xLjZjMC0uNDc5LS4wOTItLjkyMS0uMjc0LTEuMzI5YTMuNTU2IDMuNTU2IDAgMCAwLS43NzYtMS4xMTQgNC42ODkgNC42ODkgMCAwIDEtMS4wMDYtMS40MzdBNC4xODcgNC4xODcgMCAwIDEgNCA1LjVhNC40MzIgNC40MzIgMCAwIDEgLjYxNi0yLjI3Yy4xOTctLjMzNi40MzItLjY0LjcwNS0uOTE0YTQuNiA0LjYgMCAwIDEgLjkxMS0uNzAyYy4zMzgtLjE5Ni43LS4zNDggMS4wODQtLjQ1NGE0LjQ1IDQuNDUgMCAwIDEgMS4yLS4xNiA0LjQ3NiA0LjQ3NiAwIDAgMSAyLjI3Ni42MTQgNC40NzUgNC40NzUgMCAwIDEgMS42MjIgMS42MTYgNC40MzggNC40MzggMCAwIDEgLjYxNiAyLjI3YzAgLjYxNy0uMTE3IDEuMTkxLS4zNTMgMS43MjFhNC42OSA0LjY5IDAgMCAxLTEuMDA2IDEuNDM3ek05LjYyMyAxMC41SDcuNDA5djIuMjAxYzAgLjA4MS4wMjguMTUuMDkuMjEyYS4yOS4yOSAwIDAgMCAuMjEzLjA5aDEuNjA2YS4yODkuMjg5IDAgMCAwIC4yMTMtLjA5LjI4Ni4yODYgMCAwIDAgLjA5LS4yMTJWMTAuNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlua0V4dGVybmFsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEuNSAxSDZ2MUgydjEyaDEydi00aDF2NC41bC0uNS41aC0xM2wtLjUtLjV2LTEzbC41LS41elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE1IDEuNVY4aC0xVjIuNzA3TDcuMjQzIDkuNDY1bC0uNzA3LS43MDhMMTMuMjkzIDJIOFYxaDYuNWwuNS41elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMaW5rIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNC40IDNoMy4wODVhMy40IDMuNCAwIDAgMSAzLjQgMy40di4yMDVBMy40IDMuNCAwIDAgMSA3LjQ4NSAxMEg3VjloLjQ4NUEyLjQgMi40IDAgMCAwIDkuODggNi42MVY2LjRBMi40IDIuNCAwIDAgMCA3LjQ5IDRINC40QTIuNCAyLjQgMCAwIDAgMiA2LjR2LjIwNUEyLjM5NCAyLjM5NCAwIDAgMCA0IDguOTZ2MWEzLjQgMy40IDAgMCAxLTMtMy4zNVY2LjRBMy40MDUgMy40MDUgMCAwIDEgNC40IDN6TTEyIDcuMDR2LTFhMy40IDMuNCAwIDAgMSAzIDMuMzZ2LjIwNUEzLjQwNSAzLjQwNSAwIDAgMSAxMS42MDUgMTNoLTMuMDlBMy40IDMuNCAwIDAgMSA1LjEyIDkuNjFWOS40QTMuNCAzLjQgMCAwIDEgOC41MTUgNkg5djFoLS40ODVBMi40IDIuNCAwIDAgMCA2LjEyIDkuNHYuMjA1QTIuNCAyLjQgMCAwIDAgOC41MTUgMTJoMy4wOUEyLjQgMi40IDAgMCAwIDE0IDkuNjFWOS40YTIuMzk0IDIuMzk0IDAgMCAwLTItMi4zNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlzdEZpbHRlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk02IDEydi0xaDR2MUg2ek00IDdoOHYxSDRWN3ptMTAtNHYxSDJWM2gxMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlzdEZsYXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMiAxMFY5aDEydjFIMnptMC00aDEydjFIMlY2em0xMi0zdjFIMlYzaDEyek0yIDEydjFoMTJ2LTFIMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlzdE9yZGVyZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yLjI4NyAyLjMyNkwyLjY5MiAyaC42Nzd2M2gtLjcwOFYyLjc5MmwtLjM3NC4yODF2LS43NDd6TTUgM2gxMHYxSDVWM3ptMCA0aDEwdjFINVY3em0xMCA0SDV2MWgxMHYtMXpNMy43NDIgNy42MjZsLjAyOS0uMDM5LjA2NS0uMDlhLjg0Ljg0IDAgMCAwIC4xNTYtLjUwN2MwLS4xMi0uMDItLjI0LS4wNTctLjM1NGEuODQ4Ljg0OCAwIDAgMC0uNDkyLS41MjkgMS4xMjMgMS4xMjMgMCAwIDAtLjQ1Mi0uMDgyIDEuMDk0IDEuMDk0IDAgMCAwLS40NTguMDg3Ljg2Ny44NjcgMCAwIDAtLjQ3OS41MjJBMS4wMzggMS4wMzggMCAwIDAgMiA2Ljk1N3YuMDVoLjgxdi0uMDVhLjMuMyAwIDAgMSAuMDQ2LS4xNTcuMTc0LjE3NCAwIDAgMSAuMDU3LS4wNTQuMTkuMTkgMCAwIDEgLjE3MiAwIC4xODguMTg4IDAgMCAxIC4wNTYuMDYuMjQuMjQgMCAwIDEgLjAzMS4wODEuNDQ1LjQ0NSAwIDAgMS0uMDM2LjI5IDEuMzA5IDEuMzA5IDAgMCAxLS4xMi4xODJsLTEgMS4xMzgtLjAxMi4wMTN2LjU0aDEuOTg4di0uN2gtLjlsLjY1LS43MjR6bS0uMDM3IDMuODE3Yy4wNDYuMDMyLjA4Ni4wNy4xMi4xMTRhLjg0MS44NDEgMCAwIDEgLjE2Ny41NWMwIC4xMDctLjAxNy4yMTMtLjA1LjMxNGEuNzkyLjc5MiAwIDAgMS0uNDg3LjUgMS4yODggMS4yODggMCAwIDEtLjQ4LjA3OWMtLjExNSAwLS4yMy0uMDE2LS4zNDEtLjA0OWEuOTQuOTQgMCAwIDEtLjI1OC0uMTIzLjc1MS43NTEgMCAwIDEtLjE4Mi0uMTc3IDEuMDYzIDEuMDYzIDAgMCAxLS4xMTYtLjJBMS4wMzggMS4wMzggMCAwIDEgMiAxMi4wNzh2LS4wNDloLjgxNHYuMDQ5YzAgLjAyNy4wMDMuMDU1LjAwOS4wODJhLjIwNy4yMDcgMCAwIDAgLjAzLjA3NC4xNC4xNCAwIDAgMCAuMDUzLjA1Mi4yLjIgMCAwIDAgLjE1Ny4wMDguMTU5LjE1OSAwIDAgMCAuMDU2LS4wMzkuMjIuMjIgMCAwIDAgLjA0Mi0uMDc1LjQxNy40MTcgMCAwIDAgLjAxNy0uMTI2LjQ4My40ODMgMCAwIDAtLjAyMi0uMTYzLjIuMiAwIDAgMC0uMDUxLS4wOC4xMzguMTM4IDAgMCAwLS4wNi0uMDI5LjUzNy41MzcgMCAwIDAtLjA3Ny0uMDA3aC0uMTYxdi0uNjQ1aC4xNjhhLjI0MS4yNDEgMCAwIDAgLjA2OS0uMDExLjE2NC4xNjQgMCAwIDAgLjA2NS0uMDM0LjE3NS4xNzUgMCAwIDAgLjA0OC0uMDY3LjI4Ni4yODYgMCAwIDAgLjAyMS0uMTIxLjI4LjI4IDAgMCAwLS4wMTYtLjEuMTY2LjE2NiAwIDAgMC0uMDk3LS4wOTkuMi4yIDAgMCAwLS4xNTYuMDA3LjE2NC4xNjQgMCAwIDAtLjA1NS4wNTMuMzQ0LjM0NCAwIDAgMC0uMDQuMTU2di4wNDlIMnYtLjA0OWEuOTg3Ljk4NyAwIDAgMSAuMTgtLjU0NC44LjggMCAwIDEgLjE3OS0uMTg2Ljg3Ljg3IDAgMCAxIC4yNjItLjEzM2MuMTE0LS4wMzYuMjM0LS4wNTMuMzU0LS4wNTEuMTE2LS4wMDEuMjMxLjAxLjM0NC4wMzYuMDkyLjAyMS4xOC4wNTUuMjYzLjFhLjc1Ny43NTcgMCAwIDEgLjMyLjMxOC43My43MyAwIDAgMSAuMDkuMzQ3LjgxLjgxIDAgMCAxLS4xNjcuNTI4LjU2Mi41NjIgMCAwIDEtLjEyLjExNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGlzdFNlbGVjdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xIDEydi0xaDl2MUgxem0wLTVoMTR2MUgxVjd6bTExLTR2MUgxVjNoMTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0xpc3RUcmVlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0IDN2MUgyVjNoMTJ6bS0xIDN2MUg2VjZoN3ptMCAzdjFINVY5aDh6bTAgM3YxSDV2LTFoOHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk01IDRoMXY5SDV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY0xpc3RVbm9yZGVyZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDNIMXYxaDFWM3ptMCAzSDF2MWgxVjZ6TTEgOWgxdjFIMVY5em0xIDNIMXYxaDF2LTF6bTItOWgxMXYxSDRWM3ptMTEgM0g0djFoMTFWNnpNNCA5aDExdjFINFY5em0xMSAzSDR2MWgxMXYtMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTGl2ZVNoYXJlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAyNCAyNFwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTMuNzM1IDEuNjk0TDE1LjE3OCAxbDguMDI5IDYuMzI4djEuMzg4bC04LjAyOSA2LjA3Mi0xLjQ0My0uNjk0di0yLjc3NmgtLjU5Yy00LjA2LS4wMi02LjcxLjEwNC0xMC42MSA1LjE2M2wtMS41MzQtLjQ5M2E4LjIzIDguMjMgMCAwIDEgLjI3MS0yLjI1NSAxMS4wMjYgMTEuMDI2IDAgMCAxIDMuOTItNi43OTMgMTEuMzM5IDExLjMzOSAwIDAgMSA3LjUwMi0yLjU0N2gxLjA0di0yLjd6bTEuODA0IDcuOTE3djIuNzc2bDUuNjc2LTQuMjgxLTUuNjQ4LTQuNTQ1djIuNjY0aC0yLjg2QTkuMjk5IDkuMjk5IDAgMCAwIDUuNzcgOC44NDhhMTAuNDQ0IDEwLjQ0NCAwIDAgMC0yLjQwMSA0LjEyMmMzLjM1MS0zLjIxMyA2LjE5LTMuMzU5IDkuNzk4LTMuMzU5aDIuMzczem0tNy42NDcgNS44OTZhNC4zMSA0LjMxIDAgMSAxIDQuNzg4IDcuMTY2IDQuMzEgNC4zMSAwIDAgMS00Ljc4OC03LjE2NnptLjk1NSA1LjcyOGEyLjU4OCAyLjU4OCAwIDEgMCAyLjg3OC00LjMwMiAyLjU4OCAyLjU4OCAwIDAgMC0yLjg3OCA0LjMwMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTG9hZGluZyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjkxNyA3QTYuMDAyIDYuMDAyIDAgMCAwIDIuMDgzIDdIMS4wNzFhNy4wMDIgNy4wMDIgMCAwIDEgMTMuODU4IDBoLTEuMDEyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMb2NhdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEwLjgzMiAyLjY4OEE0LjA1NiA0LjA1NiAwIDAgMCA4LjAyIDEuNWgtLjA0YTQuMDU2IDQuMDU2IDAgMCAwLTQgNGMtLjAxMy43NS4xOTggMS40ODcuNjA2IDIuMTE3TDcuNzM0IDE0aC41MzNsMy4xNDctNi4zODNjLjQwOS0uNjMuNjItMS4zNjcuNjA2LTIuMTE3YTQuMDU2IDQuMDU2IDAgMCAwLTEuMTg4LTIuODEyek03LjkyNSAyLjVsLjA4Mi4wMS4wNzQtLjAxYTMuMDc1IDMuMDc1IDAgMCAxIDIuOTQxIDMuMDM3IDIuNzQgMi43NCAwIDAgMS0uNDY3IDEuNTY4bC0uMDIuMDM0LS4wMTcuMDM1TDggMTIuMjc5bC0yLjUxNy01LjEtLjAxNy0uMDM5LS4wMi0uMDM0YTIuNzQgMi43NCAwIDAgMS0uNDY3LTEuNTY4QTMuMDc0IDMuMDc0IDAgMCAxIDcuOTI0IDIuNXptLjYxMiAyLjE2OWExIDEgMCAxIDAtMS4xMTIgMS42NjMgMSAxIDAgMCAwIDEuMTEyLTEuNjYzek02Ljg3IDMuODM3YTIgMiAwIDEgMSAyLjIyIDMuMzI2IDIgMiAwIDAgMS0yLjIyLTMuMzI2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NMb2NrIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEzIDdoLTFWNWE0IDQgMCAxIDAtOCAwdjJIM0wyIDh2NmwxIDFoMTBsMS0xVjhsLTEtMXpNNSA1YTMgMyAwIDEgMSA2IDB2Mkg1VjV6bTggOUgzVjhoMTB2NnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWFnbmV0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTggMS41Yy0zLjkgMC03IDMuMS03IDd2NWwxIDFoM2wxLTF2LTVjMC0xLjEuOS0yIDItMnMyIC45IDIgMnY1bDEgMWgzbDEtMXYtNWMwLTMuOS0zLjEtNy03LTd6bS0zIDEySDJ2LTNoM3Yzem05IDBoLTN2LTNoM3Yzem0tMy00di0xYzAtMS43LTEuMy0zLTMtMy0xLjYgMC0yLjkgMS4zLTMgMi44djEuMkgydi0xYzAtMy4zIDIuNy02IDYtNnM2IDIuNyA2IDZ2MWgtM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWFpbFJlYWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOC4yNSAxLjU3aC0uNTFMMSA1LjU2djcuOTRsLjUuNWgxM2wuNS0uNVY1LjU2TDguMjUgMS41N3pNOCAyLjU4bDUuNjMgMy4zMi0xLjM3IDEuNTlIMy43NEwyLjQzIDUuOSA4IDIuNTh6TTE0IDEzSDJWNi45MkwzLjExIDguM2wuMzkuMTloOWwuMzktLjE5TDE0IDYuOTJWMTN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY01haWwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDMuNWwuNS0uNWgxM2wuNS41djlsLS41LjVoLTEzbC0uNS0uNXYtOXptMSAxLjAzNVYxMmgxMlY0LjUzNkw4LjMxIDguOUg3LjdMMiA0LjUzNXpNMTMuMDMgNEgyLjk3TDggNy44NjkgMTMuMDMgNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWFya2Rvd24gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNi4zNDUgNWgyLjF2Ni41MzNINi45OTNsLjA1NS01LjMxLTEuNzc0IDUuMzFINC4wNzJsLTEuODA1LTUuMzFjLjA0LjY0NC4wNiA1LjMxLjA2IDUuMzFIMVY1aDIuMTU2czEuNTI4IDQuNDkzIDEuNTc3IDQuODA3TDYuMzQ1IDV6bTYuNzEgMy42MTd2LTMuNUgxMS4xMXYzLjVIOS4xNjZsMi45MTcgMi45MTZMMTUgOC42MTdoLTEuOTQ1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NNZWdhcGhvbmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDYuNzdsMTIuMzMtMy40My42Ny41M3Y4LjZsLS42Ny41My02LjA4OS0xLjU5NWEyLjE2IDIuMTYgMCAxIDEtNC4xNzgtMS4wOTVMMiA5Ljc3bC0uNDItLjUzVjcuM0wyIDYuNzd6bTMuMDA2IDMuNzg3YTEuMTMgMS4xMyAwIDAgMC0uMDQuMjQyIDEuMTcgMS4xNyAwIDAgMCAyLjI4OC4zNDdsLTIuMjQ4LS41ODl6TTIuNTggOC44MkwxNCAxMS44M1Y0LjVMMi41OCA3LjcydjEuMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWVudGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMC40NjUgMTIuMzZhNS41MTYgNS41MTYgMCAwIDEtMy4wNTMuNzM2IDQuMjYyIDQuMjYyIDAgMCAxLTQuNTctNC41NDMgNS4zODEgNS4zODEgMCAwIDEgNS4zOTEtNS41NzFjMi4zNzcgMCA0LjQxMyAxLjM3NSA0LjQxMyA0LjAwNiAwIDIuMTgyLTEuMjkyIDMuNjYtMi45IDMuNjYtLjY3NiAwLTEuMS0uMjc0LTEuMTI2LS45MTdhMi4wMTIgMi4wMTIgMCAwIDEtMS43NTYuOTEzYy0uOTY5IDAtMS42MjktLjY0NS0xLjYyOS0xLjkyMyAwLTEuNzYzIDEuMTQ4LTMuNCAyLjYyLTMuNGExLjMxNCAxLjMxNCAwIDAgMSAxLjQyNy45M2wuMjExLS44MDloLjlMOS42IDguNjQ2Yy0uMjI2LjkxNi0uMTMgMS4yMTUuMzQyIDEuMjE1Ljk4NCAwIDEuODMzLTEuMjEgMS44MzMtMi44MjUgMC0yLjA2OC0xLjQ0NS0zLjI2NS0zLjYxLTMuMjY1LTIuNjQzIDAtNC4zNzQgMi4xMzItNC4zODIgNC43ODZhMy40NDMgMy40NDMgMCAwIDAgMy42ODYgMy43MTdjLjk3My4wNCAxLjk0LS4xNzkgMi44LS42MzRsLjE5Ni43MnpNNi4yMTcgOC42MzljMCAuNzg4LjMwNyAxLjIwNi45MTMgMS4yMDYuNzU4IDAgMS4zOC0uNiAxLjY4My0xLjgzMUM5LjEzNiA2Ljc0NiA4Ljg1IDYuMSA3Ljk0IDYuMWMtMS4wNCAwLTEuNzIzIDEuMzM5LTEuNzIzIDIuNTM5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NNZW51IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE2IDVIMFY0aDE2djF6bTAgOEgwdi0xaDE2djF6bTAtNC4wMDhIMFY4aDE2di45OTJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY01lcmdlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAuNSA0LjY0Nkw4LjM1NCAyLjVoLS43MDdMNS41IDQuNjQ2bC43MDcuNzA3TDcuMyA0LjI2MVY1LjI4aC0uMDJ2LjQ1NmwuMDI1LjAwMS4wMDYuMzE5Yy4wMDQuMTg3LjAyLjM3OS4wNS41NzQuMDMuMTk1LjA2OS4zOS4xMTcuNTg2LjA0OC4xOTUuMTE0LjQwNC4yLjYyNy4xNTUuMzc5LjM0My43MjIuNTY1IDEuMDMxLjIyMS4zMDkuNDYuNTk4LjcxNS44NjcuMjU1LjI3LjUwOC41MzUuNzYuNzk3LjI1LjI2Mi40NzguNTQxLjY4MS44MzguMjAzLjI5Ny4zNjguNjIxLjQ5NC45NzMuMTI1LjM1MS4xODguNzU1LjE4OCAxLjIxM3YuODg0SDEyLjV2LS44ODRhNS45OTEgNS45OTEgMCAwIDAtLjE2Ni0xLjM5IDQuNjM4IDQuNjM4IDAgMCAwLS40MjctMS4xIDUuODc1IDUuODc1IDAgMCAwLS42MDQtLjg5N2MtLjIyMi0uMjctLjQ1My0uNTI3LS42OTMtLjc3NC0uMjQtLjI0Ni0uNDcxLS40OTItLjY5My0uNzM4YTYuMzkgNi4zOSAwIDAgMS0uNjA0LS43ODUgMy43OTQgMy43OTQgMCAwIDEtLjQzMy0uOTE0IDMuNjc2IDMuNjc2IDAgMCAxLS4xNi0xLjEzVjUuMjhoLS4wMDF2LTFsMS4wNzQgMS4wNzQuNzA3LS43MDh6TTcuMDQyIDkuNzQxYTguMTkgOC4xOSAwIDAgMCAuMzI5LS4zNjkgNi4wNiA2LjA2IDAgMCAxLS42Mi0xLjE1TDYuNzQ0IDguMmE3LjI2IDcuMjYgMCAwIDEtLjA5NS0uMjYzYy0uMTcuMjU2LS4zNTkuNDk4LS41NjUuNzI2LS4yMjIuMjQ2LS40NTMuNDkyLS42OTMuNzM4LS4yNC4yNDctLjQ3LjUwNC0uNjkzLjc3NC0uMjIxLjI3LS40MjMuNTY4LS42MDQuODk2YTQuNjQzIDQuNjQzIDAgMCAwLS40MjcgMS4xMDIgNS45OTUgNS45OTUgMCAwIDAtLjE2NiAxLjM4OXYuODg0aDEuNDJ2LS44ODRjMC0uNDU3LjA2Mi0uODYyLjE4OC0xLjIxMy4xMjUtLjM1Mi4yOS0uNjc2LjQ5My0uOTczLjIwMy0uMjk3LjQzLS41NzYuNjgyLS44MzguMjUxLS4yNjIuNTA0LS41MjcuNzYtLjc5N3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWlsZXN0b25lIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOCAxSDd2MkgxLjVsLS41LjV2NGwuNS41SDd2N2gxVjhoNC40OWwuMzQtLjEzIDIuMTgtMnYtLjc0bC0yLjE4LTJMMTIuNSAzSDhWMXptNC4yOSA2SDJWNGgxMC4yOWwxLjYzIDEuNUwxMi4yOSA3ek01IDVoNXYxSDVWNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTWlycm9yIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC41NyAxbDYuMiA0IC4yMy4zOHY5LjJsLS43Ni40Mkw4IDExbC02LjI0IDQtLjc2LS40MnYtOS4yTDEuMjMgNWw2LjItNGgxLjE0em0tLjA2IDkuMTNMMTQgMTMuNjdWNS42NWwtNS40OS0zLjVWNWgtMVYyLjEzTDIgNS42N3Y4bDUuNTEtMy41NnYuMDJoMXptLjktNC43OGwuNzEtLjcgMi40NyAyLjQ4di43MWwtMi40NiAyLjQ2LS43LS43TDExLjAyIDhoLTZMNi42IDkuNmwtLjcuNy0yLjQ2LTIuNDZ2LS43MWwyLjQ4LTIuNDguNy43TDQuOTggN2g2LjA4TDkuNDEgNS4zNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTW9ydGFyQm9hcmQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUgNS42Nkw4LjE4IDNoLS4zNkwxIDUuNjZWMTJoMVY3bDIuMzEuOWE0LjM1IDQuMzUgMCAwIDAtLjc5IDIuNDhjLS4wMS4xMS0uMDEuMjIgMCAuMzN2LjExbC4yOC40TDcuNzggMTNoLjQxbDMuOTQtMS44MS4yOC0uNHYtLjQ0YTQuMzkgNC4zOSAwIDAgMC0uNzgtMi40N0wxNSA2LjU3di0uOTF6bS0zLjUyIDQuNjh2LjA3TDggMTJsLTMuNS0xLjZhLjEzLjEzIDAgMCAxIDAtLjA2IDMuNDQgMy40NCAwIDAgMSAuNzUtMi4xMmwyLjU4IDFoLjM2bDIuNTYtMWEzLjQgMy40IDAgMCAxIC43MyAyLjEyek04IDguMjVMMi41MiA2LjEyIDggNGw1LjQ4IDIuMTRMOCA4LjI1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NNb3ZlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAuMjMyIDEwLjcwN0w4LjUgMTIuNDRWOWgtMXYzLjQ0bC0xLjczMi0xLjczMy0uNzA3LjcwN0w3LjY0NiAxNGguNzA4bDIuNTg1LTIuNTg2LS43MDctLjcwN3pNNS4wNjEgMy41ODZsLjcwNy43MDdMNy41IDIuNTZWNmgxVjIuNTZsMS43MzIgMS43MzMuNzA3LS43MDdMOC4zNTQgMWgtLjcwOEw1LjA2MSAzLjU4NnptLS4yNjggMS42ODJMMy4wNiA3SDYuNXYxSDMuMDZsMS43MzMgMS43MzItLjcwNy43MDdMMS41IDcuODU0di0uNzA4bDIuNTg2LTIuNTg1LjcwNy43MDd6TTkuNSA3aDMuNDRsLTEuNzMzLTEuNzMyLjcwNy0uNzA3TDE0LjUgNy4xNDZ2LjcwOGwtMi41ODYgMi41ODUtLjcwNy0uNzA3TDEyLjk0IDhIOS41Vjd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY011bHRpcGxlV2luZG93cyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTYgMS41bC41LS41aDhsLjUuNXY3bC0uNS41SDEyVjhoMlY0SDd2MUg2VjEuNXpNNyAydjFoN1YySDd6TTEuNSA3bC0uNS41djdsLjUuNWg4bC41LS41di03TDkuNSA3aC04ek0yIDlWOGg3djFIMnptMCAxaDd2NEgydi00elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NNdXRlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDVoMi43OWwzLjg2LTMuODMuODUuMzV2MTNsLS44NS4zM0w0LjI5IDExSDEuNWwtLjUtLjV2LTVsLjUtLjV6bTMuMzUgNS4xN0w4IDEzLjMxVjIuNzNMNC44NSA1Ljg1IDQuNSA2SDJ2NGgyLjVsLjM1LjE3em05LjM4MS00LjEwOGwuNzA3LjcwN0wxMy4yMDcgOC41bDEuNzMxIDEuNzMyLS43MDcuNzA3TDEyLjUgOS4yMDdsLTEuNzMyIDEuNzMyLS43MDctLjcwN0wxMS43OTMgOC41IDEwLjA2IDYuNzdsLjcwNy0uNzA3IDEuNzMzIDEuNzMgMS43MzEtMS43MzF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY05ld0ZpbGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk05LjUgMS4xbDMuNCAzLjUuMS40djJoLTFWNkg4VjJIM3YxMWg0djFIMi41bC0uNS0uNXYtMTJsLjUtLjVoNi43bC4zLjF6TTkgMnYzaDIuOUw5IDJ6bTQgMTRoLTF2LTNIOXYtMWgzVjloMXYzaDN2MWgtM3YzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NOZXdGb2xkZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC41IDJINy43MWwtLjg1LS44NUw2LjUxIDFoLTVsLS41LjV2MTFsLjUuNUg3di0xSDEuOTlWNmg0LjQ5bC4zNS0uMTUuODYtLjg2SDE0djEuNWwtLjAwMS41MWgxLjAxMVYyLjVMMTQuNSAyem0tLjUxIDJoLTYuNWwtLjM1LjE1LS44Ni44Nkgydi0zaDQuMjlsLjg1Ljg1LjM2LjE1SDE0bC0uMDEuOTl6TTEzIDE2aC0xdi0zSDl2LTFoM1Y5aDF2M2gzdjFoLTN2M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTm9OZXdsaW5lIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMi4zMzMgNS41MDZhMyAzIDAgMSAxIDMuMzM0IDQuOTg5IDMgMyAwIDAgMS0zLjMzNC00Ljk5em0yLjY3Ny43NzdBMS45ODYgMS45ODYgMCAwIDAgMiA4LjAwOWMuMDA0LjM1My4xMDIuNjk4LjI4MyAxLjAwMUw1LjAxIDYuMjgzek0yLjk5IDkuNzE3QTEuOTg2IDEuOTg2IDAgMCAwIDYgNy45OTFhMS45ODggMS45ODggMCAwIDAtLjI4My0xLjAwMUwyLjk5IDkuNzE3ek0xNCA1djEuOTg0YS41LjUgMCAwIDEtLjUuNUg5LjM2N0wxMSA1Ljg1MWwtLjcwNy0uNzA3LTIuMTIxIDIuMTIxLS40MjMuNDIzdi41NjhsMi41NDQgMi41NDQuNzA3LS43MDctMS42MS0xLjYwOWg0LjExYTEuNSAxLjUgMCAwIDAgMS41LTEuNVY1aC0xelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NOb3RlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDJoMTNsLjUuNXYxMGwtLjUuNWgtMTNsLS41LS41di0xMGwuNS0uNXpNMiAzdjloMTJWM0gyem0yIDJoOHYxSDRWNXptNiAySDR2MWg2Vjd6TTQgOWg0djFINFY5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NOb3RlYm9va1RlbXBsYXRlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEgNUgwVjRoMXYxem0wIDJIMFY2aDF2MXptMCAySDBWOGgxdjF6bTAgMkgwdi0xaDF2MXptMCAySDB2LTFoMXYxem0wIDF2MUgwdi0xaDF6bTAgMWgxdjFIMXYtMXptMiAwaDF2MUgzdi0xek0xIDFIMFYwaDF2MXptMiAwSDJWMGgxdjF6bTEtMWgxdjFINFYwem0zIDFINlYwaDF2MXptMiAwSDhWMGgxdjF6bTIgMGgtMVYwaDF2MXptMCAxVjFoMXYxaC0xem0xIDJoLTFWM2gxdjF6TTEgM0gwVjJoMXYxelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNSA2bDEtMWg3bDEgMXY5bC0xIDFINmwtMS0xVjZ6bTEgMHY5aDdWNkg2elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE1IDdoMXYyaC0xVjd6bTAgM2gxdjJoLTF2LTJ6bTAgM2gxdjJoLTF2LTJ6TTcgOGg1djFIN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjTm90ZWJvb2sgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDJsMS0xaDlsMSAxdjEybC0xIDFIM2wtMS0xVjJ6bTEgMHYxMmg5VjJIM3ptMSAybDEtMWg1bDEgMXYxbC0xIDFINUw0IDVWNHptMSAwdjFoNVY0SDV6bTEwIDFoLTF2MmgxVjV6bS0xIDNoMXYyaC0xVjh6bTEgM2gtMXYyaDF2LTJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY09jdG9mYWNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTMuODYzIDUuNjczYy4xMTMtLjI4LjQ4LTEuMzkyLS4xMTQtMi44OTcgMCAwLS45MTktLjI4OC0zLjAxIDEuMTM4LS44NzUtLjI0NS0xLjgxMi0uMjgtMi43MzktLjI4LS45MjggMC0xLjg2NC4wMzUtMi43MzkuMjgtMi4wOTEtMS40MzUtMy4wMS0xLjEzOC0zLjAxLTEuMTM4LS41OTUgMS41MDUtLjIyNyAyLjYxNy0uMTEzIDIuODk3QzEuNDI4IDYuNDMzIDEgNy40MTMgMSA4LjYwM2MwIDQuNTA3IDIuOTE0IDUuNTIyIDYuOTgyIDUuNTIyIDQuMDcgMCA3LjAxOC0xLjAxNSA3LjAxOC01LjUyMSAwLTEuMTktLjQyOS0yLjE3LTEuMTM3LTIuOTMxek04IDEzLjI2OGMtMi44ODggMC01LjIzMi0uMTMyLTUuMjMyLTIuOTMyIDAtLjY2NS4zMzItMS4yOTUuODkyLTEuODExLjkzNi0uODU3IDIuNTM3LS40MDIgNC4zNC0uNDAyIDEuODExIDAgMy4zOTUtLjQ1NSA0LjM0LjQwMi41NjkuNTE2Ljg5MyAxLjEzOC44OTMgMS44MTEgMCAyLjc5MS0yLjM0NiAyLjkzMS01LjIzMyAyLjkzMXpNNS44MDQgOC44ODNjLS41NzggMC0xLjA1LjctMS4wNSAxLjU1NyAwIC44NTguNDcyIDEuNTY2IDEuMDUgMS41NjYuNTc3IDAgMS4wNS0uNyAxLjA1LTEuNTY2IDAtLjg2Ni0uNDczLTEuNTU3LTEuMDUtMS41NTd6bTQuMzkyIDBjLS41NzcgMC0xLjA1LjY5MS0xLjA1IDEuNTU3cy40NzMgMS41NjYgMS4wNSAxLjU2NmMuNTc4IDAgMS4wNS0uNyAxLjA1LTEuNTY2IDAtLjg2Ni0uNDYzLTEuNTU3LTEuMDUtMS41NTd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY09wZW5QcmV2aWV3IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMyAxaDExbDEgMXY1LjNhMy4yMSAzLjIxIDAgMCAwLTEtLjNWMkg5djEwLjg4TDcuODggMTRIM2wtMS0xVjJsMS0xem0wIDEyaDVWMkgzdjExem0xMC4zNzktNC45OThhMi41MyAyLjUzIDAgMCAwLTEuMTkuMzQ4aC0uMDNhMi41MSAyLjUxIDAgMCAwLS43OTkgMy41M0w5IDE0LjIzbC43MS43MSAyLjM1LTIuMzZjLjMyNS4yMi43LjM1OCAxLjA5LjRhMi40NyAyLjQ3IDAgMCAwIDEuMTQtLjEzIDIuNTEgMi41MSAwIDAgMCAxLS42MyAyLjQ2IDIuNDYgMCAwIDAgLjU4LTEgMi42MyAyLjYzIDAgMCAwIC4wNy0xLjE1IDIuNTMgMi41MyAwIDAgMC0xLjM1LTEuODEgMi41MyAyLjUzIDAgMCAwLTEuMjExLS4yNTh6bS4yNCAzLjk5MmExLjUgMS41IDAgMCAxLS45NzktLjI0NCAxLjU1IDEuNTUgMCAwIDEtLjU2LS42OCAxLjQ5IDEuNDkgMCAwIDEtLjA4LS44NiAxLjQ5IDEuNDkgMCAwIDEgMS4xOC0xLjE4IDEuNDkgMS40OSAwIDAgMSAuODYuMDhjLjI3Ni4xMTcuNTEyLjMxMS42OC41NmExLjUgMS41IDAgMCAxLTEuMSAyLjMyNHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjT3JnYW5pemF0aW9uIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOS4xMTEgNC42NjNBMiAyIDAgMSAxIDYuODkgMS4zMzdhMiAyIDAgMCAxIDIuMjIyIDMuMzI2em0tLjU1NS0yLjQ5NEExIDEgMCAxIDAgNy40NDQgMy44M2ExIDEgMCAwIDAgMS4xMTItMS42NnptMi42MS4wM2ExLjQ5NCAxLjQ5NCAwIDAgMSAxLjg5NS4xODggMS41MTMgMS41MTMgMCAwIDEtLjQ4NyAyLjQ2IDEuNDkyIDEuNDkyIDAgMCAxLTEuNjM1LS4zMjYgMS41MTIgMS41MTIgMCAwIDEgLjIyOC0yLjMyMXptLjQ4IDEuNjFhLjQ5OS40OTkgMCAxIDAgLjcwNS0uNzA4LjUwOS41MDkgMCAwIDAtLjM1MS0uMTUuNDk5LjQ5OSAwIDAgMC0uNS41MDMuNTEuNTEgMCAwIDAgLjE0Ni4zNTZ6TTMuMTkgMTIuNDg3SDV2MS4wMDVIMy4xOWExLjE5NyAxLjE5NyAwIDAgMS0uODQyLS4zNTcgMS4yMSAxLjIxIDAgMCAxLS4zNDgtLjg1di0xLjgxYS45OTcuOTk3IDAgMCAxLS43MS0uMzMyQTEuMDA3IDEuMDA3IDAgMCAxIDEgOS40MDhWNy4yMjZjLjAwMy0uNDcyLjE5LS45MjMuNTItMS4yNTguMzI5LS4zMzEuNzc0LS41MiAxLjI0LS41MjNINC42YTIuOTEyIDIuOTEyIDAgMCAwLS41NSAxLjAwNkgyLjc2YS43OTguNzk4IDAgMCAwLS41NC4yMzIuNzc3Ljc3NyAwIDAgMC0uMjIuNTQzdjIuMjMyaDF2Mi44MjZhLjIwMi4yMDIgMCAwIDAgLjA1LjE1MS4yNC4yNCAwIDAgMCAuMTQuMDV6bTcuMy02LjUxOGExLjc2NSAxLjc2NSAwIDAgMC0xLjI1LS41MjNINi43NmExLjc2NSAxLjc2NSAwIDAgMC0xLjI0LjUyM2MtLjMzLjMzNS0uNTE3Ljc4Ni0uNTIgMS4yNTh2My4xNzhhMS4wNiAxLjA2IDAgMCAwIC4yOS43MzQgMSAxIDAgMCAwIC43MS4zMzJ2Mi4zMjNhMS4yMDIgMS4yMDIgMCAwIDAgLjM1Ljg1NWMuMTguMTY4LjQwNy4yNzcuNjUuMzEyaDJhMS4xNSAxLjE1IDAgMCAwIDEtMS4xNjdWMTEuNDdhLjk5Ny45OTcgMCAwIDAgLjcxLS4zMzIgMS4wMDYgMS4wMDYgMCAwIDAgLjI5LS43MzRWNy4yMjZhMS44IDEuOCAwIDAgMC0uNTEtMS4yNTh6TTEwIDEwLjQ1NEg5djMuMzRhLjIwMi4yMDIgMCAwIDEtLjA2LjE0LjE3LjE3IDAgMCAxLS4xNC4wNkg3LjE5YS4yMS4yMSAwIDAgMS0uMi0uMnYtMy4zNEg2VjcuMjI2YzAtLjIwMy4wNzktLjM5OC4yMi0uNTQzYS43OTguNzk4IDAgMCAxIC41NC0uMjMyaDIuNDhhLjc3OC43NzggMCAwIDEgLjcwNS40OC43NDguNzQ4IDAgMCAxIC4wNTUuMjk1djMuMjI4em0yLjgxIDMuMDM3SDExdi0xLjAwNWgxLjhhLjI0LjI0IDAgMCAwIC4xNC0uMDUuMi4yIDAgMCAwIC4wNi0uMTUyVjkuNDU4aDFWNy4yMjZhLjc3Ny43NzcgMCAwIDAtLjIyLS41NDMuNzk4Ljc5OCAwIDAgMC0uNTQtLjIzMmgtMS4yOWEyLjkxIDIuOTEgMCAwIDAtLjU1LTEuMDA2aDEuODRhMS43NyAxLjc3IDAgMCAxIDEuMjQuNTIzYy4zMy4zMzUuNTE3Ljc4Ni41MiAxLjI1OHYyLjE4MmMwIC4yNzMtLjEwMy41MzUtLjI4OS43MzMtLjE4Ni4xOTktLjQ0LjMxOC0uNzExLjMzM3YxLjgxYzAgLjMxOS0uMTI1LjYyNC0uMzQ4Ljg1YTEuMTk3IDEuMTk3IDAgMCAxLS44NDIuMzU3ek00IDEuOTQ1YTEuNDk0IDEuNDk0IDAgMCAwLTEuMzg2LjkzMkExLjUxNyAxLjUxNyAwIDAgMCAyLjk0IDQuNTIgMS40OTcgMS40OTcgMCAwIDAgNS41IDMuNDU0YzAtLjQtLjE1OC0uNzg0LS40NC0xLjA2N0ExLjQ5NiAxLjQ5NiAwIDAgMCA0IDEuOTQ1em0wIDIuMDEyYS40OTkuNDk5IDAgMCAxLS41LS41MDMuNTA0LjUwNCAwIDAgMSAuNS0uNTAzLjUwOS41MDkgMCAwIDEgLjUuNTAzLjUwNC41MDQgMCAwIDEtLjUuNTAzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NPdXRwdXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xOS41IDB2MS41TDIxIDN2MTkuNUwxOS41IDI0aC0xNUwzIDIyLjVWM2wxLjUtMS41VjBINnYxLjVoM1YwaDEuNXYxLjVoM1YwSDE1djEuNWgzVjBoMS41em0tMTUgMjIuNWgxNVYzaC0xNXYxOS41ek03LjUgNmg5djEuNWgtOVY2em05IDZoLTl2MS41aDlWMTJ6bS05IDZoOXYxLjVoLTlWMTh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1BhY2thZ2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjYxIDNsNS43NCAxLjUzTDE1IDV2Ni43NGwtLjM3LjQ4LTYuMTMgMS42OS02LjE0LTEuNjktLjM2LS40OFY1bC42MS0uNDdMOC4zNCAzaC4yN3ptLS4wOSAxbC00IDEgLjU1LjIgMy40My45IDMtLjgxLjk1LS4yOS0zLjkzLTF6TTMgMTEuMzZsNSAxLjM3VjdMMyA1LjY2djUuN3pNOSA3djUuNzNsNS0xLjM3VjUuNjNsLTIuMDIuNTUzVjguNzVsLTEgLjI2VjYuNDU3TDkgN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUGFpbnRjYW4gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQuNTQgMTEuODExbC0xLjE0LTMuMTJ2LS4wNmwtNC45MS00Ljkxdi0xLjI0YTEuNjYgMS42NiAwIDAgMC0uMTEtLjU4IDEuNDggMS40OCAwIDAgMC0uODMtLjggMS40MiAxLjQyIDAgMCAwLS41OC0uMSAxLjQ3IDEuNDcgMCAwIDAtMS40OCAxLjQ4djMuMjZsLTMuMDYgM2ExLjUyIDEuNTIgMCAwIDAgMCAyLjEybDMuNjMgMy42M2MuMTQuMTQxLjMwNy4yNTMuNDkuMzNhMS41MyAxLjUzIDAgMCAwIDEuMTQgMCAxLjUxIDEuNTEgMCAwIDAgLjQ5LS4zM2w0LjkzLTQuOTItLjY2IDIuMmExLjE5IDEuMTkgMCAwIDAgMCAuNDZjLjAzMy4xNTIuMDk4LjI5Ni4xOS40Mi4wOTguMTIxLjIxNi4yMjMuMzUuMy4xNC4wNy4yOTQuMTEuNDUuMTJhMSAxIDAgMCAwIC40OC0uMDkgMS4xNCAxLjE0IDAgMCAwIC4zOS0uMjkuOTguOTggMCAwIDAgLjIyLS40NGMuMDMyLS4xNDUuMDM1LS4yOTQuMDEtLjQ0em0tOC05LjMzYS40Ni40NiAwIDAgMSAwLS4yLjUyLjUyIDAgMCAxIC4xMi0uMTcuNjQuNjQgMCAwIDEgLjE4LS4xLjUuNSAwIDAgMSAuMjEgMCAuNS41IDAgMCAxIC4zMi4xNS41LjUgMCAwIDEgLjEyLjMzdjEuMjZsLTEgMSAuMDUtMi4yN3ptMSAxMS4zNWEuMzYuMzYgMCAwIDEtLjE2LjExLjQ3LjQ3IDAgMCAxLS4zOCAwIC4zNjEuMzYxIDAgMCAxLS4xNi0uMTFsLTMuNjMtMy42MmEuNS41IDAgMCAxIDAtLjcxbDQuMzUtNC4zNXYyLjg1YS43NC43NCAwIDAgMC0uMjQuNTUuNzUuNzUgMCAxIDAgMS4xNy0uNTV2LTIuODNsMy44NSAzLjg3LTQuOCA0Ljc5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQYXNzRmlsbGVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOCAxNUE3IDcgMCAxIDAgOCAxYTcgNyAwIDAgMCAwIDE0em0tMS4wMi00LjEzaC0uNzFMNCA4LjZsLjcxLS43MSAxLjkyIDEuOTIgNC4yLTQuMjEuNzEuNzEtNC41NiA0LjU2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQYXNzIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTYuMjcgMTAuODdoLjcxbDQuNTYtNC41Ni0uNzEtLjcxLTQuMiA0LjIxLTEuOTItMS45Mkw0IDguNmwyLjI3IDIuMjd6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04LjYgMWMxLjYuMSAzLjEuOSA0LjIgMiAxLjMgMS40IDIgMy4xIDIgNS4xIDAgMS42LS42IDMuMS0xLjYgNC40LTEgMS4yLTIuNCAyLjEtNCAyLjQtMS42LjMtMy4yLjEtNC42LS43LTEuNC0uOC0yLjUtMi0zLjEtMy41Qy45IDkuMi44IDcuNSAxLjMgNmMuNS0xLjYgMS40LTIuOSAyLjgtMy44QzUuNCAxLjMgNyAuOSA4LjYgMXptLjUgMTIuOWMxLjMtLjMgMi41LTEgMy40LTIuMS44LTEuMSAxLjMtMi40IDEuMi0zLjggMC0xLjYtLjYtMy4yLTEuNy00LjMtMS0xLTIuMi0xLjYtMy42LTEuNy0xLjMtLjEtMi43LjItMy44IDEtMS4xLjgtMS45IDEuOS0yLjMgMy4zLS40IDEuMy0uNCAyLjcuMiA0IC42IDEuMyAxLjUgMi4zIDIuNyAzIDEuMi43IDIuNi45IDMuOS42elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQZXJzb25BZGQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMyAxMGgtMXYyaC0ydjFoMnYyaDF2LTJoMnYtMWgtMnYtMnpNOC41NTYgMi4xNjlhMSAxIDAgMSAwLTEuMTEyIDEuNjYzIDEgMSAwIDAgMCAxLjExMi0xLjY2M3ptLTEuNjY3LS44MzJBMiAyIDAgMSAxIDkuMTEgNC42NjNhMiAyIDAgMCAxLTIuMjItMy4zMjZ6TTYuNzcgNS40OWgyLjQ2QTEuNzcgMS43NyAwIDAgMSAxMSA3LjI2VjhoLTF2LS43NGEuNzYuNzYgMCAwIDAtLjc3LS43N0g2Ljc3YS43Ni43NiAwIDAgMC0uNzcuNzdWMTBoMXYzLjMxYS4yLjIgMCAwIDAgLjIuMkg4djEuMDJoLS44YTEuMiAxLjIgMCAwIDEtMS4yLTEuMlYxMWExLjA2IDEuMDYgMCAwIDEtMS0xLjFWNy4yNmExLjc3IDEuNzcgMCAwIDEgMS43Ny0xLjc3elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQZXJzb24gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNOCAyYTEgMSAwIDEgMSAwIDIgMSAxIDAgMCAxIDAtMnptMC0xYTIgMiAwIDEgMCAwIDQgMiAyIDAgMCAwIDAtNHptMS4yMyA0LjQ5SDYuNzdBMS43NyAxLjc3IDAgMCAwIDUgNy4yNlY5LjlBMS4wNiAxLjA2IDAgMCAwIDYgMTF2Mi4zM2ExLjIgMS4yIDAgMCAwIDEuMiAxLjJoMS42YTEuMiAxLjIgMCAwIDAgMS4yLTEuMjRWMTFhMS4wNiAxLjA2IDAgMCAwIDEtMS4xVjcuMjZhMS43NyAxLjc3IDAgMCAwLTEuNzctMS43N3pNNiAxMFY3LjI2YS43Ni43NiAwIDAgMSAuNzctLjc3aDIuNDZhLjc2Ljc2IDAgMCAxIC43Ny43N1YxMEg5djMuMzFhLjIuMiAwIDAgMS0uMi4ySDcuMmEuMi4yIDAgMCAxLS4yLS4yVjEwSDZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1BpZUNoYXJ0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTAgNkgxMy45QzEzLjUwMjMgNC4wNDA4NyAxMS45NTkxIDIuNDk3NyAxMCAyLjEwMDAyVjZaTTEwIDEuMDgyOTZDMTIuNTEyNSAxLjUwNDQ4IDE0LjQ5NTUgMy40ODc1IDE0LjkxNyA2QzE0Ljk3MTYgNi4zMjUyMSAxNSA2LjY1OTI5IDE1IDdIOVYxQzkuMzQwNzEgMSA5LjY3NDc5IDEuMDI4NCAxMCAxLjA4Mjk2Wk03IDguMDAwMDNMOCA5LjAwMDAzSDEyLjlDMTIuNDM2NyAxMS4yODIzIDEwLjQxODkgMTMgOCAxM0M1LjIzODU4IDEzIDMgMTAuNzYxNCAzIDhDMyA1LjU4MTA0IDQuNzE3NzYgMy41NjMyOSA3IDMuMTAwMDJWOC4wMDAwM1pNOCAxNEMxMC45NzMgMTQgMTMuNDQwOSAxMS44Mzc3IDEzLjkxNyA5LjAwMDAzQzEzLjk3MTYgOC42NzQ4MiAxNCA4LjM0MDc0IDE0IDguMDAwMDNIOFYyQzcuNjU5MjkgMiA3LjMyNTIxIDIuMDI4NCA3IDIuMDgyOTZDNC4xNjIyOSAyLjU1OTA0IDIgNS4wMjcgMiA4QzIgMTEuMzEzNyA0LjY4NjI5IDE0IDggMTRaXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1BpbiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNCA1djdoLS4yNzhjLS40MDYgMC0uNzc4LS4wODYtMS4xMTctLjI1OEEyLjUyOCAyLjUyOCAwIDAgMSAxMS43MyAxMUg4Ljg3YTMuNDYzIDMuNDYzIDAgMCAxLS41NDYuODI4IDMuNjg1IDMuNjg1IDAgMCAxLS43MzUuNjMzYy0uMjcuMTc3LS41NjUuMzEtLjg4Mi4zOThhMy44NzUgMy44NzUgMCAwIDEtLjk4NS4xNDFoLS41VjlIMmwtMS0uNUwyIDhoMy4yMjJWNGguNWMuMzM5IDAgLjY2NC4wNDcuOTc3LjE0LjMxMi4wOTQuNjA3LjIyNy44ODMuNEEzLjQwNCAzLjQwNCAwIDAgMSA4Ljg3IDZoMi44NTlhMi41NiAyLjU2IDAgMCAxIC44NzUtLjczNGMuMzM4LS4xNzIuNzEtLjI2IDEuMTE3LS4yNjZIMTR6bS0uNzc4IDEuMDg2YTEuMjIyIDEuMjIyIDAgMCAwLS4zMi4xNTYgMS40OTEgMS40OTEgMCAwIDAtLjQzLjQ2MUwxMi4yODUgN0g4LjE4M2wtLjExNy0uMzM2YTIuNDU3IDIuNDU3IDAgMCAwLS43MTEtMS4wNDdDNy4wMjcgNS4zMzEgNi40MjcgNS4wOSA2IDV2N2MuNDI3LS4wODggMS4wMjctLjMzIDEuMzU1LS42MTcuMzI4LS4yODcuNTY1LS42MzYuNzEtMS4wNDdMOC4xODQgMTBoNC4xMDJsLjE4LjI5N2MuMDU3LjA5NC4xMjIuMTc3LjE5NS4yNS4wNzMuMDczLjE1My4xNDMuMjQyLjIxLjA4OC4wNjkuMTk1LjEyLjMyLjE1N1Y2LjA4NnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUGlubmVkRGlydHkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00IDJoN3YuMjc4YzAgLjQwNi0uMDg2Ljc3OC0uMjU4IDEuMTE3LS4xNzIuMzM5LS40Mi42My0uNzQyLjg3NXYyLjg2Yy4zMDcuMTQ1LjU4My4zMjguODI4LjU0NmEzLjcgMy43IDAgMCAxIC41NC41OTggNC45MiA0LjkyIDAgMCAwLS44OTYuNDEybC0uMDA3LjAwNC0uMDMuMDE4YTIuNDU2IDIuNDU2IDAgMCAwLTEuMDk5LS43NzRMOSA3LjgxN1YzLjcxNWwuMjk3LS4xOGMuMDk0LS4wNTcuMTc3LS4xMjIuMjUtLjE5NWEyLjI4IDIuMjggMCAwIDAgLjIxLS4yNDIuOTY4Ljk2OCAwIDAgMCAuMTU3LS4zMkg1LjA4NmMuMDQyLjEyNS4wOTQuMjMyLjE1Ni4zMmExLjQ5NCAxLjQ5NCAwIDAgMCAuNDYxLjQzTDYgMy43MTV2NC4xMDJsLS4zMzYuMTE3Yy0uNDExLjE0Ni0uNzYuMzgzLTEuMDQ3LjcxMUM0LjMzMSA4Ljk3MyA0LjA5IDkuNTczIDQgMTBoNS4wMDJhNS4wMjUgNS4wMjUgMCAwIDAtLjQ4MS43NzhIOFYxNGwtLjUgMS0uNS0xdi0zLjIyMkgzdi0uNWMwLS4zMzkuMDQ3LS42NjQuMTQtLjk3Ny4wOTQtLjMxMi4yMjctLjYwNy40LS44ODNBMy40MDQgMy40MDQgMCAwIDEgNSA3LjEzVjQuMjdhMi41NjEgMi41NjEgMCAwIDEtLjczNC0uODc1QTIuNTA1IDIuNTA1IDAgMCAxIDQgMi4yNzhWMnptNy40ODUgOC40MWEyLjkyNCAyLjkyNCAwIDAgMSAuNzE4LS4zMDJjLjI1Ni0uMDcyLjUyMi0uMTA4Ljc5Ny0uMTA4cy41NDEuMDM2Ljc5Ny4xMDhhMi45NTYgMi45NTYgMCAwIDEgMS4zMjEuNzczIDIuOTU2IDIuOTU2IDAgMCAxIC43NzQgMS4zMjJjLjA3Mi4yNTYuMTA4LjUyMi4xMDguNzk3cy0uMDM2LjU0MS0uMTA4Ljc5N2EyLjk1MyAyLjk1MyAwIDAgMS0uNzc0IDEuMzI0IDMuMDEzIDMuMDEzIDAgMCAxLTEuMzIxLjc3NGMtLjI1Ni4wNy0uNTIyLjEwNS0uNzk3LjEwNXMtLjU0MS0uMDM1LS43OTctLjEwNWEzLjAzNyAzLjAzNyAwIDAgMS0xLjMyNC0uNzc0IDMuMDM3IDMuMDM3IDAgMCAxLS43NzMtMS4zMjRBMi45OTQgMi45OTQgMCAwIDEgMTAgMTNjMC0uMjc1LjAzNS0uNTQxLjEwNS0uNzk3YTMuMDEzIDMuMDEzIDAgMCAxIC44ODMtMS40MjVjLjE1NC0uMTQuMzItLjI2Mi40OTctLjM2OHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUGlubmVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTQgMmg3di4yNzhjMCAuNDA2LS4wODYuNzc4LS4yNTggMS4xMTctLjE3Mi4zMzktLjQyLjYzLS43NDIuODc1djIuODZjLjMwNy4xNDUuNTgzLjMyOC44MjguNTQ2LjI0NS4yMTkuNDU2LjQ2NC42MzMuNzM1LjE3Ny4yNy4zMS41NjUuMzk4Ljg4Mi4wODkuMzE4LjEzNi42NDYuMTQxLjk4NXYuNUg4VjE0bC0uNSAxLS41LTF2LTMuMjIySDN2LS41YzAtLjMzOS4wNDctLjY2NC4xNC0uOTc3LjA5NC0uMzEyLjIyNy0uNjA3LjQtLjg4M0EzLjQwNCAzLjQwNCAwIDAgMSA1IDcuMTNWNC4yN2EyLjU2MSAyLjU2MSAwIDAgMS0uNzM0LS44NzVBMi41MDUgMi41MDUgMCAwIDEgNCAyLjI3OFYyem0xLjA4Ni43NzhjLjA0Mi4xMjUuMDk0LjIzMi4xNTYuMzJhMS40OTQgMS40OTQgMCAwIDAgLjQ2MS40M0w2IDMuNzE1djQuMTAybC0uMzM2LjExN2MtLjQxMS4xNDYtLjc2LjM4My0xLjA0Ny43MTFDNC4zMzEgOC45NzMgNC4wOSA5LjU3MyA0IDEwaDdjLS4wODgtLjQyNy0uMzMtMS4wMjctLjYxNy0xLjM1NWEyLjQ1NiAyLjQ1NiAwIDAgMC0xLjA0Ny0uNzFMOSA3LjgxNlYzLjcxNWwuMjk3LS4xOGMuMDk0LS4wNTcuMTc3LS4xMjIuMjUtLjE5NWEyLjI4IDIuMjggMCAwIDAgLjIxLS4yNDIuOTY4Ljk2OCAwIDAgMCAuMTU3LS4zMkg1LjA4NnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUGxheUNpcmNsZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTguNiAxYzEuNi4xIDMuMS45IDQuMiAyIDEuMyAxLjQgMiAzLjEgMiA1LjEgMCAxLjYtLjYgMy4xLTEuNiA0LjQtMSAxLjItMi40IDIuMS00IDIuNC0xLjYuMy0zLjIuMS00LjYtLjctMS40LS44LTIuNS0yLTMuMS0zLjVDLjkgOS4yLjggNy41IDEuMyA2Yy41LTEuNiAxLjQtMi45IDIuOC0zLjhDNS40IDEuMyA3IC45IDguNiAxem0uNSAxMi45YzEuMy0uMyAyLjUtMSAzLjQtMi4xLjgtMS4xIDEuMy0yLjQgMS4yLTMuOCAwLTEuNi0uNi0zLjItMS43LTQuMy0xLTEtMi4yLTEuNi0zLjYtMS43LTEuMy0uMS0yLjcuMi0zLjggMS0xLjEuOC0xLjkgMS45LTIuMyAzLjMtLjQgMS4zLS40IDIuNy4yIDQgLjYgMS4zIDEuNSAyLjMgMi43IDMgMS4yLjcgMi42LjkgMy45LjZ6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02IDVsLjc3Ny0uNDE2IDQuNSAzdi44MzJsLTQuNSAzTDYgMTFWNXptMSAuOTM0djQuMTMyTDEwLjA5OSA4IDcgNS45MzR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1BsYXkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMy43OCAyTDMgMi40MXYxMmwuNzguNDIgOS02VjhsLTktNnpNNCAxMy40OFYzLjM1bDcuNiA1LjA3TDQgMTMuNDh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1BsdWcgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03IDFINnYzSDQuNWwtLjUuNVY4YTQgNCAwIDAgMCAzLjUgMy45NjlWMTVoMXYtMy4wMzFBNCA0IDAgMCAwIDEyIDhWNC41bC0uNS0uNUgxMFYxSDl2M0g3VjF6bTMuMTIxIDkuMTIxQTMgMyAwIDAgMSA1IDhWNWg2djNhMyAzIDAgMCAxLS44NzkgMi4xMjF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1ByZXNlcnZlQ2FzZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjUzNCAxMi40NjdINy40MzZsLS44OTctMi4zNzNoLTMuNTlsLS44NDUgMi4zNzNIMUw0LjI0OCA0aDEuMDI3bDMuMjYgOC40Njd6bS0yLjMyLTMuMjY1TDQuODg1IDUuNTk0YTMuNDU0IDMuNDU0IDAgMCAxLS4xMy0uNTY3aC0uMDIzYy0uMDQuMjQtLjA4NS40My0uMTM2LjU2N0wzLjI3OSA5LjIwMmgyLjkzNXptMy41NzIgMy4yNjVWNGgyLjQxYy43MzIgMCAxLjMxMi4xOCAxLjc0MS41MzcuNDMuMzU5LjY0NC44MjUuNjQ0IDEuNCAwIC40OC0uMTMuODk3LS4zOSAxLjI1Mi0uMjYuMzU0LS42MTguNjA2LTEuMDc1Ljc1NXYuMDI0Yy41NzEuMDY3IDEuMDI4LjI4MyAxLjM3LjY1LjM0My4zNjIuNTE0LjgzNC41MTQgMS40MTcgMCAuNzI0LS4yNiAxLjMxLS43OCAxLjc2LS41MTkuNDQ4LTEuMTc0LjY3Mi0xLjk2Ni42NzJIOS43ODZ6bS45OTItNy41N3YyLjczNGgxLjAxNmMuNTQzIDAgLjk3LS4xMyAxLjI4MS0uMzkuMzExLS4yNjMuNDY2LS42MzMuNDY2LTEuMTEgMC0uODIyLS41NC0xLjIzMy0xLjYyMy0xLjIzM2gtMS4xNHptMCAzLjYyNnYzLjA0N2gxLjM0NmMuNTgzIDAgMS4wMzQtLjEzOCAxLjM1My0uNDE0LjMyMi0uMjc1LjQ4NC0uNjUzLjQ4NC0xLjEzMyAwLTEtLjY4MS0xLjUtMi4wNDMtMS41aC0xLjE0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQcmV2aWV3IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMiAyaDEybDEgMXYxMGwtMSAxSDJsLTEtMVYzbDEtMXptMCAxMWgxMlYzSDJ2MTB6bTExLTlIM3YzaDEwVjR6bS0xIDJINFY1aDh2MXptLTMgNmg0VjhIOXY0em0xLTNoMnYyaC0yVjl6TTcgOEgzdjFoNFY4em0tNCAzaDR2MUgzdi0xelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NQcmltaXRpdmVTcXVhcmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjUgNGwuNS0uNWg4bC41LjV2OGwtLjUuNUg0bC0uNS0uNVY0em0xIC41djdoN3YtN2gtN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUHJvamVjdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEuNSAxaDEzbC41LjV2MTNsLS41LjVoLTEzbC0uNS0uNXYtMTNsLjUtLjV6TTIgMTRoMTJWMkgydjEyek0zIDNoMnYxMEgzVjN6bTYgMEg3djZoMlYzem0yIDBoMnY4aC0yVjN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1B1bHNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTExLjggOUwxMCAzSDlMNy4xNTggOS42NCA1Ljk5IDQuNjloLS45N0wzLjg1IDlIMXYuOTloMy4yM2wuNDktLjM3Ljc0LTIuN0w2LjU5IDEyaDEuMDNsMS44Ny03LjA0IDEuNDYgNC42OC40OC4zNkgxNVY5aC0zLjJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1F1ZXN0aW9uIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy41IDFhNi41IDYuNSAwIDEgMCAwIDEzIDYuNSA2LjUgMCAwIDAgMC0xM3ptMCAxMmE1LjUgNS41IDAgMSAxIDAtMTEgNS41IDUuNSAwIDAgMSAwIDExem0xLjU1LTguNDJhMS44NCAxLjg0IDAgMCAwLS42MS0uNDJBMi4yNSAyLjI1IDAgMCAwIDcuNTMgNGEyLjE2IDIuMTYgMCAwIDAtLjg4LjE3Yy0uMjM5LjEtLjQ1LjI1NC0uNjIuNDVhMS44OSAxLjg5IDAgMCAwLS4zOC42MiAzIDMgMCAwIDAtLjE1LjcyaDEuMjNhLjg0Ljg0IDAgMCAxIC41MDYtLjc0MS43Mi43MiAwIDAgMSAuMzA0LS4wNDkuODYuODYgMCAwIDEgLjI3IDAgLjY0LjY0IDAgMCAxIC4yMi4xNC42LjYgMCAwIDEgLjE2LjIyLjczLjczIDAgMCAxIC4wNi4zYzAgLjE3My0uMDM3LjM0My0uMTEuNWEyLjQgMi40IDAgMCAxLS4yNy40NmwtLjM1LjQyYy0uMTIuMTMtLjI0LjI3LS4zNS40MWEyLjMzIDIuMzMgMCAwIDAtLjI3LjQ1IDEuMTggMS4xOCAwIDAgMC0uMS41di42Nkg4di0uNDlhLjk0Ljk0IDAgMCAxIC4xMS0uNDIgMy4wOSAzLjA5IDAgMCAxIC4yOC0uNDFsLjM2LS40NGE0LjI5IDQuMjkgMCAwIDAgLjM2LS40OCAyLjU5IDIuNTkgMCAwIDAgLjI4LS41NSAxLjkxIDEuOTEgMCAwIDAgLjExLS42NCAyLjE4IDIuMTggMCAwIDAtLjEtLjY3IDEuNTIgMS41MiAwIDAgMC0uMzUtLjU1ek02LjggOS44M2gxLjE3VjExSDYuOFY5LjgzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NRdW90ZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuMTYgMy41QzQuNzMgNS4wNiAzLjU1IDYuNjcgMy41NSA5LjM2Yy4xNi0uMDUuMy0uMDUuNDQtLjA1IDEuMjcgMCAyLjUuODYgMi41IDIuNDEgMCAxLjYxLTEuMDMgMi42MS0yLjUgMi42MS0xLjkgMC0yLjk5LTEuNTItMi45OS00LjI1IDAtMy44IDEuNzUtNi41MyA1LjAyLTguNDJMNy4xNiAzLjV6bTcgMGMtMi40MyAxLjU2LTMuNjEgMy4xNy0zLjYxIDUuODYuMTYtLjA1LjMtLjA1LjQ0LS4wNSAxLjI3IDAgMi41Ljg2IDIuNSAyLjQxIDAgMS42MS0xLjAzIDIuNjEtMi41IDIuNjEtMS44OSAwLTIuOTgtMS41Mi0yLjk4LTQuMjUgMC0zLjggMS43NS02LjUzIDUuMDItOC40MmwxLjE0IDEuODRoLS4wMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUmFkaW9Ub3dlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIuOTk4IDUuNThhNS41NSA1LjU1IDAgMCAxIDEuNjItMy44OGwtLjcxLS43YTYuNDUgNi40NSAwIDAgMCAwIDkuMTZsLjcxLS43YTUuNTUgNS41NSAwIDAgMS0xLjYyLTMuODh6bTEuMDYgMGE0LjQyIDQuNDIgMCAwIDAgMS4zMiAzLjE3bC43MS0uNzFhMy4yNyAzLjI3IDAgMCAxLS43Ni0xLjEyIDMuNDUgMy40NSAwIDAgMSAwLTIuNjcgMy4yMiAzLjIyIDAgMCAxIC43Ni0xLjEzbC0uNzEtLjcxYTQuNDYgNC40NiAwIDAgMC0xLjMyIDMuMTd6bTcuNjUgMy4yMWwtLjcxLS43MWMuMzMtLjMyLjU5LS43MDQuNzYtMS4xM2EzLjQ0OSAzLjQ0OSAwIDAgMCAwLTIuNjcgMy4yMiAzLjIyIDAgMCAwLS43Ni0xLjEzbC43MS0uN2E0LjQ2OCA0LjQ2OCAwIDAgMSAwIDYuMzR6TTEzLjA2OCAxbC0uNzEuNzFhNS40MyA1LjQzIDAgMCAxIDAgNy43NGwuNzEuNzFhNi40NSA2LjQ1IDAgMCAwIDAtOS4xNnpNOS45OTMgNS40M2ExLjUgMS41IDAgMCAxLS4yNDUuOTggMiAyIDAgMCAxLS4yNy4yM2wzLjQ0IDcuNzMtLjkyLjQtLjc3LTEuNzNoLTUuNTRsLS43NyAxLjczLS45Mi0uNCAzLjQ0LTcuNzNhMS41MiAxLjUyIDAgMCAxLS4zMy0xLjYzIDEuNTUgMS41NSAwIDAgMSAuNTYtLjY4IDEuNSAxLjUgMCAwIDEgMi4zMjUgMS4xem0tMS41OTUtLjM0YS41Mi41MiAwIDAgMC0uMjUuMTQuNTIuNTIgMCAwIDAtLjExLjIyLjQ4LjQ4IDAgMCAwIDAgLjI5Yy4wNC4wOS4xMDIuMTcuMTguMjNhLjU0LjU0IDAgMCAwIC4yOC4wOC41MS41MSAwIDAgMCAuNS0uNS41NC41NCAwIDAgMC0uMDgtLjI4LjU4LjU4IDAgMCAwLS4yMy0uMTguNDguNDggMCAwIDAtLjI5IDB6bS4yMyAyLjA1aC0uMjdsLS44NyAxLjk0aDJsLS44Ni0xLjk0em0yLjIgNC45NGwtLjg5LTJoLTIuODhsLS44OSAyaDQuNjZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlYWN0aW9ucyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEyIDcuNWMwIC4xNjktLjAxLjMzNi0uMDI3LjVoMS4wMDVBNS41IDUuNSAwIDEgMCA4IDEyLjk3OHYtMS4wMDVBNC41IDQuNSAwIDEgMSAxMiA3LjV6TTUuNSA3YTEgMSAwIDEgMCAwLTIgMSAxIDAgMCAwIDAgMnptMiAyLjVjLjcxMiAwIDEuMzU1LS4yOTggMS44MS0uNzc2bC43MDcuNzA4QTMuNDkgMy40OSAwIDAgMSA3LjUgMTAuNWEzLjQ5IDMuNDkgMCAwIDEtMi41NTUtMS4xMDhsLjcwNy0uNzA4QTIuNDk0IDIuNDk0IDAgMCAwIDcuNSA5LjV6bTItMi41YTEgMSAwIDEgMCAwLTIgMSAxIDAgMCAwIDAgMnptMi41IDNoMXYyaDJ2MWgtMnYyaC0xdi0yaC0ydi0xaDJ2LTJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlY29yZEtleXMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1wiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQgM0gzYTEgMSAwIDAgMC0xIDF2N2ExIDEgMCAwIDAgMSAxaDExYTEgMSAwIDAgMCAxLTFWNGExIDEgMCAwIDAtMS0xem0wIDhIM1Y0aDExdjd6bS0zLTZoLTF2MWgxVjV6bS0xIDJIOXYxaDFWN3ptMi0yaDF2MWgtMVY1em0xIDRoLTF2MWgxVjl6TTYgOWg1djFINlY5em03LTJoLTJ2MWgyVjd6TTggNWgxdjFIOFY1em0wIDJIN3YxaDFWN3pNNCA5aDF2MUg0Vjl6bTAtNGgxdjFINFY1em0zIDBINnYxaDFWNXpNNCA3aDJ2MUg0Vjd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlY29yZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04IDEwYTIgMiAwIDEgMCAwLTQgMiAyIDAgMCAwIDAgNHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTguNiAxYzEuNi4xIDMuMS45IDQuMiAyIDEuMyAxLjQgMiAzLjEgMiA1LjEgMCAxLjYtLjYgMy4xLTEuNiA0LjQtMSAxLjItMi40IDIuMS00IDIuNC0xLjYuMy0zLjIuMS00LjYtLjctMS40LS44LTIuNS0yLTMuMS0zLjVDLjkgOS4yLjggNy41IDEuMyA2Yy41LTEuNiAxLjQtMi45IDIuOC0zLjhDNS40IDEuMyA3IC45IDguNiAxem0uNSAxMi45YzEuMy0uMyAyLjUtMSAzLjQtMi4xLjgtMS4xIDEuMy0yLjQgMS4yLTMuOCAwLTEuNi0uNi0zLjItMS43LTQuMy0xLTEtMi4yLTEuNi0zLjYtMS43LTEuMy0uMS0yLjcuMi0zLjggMS0xLjEuOC0xLjkgMS45LTIuMyAzLjMtLjQgMS4zLS40IDIuNy4yIDQgLjYgMS4zIDEuNSAyLjMgMi43IDMgMS4yLjcgMi42LjkgMy45LjZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlZG8gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMi41IDJ2My41TDEyIDZIOC41VjVoMi41MjFsLS45NDEtLjk0MWEzLjU1MiAzLjU1MiAwIDEgMC01LjAyMyA1LjAyM2w1LjE5NyA1LjE5OC0uNzIuNzItNS4xOTgtNS4xOThBNC41NyA0LjU3IDAgMCAxIDEwLjggMy4zMzlsLjcuN1YyaDF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlZmVyZW5jZXMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS4xMDUgNC41NjFsLTMuNDMgMy40MjctMS4xMzQtMS4xMiAyLjA3LTIuMDhoLTQuOGEyLjQgMi40IDAgMSAwIDAgNC44aC44OXYxLjZoLS44OGE0IDQgMCAwIDEgMC03Ljk5MWg0LjhMNi41NCAxLjEzIDcuNjc1IDBsMy40MyAzLjQzMnYxLjEzek0xNi42MiAyNGgtOS42bC0uOC0uOFYxMC40MTJsLjgtLjhoOS42bC44LjhWMjMuMmwtLjguOHptLTguOC0xLjZoOFYxMS4yMTJoLThWMjIuNHptNS42LTIwLjc5OGg5LjZsLjguOHYxMi43ODZsLS44LjhoLTR2LTEuNmgzLjJWMy4yaC04djQuNzg3aC0xLjZWMi40MDFsLjgtLjh6bS44IDExLjE4NmgtNC44djEuNmg0Ljh2LTEuNnptLTQuOCAzLjJoNC44djEuNmgtNC44di0xLjZ6bTQuOCAzLjJoLTQuOHYxLjZoNC44di0xLjZ6bTEuNi0xNC40aDQuOHYxLjZoLTQuOHYtMS42em00LjggNi40aC0xLjZ2MS42aDEuNnYtMS42em0tMy4zMzgtMy4xNzZ2LS4wMjRoMy4zMzh2MS42aC0xLjc2MmwtMS41NzYtMS41NzZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlZnJlc2ggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00LjY4MSAzSDJWMmgzLjVsLjUuNVY2SDVWNGE1IDUgMCAxIDAgNC41My0uNzYxbC4zMDItLjk1NEE2IDYgMCAxIDEgNC42ODEgM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUmVnZXggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMC4wMTIgMmguOTc2djMuMTEzbDIuNTYtMS41NTcuNDg2Ljg4NUwxMS40NyA2bDIuNTY0IDEuNTU5LS40ODUuODg1LTIuNTYxLTEuNTU3VjEwaC0uOTc2VjYuODg3bC0yLjU2IDEuNTU3LS40ODYtLjg4NUw5LjUzIDYgNi45NjYgNC40NDFsLjQ4NS0uODg1IDIuNTYxIDEuNTU3VjJ6TTIgMTBoNHY0SDJ2LTR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlbW90ZUV4cGxvcmVyIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAyNCAyNFwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS4zNDQgMi4xMjVoMjAuMzEybC43ODIuNzgxdjguNTk5YTcuODI1IDcuODI1IDAgMCAwLTEuNTYzLS45MTJWMy42ODhIMi4xMjVWMTcuNzVoNy44MTNhNy44MTMgNy44MTMgMCAwIDAgMS41NjIgNC42ODhINS4yNXYtMS41NjNoNC42ODh2LTEuNTYzSDEuMzQ0bC0uNzgyLS43OFYyLjkwNWwuNzgyLS43ODF6TTE3Ljc1IDExLjVhNi4yNSA2LjI1IDAgMSAwIDAgMTIuNSA2LjI1IDYuMjUgMCAwIDAgMC0xMi41em0wIDEwLjkzOGE0LjY4OCA0LjY4OCAwIDEgMSAwLTkuMzc3IDQuNjg4IDQuNjg4IDAgMCAxIDAgOS4zNzd6bTIuNjAzLTMuMTMyTDE4LjIgMTcuMTUzIDIwLjM1MyAxNWwuNjQ3LjY0Ni0xLjUwNiAxLjUwN0wyMSAxOC42NTlsLS42NDcuNjQ3ek0xNSAxNy4yNDZsMS41MDYgMS41MDdMMTUgMjAuMjU5bC42NDcuNjQ3IDIuMTUzLTIuMTUzLTIuMTUzLTIuMTUzLS42NDcuNjQ2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZW1vdGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMi45MDQgOS41N0w4LjkyOCA1LjU5NmwzLjk3Ni0zLjk3Ni0uNjE5LS42Mkw4IDUuMjg2di42MTlsNC4yODUgNC4yODUuNjItLjYxOHpNMyA1LjYybDQuMDcyIDQuMDdMMyAxMy43NjNsLjYxOS42MThMOCAxMHYtLjYxOUwzLjYxOSA1IDMgNS42MTl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlbW92ZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNSA4SDFWN2gxNHYxelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBsYWNlQWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTEuNiAyLjY3N2MuMTQ3LS4zMS4zNTYtLjQ2NS42MjYtLjQ2NS4yNDggMCAuNDQuMTE4LjU3My4zNTMuMTM0LjIzNi4yMDEuNTU3LjIwMS45NjYgMCAuNDQzLS4wNzguNzk4LS4yMzUgMS4wNjctLjE1Ni4yNjgtLjM2NS40MDItLjYyNy40MDItLjIzNyAwLS40MTYtLjEyNS0uNTM3LS4zNzRoLS4wMDh2LjMxSDExVjFoLjU5M3YxLjY3N2guMDA4em0tLjAxNiAxLjFhLjc4Ljc4IDAgMCAwIC4xMDcuNDI2Yy4wNzEuMTEzLjE2My4xNjkuMjc0LjE2OS4xMzYgMCAuMjQtLjA3Mi4zMTQtLjIxNi4wNzUtLjE0NS4xMTMtLjM1LjExMy0uNjE1IDAtLjIyLS4wMzUtLjM5LS4xMDQtLjUxNC0uMDY3LS4xMjQtLjE2NC0uMTg3LS4yOS0uMTg3LS4xMiAwLS4yMTkuMDYyLS4yOTcuMTg1YS44ODYuODg2IDAgMCAwLS4xMTcuNDh2LjI3MnpNNC4xMiA3LjY5NUwyIDUuNTY4bC42NjItLjY2MiAxLjAwNiAxdi0xLjUxQTEuMzkgMS4zOSAwIDAgMSA1LjA1NSAzSDcuNHYuOTA1SDUuMDU1YS40OS40OSAwIDAgMC0uNDY4LjQ5M2wuMDA3IDEuNS45NDktLjk0NC42NTYuNjU2LTIuMDggMi4wODV6TTkuMzU2IDQuOTNIMTBWMy4yMkMxMCAyLjQwOCA5LjY4NSAyIDkuMDU2IDJjLS4xMzUgMC0uMjg1LjAyNC0uNDUuMDczYTEuNDQ0IDEuNDQ0IDAgMCAwLS4zODguMTY3di42NjVjLjIzNy0uMjAzLjQ4Ny0uMzA0Ljc1LS4zMDQuMjYxIDAgLjM5Mi4xNTYuMzkyLjQ2OWwtLjYuMTAzYy0uNTA2LjA4Ni0uNzYuNDA2LS43Ni45NjEgMCAuMjYzLjA2MS40NzMuMTgzLjYzMUEuNjEuNjEgMCAwIDAgOC42OSA1Yy4yOSAwIC41MDktLjE2LjY1Ny0uNDhoLjAwOXYuNDF6bS4wMDQtMS4zNTV2LjE5M2EuNzUuNzUgMCAwIDEtLjEyLjQzNi4zNjguMzY4IDAgMCAxLS4zMTMuMTcuMjc2LjI3NiAwIDAgMS0uMjItLjA5NS4zOC4zOCAwIDAgMS0uMDgtLjI0OGMwLS4yMjIuMTEtLjM1MS4zMzItLjM4OWwuNC0uMDY3ek03IDEyLjkzaC0uNjQ0di0uNDFoLS4wMDljLS4xNDguMzItLjM2Ny40OC0uNjU3LjQ4YS42MS42MSAwIDAgMS0uNTA3LS4yMzVjLS4xMjItLjE1OC0uMTgzLS4zNjgtLjE4My0uNjMgMC0uNTU2LjI1NC0uODc2Ljc2LS45NjJsLjYtLjEwM2MwLS4zMTMtLjEzLS40Ny0uMzkyLS40Ny0uMjYzIDAtLjUxMy4xMDItLjc1LjMwNXYtLjY2NWMuMDk1LS4wNjMuMjI0LS4xMTkuMzg4LS4xNjcuMTY1LS4wNDkuMzE1LS4wNzMuNDUtLjA3My42MyAwIC45NDQuNDA3Ljk0NCAxLjIydjEuNzF6bS0uNjQtMS4xNjJ2LS4xOTNsLS40LjA2OGMtLjIyMi4wMzctLjMzMy4xNjYtLjMzMy4zODggMCAuMS4wMjcuMTgzLjA4LjI0OGEuMjc2LjI3NiAwIDAgMCAuMjIuMDk1LjM2OC4zNjggMCAwIDAgLjMxMi0uMTdjLjA4LS4xMTYuMTItLjI2LjEyLS40MzZ6TTkuMjYyIDEzYy4zMjEgMCAuNTY4LS4wNTguNzM4LS4xNzN2LS43MWEuOS45IDAgMCAxLS41NTIuMjA3LjYxOS42MTkgMCAwIDEtLjUtLjIxNWMtLjEyLS4xNDUtLjE4MS0uMzQ1LS4xODEtLjU5OCAwLS4yNi4wNjMtLjQ2NC4xODktLjYxMmEuNjQ0LjY0NCAwIDAgMSAuNTE2LS4yMjNjLjE5NCAwIC4zNy4wNjkuNTI4LjIwN3YtLjc0OWMtLjEyOS0uMDktLjMzOC0uMTM0LS42MjYtLjEzNC0uNDE3IDAtLjc1MS4xNC0xLjAwMS40MjItLjI0OS4yOC0uMzczLjY2Mi0uMzczIDEuMTQ4IDAgLjQyLjExNi43NjQuMzQ5IDEuMDMuMjMyLjI2Ny41MzcuNC45MTMuNHpNMiA5bDEtMWg5bDEgMXY1bC0xIDFIM2wtMS0xVjl6bTEgMHY1aDlWOUgzem0zLTJsMS0xaDdsMSAxdjVsLTEgMVY3SDZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlcGxhY2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjIyMSAzLjczOWwyLjI2MSAyLjI2OUw3LjcgMy43ODRsLS43LS43LTEuMDEyIDEuMDA3LS4wMDgtMS42YS41MjMuNTIzIDAgMCAxIC41LS41MjZIOFYxSDYuNDhBMS40ODIgMS40ODIgMCAwIDAgNSAyLjQ4OVY0LjFMMy45MjcgMy4wMzNsLS43MDYuNzA2em02LjY3IDEuNzk0aC4wMWMuMTgzLjMxMS40NTEuNDY3LjgwNi40NjcuMzkzIDAgLjcwNi0uMTY4Ljk0LS41MDMuMjM2LS4zMzUuMzUzLS43OC4zNTMtMS4zMzMgMC0uNTExLS4xLS45MTMtLjMwMS0xLjIwNy0uMjAxLS4yOTUtLjQ4OC0uNDQyLS44Ni0uNDQyLS40MDUgMC0uNzE4LjE5NC0uOTM4LjU4MWgtLjAxVjFIOXY0LjkxOWguODl2LS4zODZ6bS0uMDE1LTEuMDYxdi0uMzRjMC0uMjQ4LjA1OC0uNDQ4LjE3NS0uNjAxYS41NC41NCAwIDAgMSAuNDQ1LS4yMy40OS40OSAwIDAgMSAuNDM2LjIzM2MuMTA0LjE1NC4xNTUuMzY4LjE1NS42NDMgMCAuMzMtLjA1Ni41ODctLjE2OS43NjhhLjUyNC41MjQgMCAwIDEtLjQ3LjI3LjQ5NS40OTUgMCAwIDEtLjQxMS0uMjExLjg1My44NTMgMCAwIDEtLjE2LS41MzJ6TTkgMTIuNzY5Yy0uMjU2LjE1NC0uNjI1LjIzMS0xLjEwOC4yMzEtLjU2MyAwLTEuMDItLjE3OC0xLjM2OS0uNTMzLS4zNDktLjM1NS0uNTIzLS44MTMtLjUyMy0xLjM3NCAwLS42NDguMTg2LTEuMTU4LjU2LTEuNTMuMzc0LS4zNzYuODc1LS41NjMgMS41LS41NjMuNDMzIDAgLjc0Ni4wNi45NC4xNzl2Ljk5OGExLjI2IDEuMjYgMCAwIDAtLjc5Mi0uMjc2Yy0uMzI1IDAtLjU4My4xLS43NzQuMjk4LS4xOS4xOTYtLjI4My40NjgtLjI4My44MTYgMCAuMzM4LjA5LjYwMy4yNzIuNzk3LjE4Mi4xOTEuNDMxLjI4Ny43NDkuMjg3LjI4MiAwIC41NTgtLjA5Mi44MjgtLjI3NnYuOTQ2ek00IDdMMyA4djZsMSAxaDdsMS0xVjhsLTEtMUg0em0wIDFoN3Y2SDRWOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUmVwbHkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02LjMwNiAyLjE0NmwtNC4wMiA0LjAydi43MDhsNC4wMiA0LjAyLjcwOC0uNzA3TDMuODA3IDYuOThINS42OWMyLjgxMyAwIDQuNjA1LjYwNSA1LjcwNSAxLjcyOSAxLjEwMiAxLjEyNSAxLjYxNSAyLjg3NyAxLjYxNSA1LjQyMXYuMzVoMXYtLjM1YzAtMi42NDYtLjUyNy00LjcyLTEuOS02LjEyMUMxMC43MzUgNi42MDUgOC42MTcgNS45OCA1LjY5IDUuOThIMy44ODdsMy4xMjctMy4xMjYtLjcwOC0uNzA4elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBvQ2xvbmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMyAxMEg0VjJoNFYxSDMuNzRhMS45IDEuOSAwIDAgMC0uNjcuMTMgMS42NiAxLjY2IDAgMCAwLS41Ny40MSAxLjczIDEuNzMgMCAwIDAtLjM3LjU5IDEuNjggMS42OCAwIDAgMC0uMTMuNjJ2OS41YTEuNzUgMS43NSAwIDAgMCAxLjA3IDEuNjIgMS45IDEuOSAwIDAgMCAuNjcuMTNINHYtMWgtLjI2YS43Mi43MiAwIDAgMS0uMjktLjA2Ljc4Ljc4IDAgMCAxLS40LS40LjkzLjkzIDAgMCAxIDAtLjI5di0uNWEuOTMuOTMgMCAwIDEgMC0uMjkuNzguNzggMCAwIDEgLjQtLjQuNzIuNzIgMCAwIDEgLjI5LS4wNkgxM3YySDl2MWg0LjVsLjUtLjVWOWgtMXYxek02IDNINXYxaDFWM3pNNSA1aDF2MUg1VjV6bTAgMmgxdjFINVY3em0uMjggOEg1di0zaDN2M2gtLjI4TDYuNSAxMy40OSA1LjI4IDE1ek0xMCAxaDQuNWwuNS41djZsLS41LjVIMTJ2MWgtMVY4aC0xYTEgMSAwIDAgMS0xLTFWMmExIDEgMCAwIDEgMS0xem0uNSA2aC41VjZoLS41YS41LjUgMCAwIDAgMCAxek0xMiA3aDJWNmgtMnYxem0tMS0yaDNWMmgtM3YzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBvRm9yY2VQdXNoIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMy43NCAxaDkuNzZsLjUuNXYxMmwtLjUuNUgxMHYtMWgzdi0yaC0zdi0xaDNWMkg0djhoM3YxSDMuNzRhLjc0Ljc0IDAgMCAwLS43NC43NXYuNWEuNzQuNzQgMCAwIDAgLjc0Ljc1SDd2MUgzLjc0QTEuNzQgMS43NCAwIDAgMSAyIDEyLjI1di05LjVBMS43NCAxLjc0IDAgMCAxIDMuNzQgMXptMS42IDQuODNsLjcxLjdMOCA0LjU4djEuNDVMNS4zOCA4LjY1bC43MS43IDEuOTItMS45MlYxNWgxVjcuMzI4bDIuMDMgMi4wMjIuNy0uN0w5IDUuOVY0LjUzOGwyIDEuOTkyLjctLjdMOC44OCAzaC0uNzFMNS4zNCA1LjgzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBvRm9ya2VkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0IDRhMiAyIDAgMSAwLTIuNDcgMS45NFY3YS40OC40OCAwIDAgMS0uMjcuNDRMOC40OSA4Ljg4bC0yLjc2LTEuNEEuNDkuNDkgMCAwIDEgNS40NiA3VjUuOTRhMiAyIDAgMSAwLTEgMFY3YTEuNTEgMS41MSAwIDAgMCAuODIgMS4zNEw4IDkuNzR2MS4zMmEyIDIgMCAxIDAgMSAwVjkuNzRsMi43LTEuMzZBMS40OSAxLjQ5IDAgMCAwIDEyLjUyIDdWNS45MkEyIDIgMCAwIDAgMTQgNHpNNCA0YTEgMSAwIDEgMSAyIDAgMSAxIDAgMCAxLTIgMHptNS40NyA5YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHpNMTIgNWExIDEgMCAxIDEgMC0yIDEgMSAwIDAgMSAwIDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlcG9QdWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTMgMS41VjNoLTFWMkgzdjhoMTB2My41bC0uNS41SDh2LTFoNHYtMkgyLjczNWEuNzIuNzIgMCAwIDAtLjI4NS4wNi43NC43NCAwIDAgMC0uNC40LjkzLjkzIDAgMCAwLS4wNS4yOXYuNWEuOTMuOTMgMCAwIDAgLjA1LjI5Ljc0Ljc0IDAgMCAwIC40LjRjLjA5MS4wNC4xOS4wNi4yOS4wNkgzdjFoLS4yNmExLjkgMS45IDAgMCAxLS42Ny0uMTMgMS43NyAxLjc3IDAgMCAxLS45NC0uOTUgMS43IDEuNyAwIDAgMS0uMTMtLjY3di05LjVhMS43IDEuNyAwIDAgMSAuMTMtLjYyIDEuNzcgMS43NyAwIDAgMSAuOTQtMUExLjkgMS45IDAgMCAxIDIuNzQgMWg5Ljc2bC41LjV6TTIgMTAuMTdWMi43NDh2Ny40MjJ6TTUgM0g0djFoMVYzem0wIDJINHYxaDFWNXpNNCA3aDF2MUg0Vjd6bTguMDctMy42MWwtLjcuNzEgMS45MiAxLjkySDd2MWg2LjM5bC0yLjAyIDIuMDMuNy43IDIuODMtMi44MnYtLjcxbC0yLjgzLTIuODN6TTUuNSAxMy40OUw0LjI4IDE1SDR2LTNoM3YzaC0uMjhMNS41IDEzLjQ5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBvUHVzaCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjUgMUgzLjc0QTEuNzQgMS43NCAwIDAgMCAyIDIuNzV2OS41QTEuNzQgMS43NCAwIDAgMCAzLjc0IDE0SDd2LTFIMy43NGEuNzQuNzQgMCAwIDEtLjc0LS43NXYtLjVhLjc0Ljc0IDAgMCAxIC43NC0uNzVIN3YtMUg0VjJoOXY4aC0zdjFoM3YyaC0zdjFoMy41bC41LS41di0xMmwtLjUtLjV6TTMgMi43M2EuNzUuNzUgMCAwIDAgMCAuMDJ2Ny40Mi03LjQ0ek02IDNINXYxaDFWM3ptLS42MiA1LjY1bC43MS43IDEuOTItMS45MlYxNWgxVjcuMzI4bDIuMDMgMi4wMjIuNy0uNy0yLjgyLTIuODNoLS43MUw1LjM4IDguNjV6TTUgNWgxdjFINVY1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSZXBvIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQgMTBWMS41bC0uNS0uNUgzLjc0YTEuOSAxLjkgMCAwIDAtLjY3LjEzIDEuNzcgMS43NyAwIDAgMC0uOTQgMSAxLjcgMS43IDAgMCAwLS4xMy42MnY5LjVhMS43IDEuNyAwIDAgMCAuMTMuNjdjLjE3Ny40MjcuNTE1Ljc2OC45NC45NWExLjkgMS45IDAgMCAwIC42Ny4xM0g0di0xaC0uMjZhLjcyLjcyIDAgMCAxLS4yOS0uMDYuNzQuNzQgMCAwIDEtLjQtLjQuOTMuOTMgMCAwIDEtLjA1LS4yOXYtLjVhLjkzLjkzIDAgMCAxIC4wNS0uMjkuNzQuNzQgMCAwIDEgLjQtLjQuNzIuNzIgMCAwIDEgLjI4Ni0uMDZIMTN2Mkg5djFoNC41bC41LS41VjEwek00IDEwVjJoOXY4SDR6bTEtN2gxdjFINVYzem0wIDJoMXYxSDVWNXptMSAySDV2MWgxVjd6bS41IDYuNDlMNS4yOCAxNUg1di0zaDN2M2gtLjI4TDYuNSAxMy40OXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUmVwb3J0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDFoMTNsLjUuNXYxMGwtLjUuNUg3LjcwN2wtMi44NTMgMi44NTRMNCAxNC41VjEySDEuNWwtLjUtLjV2LTEwbC41LS41em02IDEwSDE0VjJIMnY5aDIuNWwuNS41djEuNzkzbDIuMTQ2LTIuMTQ3TDcuNSAxMXptMC04aDF2NWgtMVYzem0wIDdoMVY5aC0xdjF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1JlcXVlc3RDaGFuZ2VzIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQuNSAxaC0xM2wtLjUuNXYxMGwuNS41SDR2Mi41bC44NTQuMzU0TDcuNzA3IDEySDE0LjVsLjUtLjV2LTEwbC0uNS0uNXpNMTQgMTFINy41bC0uMzU0LjE0Nkw1IDEzLjI5M1YxMS41bC0uNS0uNUgyVjJoMTJ2OXptLTQtMUg2VjguOTc5aDRWMTB6TTcuNSAzaDF2MmgydjFoLTJ2MmgtMVY2aC0yVjVoMlYzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSb2NrZXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC40OTEgMWMtMy41OTguMDA0LTYuNjU0IDEuOTgzLTguODM1IDRIMS41bC0uNS41djNsLjE0Ny4zNTQuOTkxLjk5MS4wMDEuMDA5IDQgNCAuMDA5LjAwMS45OTkuOTk5TDcuNSAxNWgzbC41LS41di00LjE1NGMyLjAxOS0yLjE3OCAzLjk5Ni01LjIzMyAzLjk5Mi04Ljg0NmwtLjUwMS0uNXpNMiA2aDIuNjQzYTIzLjgyOCAyMy44MjggMCAwIDAtMi4yMjUgMi43MUwyIDguMjk0VjZ6bTUuNyA4bC0uNDItLjQyM2EyMy41OSAyMy41OSAwIDAgMCAyLjcxNS0yLjIxNlYxNEg3Ljd6bS0xLjE0My0xLjE0NEwzLjEzNiA5LjQzN0M0LjEyOCA4IDguMzc5IDIuMzU1IDEzLjk3OCAyLjAxNmMtLjMyNiA1LjYxMi01Ljk4NyA5Ljg1My03LjQyMSAxMC44NHpNNCAxNXYtMUgydi0ySDF2M2gzem02Ljc0OC03LjY2N2ExLjUgMS41IDAgMSAwLTIuNDk2LTEuNjY2IDEuNSAxLjUgMCAwIDAgMi40OTUgMS42NjZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Jvb3RGb2xkZXJPcGVuZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDYuMjU3VjIuNWwuNS0uNWg1bC4zNS4xNS44Ni44NWg1Ljc5bC41LjVWNmgxLjEzbC40OC42My0yLjYzIDctLjQ4LjM3SDguNzQzYTUuNDggNS40OCAwIDAgMCAuNjU3LTFoMi43M2wyLjM3LTZIOC43NDNhNS41MzQgNS41MzQgMCAwIDAtLjcyLS43MjRsLjEyNy0uMTI2TDguNSA2SDEzVjRINy41bC0uMzUtLjE1TDYuMjkgM0gybC4wMSAyLjU5NGMtLjM2MS4xODQtLjcuNDA3LTEuMDEuNjYzelwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTYgMTAuNWExLjUgMS41IDAgMSAxLTMgMCAxLjUgMS41IDAgMCAxIDMgMHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTggMTAuNWEzLjUgMy41IDAgMSAxLTcgMCAzLjUgMy41IDAgMCAxIDcgMHpNNC41IDEzYTIuNSAyLjUgMCAxIDAgMC01IDIuNSAyLjUgMCAwIDAgMCA1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSb290Rm9sZGVyIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy43MSAzaDYuNzlsLjUxLjV2MTBsLS41LjVIOC43NDNhNS40OCA1LjQ4IDAgMCAwIC42NTctMWg0LjU5di0xLjUxbC4wMS00di0xLjVINy42OWwtLjAxNy4wMTdhNS40OTQgNS40OTQgMCAwIDAtLjg4MS0uNTA4bC4zNDgtLjM0OS4zNS0uMTVoNi41bC4wMS0uOTlINy41bC0uMzYtLjE1LS44NS0uODVIMlY1LjZhNS40NSA1LjQ1IDAgMCAwLS45OS42NDlWMi41bC41LS41aDVsLjM1LjE1Ljg1Ljg1elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTYgMTAuNWExLjUgMS41IDAgMSAxLTMgMCAxLjUgMS41IDAgMCAxIDMgMHpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTggMTAuNWEzLjUgMy41IDAgMSAxLTcgMCAzLjUgMy41IDAgMCAxIDcgMHpNNC41IDEzYTIuNSAyLjUgMCAxIDAgMC01IDIuNSAyLjUgMCAwIDAgMCA1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSc3MgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDEzSDN2LTJjMS4xMSAwIDIgLjg5IDIgMnpNMyAzdjFhOSA5IDAgMCAxIDkgOWgxQzEzIDcuNDggOC41MiAzIDMgM3ptMCA0djFjMi43NSAwIDUgMi4yNSA1IDVoMWMwLTMuMzEtMi42OS02LTYtNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjUnVieSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEgNy4xOWw2LjY0IDYuNjRoLjcyTDE1IDcuMTl2LS43MmwtMy4zMi0zLjMyLS4zNi0uMTVINC42OGwtLjM2LjE1TDEgNi40N3YuNzJ6bTcgNS41NkwyLjA4IDYuODMgNC44OSA0aDYuMjJsMi44MSAyLjgzTDggMTIuNzV6bTAtNy43M2gyLjY5bDEuODEgMS44MS00LjUgNC40VjUuMDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1J1bkFib3ZlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEuNzcgMS4wMUwxIDEuNDJ2MTJsLjc4LjQyIDktNnYtLjgzbC05LjAxLTZ6TTIgMTIuNDlWMi4zNmw3LjYgNS4wN0wyIDEyLjQ5ek0xMi4xNSA4aC43MWwyLjUgMi41LS43MS43MUwxMyA5LjU2VjE1aC0xVjkuNTVsLTEuNjUgMS42NS0uNy0uNyAyLjUtMi41elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NSdW5BbGwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMi43OCAyTDIgMi40MXYxMmwuNzguNDIgOS02VjhsLTktNnpNMyAxMy40OFYzLjM1bDcuNiA1LjA3TDMgMTMuNDh6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk02IDE0LjY4M2w4Ljc4LTUuODUzVjhMNiAyLjE0N1YzLjM1bDcuNiA1LjA3TDYgMTMuNDh2MS4yMDN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1J1bkJlbG93IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEuOCAxLjAxbC0uNzguNDF2MTJsLjc4LjQyIDktNnYtLjgzbC05LTZ6bS4yMiAxMS40OFYyLjM2bDcuNiA1LjA3LTcuNiA1LjA2ek0xMi44NSAxNWgtLjcxbC0yLjUtMi41LjcxLS43MUwxMiAxMy40NFY4aDF2NS40NWwxLjY1LTEuNjUuNzEuNzFMMTIuODUgMTV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1J1bkVycm9ycyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUgMi40MUw1Ljc4IDJMMTQuNzggOFY4LjgzTDkgMTIuNjgzM1YxMS40ODI2TDEzLjYgOC40Mkw2IDMuMzVWN0g1VjIuNDFaXCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00Ljg3MjI3IDcuODA4MDNDNC4wMjIxNSA3Ljc1NDkgMy4xNjcxNSA3Ljk2NjcgMi40Njg1NyA4LjQ0OTMxQzEuNzE2NDYgOC45MzM4IDEuMjM1NTUgOS42MzI3IDAuOTcwNDc0IDEwLjQ3OThDMC43MDEzMSAxMS4yODg4IDAuNzU2OTg0IDEyLjE5ODMgMS4wNzY0NiAxMi45OTdDMS4zOTg2MiAxMy44MDI0IDEuOTg4NDEgMTQuNDQ0IDIuNzMzNzMgMTQuODY5OUMzLjQ4OTc2IDE1LjMwMTkgNC4zNDk4NSAxNS40MDcgNS4yMDA2OCAxNS4yNDc1QzYuMDYxOTggMTUuMDg2IDYuODExMjYgMTQuNjAyOCA3LjM0NDQzIDEzLjk2M0w3LjM0OTE5IDEzLjk1NjhDNy44Nzc1OSAxMy4yNjk4IDguMjAxNDEgMTIuNDY4IDguMjAxNDEgMTEuNjA1M0M4LjIwMTQxIDEwLjU0MDMgNy44MjY5OCA5LjYzMDQ3IDcuMTM0NjQgOC44ODQ4OEw3LjEyOTQxIDguODc5NjVDNi41NDQ0NCA4LjI5NDY4IDUuNzQwNTUgNy44NjIzIDQuODcyMjcgNy44MDgwM1pNMi45NTA1OSA5LjE4MjgxQzMuNDYyNyA4LjgxMDM3IDQuMTIyNjIgOC42NjYwNCA0Ljc0MzEyIDguNzEzNzdMNC43NDQyMSA4LjcxMzg1QzUuNDAwNDkgOC43NjA3MyA1Ljk2NDY5IDkuMDQwNjkgNi40NDExOSA5LjUxNzE5QzYuOTU2ODkgMTAuMDMyOSA3LjI0NDAyIDEwLjc5MDcgNy4yNDQwMiAxMS41NTQ2VjExLjU2MThMNy4yNDQ1MyAxMS41Njg5QzcuMjkwODkgMTIuMjE3OSA3LjA2MDggMTIuODI5MiA2LjY3NzU4IDEzLjM1NzlDNi4yNTE1OSAxMy44NzY1IDUuNjg0NTYgMTQuMjA3MSA1LjA2ODE4IDE0LjM0OTNDNC40NTg4NSAxNC40OSAzLjgwMTYxIDE0LjM5NjMgMy4yMzc3NiAxNC4wNjc0QzIuNjY2MjYgMTMuNzM0MSAyLjIzNzg2IDEzLjI1OSAxLjk1MDQ1IDEyLjYzNjJDMS42NzA1MiAxMi4wMjk3IDEuNjY3OTEgMTEuMzcyMiAxLjg1ODcyIDEwLjc1MkwxLjg1OTgzIDEwLjc0ODJDMi4wNDk5NiAxMC4wODI3IDIuNDI4NDkgOS41NjI1MiAyLjk1MDU5IDkuMTgyODFaTTQuNTA1MSAxMS4wMTI0TDMuMjkxOTEgOS43NDg3TDIuNjU0MzEgMTAuMzg2M0wzLjg3MzE2IDExLjY1NTlMMi42NTQzMSAxMi45MjU2TDMuMjkxOTEgMTMuNTYzMkw0LjUwNTEgMTIuMjk5NEw1LjcxODI5IDEzLjU2MzJMNi4zNTU4OSAxMi45MjU2TDUuMTM3MDQgMTEuNjU1OUw2LjM1NTg5IDEwLjM4NjNMNS43MTgyOSA5Ljc0ODdMNC41MDUxIDExLjAxMjRaXCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NhdmVBbGwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQuODUgMi42NWwtMS41LTEuNUwxMyAxSDQuNDhsLS41LjVWNEgxLjVsLS41LjV2MTBsLjUuNWgxMGwuNS0uNVYxMmgyLjVsLjUtLjVWM2wtLjE1LS4zNXpNMTEgMTRIMlY1aDF2My4wN2g2VjVoLjc5TDExIDYuMjFWMTR6TTYgN1Y1aDJ2Mkg2em04IDRoLTJWNmwtLjE1LS4zNS0xLjUtMS41TDEwIDRINVYyaDcuODFsMS4yMSAxLjIxTDE0IDExelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTYXZlQXMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS4wNCAxLjMzTDEyLjcxIDNsLjI5Ljcxdi4zM2gtLjVsLS41LjV2LS44M2wtMS42Ny0xLjY3SDEwdjRINHYtNEgydjEwaDNsLS41IDFIMmwtMS0xdi0xMGwxLTFoOC4zM2wuNzEuMjl6TTcgNWgyVjJIN3Yzem02LjUgMEwxNSA2LjVsLS4wMi42OS01LjUgNS41LS4xMy4xMi0uMzcuMzctLjEuMDktMyAxLjUtLjY3LS42NyAxLjUtMyAuMDktLjEuMzctLjM3LjEyLS4xMyA1LjUtNS41aC43MXptLTYuMjIgNy4yNGwtLjUyIDEgMS4wNC0uNDgtLjUyLS41MnptLjY5LTEuMDNsLjc5Ljc5IDUuMTUtNS4xNS0uNzktLjc5LTUuMTUgNS4xNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2F2ZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjM1MyAxLjE0NmwxLjUgMS41TDE1IDN2MTEuNWwtLjUuNWgtMTNsLS41LS41di0xM2wuNS0uNUgxM2wuMzUzLjE0NnpNMiAydjEyaDEyVjMuMjA4TDEyLjc5MyAySDExdjRINFYySDJ6bTYgMHYzaDJWMkg4elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTY3JlZW5GdWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTMgMTJoMTBWNEgzdjh6bTItNmg2djRINVY2ek0yIDZIMVYyLjVsLjUtLjVINXYxSDJ2M3ptMTMtMy41VjZoLTFWM2gtM1YyaDMuNWwuNS41ek0xNCAxMGgxdjMuNWwtLjUuNUgxMXYtMWgzdi0zek0yIDEzaDN2MUgxLjVsLS41LS41VjEwaDF2M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2NyZWVuTm9ybWFsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTMuNSA0SDFWM2gyVjFoMXYyLjVsLS41LjV6TTEzIDNWMWgtMXYyLjVsLjUuNUgxNVYzaC0yem0tMSA5LjVWMTVoMXYtMmgydi0xaC0yLjVsLS41LjV6TTEgMTJ2MWgydjJoMXYtMi41bC0uNS0uNUgxem0xMS0xLjVsLS41LjVoLTdsLS41LS41di01bC41LS41aDdsLjUuNXY1ek0xMCA3SDZ2Mmg0Vjd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NlYXJjaFN0b3AgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01LjczOCAzLjMxOGE0LjUgNC41IDAgMCAwLS44NzcgNS4xMjNBNC40OCA0LjQ4IDAgMCAwIDYuMSAxMGE0LjYyIDQuNjIgMCAwIDAtLjEgMXYuMTdjLS4xNi0uMTEtLjMyLS4yMi0uNDctLjM0TDEuNzUgMTQuNSAxIDEzLjg0bDMuOC0zLjY5YTUuNSA1LjUgMCAxIDEgOS42Mi0zLjY1YzAgLjI2OC0uMDIuNTM1LS4wNi44YTUuMjMyIDUuMjMyIDAgMCAwLS45NC0uNjhWNi41YTQuNSA0LjUgMCAwIDAtNy42ODItMy4xODJ6bTMuMDQgNC4zNTZhNCA0IDAgMSAxIDQuNDQ0IDYuNjUyIDQgNCAwIDAgMS00LjQ0NC02LjY1MnptLjEgNS40NDdBMyAzIDAgMCAwIDExIDE0YTMgMyAwIDAgMCAxLjc0LS41NUw4LjU1IDkuMjZBMyAzIDAgMCAwIDggMTFhMyAzIDAgMCAwIC44NzkgMi4xMjF6bS4zODItNC41N2w0LjE5IDQuMTg5QTMgMyAwIDAgMCAxNCAxMWEzIDMgMCAwIDAtMy0zIDMgMyAwIDAgMC0xLjc0LjU1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTZWFyY2ggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUuMjUgMGE4LjI1IDguMjUgMCAwIDAtNi4xOCAxMy43MkwxIDIyLjg4bDEuMTIgMSA4LjA1LTkuMTJBOC4yNTEgOC4yNTEgMCAxIDAgMTUuMjUuMDFWMHptMCAxNWE2Ljc1IDYuNzUgMCAxIDEgMC0xMy41IDYuNzUgNi43NSAwIDAgMSAwIDEzLjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NlcnZlckVudmlyb25tZW50IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTYgM2g0djFINlYzem0wIDZoNHYxSDZWOXptMCAyaDR2MUg2di0xem05LjE0IDVILjg2bDEuMjUtNUg0VjJhLjk1Ljk1IDAgMCAxIC4wNzgtLjM4M2MuMDUyLS4xMi4xMjMtLjIyNi4yMTEtLjMyYS45MjIuOTIyIDAgMCAxIC4zMi0uMjE5QTEuMDEgMS4wMSAwIDAgMSA1IDFoNmEuOTUuOTUgMCAwIDEgLjM4My4wNzhjLjEyLjA1Mi4yMjYuMTIzLjMyLjIxMWEuOTIyLjkyMiAwIDAgMSAuMjE5LjMyYy4wNTIuMTI1LjA3OC4yNTYuMDc4LjM5MXY5aDEuODlsMS4yNSA1ek01IDEzaDZWMkg1djExem04Ljg2IDJsLS43NS0zSDEydjJINHYtMkgyLjg5bC0uNzUgM2gxMS43MnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2VydmVyUHJvY2VzcyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEuNSAyaDEzbC41LjVWOWgtMVY2SDJ2N2g3djFIMS41bC0uNS0uNXYtMTFsLjUtLjV6TTIgNWgxMlYzSDJ2MnptNSA3di0xLjA5NGExLjYzMyAxLjYzMyAwIDAgMS0uNDY5LS4yNjVsLS45NDUuNTM5LS41LS44Ni45MzctLjU0N2ExLjU3IDEuNTcgMCAwIDEgMC0uNTQ3bC0uOTM3LS41NDYuNS0uODYuOTQ1LjU0Yy4xNTEtLjEyLjMwOC0uMjA5LjQ2OS0uMjY2VjdoMXYxLjA5NGExLjQ4IDEuNDggMCAwIDEgLjQ2OS4yNjVsLjk0NS0uNTM5LjUuODYtLjkzNy41NDdhMS41NyAxLjU3IDAgMCAxIDAgLjU0NmwuOTM3LjU0Ny0uNS44Ni0uOTQ1LS41NGExLjgwNyAxLjgwNyAwIDAgMS0uNDY5LjI2NlYxMkg3em0tLjI1LTIuNWMwIC4yMDguMDczLjM4NS4yMTkuNTMxYS43MjMuNzIzIDAgMCAwIC41MzEuMjE5LjcyMy43MjMgMCAwIDAgLjUzMS0uMjE5LjcyMy43MjMgMCAwIDAgLjIxOS0uNTMxLjcyMy43MjMgMCAwIDAtLjIxOS0uNTMxLjcyMy43MjMgMCAwIDAtLjUzMS0uMjE5LjcyMy43MjMgMCAwIDAtLjUzMS4yMTkuNzIzLjcyMyAwIDAgMC0uMjE5LjUzMXptNS4zMzQgNS41di0xLjA5NGExLjYzNCAxLjYzNCAwIDAgMS0uNDY5LS4yNjVsLS45NDUuNTM5LS41LS44Ni45MzgtLjU0N2ExLjU3MiAxLjU3MiAwIDAgMSAwLS41NDdsLS45MzgtLjU0Ni41LS44Ni45NDUuNTRjLjE1MS0uMTIuMzA4LS4yMDkuNDctLjI2NlYxMGgxdjEuMDk0YTEuNDg2IDEuNDg2IDAgMCAxIC40NjguMjY1bC45NDUtLjUzOS41Ljg2LS45MzcuNTQ3YTEuNTYyIDEuNTYyIDAgMCAxIDAgLjU0NmwuOTM3LjU0Ny0uNS44Ni0uOTQ1LS41NGExLjgwNiAxLjgwNiAwIDAgMS0uNDY5LjI2NlYxNWgtMXptLS4yNS0yLjVjMCAuMjA4LjA3My4zODUuMjE5LjUzMWEuNzIzLjcyMyAwIDAgMCAuNTMxLjIxOS43MjMuNzIzIDAgMCAwIC41MzEtLjIxOS43MjMuNzIzIDAgMCAwIC4yMi0uNTMxLjcyMy43MjMgMCAwIDAtLjIyLS41MzEuNzIzLjcyMyAwIDAgMC0uNTMtLjIxOS43MjMuNzIzIDAgMCAwLS41MzIuMjE5LjcyMy43MjMgMCAwIDAtLjIxOS41MzF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NlcnZlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIuNSA1TDIgNC41di0zbC41LS41aDExbC41LjV2M2wtLjUuNWgtMTF6TTEwIDJIOXYxSDhWMkg3djFINlYySDV2MUg0VjJIM3YyaDEwVjJoLTJ2MWgtMVYyem0tNy41IDhMMiA5LjV2LTNsLjUtLjVoMTFsLjUuNXYzbC0uNS41aC0xMXpNNiA3SDV2MUg0VjdIM3YyaDEwVjdoLTJ2MWgtMVY3SDl2MUg4VjdIN3YxSDZWN3ptNy41IDhsLjUtLjV2LTNsLS41LS41aC0xMWwtLjUuNXYzbC41LjVoMTF6TTMgMTR2LTJoMXYxaDF2LTFoMXYxaDF2LTFoMXYxaDF2LTFoMXYxaDF2LTFoMnYySDN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NldHRpbmdzR2VhciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMjQgMjRcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTE5Ljg1IDguNzVsNC4xNS44M3Y0Ljg0bC00LjE1LjgzIDIuMzUgMy41Mi0zLjQzIDMuNDMtMy41Mi0yLjM1LS44MyA0LjE1SDkuNThsLS44My00LjE1LTMuNTIgMi4zNS0zLjQzLTMuNDMgMi4zNS0zLjUyTDAgMTQuNDJWOS41OGw0LjE1LS44M0wxLjggNS4yMyA1LjIzIDEuOGwzLjUyIDIuMzVMOS41OCAwaDQuODRsLjgzIDQuMTUgMy41Mi0yLjM1IDMuNDMgMy40My0yLjM1IDMuNTJ6bS0xLjU3IDUuMDdsNC0uODF2LTJsLTQtLjgxLS41NC0xLjMgMi4yOS0zLjQzLTEuNDMtMS40My0zLjQzIDIuMjktMS4zLS41NC0uODEtNGgtMmwtLjgxIDQtMS4zLjU0LTMuNDMtMi4yOS0xLjQzIDEuNDNMNi4zOCA4LjlsLS41NCAxLjMtNCAuODF2Mmw0IC44MS41NCAxLjMtMi4yOSAzLjQzIDEuNDMgMS40MyAzLjQzLTIuMjkgMS4zLjU0LjgxIDRoMmwuODEtNCAxLjMtLjU0IDMuNDMgMi4yOSAxLjQzLTEuNDMtMi4yOS0zLjQzLjU0LTEuM3ptLTguMTg2LTQuNjcyQTMuNDMgMy40MyAwIDAgMSAxMiA4LjU3IDMuNDQgMy40NCAwIDAgMSAxNS40MyAxMmEzLjQzIDMuNDMgMCAxIDEtNS4zMzYtMi44NTJ6bS45NTYgNC4yNzRjLjI4MS4xODguNjEyLjI4OC45NS4yODhBMS43IDEuNyAwIDAgMCAxMy43MSAxMmExLjcxIDEuNzEgMCAxIDAtMi42NiAxLjQyMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2V0dGluZ3MgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zLjUgMmgtMXY1aDFWMnptNi4xIDVINi40TDYgNi40NXYtMUw2LjQgNWgzLjJsLjQuNXYxbC0uNC41em0tNSAzSDEuNEwxIDkuNXYtMWwuNC0uNWgzLjJsLjQuNXYxbC0uNC41em0zLjktOGgtMXYyaDFWMnptLTEgNmgxdjZoLTFWOHptLTQgM2gtMXYzaDF2LTN6bTcuOSAwaDMuMTlsLjQtLjV2LS45NWwtLjQtLjVIMTEuNGwtLjQuNXYuOTVsLjQuNXptMi4xLTloLTF2NmgxVjJ6bS0xIDEwaDF2MmgtMXYtMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2hpZWxkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC4yNDYgMTQuNzEzYTI3Ljc5MiAyNy43OTIgMCAwIDEtMS41MDUtLjk1M2MtLjUwMS0uMzQtLjk4My0uNzA3LTEuNDQ0LTEuMS0uNDU4LS4zOTUtLjg4OC0uODItMS4yODgtMS4yNzQtLjQtLjQ1NS0uNzUzLS45NS0xLjA1LTEuNDc4YTcuOCA3LjggMCAwIDEtLjctMS42OUE3LjA0MSA3LjA0MSAwIDAgMSAyIDYuM1YzLjFsLjUtLjVjLjMzMyAwIC42NTYtLjAxMS45Ny0uMDM2LjI5Ni0uMDIzLjU5MS0uMDY2Ljg4Mi0uMTI4LjI4NC0uMDYyLjU2Mi0uMTQ4LjgzMi0uMjU2LjI4NC0uMTE4LjU1Ny0uMjYxLjgxNi0uNDI3YTQuODMgNC44MyAwIDAgMSAxLjE4NC0uNTY1IDQuOCA0LjggMCAwIDEgMi0uMTQyIDQuMDE4IDQuMDE4IDAgMCAxIDEuMjM3LjM4M2MuMTk5LjA5Ny4zOTIuMjA0LjU4LjMyMi4yNi4xNjcuNTM1LjMxLjgyMS40MjguMjcuMTA5LjU0Ny4xOTQuODMxLjI1Ni4yOTEuMDYyLjU4Ny4xMDYuODg0LjEyOS4zMTEuMDI0LjYzNC4wMzUuOTY3LjAzNWwuNS41djMuMmE3LjA0MyA3LjA0MyAwIDAgMS0uMjU2IDEuOTE5IDcuODA0IDcuODA0IDAgMCAxLS43IDEuNjkgOC43NTEgOC43NTEgMCAwIDEtMS4wNSAxLjQ3OGMtLjQuNDUyLS44MjkuODc3LTEuMjg2IDEuMjdhMTUuOTQgMTUuOTQgMCAwIDEtMS40NDggMS4xIDI4LjcxIDI4LjcxIDAgMCAxLTEuNTEuOTU2aC0uNTA4ek0zIDMuNTlWNi4zYy0uMDA0LjU1NS4wNyAxLjExLjIyIDEuNjQ1YTYuNyA2LjcgMCAwIDAgLjYxIDEuNDczYy4yNjMuNDY3LjU3NS45MDUuOTMgMS4zMDguMzcuNDE3Ljc2Ni44MSAxLjE4OCAxLjE3NC40MzIuMzY4Ljg4My43MTIgMS4zNTIgMS4wMy40LjI2Ny44LjUyMyAxLjIuNzY5LjQtLjI0Mi44LS40OTggMS4yLS43NjguNDctLjMxOS45MjMtLjY2MyAxLjM1NS0xLjAzMS40MjEtLjM2NC44MTctLjc1NiAxLjE4Ni0xLjE3MmE3LjggNy44IDAgMCAwIC45My0xLjMwOGMuMjYxLS40NjUuNDY2LS45Ni42MS0xLjQ3My4xNS0uNTM3LjIyMy0xLjA5LjIyLTEuNjQ3VjMuNTljLS4xNTkgMC0uMzEzLS4wMTItLjQ2NS0uMDIzbC0uMDc5LS4wMDZhNy45NSA3Ljk1IDAgMCAxLTEuMDE4LS4xNDcgNi4xMTIgNi4xMTIgMCAwIDEtMS45NzYtLjgxNCA1LjE2NiA1LjE2NiAwIDAgMC0uNDgyLS4yNyAzLjEyMyAzLjEyMyAwIDAgMC0uOTQzLS4yOSAzLjY4NiAzLjY4NiAwIDAgMC0xLjU1OC4xMDZjLS4zMzIuMTA4LS42NDkuMjYtLjk0LjQ1Mi0uMzEyLjItLjY0LjM3Mi0uOTgzLjUxM2E2LjQgNi40IDAgMCAxLTEgLjMwN2MtLjMzNS4wNy0uNjc1LjEyLTEuMDE3LjE0Ni0uMTc0LjAxLS4zNTUuMDItLjU0LjAyNnptNi4wNjUgNC4zYTEuNSAxLjUgMCAxIDAtMS4xMyAwTDcuNSAxMC41aDJsLS40MzUtMi42MXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2lnbkluIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTEuMDIgMy43N2wuMDEtLjAxLjk5Ljk5VjIuNWwtLjUtLjVoLTlsLS41MS41di40OTNMMiAzdjEwLjI5bC4zNi40NiA1IDEuNzJMOCAxNXYtMWgzLjUybC41LS41di0yLjI1bC0xIDFWMTNIOFY0LjcxbC0uMzMtLjQ2TDQuMDM2IDNoNi45ODR2Ljc3ek03IDE0LjI4bC00LTEuMzRWMy43Mmw0IDEuMzR2OS4yMnptMy4wOS02Ljc1aDQuOTd2MWgtNC45M2wxLjU5IDEuNi0uNzEuNy0yLjQ3LTIuNDZ2LS43MWwyLjQ5LTIuNDguNy43LTEuNjQgMS42NXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU2lnbk91dCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExLjAyIDMuNzd2MS41NmwxLS45OVYyLjVsLS41LS41aC05bC0uNS41di40ODZMMiAzdjEwLjI5bC4zNi40NiA1IDEuNzJMOCAxNXYtMWgzLjUybC41LS41di0xLjgxbC0xLTFWMTNIOFY0LjcxbC0uMzMtLjQ2TDQuMDM2IDNoNi45ODR2Ljc3ek03IDE0LjI4bC00LTEuMzRWMy43Mmw0IDEuMzR2OS4yMnptNi41Mi01LjhIOC41NXYtMWg0LjkzbC0xLjYtMS42LjcxLS43IDIuNDcgMi40NnYuNzFsLTIuNDkgMi40OC0uNy0uNyAxLjY1LTEuNjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NtaWxleSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTQuMTExIDIuMThhNyA3IDAgMSAxIDcuNzc4IDExLjY0QTcgNyAwIDAgMSA0LjExIDIuMTh6bS41NTYgMTAuODA5YTYgNiAwIDEgMCA2LjY2Ni05Ljk3OCA2IDYgMCAwIDAtNi42NjYgOS45Nzh6TTYuNSA3YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHptNSAwYTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHpNOCAxMWEzIDMgMCAwIDEtMi42NS0xLjU4bC0uODcuNDhhNCA0IDAgMCAwIDcuMTItLjE2bC0uOS0uNDNBMyAzIDAgMCAxIDggMTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NvcnRQcmVjZWRlbmNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNyAyTDYgM3YzaDFWM2g3djIuNDUzbC4yMDctLjE2Ljc5My43OTNWM2wtMS0xSDd6bTEgMmgydjJIOFY0ek01IDlIM3YyaDJWOXpNMiA3TDEgOHY1bDEgMWg3bDEtMVY4TDkgN0gyem0wIDZWOGg3djVIMnptNi0zSDZ2Mmgydi0yem01LTZoLTF2My44NjRsLTEuMTgyLTEuMTgyLS43MDcuNzA3IDIuMDM1IDIuMDM2aC43MDhsMi4wMzUtMi4wMzYtLjcwNy0uNzA3TDEzIDcuODY0VjR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NvdXJjZUNvbnRyb2wgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMjEuMDA3IDguMjIyQTMuNzM4IDMuNzM4IDAgMCAwIDE1LjA0NSA1LjJhMy43MzcgMy43MzcgMCAwIDAgMS4xNTYgNi41ODMgMi45ODggMi45ODggMCAwIDEtMi42NjggMS42N2gtMi45OWE0LjQ1NiA0LjQ1NiAwIDAgMC0yLjk4OSAxLjE2NVY3LjRhMy43MzcgMy43MzcgMCAxIDAtMS40OTQgMHY5LjExN2EzLjc3NiAzLjc3NiAwIDEgMCAxLjgxNi4wOTkgMi45OSAyLjk5IDAgMCAxIDIuNjY4LTEuNjY3aDIuOTlhNC40ODQgNC40ODQgMCAwIDAgNC4yMjMtMy4wMzkgMy43MzYgMy43MzYgMCAwIDAgMy4yNS0zLjY4N3pNNC41NjUgMy43MzhhMi4yNDIgMi4yNDIgMCAxIDEgNC40ODQgMCAyLjI0MiAyLjI0MiAwIDAgMS00LjQ4NCAwem00LjQ4NCAxNi40NDFhMi4yNDIgMi4yNDIgMCAxIDEtNC40ODQgMCAyLjI0MiAyLjI0MiAwIDAgMSA0LjQ4NCAwem04LjIyMS05LjcxNWEyLjI0MiAyLjI0MiAwIDEgMSAwLTQuNDg1IDIuMjQyIDIuMjQyIDAgMCAxIDAgNC40ODV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NwbGl0SG9yaXpvbnRhbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xNCAxSDNMMiAydjExbDEgMWgxMWwxLTFWMmwtMS0xek04IDEzSDNWMmg1djExem02IDBIOVYyaDV2MTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1NwbGl0VmVydGljYWwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQgMUgzTDIgMnYxMWwxIDFoMTFsMS0xVjJsLTEtMXptMCAxMkgzVjhoMTF2NXptMC02SDNWMmgxMXY1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTcXVpcnJlbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTUuNTU4IDIuNjQyYTMuNjk4IDMuNjk4IDAgMCAwLS4xMjMtLjAxQTEuNDcgMS40NyAwIDAgMCAzLjk5OSAxLjUydjEuMzA3YTQuODk4IDQuODk4IDAgMCAwLTIuOTkzIDMuNTg3di4zOWMuNDU5LjgzNiAxLjkwNiAxLjEzIDIuMTU0IDEuMTguMDI3LjAwNi4wNC4wMDkuMDM1LjAwOS0yLjQxOS4zMi0yLjE5IDIuMjQ5LTIuMTkgMi4yNDlhMSAxIDAgMCAwIDEgLjkzYy4yNzItLjAxOS41MzgtLjA4Ljc5LS4xOGgyLjA2YTMgMyAwIDAgMC0uMzYgMWgtLjMyYTIuNTUgMi41NSAwIDAgMC0yLjE3IDIuNTI4LjQyLjQyIDAgMCAwIC4zOS40OGg2LjY3N2EzLjc2IDMuNzYgMCAwIDAgMy45MjktNC4xNTggMy42NDkgMy42NDkgMCAwIDAtLjc1LTIuMDlsLS4xMS0uMTRjLS40My0uNTUtLjY4LS45MDktLjU1LTEuMjg5LjEzLS4zOC4zNjUtLjQuMzY1LS40cy4xODUtLjAzLjQ1NS4wOWMuMjIuMTI4LjQ2LjIyLjcxLjI3YTEuNTggMS41OCAwIDAgMCAxLjczNi0uOTA1Yy4wOTUtLjIwOC4xNDMtLjQzNS4xNDMtLjY2NC4wMDYtLjcxOC0uMzMtMS40NTUtLjcyNS0yLjA4OGE0Ljk5OCA0Ljk5OCAwIDAgMC0xLjU1NC0xLjU3IDMuOTk4IDMuOTk4IDAgMCAwLTIuNjM5LS40IDMuMDQ5IDMuMDQ5IDAgMCAwLTEuNjcuODkgMy41NiAzLjU2IDAgMCAwLS43NzkgMS4zNTkgNC4zNTggNC4zNTggMCAwIDAtLjYzNi0uNzQ3di0uMTU5QTEuNDcgMS40NyAwIDAgMCA1LjU1OCAxLjUydjEuMTIyem01LjMwNCA4LjczOWMuMTExLjc0MS4yMiAxLjgyMS0uODY3IDIuNDQyLS4yOTYuMTAzLS42MDguMTYtLjkyMy4xNjdIMy4yMTVhMSAxIDAgMCAxIC45Mi0xaDEuMjc5di0uNDk5YTEuNzkgMS43OSAwIDAgMSAxLjY1My0xLjgyNWwtLjYyNi0uODg3Yy0uMjM2LjA2Ny0uNDYzLjE1My0uNTc3LjIzM0gyLjY1NWEuNzU0Ljc1NCAwIDAgMC0uMjY0LjA3Yy0uMTM4LjA1NS0uMjc0LjEwOS0uMzk2LjAzLS4yLS4xMy4xMS0xLjEyIDEuMDEtMS4xMmgxYy40OSAwIC41Ny0uNTQuNTctLjU0bC4yOC0xLjEyOWEzLjM4OSAzLjM4OSAwIDAgMS0yLjg1LS45MyAzLjM4OSAzLjM4OSAwIDAgMSAzLjE0LTIuNjU4bC4wODMuMDAyYy4yNi4wMDguNDM1LjAxNC43NzYuMTY4LjkzLjQyIDIuMTQ5IDIuNDY5IDIuMTQ5IDIuNDY5bC4wNi4wOWguMTd2LS4wN2MtLjA2LS40NDMtLjAyLTEuNDY0LjExNi0xLjg5LjEzNy0uNDI0LjM2Ny0uODE0LjY3My0xLjE0YTIuMzQ5IDIuMzQ5IDAgMCAxIDEuMy0uNjU5IDIuNjM5IDIuNjM5IDAgMCAxIDEuODYuMjljLjQ2LjI4NC44NS42NyAxLjEzOSAxLjEyNy4yODkuNDU3LjQ3Ni44MzYuNTM1IDEuMzc0LS4wMDEuMDIgMCAuMDQ3LjAwMi4wODEuMDA3LjE0My4wMi4zOS0uMTI4LjU0Ny0uMTI3LjEzNS0uNDQ4LjIzLS42Ny4xOGExLjU3IDEuNTcgMCAwIDEtLjQ1LS4xOCAxLjMzIDEuMzMgMCAwIDAtMS4xMzktLjEzIDEuNDIgMS40MiAwIDAgMC0uOTQgMSAyLjMxOCAyLjMxOCAwIDAgMCAuNjQgMi4yMzhsLjExLjE0Yy4zNDcuNDM0LjU0Ni45NjYuNTcgMS41MmEyLjk5OSAyLjk5OSAwIDAgMS0uMzA2IDEuNDI1IDIuNzA4IDIuNzA4IDAgMCAwLS40NjQtMS4zMDRsLS4zNy4zNjh6TTQuMjQgNWEuNS41IDAgMSAwIDAgMSAuNS41IDAgMCAwIDAtMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3RhckVtcHR5IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOS41OTUgNi4yNTJMOCAxIDYuNDA1IDYuMjUySDFsNC4zNzMgMy40TDMuNzUgMTUgOCAxMS42OTUgMTIuMjUgMTVsLTEuNjIzLTUuMzQ4TDE1IDYuMjUySDkuNTk1em0tNy4yNDcuNDdINi43Mkw4IDIuNTA3IDYuNzIgNi43MjJIMi4zNDh6bTMuNTM3IDIuNzVsLTEuMzA3IDQuMzA1IDEuMzA3LTQuMzA1em03Ljc2Ny0yLjc1SDkuMjhoNC4zNzJ6bS04Ljc1LjloMi4zNjZMOCA1LjIxNGwuNzMyIDIuNDFoMi4zNjdsLTEuOTE1IDEuNDkuNzMxIDIuNDA5TDggMTAuMDMybC0xLjkxNSAxLjQ5LjczMS0yLjQxLTEuOTE1LTEuNDl6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N0YXJGdWxsIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOS41OTUgNi4yNTJMOCAxIDYuNDA1IDYuMjUySDFsNC4zNzMgMy40TDMuNzUgMTUgOCAxMS42OTUgMTIuMjUgMTVsLTEuNjIzLTUuMzQ4TDE1IDYuMjUySDkuNTk1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTdGFySGFsZiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTYuNDA1IDYuMjUyTDggMWwxLjU5NSA1LjI1MkgxNWwtNC4zNzMgMy40TDEyLjI1IDE1IDggMTEuNjk1IDMuNzUgMTVsMS42MjMtNS4zNDhMMSA2LjI1Mmg1LjQwNXpNOCAxMC4wMzJsMS45MTUgMS40OS0uNzMxLTIuNDEgMS45MTUtMS40OUg4LjczMkw4IDUuMjE0djQuODJ6bTAtNy41MjV6bTUuNjUyIDQuMjE1SDkuMjhoNC4zNzJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N0b3BDaXJjbGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNNiA2aDR2NEg2elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOC42IDFjMS42LjEgMy4xLjkgNC4yIDIgMS4zIDEuNCAyIDMuMSAyIDUuMSAwIDEuNi0uNiAzLjEtMS42IDQuNC0xIDEuMi0yLjQgMi4xLTQgMi40LTEuNi4zLTMuMi4xLTQuNi0uNy0xLjQtLjgtMi41LTItMy4xLTMuNUMuOSA5LjIuOCA3LjUgMS4zIDZjLjUtMS42IDEuNC0yLjkgMi44LTMuOEM1LjQgMS4zIDcgLjkgOC42IDF6bS41IDEyLjljMS4zLS4zIDIuNS0xIDMuNC0yLjEuOC0xLjEgMS4zLTIuNCAxLjItMy44IDAtMS42LS42LTMuMi0xLjctNC4zLTEtMS0yLjItMS42LTMuNi0xLjctMS4zLS4xLTIuNy4yLTMuOCAxLTEuMS44LTEuOSAxLjktMi4zIDMuMy0uNCAxLjMtLjQgMi43LjIgNCAuNiAxLjMgMS41IDIuMyAyLjcgMyAxLjIuNyAyLjYuOSAzLjkuNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sQXJyYXkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMmwtLjUuNXYxMWwuNS41SDR2LTFIMlYzaDJWMkgxLjV6bTEzIDEybC41LS41di0xMWwtLjUtLjVIMTJ2MWgydjEwaC0ydjFoMi41elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW1ib2xCb29sZWFuIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMSAzLjVsLjUtLjVoMTNsLjUuNXY5bC0uNS41aC0xM2wtLjUtLjV2LTl6TTE0IDRIOHYzLjQ5M2gtLjVsLTMuNTc0LS4wMDUgMi4wOS0yLjA5LS43MDctLjcwNy0yLjk1NSAyLjk1NXYuNzA4bDIuOTU1IDIuOTU1LjcwNy0uNzA3LTIuMTE0LTIuMTE0IDMuOTk2LjAwNUg4di0uOTg2bDMuOTA3LjAwNS0yLjExNC0yLjExNC43MDctLjcwNyAyLjk1NiAyLjk1NXYuNzA4TDEwLjUgMTEuMzA5bC0uNzA3LS43MDcgMi4wOS0yLjA5TDggOC41MDdWMTJoNlY0elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW1ib2xDbGFzcyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMS4zNCA5LjcxaC43MWwyLjY3LTIuNjd2LS43MUwxMy4zOCA1aC0uN2wtMS44MiAxLjgxaC01VjUuNTZsMS44Ni0xLjg1VjNsLTItMkg1TDEgNXYuNzFsMiAyaC43MWwxLjE0LTEuMTV2NS43OWwuNS41SDEwdi41MmwxLjMzIDEuMzRoLjcxbDIuNjctMi42N3YtLjcxTDEzLjM3IDEwaC0uN2wtMS44NiAxLjg1aC01di00SDEwdi40OGwxLjM0IDEuMzh6bTEuNjktMy42NWwuNjMuNjMtMiAyLS42My0uNjMgMi0yem0wIDVsLjYzLjYzLTIgMi0uNjMtLjYzIDItMnpNMy4zNSA2LjY1bC0xLjI5LTEuMyAzLjI5LTMuMjkgMS4zIDEuMjktMy4zIDMuM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sQ29sb3IgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk04IDEuMDAzYTcgNyAwIDAgMC03IDd2LjQzYy4wOSAxLjUxIDEuOTEgMS43OSAzIC43YTEuODcgMS44NyAwIDAgMSAyLjY0IDIuNjRjLTEuMSAxLjE2LS43OSAzLjA3LjggMy4yaC42YTcgNyAwIDEgMCAwLTE0bC0uMDQuMDN6bTAgMTNoLS41MmEuNTguNTggMCAwIDEtLjM2LS4xNC41Ni41NiAwIDAgMS0uMTUtLjMgMS4yNCAxLjI0IDAgMCAxIC4zNS0xLjA4IDIuODcgMi44NyAwIDAgMCAwLTQgMi44NyAyLjg3IDAgMCAwLTQuMDYgMCAxIDEgMCAwIDEtLjkuMzQuNDEuNDEgMCAwIDEtLjIyLS4xMi40Mi40MiAwIDAgMS0uMS0uMjl2LS4zN2E2IDYgMCAxIDEgNiA2bC0uMDQtLjA0ek05IDMuOTk3YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHptMyA3LjAwN2ExIDEgMCAxIDEtMiAwIDEgMSAwIDAgMSAyIDB6bS03LTVhMSAxIDAgMSAwIDAtMiAxIDEgMCAwIDAgMCAyem03LTFhMSAxIDAgMSAxLTIgMCAxIDEgMCAwIDEgMiAwek0xMyA4YTEgMSAwIDEgMS0yIDAgMSAxIDAgMCAxIDIgMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sQ29uc3RhbnQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00IDZoOHYxSDRWNnptOCAzSDR2MWg4Vjl6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDRsMS0xaDEybDEgMXY4bC0xIDFIMmwtMS0xVjR6bTEgMHY4aDEyVjRIMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sRW51bU1lbWJlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcgM2wxLTFoNmwxIDF2NWwtMSAxaC00VjhoNFYzSDh2M0g3VjN6bTIgNlY4TDggN0gyTDEgOHY1bDEgMWg2bDEtMVY5ek04IDh2NUgyVjhoNnptMS40MTQtMUw5IDYuNTg2VjZoNHYxSDkuNDE0ek05IDRoNHYxSDlWNHptLTIgNkgzdjFoNHYtMXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sRW51bSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTE0IDJIOEw3IDN2M2gxVjNoNnY1aC00djFoNGwxLTFWM2wtMS0xek05IDZoNHYxSDkuNDFMOSA2LjU5VjZ6TTcgN0gyTDEgOHY1bDEgMWg2bDEtMVY4TDggN0g3em0xIDZIMlY4aDZ2NXpNMyA5aDR2MUgzVjl6bTAgMmg0djFIM3YtMXptNi03aDR2MUg5VjR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbEV2ZW50IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy40MTQgMS41Nkw4LjMxMiAxaDMuMjk0bC44MTggMS41NzVMMTAuMjM2IDZoMS43ODFsLjcyIDEuNjk1TDUuNjE4IDE1bC0xLjYwMi0xLjE2M0w2LjExOSAxMEg0Ljg5OEw0IDguNTZsMy40MTQtN3pNNy43OCA5TDQuOSAxNC4zMDUgMTIuMDE4IDdIOC4zMTJsMy4yOTQtNUg4LjMxMkw0Ljg5OCA5SDcuNzh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbEZpZWxkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjQ1IDQuNWwtNS0yLjVoLS45bC03IDMuNS0uNTUuODl2NC41bC41NS45IDUgMi41aC45bDctMy41LjU1LS45di00LjVsLS41NS0uODl6bS04IDguNjRsLTQuNS0yLjI1VjcuMTdsNC41IDJ2My45N3ptLjUtNC44TDIuMjkgNi4yM2w2LjY2LTMuMzQgNC42NyAyLjM0LTYuNjcgMy4xMXptNyAxLjU1bC02LjUgMy4yNVY5LjIxbDYuNS0zdjMuNjh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbEZpbGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTMuODUgNC40NGwtMy4yOC0zLjMtLjM1LS4xNEgyLjVsLS41LjV2MTNsLjUuNWgxMWwuNS0uNVY0LjhsLS4xNS0uMzZ6TTEzIDVoLTNWMmwzIDN6TTMgMTRWMmg2djMuNWwuNS41SDEzdjhIM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sSW50ZXJmYWNlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTExLjQ5NiA0YTMuNDkgMy40OSAwIDAgMC0zLjQ2IDNoLTMuMWEyIDIgMCAxIDAgMCAxaDMuMWEzLjUgMy41IDAgMSAwIDMuNDYtNHptMCA2YTIuNSAyLjUgMCAxIDEgMC01IDIuNSAyLjUgMCAwIDEgMCA1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW1ib2xLZXkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk03LjIyMyAxMC45MzNjLjMyNi4xOTIuNjk5LjI5IDEuMDc3LjI4MmEyLjE1OSAyLjE1OSAwIDAgMCAxLjc1NC0uODQyIDMuMjkxIDMuMjkxIDAgMCAwIC42NTQtMi4xMTMgMi44ODYgMi44ODYgMCAwIDAtLjU3Ni0xLjg3NyAxLjk5IDEuOTkgMCAwIDAtMS42MzQtLjczMyAyLjI5NCAyLjI5NCAwIDAgMC0xLjUyMy41NjdWMy40NzVoLS45OTFWMTEuMWguOTk1di0uMzQ0Yy4wNzYuMDY2LjE1OC4xMjUuMjQ0LjE3N3pNNy44NSA2LjdjLjE4Ni0uMDc5LjM4OC0uMTEzLjU5LS4xYTEuMDggMS4wOCAwIDAgMSAuODk2LjQyOGMuMjU3LjM2My4zODIuODAyLjM1NyAxLjI0NWEyLjQ4NSAyLjQ4NSAwIDAgMS0uNCAxLjQ4NCAxLjEzMyAxLjEzMyAwIDAgMS0uOTYuNTA4IDEuMjI0IDEuMjI0IDAgMCAxLS45NzYtLjQxN0ExLjUyMiAxLjUyMiAwIDAgMSA2Ljk3NSA4Ljh2LS42YTEuNzIyIDEuNzIyIDAgMCAxIC4zOTMtMS4xNDVjLjEzLS4xNTQuMjk2LS4yNzYuNDgyLS4zNTV6TTMuMjg5IDUuNjc1YTMuMDMgMy4wMyAwIDAgMC0uOTM3LjE2MiAyLjU5IDIuNTkgMCAwIDAtLjguNGwtLjEuMDc3djEuMmwuNDIzLS4zNTlhMi4xIDIuMSAwIDAgMSAxLjM2Ni0uNTcyLjc1OC43NTggMCAwIDEgLjY2MS4yODJjLjE1LjIzMi4yMy41MDMuMjMxLjc3OUwyLjkgNy44MjVhMi42IDIuNiAwIDAgMC0xLjM3OC41NzUgMS42NSAxLjY1IDAgMCAwLS4wMjIgMi4zMzYgMS43MzcgMS43MzcgMCAwIDAgMS4yNTMuNDU0IDEuOTYgMS45NiAwIDAgMCAxLjEwNy0uMzMyYy4xMDItLjA2OC4xOTctLjE0NS4yODYtLjIyOXYuNDQ0aC45NDFWNy43MTVhMi4xOTMgMi4xOTMgMCAwIDAtLjQ2OS0xLjUgMS42ODcgMS42ODcgMCAwIDAtMS4zMjktLjU0em0uODU3IDMuMDQxYy4wMi40MTgtLjEyLjgyOS0uMzkxIDEuMTQ4YTEuMjIxIDEuMjIxIDAgMCAxLS45NTUuNDIyLjgzMi44MzIgMCAwIDEtLjYwOC0uMi44MzMuODMzIDAgMCAxIDAtMS4wOTFjLjI4MS0uMTc0LjYtLjI3Ny45My0uM2wxLjAyLS4xNDguMDA0LjE2OXptOC4zMTMgMi4zMTdjLjMwNy4xMy42NC4xOTMuOTczLjE4Mi40OTUuMDEyLjk4My0uMTE0IDEuNDEtLjM2NWwuMTIzLS4wNzUuMDEzLS4wMDdWOS42MTVsLS40NDYuMzJjLS4zMTYuMjI0LS42OTYuMzQtMS4wODQuMzI5QTEuMyAxLjMgMCAwIDEgMTIuNCA5LjhhMS45NzUgMS45NzUgMCAwIDEtLjQtMS4zMTIgMi4wMSAyLjAxIDAgMCAxIC40NTMtMS4zODFBMS40MzIgMS40MzIgMCAwIDEgMTMuNiA2LjZhMS44IDEuOCAwIDAgMSAuOTcxLjI3OWwuNDMuMjY1VjUuOTdsLS4xNy0uMDczYTIuOSAyLjkgMCAwIDAtMS4xNy0uMjQ3IDIuNTIgMi41MiAwIDAgMC0xLjkyOS44MTcgMi45IDIuOSAwIDAgMC0uNzQ3IDIuMDQ5Yy0uMDI4LjcwNy4yMSAxLjQuNjcgMS45MzkuMjIyLjI0OS40OTcuNDQ2LjgwNC41Nzh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbEtleXdvcmQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUgNGgtNVYzaDV2MXptLTEgM2gtMnYxaDJWN3ptLTQgMEgxdjFoOVY3em0yIDZIMXYxaDExdi0xem0tNS0zSDF2MWg2di0xem04IDBoLTV2MWg1di0xek04IDJ2M0gxVjJoN3pNNyAzSDJ2MWg1VjN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbE1ldGhvZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41MSA0bC01LTNoLTFsLTUgMy0uNDkuODZ2NmwuNDkuODUgNSAzaDFsNS0zIC40OS0uODV2LTZMMTMuNTEgNHptLTYgOS41NmwtNC41LTIuN1Y1LjdsNC41IDIuNDV2NS40MXpNMy4yNyA0LjdsNC43NC0yLjg0IDQuNzQgMi44NC00Ljc0IDIuNTlMMy4yNyA0Ljd6bTkuNzQgNi4xNmwtNC41IDIuN1Y4LjE1bDQuNS0yLjQ1djUuMTZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbE1pc2MgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00IDJoOHY0Yy4zNDEuMDM1LjY3Ny4xMTIgMSAuMjNWMUgzdjguNDhsMS0xLjc1VjJ6bTIuMTQgOEw1IDggNCA5Ljc1IDMuMjkgMTEgMSAxNWg4bC0yLjI5LTQtLjU3LTF6bS0zLjQyIDRsMS43Mi0zTDUgMTBsLjU2IDEgMS43MiAzSDIuNzJ6bTYuODM2LTYuNDFhMy41IDMuNSAwIDEgMSAzLjg4OCA1LjgyIDMuNSAzLjUgMCAwIDEtMy44ODgtNS44MnptLjU1NSA0Ljk4OWEyLjUgMi41IDAgMSAwIDIuNzc4LTQuMTU3IDIuNSAyLjUgMCAwIDAtMi43NzggNC4xNTd6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbE5hbWVzcGFjZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTYgMi45ODRWMmgtLjA5Yy0uMzEzIDAtLjYxNi4wNjItLjkwOS4xODVhMi4zMyAyLjMzIDAgMCAwLS43NzUuNTMgMi4yMyAyLjIzIDAgMCAwLS40OTMuNzUzdi4wMDFhMy41NDIgMy41NDIgMCAwIDAtLjE5OC44M3YuMDAyYTYuMDggNi4wOCAwIDAgMC0uMDI0Ljg2M2MuMDEyLjI5LjAxOC41OC4wMTguODY5IDAgLjIwMy0uMDQuMzkzLS4xMTcuNTcydi4wMDFhMS41MDQgMS41MDQgMCAwIDEtLjc2NS43ODcgMS4zNzYgMS4zNzYgMCAwIDEtLjU1OC4xMTVIMnYuOTg0aC4wOWMuMTk1IDAgLjM4LjA0LjU1Ni4xMjFsLjAwMS4wMDFjLjE3OC4wNzguMzI5LjE4NC40NTUuMzE4bC4wMDIuMDAyYy4xMy4xMy4yMzMuMjg1LjMwNy40NjVsLjAwMS4wMDJjLjA3OC4xOC4xMTcuMzY4LjExNy41NjYgMCAuMjktLjAwNi41OC0uMDE4Ljg2OS0uMDEyLjI5Ni0uMDA0LjU4NS4wMjQuODd2LjAwMWMuMDMzLjI4My4wOTkuNTU4LjE5Ny44MjR2LjAwMWMuMTA2LjI3My4yNzEuNTI0LjQ5NC43NTMuMjIzLjIzLjQ4Mi40MDcuNzc1LjUzLjI5My4xMjMuNTk2LjE4NS45MS4xODVINnYtLjk4NGgtLjA5Yy0uMTk5IDAtLjM4Ny0uMDM4LS41NjItLjExNWExLjYxMyAxLjYxMyAwIDAgMS0uNDU3LS4zMiAxLjY1OSAxLjY1OSAwIDAgMS0uMzA5LS40NjdjLS4wNzQtLjE4LS4xMS0uMzctLjExLS41NzMgMC0uMjI4LjAwMy0uNDUzLjAxMS0uNjcyLjAwOC0uMjI4LjAwOC0uNDUgMC0uNjY1YTQuNjM5IDQuNjM5IDAgMCAwLS4wNTUtLjY0IDIuNjgyIDIuNjgyIDAgMCAwLS4xNjgtLjYwOUEyLjI4NCAyLjI4NCAwIDAgMCAzLjUyMiA4YTIuMjg0IDIuMjg0IDAgMCAwIC43MzgtLjk1NWMuMDgtLjE5Mi4xMzUtLjM5My4xNjgtLjYwMi4wMzMtLjIxLjA1MS0uNDIzLjA1NS0uNjQuMDA4LS4yMi4wMDgtLjQ0MiAwLS42NjYtLjAwOC0uMjI0LS4wMTItLjQ1LS4wMTItLjY3OGExLjQ3IDEuNDcgMCAwIDEgLjg3Ny0xLjM1NCAxLjMzIDEuMzMgMCAwIDEgLjU2My0uMTIxSDZ6bTQgMTAuMDMyVjE0aC4wOWMuMzEzIDAgLjYxNi0uMDYyLjkwOS0uMTg1LjI5My0uMTIzLjU1Mi0uMy43NzUtLjUzLjIyMy0uMjMuMzg4LS40OC40OTMtLjc1M3YtLjAwMWMuMS0uMjY2LjE2NS0uNTQzLjE5OC0uODN2LS4wMDJjLjAyOC0uMjguMDM2LS41NjcuMDI0LS44NjMtLjAxMi0uMjktLjAxOC0uNTgtLjAxOC0uODY5IDAtLjIwMy4wNC0uMzkzLjExNy0uNTcydi0uMDAxYTEuNTA0IDEuNTA0IDAgMCAxIC43NjUtLjc4N2MuMTc2LS4wNzcuMzYyLS4xMTUuNTU4LS4xMTVIMTR2LS45ODRoLS4wOWMtLjE5NSAwLS4zOC0uMDQtLjU1Ni0uMTIxbC0uMDAxLS4wMDFhMS4zNzYgMS4zNzYgMCAwIDEtLjQ1NS0uMzE4bC0uMDAyLS4wMDJhMS40MTQgMS40MTQgMCAwIDEtLjMwNy0uNDY1bC0uMDAxLS4wMDJhMS40MDUgMS40MDUgMCAwIDEtLjExNy0uNTY2YzAtLjI5LjAwNi0uNTguMDE4LS44NjlhNi4xOSA2LjE5IDAgMCAwLS4wMjQtLjg3di0uMDAxYTMuNTQyIDMuNTQyIDAgMCAwLS4xOTctLjgyNHYtLjAwMWEyLjIzIDIuMjMgMCAwIDAtLjQ5NC0uNzUzIDIuMzMgMi4zMyAwIDAgMC0uNzc1LS41MyAyLjMyNSAyLjMyNSAwIDAgMC0uOTEtLjE4NUgxMHYuOTg0aC4wOWMuMiAwIC4zODYuMDM4LjU2Mi4xMTUuMTc0LjA4Mi4zMjYuMTg4LjQ1Ny4zMi4xMjcuMTM0LjIzLjI5LjMwOS40NjcuMDc0LjE4LjExLjM3LjExLjU3MyAwIC4yMjgtLjAwMy40NTItLjAxMS42NzItLjAwOC4yMjgtLjAwOC40NSAwIC42NjUuMDA0LjIyMi4wMjIuNDM1LjA1NS42NC4wMzMuMjE0LjA4OS40MTYuMTY4LjYwOWEyLjI4MiAyLjI4MiAwIDAgMCAuNzM4Ljk1NSAyLjI4MiAyLjI4MiAwIDAgMC0uNzM4Ljk1NSAyLjcgMi43IDAgMCAwLS4xNjguNjAyYy0uMDMzLjIxLS4wNTEuNDIzLS4wNTUuNjQtLjAwOC4yMi0uMDA4LjQ0MiAwIC42NjYuMDA4LjIyNC4wMTIuNDUuMDEyLjY3OGExLjQ3IDEuNDcgMCAwIDEtLjQyIDEuMDM1IDEuNDY2IDEuNDY2IDAgMCAxLS40NTcuMzE5IDEuMzMgMS4zMyAwIDAgMS0uNTYzLjEyMUgxMHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sTnVtZXJpYyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExIDF2NGg0djFoLTR2NGg0djFoLTR2NGgtMXYtNEg2djRINXYtNEgxdi0xaDRWNkgxVjVoNFYxaDF2NGg0VjFoMXpNNiA2djRoNFY2SDZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbE9wZXJhdG9yIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMi44NzMgMS4xYy4zMzUuMTM2LjYwMi4zOTguNzQ1LjczLjA3Mi4xNy4xMDkuMzUyLjEwNy41MzdhMS4zNCAxLjM0IDAgMCAxLS42MSAxLjEzNSAxLjM1OSAxLjM1OSAwIDAgMS0uNzUzLjIyM0ExLjM1NSAxLjM1NSAwIDAgMSAxIDIuMzYyYTEuMzU1IDEuMzU1IDAgMCAxIC44My0xLjI1NkExLjM3IDEuMzcgMCAwIDEgMi44NzMgMS4xem0tLjI5OCAxLjc2NWEuNTUxLjU1MSAwIDAgMCAuMzMyLS41LjU0OC41NDggMCAxIDAtLjMzMi41ek02LjQzIDEuMTA5TDEuMTEgNi40M2wuNjg2LjY4NyA1LjMyLTUuMzItLjY4Ni0uNjg3ek0xMS41IDloMXYyLjVIMTV2MWgtMi41VjE1aC0xdi0yLjVIOXYtMWgyLjVWOXptLTUuNzMyLjUyNWwuNzA3LjcwN0w0LjcwNyAxMmwxLjc2OCAxLjc2OC0uNzA3LjcwN0w0IDEyLjcwN2wtMS43NjggMS43NjgtLjcwNy0uNzA3TDMuMjkzIDEybC0xLjc2OC0xLjc2OC43MDctLjcwN0w0IDExLjI5M2wxLjc2OC0xLjc2OHptMS4zNS00LjE5NWExLjM1MyAxLjM1MyAwIDAgMC0xLjI1Ni0uODMgMS4zNTUgMS4zNTUgMCAwIDAtMS4yNTYuODMgMS4zNjIgMS4zNjIgMCAwIDAgMS4yNTcgMS44OTVBMS4zNTggMS4zNTggMCAwIDAgNy4xMTggNS4zM3ptLS43NTMuNzQ1YS41NTMuNTUzIDAgMCAxLS4yODkuMjkuNTQ3LjU0NyAwIDAgMS0uNTk5LS4xMTcuNTI5LjUyOSAwIDAgMS0uMTE3LS4xNzMuNTQ0LjU0NCAwIDAgMSAuNzE2LS43MTUuNTY1LjU2NSAwIDAgMSAuMTczLjExNi41NDkuNTQ5IDAgMCAxIC4xMTYuNTk5ek0xNCAzaC00djFoNFYzelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW1ib2xQYXJhbWV0ZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMSA2aC0xdi0uNWEuNS41IDAgMCAwLS41LS41SDguNDc5djUuNWEuNS41IDAgMCAwIC41LjVoLjV2MWgtM3YtMWguNWEuNS41IDAgMCAwIC41LS41VjVINi41YS41LjUgMCAwIDAtLjUuNVY2SDVWNGg2djJ6bTIuOTE0IDIuMDQ4bC0xLjQ2Mi0xLjQ2Mi43MDctLjcwNyAxLjgxNiAxLjgxNnYuNzA3bC0xLjc2OCAxLjc2Ny0uNzA3LS43MDcgMS40MTQtMS40MTR6TTMuNTQ4IDkuNDYyTDIuMDg2IDggMy41IDYuNTg2bC0uNzA3LS43MDctMS43NjggMS43Njd2LjcwOGwxLjgxNiAxLjgxNS43MDctLjcwN3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sUHJvcGVydHkgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMi44MDcgMTQuOTc1YTEuNzUgMS43NSAwIDAgMS0xLjI1NS0uNTU2IDEuNjg0IDEuNjg0IDAgMCAxLS41NDQtMS4xQTEuNzIgMS43MiAwIDAgMSAxLjM2IDEyLjFjMS4yMDgtMS4yNyAzLjU4Ny0zLjY1IDUuMzE4LTUuMzQ1YTQuMjU3IDQuMjU3IDAgMCAxIC4wNDgtMy4wNzggNC4wOTUgNC4wOTUgMCAwIDEgMS42NjUtMS45NjkgNC4yNTkgNC4yNTkgMCAwIDEgNC4wNC0uMzZsLjYxNy4yNjgtMi44NjYgMi45NTEgMS4yNTUgMS4yNTkgMi45NDQtMi44NzcuMjY3LjYxOWE0LjI5NSA0LjI5NSAwIDAgMSAuMDQgMy4zMTEgNC4xOTggNC4xOTggMCAwIDEtLjkyMyAxLjM5MiA0LjI3IDQuMjcgMCAwIDEtLjc0My41ODEgNC4yMTcgNC4yMTcgMCAwIDEtMy44MTIuNDQ2Yy0xLjA5OCAxLjExMi0zLjg0IDMuODcyLTUuMzIgNS4yNTRhMS42MyAxLjYzIDAgMCAxLTEuMDg0LjQyM3ptNy45MzgtMTMuMDQ3YTMuMzIgMy4zMiAwIDAgMC0xLjg0OS41NTdjLS4yMTMuMTMtLjQxMi4yODQtLjU5MS40NThhMy4zMjEgMy4zMjEgMCAwIDAtLjY1NyAzLjczM2wuMTM1LjI5Ny0uMjMzLjIyN2MtMS43MzggMS42OTctNC4yNjkgNC4yMi01LjQ4NSA1LjUwNGEuODA1LjgwNSAwIDAgMCAuMTMyIDEuMDUuOTExLjkxMSAwIDAgMCAuMjk4LjIyYy4xLjA0NC4yMDkuMDY5LjMxOS4wNzJhLjY5NC42OTQgMCAwIDAgLjQ1LS4xODFjMS41NzMtMS40NjkgNC42MTItNC41MzkgNS41MDQtNS40NGwuMjMtLjIzMi4yOTQuMTM1YTMuMjg2IDMuMjg2IDAgMCAwIDMuMjI1LS4yNTQgMy4zMyAzLjMzIDAgMCAwIC41OTEtLjQ2NCAzLjI4IDMuMjggMCAwIDAgLjk2NC0yLjM1OGMwLS4yMTUtLjAyMS0uNDMtLjA2NC0uNjQyTDExLjQzIDcuMTI1IDguODc5IDQuNTc4bDIuNTE1LTIuNTlhMy4yODYgMy4yODYgMCAwIDAtLjY1LS4wNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sUnVsZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk00IDFMMyAydjEybDEgMWg4bDEtMVYybC0xLTFINHptMCAyVjJoOHYxMkg0di0xaDJ2LTFINHYtMmg0VjlINFY3aDJWNkg0VjRoNFYzSDR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbFNuaXBwZXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yLjUgMWwtLjUuNVYxM2gxVjJoMTF2MTFoMVYxLjVsLS41LS41aC0xMnpNMiAxNXYtMWgxdjFIMnptMy0xSDR2MWgxdi0xem0xIDBoMXYxSDZ2LTF6bTMgMEg4djFoMXYtMXptMSAwaDF2MWgtMXYtMXptNSAxdi0xaC0xdjFoMXptLTMtMWgxdjFoLTF2LTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1N5bWJvbFN0cmluZyAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIgMkwxIDN2OWwxIDFoMTJsMS0xVjNsLTEtMUgyem0wIDEwVjNoMTJ2OUgyem0zLjM1Ni0zLjA3SDZWNy4yMkM2IDYuNDA4IDUuNjg1IDYgNS4wNTYgNmMtLjEzNSAwLS4yODUuMDI0LS40NS4wNzNhMS40NDQgMS40NDQgMCAwIDAtLjM4OC4xNjd2LjY2NWMuMjM3LS4yMDMuNDg3LS4zMDQuNzUtLjMwNC4yNjEgMCAuMzkyLjE1Ni4zOTIuNDY5bC0uNi4xMDNjLS41MDYuMDg2LS43Ni40MDYtLjc2Ljk2MSAwIC4yNjMuMDYxLjQ3My4xODMuNjMxQS42MS42MSAwIDAgMCA0LjY5IDljLjI5IDAgLjUwOS0uMTYuNjU3LS40OGguMDA5di40MXptLjAwNC0xLjM1NXYuMTkzYS43NS43NSAwIDAgMS0uMTIuNDM2LjM2OC4zNjggMCAwIDEtLjMxMy4xNy4yNzYuMjc2IDAgMCAxLS4yMi0uMDk1LjM4LjM4IDAgMCAxLS4wOC0uMjQ4YzAtLjIyMi4xMS0uMzUxLjMzMi0uMzg5bC40LS4wNjd6TTcuNiA4LjYyNmgtLjAwN3YuMzFIN1Y1aC41OTN2MS42NzdoLjAwOGMuMTQ2LS4zMS4zNTUtLjQ2NS42MjUtLjQ2NS4yNDggMCAuNDQuMTE4LjU3My4zNTMuMTM0LjIzNi4yMDEuNTU3LjIwMS45NjYgMCAuNDQzLS4wNzguNzk4LS4yMzUgMS4wNjdDOC42MSA4Ljg2NiA4LjQgOSA4LjEzOCA5Yy0uMjM3IDAtLjQxNi0uMTI1LS41MzctLjM3NHptLS4wMTYtMS4xMjF2LjI3MmEuNzguNzggMCAwIDAgLjEwNy40MjZjLjA3MS4xMTMuMTYzLjE2OS4yNzQuMTY5LjEzNSAwIC4yNC0uMDcyLjMxNC0uMjE2LjA3NS0uMTQ1LjExMy0uMzUuMTEzLS42MTUgMC0uMjItLjAzNS0uMzktLjEwNC0uNTE0LS4wNjctLjEyNC0uMTY0LS4xODctLjI5LS4xODctLjEyIDAtLjIxOS4wNjItLjI5OC4xODVhLjg4Ny44ODcgMCAwIDAtLjExNi40OHpNMTEuMjYyIDljLjMyMSAwIC41NjctLjA1OC43MzgtLjE3M3YtLjcxYS45LjkgMCAwIDEtLjU1Mi4yMDcuNjE5LjYxOSAwIDAgMS0uNS0uMjE1Yy0uMTItLjE0NS0uMTgxLS4zNDUtLjE4MS0uNTk4IDAtLjI2LjA2My0uNDY0LjE4OS0uNjEyYS42NDQuNjQ0IDAgMCAxIC41MTYtLjIyM2MuMTk0IDAgLjM3LjA2OS41MjguMjA3di0uNzQ5Yy0uMTI5LS4wOS0uMzM4LS4xMzQtLjYyNi0uMTM0LS40MTcgMC0uNzUxLjE0LTEuMDAxLjQyMi0uMjQ5LjI4LS4zNzMuNjYyLS4zNzMgMS4xNDggMCAuNDIuMTE2Ljc2NC4zNDkgMS4wMy4yMzIuMjY3LjUzNy40LjkxMy40elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW1ib2xTdHJ1Y3R1cmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDJMMSAzdjNsMSAxaDEybDEtMVYzbC0xLTFIMnptMCAxaDEydjNIMlYzem0tMSA3bDEtMWgzbDEgMXYzbC0xIDFIMmwtMS0xdi0zem0yIDBIMnYzaDN2LTNIM3ptNyAwbDEtMWgzbDEgMXYzbC0xIDFoLTNsLTEtMXYtM3ptMiAwaC0xdjNoM3YtM2gtMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3ltYm9sVmFyaWFibGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yIDVoMlY0SDEuNWwtLjUuNXY4bC41LjVINHYtMUgyVjV6bTEyLjUtMUgxMnYxaDJ2N2gtMnYxaDIuNWwuNS0uNXYtOGwtLjUtLjV6bS0yLjc0IDIuNTdMMTIgN3YyLjUxbC0uMy40NS00LjUgMmgtLjQ2bC0yLjUtMS41LS4yNC0uNDN2LTIuNWwuMy0uNDYgNC41LTJoLjQ2bDIuNSAxLjV6TTUgOS43MWwxLjUuOVY5LjI4TDUgOC4zOHYxLjMzem0uNTgtMi4xNWwxLjQ1Ljg3IDMuMzktMS41LTEuNDUtLjg3LTMuMzkgMS41em0xLjk1IDMuMTdsMy41LTEuNTZ2LTEuNGwtMy41IDEuNTV2MS40MXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjU3luY0lnbm9yZWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01LjQ2OCAzLjY4N2wtLjc1Ny0uNzA2YTYgNiAwIDAgMSA5LjI4NSA0Ljc5OUwxNS4xOSA2LjZsLjc1Ljc2LTIuMDkgMi4wNy0uNzYtLjAxTDExIDcuMzFsLjc2LS43NiAxLjIzNiAxLjI1YTUgNSAwIDAgMC03LjUyOC00LjExM3ptNC41NSA4Ljg4OWwuNzg0LjczYTYgNiAwIDAgMS04Ljc5Ni01LjA0TC43OCA5LjUgMCA4LjczbDIuMDktMi4wNy43Ni4wMSAyLjA5IDIuMTItLjc2Ljc2LTEuMTY3LTEuMThhNSA1IDAgMCAwIDcuMDA1IDQuMjA2elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEuMTIzIDIuOTQ5bC42ODItLjczMkwxMy43MiAxMy4zMjhsLS42ODIuNzMyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NTeW5jIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMi4wMDYgOC4yNjdMLjc4IDkuNSAwIDguNzNsMi4wOS0yLjA3Ljc2LjAxIDIuMDkgMi4xMi0uNzYuNzYtMS4xNjctMS4xOGE1IDUgMCAwIDAgOS40IDEuOTgzbC44MTMuNTk3YTYgNiAwIDAgMS0xMS4yMi0yLjY4M3ptMTAuOTktLjQ2NkwxMS43NiA2LjU1bC0uNzYuNzYgMi4wOSAyLjExLjc2LjAxIDIuMDktMi4wNy0uNzUtLjc2LTEuMTk0IDEuMThhNiA2IDAgMCAwLTExLjExLTIuOTJsLjgxLjU5NGE1IDUgMCAwIDEgOS4zIDIuMzQ2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NUYWJsZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41IDJoLTEybC0uNS41djExbC41LjVoMTJsLjUtLjV2LTExbC0uNS0uNXpNMiAzaDExdjFIMlYzem03IDRINlY1aDN2MnptMCAxdjJINlY4aDN6TTIgNWgzdjJIMlY1em0wIDNoM3YySDJWOHptMCA1di0yaDN2Mkgyem00IDB2LTJoM3YySDZ6bTcgMGgtM3YtMmgzdjJ6bTAtM2gtM1Y4aDN2MnptLTMtM1Y1aDN2MmgtM3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGFnIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTMuMiAySDguMDE3bC0uMzUzLjE0NkwxIDguODF2LjcwN0w2LjE4MyAxNC43aC43MDdsMi4yMTUtMi4yMTVBNC40OCA0LjQ4IDAgMCAwIDE1LjY1IDljLjAyNy0uMTY2LjA0NC0uMzMyLjA1MS0uNWE0LjUwNSA0LjUwNSAwIDAgMC0yLTMuNzRWMi41bC0uNS0uNXptLS41IDIuMjU5QTQuNTA0IDQuNTA0IDAgMCAwIDExLjIgNGEuNS41IDAgMSAwIDAgMSAzLjUgMy41IDAgMCAxIDEuNS4zMzh2Mi4xMzhMOC43NzUgMTEuNGEuNTA2LjUwNiAwIDAgMC0uMjE3LjIxN2wtMi4wMjIgMi4wMjItNC40NzUtNC40NzZMOC4yMjQgM0gxMi43djEuMjU5em0xIDEuNzkyYTMuNSAzLjUgMCAwIDEgMSAyLjQ0OSAzLjQzOCAzLjQzOCAwIDAgMS0uMDUxLjUgMy40ODcgMy40ODcgMCAwIDEtNC43OTMgMi43MzVsMy42OTgtMy42OTguMTQ2LS4zNTRWNi4wNTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rhc2tsaXN0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMy41NyA2LjY5OWw1LjY5My00LjkzNkw4LjU4NSAxIDMuMjczIDUuNTk2bC0xLjUxLTEuODMyTDEgNC40NDJsMS44NSAyLjIxNC43Mi4wNDN6TTE1IDVINi44MjRsMi4zMDctMkgxNXYyek02IDdoOXYySDZWN3ptOSA0SDZ2Mmg5di0yelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NUZWxlc2NvcGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMS4yNCAxbC41OS4yNCAyLjExIDQuOTMtLjIzLjU5LTMuMjkgMS40MS0uNTktLjI0LS4xNy0uNDFMNi4xIDlsLS41OC0uMTktLjE2LS4zOEwyLjggOS40OWwtLjU4LS4yNC0uNzItMS42Ny4yOC0uNTkgMi41LTEuMDYtLjE4LS40MS4yNC0uNThMNy45IDMuNDEgNy43MiAzIDggMi40MiAxMS4yNCAxek0yLjUgNy42NGwuMzUuODUgMi4yMi0uOTEtLjM3LS44NS0yLjIuOTF6bTIuNzQtMi4xMmwxLjExIDIuNDUgMy0xLjI4LTEuMTEtMi40NC0zIDEuMjd6TTguNzkgM2wxLjg2IDQuMTEgMi4yOS0xLjAxTDExLjE4IDIgOC43MiAzaC4wN3pNOC41IDkuMWwzLjAyIDQuOWgtMS4xN2wtMS44OC0zLjAzdjRoLTFWOS44Mkw1LjU4IDE0aC0xLjFsMS43LTMuOSAyLjMyLTF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rlcm1pbmFsQmFzaCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy42NTUgMy41Nkw4LjkxOC43NWExLjc4NSAxLjc4NSAwIDAgMC0xLjgyIDBMMi4zNjMgMy41NmExLjg4OSAxLjg4OSAwIDAgMC0uOTIxIDEuNjI4djUuNjI0YTEuODg5IDEuODg5IDAgMCAwIC45MTMgMS42MjdsNC43MzYgMi44MTJhMS43ODUgMS43ODUgMCAwIDAgMS44MiAwbDQuNzM2LTIuODEyYTEuODg4IDEuODg4IDAgMCAwIC45MTMtMS42MjdWNS4xODhhMS44ODkgMS44ODkgMCAwIDAtLjkwNC0xLjYyN3ptLTMuNjY5IDguNzgxdi40MDRhLjE0OS4xNDkgMCAwIDEtLjA3LjEyNGwtLjIzOS4xMzdjLS4wMzguMDItLjA3IDAtLjA3LS4wNTN2LS4zOTZhLjc4Ljc4IDAgMCAxLS41NDUuMDUzLjA3My4wNzMgMCAwIDEtLjAyNy0uMDlsLjA4Ni0uMzY1YS4xNTMuMTUzIDAgMCAxIC4wNzEtLjA5Ni4wNDguMDQ4IDAgMCAxIC4wMzggMCAuNjYyLjY2MiAwIDAgMCAuNDk3LS4wNjMuNjYyLjY2MiAwIDAgMCAuMzctLjU2N2MwLS4yMDYtLjExMi0uMjkyLS4zODQtLjI5My0uMzQ0IDAtLjY2MS0uMDY2LS42Ny0uNTc0QTEuNDcgMS40NyAwIDAgMSA5LjYgOS40MzdWOS4wM2EuMTQ3LjE0NyAwIDAgMSAuMDctLjEyNmwuMjMxLS4xNDdjLjAzOC0uMDIuMDcgMCAuMDcuMDU0di40MDlhLjc1NC43NTQgMCAwIDEgLjQ1My0uMDU1LjA3My4wNzMgMCAwIDEgLjAzLjA5NWwtLjA4MS4zNjJhLjE1Ni4xNTYgMCAwIDEtLjA2NS4wOS4wNTUuMDU1IDAgMCAxLS4wMzUgMCAuNi42IDAgMCAwLS40MzYuMDcyLjU0OS41NDkgMCAwIDAtLjMzMS40ODZjMCAuMTg1LjA5OC4yNDIuNDI1LjI0OC40MzggMCAuNjI3LjE5OS42MzIuNjM5YTEuNTY4IDEuNTY4IDAgMCAxLS41NzYgMS4xODV6bTIuNDgxLS42OGEuMDk0LjA5NCAwIDAgMS0uMDM2LjA5MmwtMS4xOTguNzI3YS4wMzQuMDM0IDAgMCAxLS4wNC4wMDMuMDM1LjAzNSAwIDAgMS0uMDE2LS4wMzd2LS4zMWEuMDg2LjA4NiAwIDAgMSAuMDU1LS4wNzZsMS4xNzktLjcwNmEuMDM1LjAzNSAwIDAgMSAuMDU2LjAzNXYuMjczem0uODI3LTYuOTE0TDguODEyIDcuNTE1Yy0uNTU5LjMzMS0uOTcuNjkzLS45NyAxLjM2N3Y1LjUyYzAgLjQwNC4xNjUuNjYyLjQxMy43NDFhMS40NjUgMS40NjUgMCAwIDEtLjI0OC4wMjVjLS4yNjQgMC0uNTIyLS4wNzItLjc0OC0uMjA3TDIuNTIyIDEyLjE1YTEuNTU4IDEuNTU4IDAgMCAxLS43NS0xLjMzOFY1LjE4OGExLjU1OCAxLjU1OCAwIDAgMSAuNzUtMS4zNGw0LjczOC0yLjgxYTEuNDYgMS40NiAwIDAgMSAxLjQ4OSAwbDQuNzM2IDIuODEyYTEuNTQ4IDEuNTQ4IDAgMCAxIC43MjggMS4wODNjLS4xNTQtLjMzNC0uNTA4LS40MjctLjkyLS4xODVoLjAwMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGVybWluYWxDbWQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTAuODc1IDdsMi4wMDggNWgtLjcxMWwtMi4wMDgtNWguNzExem0tNS4xMjUuNTk0Yy0uMjc2IDAtLjUyNi4wNDEtLjc1LjEyNWExLjU0MiAxLjU0MiAwIDAgMC0uNTc4LjM3NWMtLjE2Mi4xNjYtLjI4Ny4zNy0uMzc1LjYxYTIuMzY0IDIuMzY0IDAgMCAwLS4xMzMuODI3YzAgLjI4Ny4wNC41NDcuMTE3Ljc4MS4wNzguMjM1LjE5Ni40MzMuMzUyLjU5NC4xNTYuMTYyLjM0Ni4yOS41Ny4zODMuMjI0LjA5NC40OC4xMzguNzY2LjEzM2EyLjYzIDIuNjMgMCAwIDAgLjk5Mi0uMTk1bC4xMjUuNDg0YTEuOTk4IDEuOTk4IDAgMCAxLS40OTIuMTQ4IDQuMzgxIDQuMzgxIDAgMCAxLS43NS4wNyAyLjYxIDIuNjEgMCAwIDEtLjkxNC0uMTU2IDIuMjA3IDIuMjA3IDAgMCAxLS43NDItLjQ1MyAxLjg3OCAxLjg3OCAwIDAgMS0uNDg1LS43NDIgMy4yMDQgMy4yMDQgMCAwIDEtLjE4LTEuMDIzYzAtLjM2NS4wNi0uNjk4LjE4LTEgLjEyLS4zMDIuMjg3LS41NjMuNS0uNzgyLjIxNC0uMjE4LjQ3MS0uMzg4Ljc3NC0uNTA3YTIuNjkgMi42OSAwIDAgMSAxLS4xOGMuMjk2IDAgLjUzNi4wMjMuNzE4LjA3LjE4My4wNDcuMzE1LjA5NC4zOTkuMTRsLS4xNDkuNDkzYTEuODUgMS44NSAwIDAgMC0uNDA2LS4xNCAyLjM4NiAyLjM4NiAwIDAgMC0uNTM5LS4wNTV6TTggOGgxdjFIOFY4em0wIDJoMXYxSDh2LTF6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUuNSAxSC41bC0uNS41djEzbC41LjVoMTVsLjUtLjV2LTEzbC0uNS0uNXpNMTUgMTRIMVY1aDE0djl6bTAtMTBIMVYyaDE0djJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rlcm1pbmFsRGViaWFuIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy4wODQuMDI5YTEuMjc2IDEuMjc2IDAgMCAwLS4zNTUuMDVMNi42MjIuMDY1YTkuNDYgOS40NiAwIDAgMSAuNTE0LS4wNDhjLjA3NS0uMDA1LjE1LS4wMS4yMjQtLjAxN2ExLjY3IDEuNjcgMCAwIDEtLjI3Ni4wMjl6bTQuMTI3IDcuNjQ2Yy4wOTQtLjIzOC4xNzItLjQzNi4xNi0uNzYybC0uMTMzLjI4MmMuMTM1LS40MS4xMjMtLjg0Ny4xMTItMS4yNjItLjAwNS0uMTg3LS4wMS0uMzctLjAwMi0uNTQzbC0uMDU0LS4wMTVjLS4wNDgtMS40MTEtMS4yNjgtMi45MTEtMi4zNTQtMy40MTktLjkzNi0uNDMyLTIuMzc2LS41MDYtMy4wNDItLjE4YS42NTcuNjU3IDAgMCAxIC4yMTItLjA4NWMuMTA3LS4wMzEuMTk3LS4wNTguMTM1LS4wOTMtLjYuMDYtLjc3OC4xNzEtLjk3My4yOTRhMS45MiAxLjkyIDAgMCAxLS42MzUuMjczYy0uMTEuMTA2LjA1MS4wNjMuMTgxLjAyOS4xMjktLjAzNS4yMjYtLjA2LS4wMDQuMDc2YTEuNyAxLjcgMCAwIDEtLjMwMy4wNWMtLjI2LjAyNS0uNDkyLjA0OC0uOTYuNTMyLjAyNi4wNDEuMTEtLjAwOS4xNjgtLjA0NC4wNzItLjA0My4xMDYtLjA2My0uMDU0LjEzN0MzLjA3IDIuODcxIDEuNzggNC4zMSAxLjUwNyA0Ljc4N2wuMTQzLjAyNWMtLjEuMjUtLjIxMy40NjEtLjMxMy42NDktLjEzNi4yNTQtLjI0OS40NjQtLjI3My42NjdhMTYuOTcgMTYuOTcgMCAwIDEtLjA2Mi42MzVDLjkwNyA3LjYxOS43OSA4LjY3OSAxLjEyIDkuMDZsLS4wNC40MDYuMDUyLjExYy4wMzYuMDc5LjA3MS4xNTcuMTIuMjNsLS4wOTMuMDA4Yy4yMi42OTIuMzM4LjcwNC40NzMuNzE3LjEzNy4wMTMuMjkxLjAyOC41ODUuNzU3LS4wODQtLjAyOC0uMTctLjA2LS4yOTMtLjIyNi0uMDE1LjEyNy4xOC41MDguNDEuODA2bC0uMDk3LjExMmEuODkuODkgMCAwIDAgLjI3LjMxMWMuMDIzLjAxOS4wNDUuMDM2LjA2Ni4wNTUtLjM3Mi0uMjAzLjEuNDI4LjM3MS43OS4wNzguMTA0LjE0LjE4Ni4xNTkuMjE4bC4wNzMtLjEzMmMtLjAxLjE5LjEzNi40MzMuNDEuNzcybC4yMjktLjAwOWMuMDk0LjE4Ni40MzguNTIyLjY0Ny41MzhsLS4xMzkuMTgxYy4yNTQuMDguMzIxLjEzNS4zOTcuMTk1LjA4LjA2NC4xNy4xMzYuNTAyLjI1M2wtLjEzLS4yM2MuMTA4LjA5NS4xOTIuMTg2LjI3My4yNzIuMTYyLjE3Ni4zMS4zMzUuNjIuNDgxLjM1Mi4xMjMuNTM2LjE1Mi43NC4xODQuMTY4LjAyNi4zNS4wNTUuNjQ5LjE0YTMzLjgyIDMzLjgyIDAgMCAwLS4yMTctLjAwNWMtLjUwNi0uMDEyLTEuMDU2LS4wMjUtMS40NDMtLjE2My0zLjAxNi0uODE3LTUuNzc2LTQuMzU2LTUuNTc0LTgtLjAyLS4zMTEtLjAxLS42NTUgMC0uOTYxLjAxMi0uNDIyLjAyMi0uNzc2LS4wNDktLjg4MmwuMDMyLS4xMDVjLjE2Ni0uNTQuMzY1LTEuMTkxLjc0Mi0xLjk1N0wuODYxIDMuOTJ2LS4wMDIuMDAxYy4wMTIuMDEyLjEwNi4xMDcuMjc1LS4xOC4wNC0uMDkuMDc5LS4xODIuMTE3LS4yNzYuMDgtLjE5LjE2LS4zODMuMjY0LS41NmwuMDgtLjAyYy4wNTQtLjMxNS41MzMtLjc0NC45My0xLjEuMTktLjE3MS4zNjItLjMyNi40Ni0uNDQzbC4wMi4xMzhDMy41NDEuOTc3IDQuNDE0LjYxMSA1LjA3NC4zMzRjLjE1Mi0uMDYzLjI5MS0uMTIyLjQxNC0uMTc2LS4xMDcuMTE4LjA2Ny4wODIuMzExLjAzMi4xNS0uMDMuMzI1LS4wNjcuNDc4LS4wNzYtLjA0LjAyMy0uMDgyLjA0NC0uMTIyLjA2NS0uMDg1LjA0NS0uMTcuMDg4LS4yNS4xNDUuMjYtLjA2Mi4zNzMtLjA0NC40OTktLjAyNC4xMDkuMDE4LjIyNy4wMzYuNDU2LjAwNi0uMTc0LjAyNS0uMzg0LjA5NC0uMzUuMTIuMjQ1LjAyOS4zOTgtLjAwMi41MzctLjAzLjE3NC0uMDM0LjMyNy0uMDY1LjYxLjAzTDcuNjI1LjI3NWMuMjM1LjA4NS40MDkuMTM3LjU2NC4xODMuMzEzLjA5NC41NS4xNjUgMS4wNjcuNDM5YS41OC41OCAwIDAgMCAuMjMtLjAzN2MuMTEyLS4wMzUuMjE4LS4wNjkuNDc3LjAzNy4wMTQuMDI1LjAyMi4wNDYuMDMuMDY2LjAzLjA4LjA1NC4xNDMuNDU2LjM4My4wNTYtLjAyMi0uMDk3LS4xNjItLjIyLS4yNzRsLS4wMDMtLjAwNGMxLjAxLjU0IDIuMTA4IDEuNjkyIDIuNDQzIDIuOTI0LS4xODgtLjM0Ny0uMTYyLS4xNzEtLjEzNC4wMTUuMDE4LjEyNC4wMzcuMjUzLS4wMDYuMjM1LjE0LjM3Ny4yNTUuNzY2LjMyNSAxLjE2OGwtLjAyMy0uMDg1Yy0uMTAyLS4zNjgtLjMtMS4wODEtLjYyNi0xLjU1NS0uMDEyLjEzNy0uMDkyLjEyMi0uMTY1LjEwOC0uMTA1LS4wMTktLjE5Ni0uMDM2LS4wNTguMzkzLjA4MS4xMTkuMDk2LjA3NC4xMDkuMDM0LjAxNS0uMDQ3LjAyNy0uMDg2LjE0Ny4xNjQuMDAyLjEzMy4wMzQuMjY2LjA3LjQxNC4wMjIuMDk0LjA0Ni4xOTUuMDY1LjMwNi0uMDM0LS4wMDYtLjA3LS4wNy0uMTA2LS4xMy0uMDQ1LS4wNzYtLjA4Ny0uMTQ3LS4xMTctLjEwMS4wNzYuMzU4LjIwMS41NDUuMjUuNTcyLS4wMDkuMDItLjAyMS4wMi0uMDM0LjAyMS0uMDI3LjAwMi0uMDU2LjAwMy0uMDU5LjE2Ny4wMjIuNDI4LjEwMi4zOS4xNjYuMzYxLjAyLS4wMDkuMDM3LS4wMTcuMDUxLS4wMWExLjcyNCAxLjcyNCAwIDAgMS0uMDgzLjI0NWMtLjA4Ni4yMjEtLjE4OC40OC0uMTA2LjgxNmEyLjM1NiAyLjM1NiAwIDAgMC0uMTA2LS4yOTUgNS44OTYgNS44OTYgMCAwIDEtLjA0Ni0uMTE3Yy0uMDE4LjE1MS0uMDEuMjU2LS4wMDMuMzU1LjAxMy4xNjYuMDIzLjMxMi0uMDk0LjYyLjEzNS0uNDQyLjEyLS44NDEtLjAwNy0uNjQ5LjAzLjM0My0uMTIuNjQyLS4yNTQuOTA4LS4xMTEuMjIyLS4yMTEuNDItLjE4NC42MDJsLS4xNjEtLjIyMmMtLjIzOC4zNDQtLjIyLjQxNy0uMjAyLjQ4OS4wMTUuMDYuMDMuMTItLjEwNS4zMzkuMDUxLS4wOS4wNDEtLjExMi4wMzEtLjEzMy0uMDEtLjAyNC0uMDIxLS4wNDYuMDUzLS4xNTgtLjA1LjAwMy0uMTcuMTItLjMxNi4yNjUtLjEyMy4xMjEtLjI2NS4yNjEtLjQwMi4zNjgtMS4xNzIuOTQtMi41NzEgMS4wNjItMy45MjYuNTU2LjAwNi0uMDMxLS4wMDYtLjA2Ni0uMDk3LS4xMjgtMS4xNDgtLjg4LTEuODI3LTEuNjI4LTEuNTkxLTMuMzYuMDY4LS4wNTEuMTE3LS4xOTMuMTc1LS4zNjIuMDktLjI2My4yMDMtLjU5LjQ0OC0uNzQ1LjI0NS0uNTQxLjk3OS0xLjA0IDEuNzY0LTEuMDUyLjgtLjA0NCAxLjQ3Ni40MjcgMS44MTYuODcyLS42MTgtLjU3Ni0xLjYzLS43NTEtMi40OTMtLjMyNC0uODgyLjM5Ni0xLjQwNSAxLjM2OC0xLjMyOSAyLjMzNi4wMS0uMDE2LjAyMS0uMDIzLjAzLS4wMy4wMi0uMDE1LjAzNy0uMDI3LjA0OC0uMTA4LS4wMjcgMS44OCAyLjAyNiAzLjI1OCAzLjUwNCAyLjU2M2wuMDE4LjAzOWMuMzk3LS4xMDkuNDk3LS4yMDUuNjMzLS4zMzUuMDctLjA2Ny4xNDgtLjE0Mi4yOC0uMjMzYS40NDEuNDQxIDAgMCAxLS4wNzUuMDg1Yy0uMDY4LjA2Ny0uMTQzLjE0LS4wNS4xNDIuMTY2LS4wNDMuNjM0LS40NjUuOTQ3LS43NDZsLjEzMy0uMTE5Yy4wNjItLjEzNC4wNTEtLjE3Ny4wNC0uMjIxLS4wMTItLjA1Mi0uMDI1LS4xMDQuMDc2LS4zbC4yMjktLjExNGMuMDMtLjA4OC4wNjItLjE2OC4wOTItLjI0M3pNNi42MTIgMTAuMDZhLjAxOC4wMTggMCAwIDAtLjAwNS4wMTYuMTE0LjExNCAwIDAgMCAuMDA1LS4wMTZ6bS0uMDA1LjAxNmMuMDA4LjA2OS4yNjkuMjY4LjQ2NS4zNjkuNTE2LjE5IDEuMS4xOTggMS41NTkuMTgxLS45OTMuNDE1LTIuODg5LS40MjItMy41MDktMS41MzIuMDU3LjAxMi4xNjguMTQuMzAzLjI5Ny4yMDQuMjM0LjQ2Mi41MzIuNjc4LjYwNS0uMjEzLS4xNy0uMzc3LS4zODctLjUzLS42MS4yODguMzMuNjM3LjYgMS4wMTkuNzc5YS4xMDIuMTAyIDAgMCAxIC4wMS0uMDc3bC4wMDUtLjAxMnpNNi43NTIuMjE5YTYuNjEyIDYuNjEyIDAgMCAxLS4wNzUtLjAxM2MuNDcyLjAxNC40MzcuMDQ1LjI4My4wOC4wMTgtLjAyOS0uMDktLjA0Ny0uMjA4LS4wNjd6TTkuNjMgNi43MzJjLjAzMi0uNDc3LS4wOTQtLjMyNi0uMTM2LS4xNDQuMDE5LjAxLjAzNi4wNTkuMDUyLjEwNy4wMjguMDguMDU0LjE1OC4wODQuMDM3em0tLjIxMS42NjRhMS42OCAxLjY4IDAgMCAxLS4zMTQuNzAzYy4wMDYtLjA2MS0uMDM4LS4wNzQtLjA4My0uMDg2LS4wOTItLjAyNi0uMTgzLS4wNTIuMTc2LS41MDRhMS4xMTMgMS4xMTMgMCAwIDEtLjEyNi4yNDJjLS4xMTIuMTg0LS4yMS4zNDQuMTI2LjEzM2wuMDMzLS4wNmExLjQzIDEuNDMgMCAwIDAgLjE4OC0uNDI4em0tMS4zNCAxLjI0N2MtLjM0Ny0uMDUzLS42NjItLjE4Ni0uMzk3LS4xOS4yMjEuMDIuNDQuMDIuNjU2LS4wMzNhMy41NDQgMy41NDQgMCAwIDEtLjI2LjIyM3pNNi45NTguMjg1bC0uMS4wMi4wOTQtLjAwOC4wMDYtLjAxMnpNNC43OSA4LjgxOGwtLjAzOC4xODZjLjA0Ny4wNjQuMDkyLjEzLjEzNi4xOTUuMTIuMTc1LjIzNy4zNDguNC40ODNhNC43MyA0LjczIDAgMCAwLS4yMTQtLjM2OGMtLjA4LS4xMy0uMTY5LS4yNzItLjI4NS0uNDk2em0uMjI2LS4zMTljLjA1Mi4xMDguMTA0LjIxMy4xODUuMzAybC4wODIuMjQtLjAzOC0uMDYzYy0uMS0uMTY2LS4yLS4zMzMtLjI1Mi0uNTI0bC4wMjMuMDQ1em03LjQ3NC0xLjI4MmwtLjAzOS4wOThhNC43MTcgNC43MTcgMCAwIDEtLjQ2MiAxLjQ3NGMuMjYxLS40OS40My0xLjAyOC41MDEtMS41NzJ6TS40MzYgMy40MjZ6bS4wMDIuMDIyYy4wMDguMDM3LjA0My4wMjguMDc1LjAyLjA2LS4wMTUuMTE0LS4wMy0uMDA0LjIzNi0uMDc0LjA1Mi0uMTE5LjA4Ny0uMTQ0LjEwNmwtLjAyNy4wMmEuMDUuMDUgMCAwIDEgLjAwOC0uMDE3LjU5Ny41OTcgMCAwIDAgLjA5Mi0uMzY1ek0uMTE4IDQuNzZhMi45MiAyLjkyIDAgMCAxLS4xMDYuNDM2LjU4OC41ODggMCAwIDAtLjAwNS0uMTU0Yy0uMDEzLS4xMDUtLjAyNS0uMTk3LjEzNS0uNDAyYTQuMDA5IDQuMDA5IDAgMCAwLS4wMjMuMTJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rlcm1pbmFsTGludXggKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTMuMjgxIDExLjE1NmEuODQuODQgMCAwIDEgLjM3NS4yOTdjLjA4NC4xMjUuMTQzLjI3Ni4xOC40NTMuMDIuMTA0LjA0NC4yLjA3LjI5YTEuNzcyIDEuNzcyIDAgMCAwIC4yMTkuNDc2Yy4wNDcuMDczLjExLjE1My4xODguMjQyLjA2Ny4wNzMuMTI3LjE2Ny4xOC4yODFhLjc5My43OTMgMCAwIDEgLjA3Ny4zMjguNDkuNDkgMCAwIDEtLjA5My4zMDUuOTQ0Ljk0NCAwIDAgMS0uMjM1LjIxOWMtLjEyLjA4My0uMjQ1LjE1Ni0uMzc1LjIxOS0uMTMuMDYyLS4yNi4xMjctLjM5LjE5NWEzLjYyNCAzLjYyNCAwIDAgMC0uNTU1LjMyOGMtLjE1Ni4xMTUtLjMxMy4yNi0uNDY5LjQzOGEyLjgxNSAyLjgxNSAwIDAgMS0uNjI1LjUyMyAxLjQ3MSAxLjQ3MSAwIDAgMS0uMzgzLjE3MmMtLjEzLjAzNi0uMjYuMDYtLjM5LjA3LS4zMDIgMC0uNTUyLS4wNTItLjc1LS4xNTYtLjE5OC0uMTA0LS4zNy0uMjk0LS41MTYtLjU3LS4wNDItLjA3OS0uMDgzLS4xMjgtLjEyNS0uMTQ5YS43NzQuNzc0IDAgMCAwLS4yMDMtLjA1NUw4LjY3IDE1Yy0uMjYtLjAyLS41MjUtLjAzMS0uNzk2LS4wMzFhNC4yOCA0LjI4IDAgMCAwLS42NzIuMDU0Yy0uMjI5LjAzNy0uNDU2LjA4MS0uNjguMTMzLS4wNDYuMDEtLjA5My4wNS0uMTQuMTE3YTEuNyAxLjcgMCAwIDEtLjE5Ni4yMjcgMS4xMDYgMS4xMDYgMCAwIDEtLjMzNS4yMTkgMS40NzUgMS40NzUgMCAwIDEtLjU1NS4xMDFjLS4xNzIgMC0uMzU3LS4wMTgtLjU1NS0uMDU0YTEuODIgMS44MiAwIDAgMS0uNTMxLS4xOCAzLjU3OCAzLjU3OCAwIDAgMC0uOTUzLS4zMjhjLS4zMTMtLjA1Ny0uNjQzLS4xMS0uOTkyLS4xNTZhMy4zOTIgMy4zOTIgMCAwIDEtLjM0NC0uMDYzLjc3NC43NzQgMCAwIDEtLjI5LS4xMzMuNzA1LjcwNSAwIDAgMS0uMTk0LS4yMTkuNzguNzggMCAwIDEtLjA3OS0uMzUxYzAtLjE2Mi4wMjEtLjMxOC4wNjMtLjQ2OS4wNDItLjE1LjA2NS0uMzEuMDctLjQ3NiAwLS4xMTUtLjAwOC0uMjI3LS4wMjMtLjMzNmEzLjUzIDMuNTMgMCAwIDEtLjAzMi0uMzUyYzAtLjI2NS4wNjMtLjQ2LjE4OC0uNTg2LjEyNS0uMTI1LjMwNy0uMjI0LjU0Ny0uMjk3YS45OS45OSAwIDAgMCAuMjk3LS4xNDggMi4yNyAyLjI3IDAgMCAwIC4yMzQtLjIwMyAxLjg2IDEuODYgMCAwIDAgLjIwMy0uMjQyYy4wNjMtLjA4OS4xMzMtLjE3OC4yMTEtLjI2NmEuMTE0LjExNCAwIDAgMCAuMDI0LS4wN2MwLS4wNjMtLjAwMy0uMTIzLS4wMDgtLjE4bC0uMDE2LS4xODhjMC0uMzU0LjA1NS0uNzEuMTY0LTEuMDcuMTEtLjM2LjI1My0uNzEuNDMtMS4wNTVhOS4wOCA5LjA4IDAgMCAxIC41OTQtLjk5MmMuMjE4LS4zMTcuNDM1LS42MTIuNjQ4LS44ODNhNC4zNSA0LjM1IDAgMCAwIC42OC0xLjIwM2MuMTUtLjQxNi4yMjktLjg3LjIzNC0xLjM2IDAtLjIwNy0uMDEtLjQxMy0uMDMxLS42MTZhNi4xMjIgNi4xMjIgMCAwIDEtLjAzMS0uNjI1YzAtLjQxNy4wNDctLjc5Mi4xNC0xLjEyNS4wOTQtLjMzNC4yNC0uNjIuNDM4LS44NnMuNDU2LS40MTkuNzczLS41MzlDNy40NzQuMDc1IDcuODU0LjAxIDguMjk2IDBjLjUyNyAwIC45NDYuMTA0IDEuMjU5LjMxMy4zMTIuMjA4LjU1Mi40ODEuNzE4LjgyLjE2Ny4zMzguMjc0LjcxNi4zMiAxLjEzMy4wNDguNDE2LjA3NC44MzguMDc5IDEuMjY1di4xMzNjMCAuMjE0LjAwMi40MDQuMDA4LjU3YTIuNTI3IDIuNTI3IDAgMCAwIC4yMjYuOTc3Yy4wNzMuMTYxLjE4Mi4zMzYuMzI4LjUyMy4yNS4zMjkuNTA2LjY2Ljc2Ni45OTMuMjYuMzMzLjQ5Ny42NzcuNzEgMS4wMy4yMTQuMzU1LjM4OS43MjUuNTI0IDEuMTEuMTM2LjM4Ni4yMDYuODAyLjIxMSAxLjI1YTMuMyAzLjMgMCAwIDEtLjE2NCAxLjA0em0tNi41NTQtOC4xNGMuMDcyIDAgLjEzMi4wMTguMTguMDU0YS4zNTcuMzU3IDAgMCAxIC4xMDkuMTQ5Ljg1Ljg1IDAgMCAxIC4wNTQuMTg3Yy4wMS4wNjMuMDE2LjEyOC4wMTYuMTk2YS4yODIuMjgyIDAgMCAxLS4wMjQuMTI1LjI3LjI3IDAgMCAxLS4wNy4wODZsLS4wOTQuMDc4YS43OTYuNzk2IDAgMCAwLS4wOTMuMDkzLjQyOC40MjggMCAwIDEtLjE0OS4xNDEgMi4xMjkgMi4xMjkgMCAwIDAtLjE4LjExNyAxLjMxIDEuMzEgMCAwIDAtLjE1Ni4xMzMuMjY0LjI2NCAwIDAgMC0uMDcuMTk1YzAgLjA0Ny4wMjMuMDg2LjA3LjExN2EuNzA0LjcwNCAwIDAgMSAuMjY2LjMwNWMuMDUyLjEyLjExLjIzNy4xNzIuMzUyLjA2Mi4xMTQuMTQzLjIxLjI0Mi4yODkuMDk5LjA3OC4yNTMuMTE3LjQ2LjExN2guMDQ4Yy4yMDgtLjAxLjQwNi0uMDY1LjU5NC0uMTY0LjE4Ny0uMDk5LjM3NS0uMjAzLjU2Mi0uMzEzYS42MzMuNjMzIDAgMCAxIC4xMDItLjA0Ni4zNy4zNyAwIDAgMCAuMTAxLS4wNTVsLjU3LS40NDVhLjkyNi45MjYgMCAwIDAgLjAyNC0uMTAyIDIuNzUgMi43NSAwIDAgMCAuMDE2LS4xMS4yMzYuMjM2IDAgMCAwLS4wNC0uMTQuNC40IDAgMCAwLS4wOTMtLjA5NC4zNC4zNCAwIDAgMC0uMTMzLS4wNTQuOTA5LjkwOSAwIDAgMS0uMTQtLjA0IDEuMDgzIDEuMDgzIDAgMCAxLS4zNTItLjE0IDEuNDU3IDEuNDU3IDAgMCAwLS4zNDQtLjE1NmMtLjAyLS4wMDYtLjAzNi0uMDIxLS4wNDctLjA0N2EuOTgzLjk4MyAwIDAgMS0uMDMxLS4wOTQuMjMuMjMgMCAwIDEtLjAwOC0uMTAyLjEyNi4xMjYgMCAwIDAtLjAwOC0uMDc4YzAtLjA2Mi4wMDUtLjEyNy4wMTYtLjE5NWEuNTUxLjU1MSAwIDAgMSAuMDctLjE5NS40MTcuNDE3IDAgMCAxIC4xMjUtLjE0LjQxMS40MTEgMCAwIDEgLjIwMy0uMDU2Yy4xNjIgMCAuMjc5LjA2LjM1Mi4xOC4wNzMuMTIuMTEyLjI1LjExNy4zOWEuMzk3LjM5NyAwIDAgMS0uMDM5LjE4LjM3OS4zNzkgMCAwIDAtLjA0LjE3MmMwIC4wNDIuMDE0LjA3LjA0LjA4NmEuMjYuMjYgMCAwIDAgLjEwMi4wMzFjLjEyIDAgLjE5Ny0uMDI4LjIzNC0uMDg1YS41MzMuNTMzIDAgMCAwIC4wNjItLjI1OGMwLS4xMi0uMDEtLjI1My0uMDMtLjM5OWExLjMyIDEuMzIgMCAwIDAtLjEyNi0uNDA2Ljk2OS45NjkgMCAwIDAtLjI0Mi0uMzEzLjU3NC41NzQgMCAwIDAtLjM4My0uMTI0Yy0uMjcgMC0uNDY2LjA2Ny0uNTg2LjIwMy0uMTIuMTM1LS4xODIuMzM4LS4xODcuNjA5IDAgLjA3OC4wMDUuMTU2LjAxNS4yMzQuMDEuMDc5LjAxNi4xNTcuMDE2LjIzNSAwIC4wMjYtLjAwMy4wMzktLjAwOC4wMzlhLjIxOC4yMTggMCAwIDEtLjA0Ny0uMDE2IDQuMjYzIDQuMjYzIDAgMCAxLS4wOTMtLjAzOS43NzQuNzc0IDAgMCAwLS4xMTgtLjAzOS41MTQuNTE0IDAgMCAwLS4yMDMtLjAwOCAxLjAwNyAxLjAwNyAwIDAgMS0uMTI1LjAwOGMtLjA3MyAwLS4xMS0uMDEzLS4xMS0uMDM5IDAtLjA3OC0uMDA0LS4xNzctLjAxNS0uMjk3LS4wMS0uMTItLjAzNi0uMjQtLjA3OC0uMzZhLjk5NS45OTUgMCAwIDAtLjE1Ni0uMjk2Yy0uMDYzLS4wNzgtLjE1Ni0uMTItLjI4MS0uMTI1YS4zMjMuMzIzIDAgMCAwLS4yMjcuMDg2LjkwNS45MDUgMCAwIDAtLjE2NC4yMDMuNjQuNjQgMCAwIDAtLjA4Ni4yNjYgNS40IDUuNCAwIDAgMS0uMDMxLjI1IDEuNDU5IDEuNDU5IDAgMCAwIC4wNy40MDZjLjAyNi4wODMuMDU1LjE1Ni4wODYuMjE5LjAzMS4wNjIuMDY4LjA5My4xMS4wOTMuMDI1IDAgLjA2LS4wMTguMTAxLS4wNTQuMDQyLS4wMzcuMDYzLS4wNy4wNjMtLjEwMiAwLS4wMTYtLjAwOC0uMDI2LS4wMjQtLjAzMWEuMTQ3LjE0NyAwIDAgMC0uMDQ3LS4wMDhjLS4wMzYgMC0uMDY4LS4wMTgtLjA5NC0uMDU1YS40NjguNDY4IDAgMCAxLS4wNjItLjEyNSA1LjE0NCA1LjE0NCAwIDAgMS0uMDQ3LS4xNDguNTY0LjU2NCAwIDAgMSAuMDU1LS4zOThjLjA0Ny0uMDg0LjEzMy0uMTI4LjI1OC0uMTMzek01LjAyMyAxNS4xOGMuMTI1IDAgLjI0OC0uMDEuMzY4LS4wMzJhLjk3Ljk3IDAgMCAwIC4zMzYtLjEyNS42MTQuNjE0IDAgMCAwIC4yMzQtLjI0Mi45NDMuOTQzIDAgMCAwIC4wOTQtLjM3NS44MTYuODE2IDAgMCAwLS4wNDctLjI3My45NjMuOTYzIDAgMCAwLS4xMzMtLjI1IDIuNzYzIDIuNzYzIDAgMCAwLS4yMDMtLjI4MSAyLjc2MyAyLjc2MyAwIDAgMS0uMjAzLS4yODIgNjIuOTMgNjIuOTMgMCAwIDEtLjI5LS40M2MtLjA5My0uMTQtLjE4Ny0uMjg4LS4yOC0uNDQ1YTguMTI0IDguMTI0IDAgMCAxLS4yMzUtLjQwNiAyLjY0NiAyLjY0NiAwIDAgMC0uMjY2LS4zOTggMS4yMDMgMS4yMDMgMCAwIDAtLjIxOC0uMjExLjQ2OS40NjkgMCAwIDAtLjI5LS4wOTQuNDM2LjQzNiAwIDAgMC0uMjk2LjExIDIuMjYgMi4yNiAwIDAgMC0uMjU4LjI2NSAzLjI0MSAzLjI0MSAwIDAgMS0uMjk3LjMwNWMtLjExLjA5OS0uMjUuMTc3LS40MjIuMjM0YS43NDQuNzQ0IDAgMCAwLS4zMTIuMTcyYy0uMDczLjA3My0uMTEuMTg1LS4xMS4zMzYgMCAuMTA0LjAwOC4yMDguMDI0LjMxMi4wMTUuMTA0LjAyNi4yMDkuMDMxLjMxMyAwIC4xNC0uMDIuMjczLS4wNjMuMzk4YTEuMTU3IDEuMTU3IDAgMCAwLS4wNjIuMzY3YzAgLjE0MS4wNS4yNC4xNDguMjk3LjEuMDU4LjIxMS4wOTcuMzM2LjExNy4xNTcuMDI3LjMwNS4wNDcuNDQ2LjA2My4xNC4wMTYuMjc4LjA0LjQxNC4wNy4xMzUuMDMyLjI3LjA2NS40MDYuMTAyLjEzNS4wMzYuMjc5LjA5NC40My4xNzIuMDMuMDE1LjA3OC4wMzQuMTQuMDU0bC4yMTEuMDdjLjA3OC4wMjcuMTUxLjA0OC4yMTkuMDYzYS43NDEuNzQxIDAgMCAwIC4xNDguMDI0em0yLjg2LS45MzhjLjE0NiAwIC4zMDItLjAxNS40NjktLjA0N2EzLjU0IDMuNTQgMCAwIDAgLjk3Ni0uMzM2IDIuNTkgMi41OSAwIDAgMCAuNDA2LS4yNTcuMjIyLjIyMiAwIDAgMCAuMDMyLS4wNDcuMzA1LjMwNSAwIDAgMCAuMDIzLS4wNjN2LS4wMDhjLjAzMS0uMTE0LjA1Ny0uMjQuMDc4LS4zNzVhOC42MyA4LjYzIDAgMCAwIC4wNTUtLjQxNCA4Ljk4IDguOTggMCAwIDEgLjA1NS0uNDE0Yy4wMi0uMTM1LjAzOS0uMjY4LjA1NC0uMzk4LjAyMS0uMTQuMDQ3LS4yNzYuMDc4LS40MDYuMDMyLS4xMy4wNzMtLjI1My4xMjUtLjM2OGExLjAzIDEuMDMgMCAwIDEgLjIxMS0uMzA0IDEuNTQgMS41NCAwIDAgMSAuMzQ0LS4yNXYtLjAxNmwtLjAwOC0uMDIzYS4yOS4yOSAwIDAgMSAuMDQ3LS4xNDkgMS40IDEuNCAwIDAgMSAuMTE3LS4xNjQuNTgyLjU4MiAwIDAgMSAuMTQ5LS4xMzMuOTQ2Ljk0NiAwIDAgMSAuMTY0LS4wNzggOS44MzcgOS44MzcgMCAwIDAtLjEwMi0uMzc1IDQuOTM4IDQuOTM4IDAgMCAxLS4wOTQtLjM3NSA3LjEyNiA3LjEyNiAwIDAgMC0uMDkzLS40NzYgMi45NTQgMi45NTQgMCAwIDAtLjExLS4zNiAxLjMxNyAxLjMxNyAwIDAgMC0uMTgtLjMyYy0uMDc3LS4xMDQtLjE3NC0uMjMtLjI4OC0uMzc1YTEuMTg5IDEuMTg5IDAgMCAxLS4xMTgtLjE1Ni41NTUuNTU1IDAgMCAxLS4wNDYtLjE5NiAyLjIwNiAyLjIwNiAwIDAgMC0uMDQ3LS4yMDMgOS40OCA5LjQ4IDAgMCAwLS4yNDItLjc1IDIuOTEgMi45MSAwIDAgMC0uMTcyLS4zODMgMy44NyAzLjg3IDAgMCAwLS4xNzItLjI4OWMtLjA1Mi0uMDc4LS4xMDctLjExNy0uMTY0LS4xMTctLjEyNSAwLS4yNzQuMDUtLjQ0Ni4xNDktLjE3MS4wOTktLjM1NC4yMDgtLjU0Ni4zMjgtLjE5My4xMi0uMzguMjMyLS41NjMuMzM2LS4xODIuMTA0LS4zNDYuMTUzLS40OTIuMTQ4YS43LjcgMCAwIDEtLjQzLS4xNDggMi4yMzYgMi4yMzYgMCAwIDEtLjM2LS4zNDRjLS4xMDktLjEzLS4yLS4yNDItLjI3My0uMzM2LS4wNzMtLjA5NC0uMTI3LS4xNDYtLjE2NC0uMTU2LS4wNDEgMC0uMDY1LjAzMS0uMDcuMDkzYTIuNTYgMi41NiAwIDAgMC0uMDA4LjIxMXYuMTMzYzAgLjAzMi0uMDA1LjA1Mi0uMDE2LjA2My0uMDU3LjEyLS4xMi4yMzctLjE4Ny4zNTEtLjA2OC4xMTUtLjEzNS4yMzItLjIwMy4zNTJhMS42MTEgMS42MTEgMCAwIDAtLjIxOS43NThjMCAuMDc4LjAwNS4xNTYuMDE2LjIzNC4wMS4wNzguMDM2LjE1NC4wNzguMjI3bC0uMDE2LjAzYTEuMzEgMS4zMSAwIDAgMS0uMTMzLjE1NyAxLjA3MiAxLjA3MiAwIDAgMC0uMTMyLjE2NCAyLjc5NiAyLjc5NiAwIDAgMC0uNDA3LjkzYy0uMDc4LjMzMy0uMTIuNjcyLS4xMjUgMS4wMTUgMCAuMDg5LjAwNi4xNzguMDE2LjI2Ni4wMS4wODkuMDE2LjE3Ny4wMTYuMjY2YS41MjYuNTI2IDAgMCAxLS4wMDguMDg2LjUyNS41MjUgMCAwIDAtLjAwOC4wODYuNzUuNzUgMCAwIDEgLjMxMy4xMDljLjEyLjA2OC4yNS4xNTQuMzkuMjU4LjE0LjEwNC4yNzQuMjI0LjM5OS4zNi4xMjUuMTM1LjI0NC4yNjcuMzU5LjM5OC4xMTUuMTMuMTk4LjI2LjI1LjM5LjA1Mi4xMy4wODYuMjM3LjEwMS4zMmEuNDQ0LjQ0NCAwIDAgMS0uMTI1LjMyOS45NTUuOTU1IDAgMCAxLS4zMTIuMjAzYy4wODkuMTU2LjE5OC4yODkuMzI4LjM5OC4xMy4xMS4yNzEuMTk4LjQyMi4yNjYuMTUxLjA2OC4zMTUuMTE3LjQ5Mi4xNDguMTc3LjAzMi4zNS4wNDcuNTE2LjA0N3ptMy4xMzMgMS4xMWMuMTA5IDAgLjIxNi0uMDE2LjMyLS4wNDdhMS42NSAxLjY1IDAgMCAwIC40NDUtLjIwM2MuMTM2LS4wODkuMjYtLjE5OC4zNzUtLjMyOWEzLjA3IDMuMDcgMCAwIDEgLjk3Ny0uNzVsLjI1OC0uMTE3YTIuMTggMi4xOCAwIDAgMCAuMjU3LS4xMzMuOTYyLjk2MiAwIDAgMCAuMTY1LS4xMzIuMjU2LjI1NiAwIDAgMCAuMDc4LS4xODguMjk1LjI5NSAwIDAgMC0uMDI0LS4xMTcuNTguNTggMCAwIDAtLjA3LS4xMTcgNS4xMzYgNS4xMzYgMCAwIDEtLjIwMy0uMzA1IDEuOTc4IDEuOTc4IDAgMCAxLS4xNDktLjI5N2wtLjEyNS0uMzEyYTIuNTU4IDIuNTU4IDAgMCAxLS4xMS0uMzUyLjI4LjI4IDAgMCAwLS4wNTQtLjEwMS41My41MyAwIDAgMC0uNDYtLjIzNS41MzMuNTMzIDAgMCAwLS4yNjYuMDdsLS4yNjYuMTQ5YTcuMzM1IDcuMzM1IDAgMCAxLS4yODEuMTQ4LjY1Ni42NTYgMCAwIDEtLjI5Ny4wNy40MTEuNDExIDAgMCAxLS4yNTgtLjA3Ny42MzYuNjM2IDAgMCAxLS4xNzItLjIxMSAyLjIxOCAyLjIxOCAwIDAgMS0uMTE3LS4yNThsLS4wOTQtLjI1OGExLjI2IDEuMjYgMCAwIDEtLjE0LjE4OC42NjYuNjY2IDAgMCAwLS4xMjUuMjAzYy0uMDY4LjE1Ni0uMTEuMzMtLjEyNS41MjMtLjAyNi4zMDItLjA2LjU5Ni0uMTAyLjg4M2E0LjcgNC43IDAgMCAxLS4yMS44NiAxLjkxNCAxLjkxNCAwIDAgMC0uMDYzLjI3MyAyLjg4IDIuODggMCAwIDAtLjAzMi4yODljMCAuMjU1LjA3OS40NjYuMjM1LjYzMy4xNTYuMTY2LjM2Ny4yNS42MzMuMjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rlcm1pbmFsUG93ZXJzaGVsbCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTIuNSAxLjAwN2wxMi45OTkuMTcuNDMuNTAxLTEuODIgMTIuODcyLS41Ny40ODktMTMtLjE3LS40My0uNTAyTDEuOTMgMS40OTVsLjU3LS40ODh6TTEuMTggMTMuODg1bDExLjk5OC4xNTcgMS42OC0xMS44ODJMMi44NiAyLjAwMyAxLjE4IDEzLjg4NXptNS43OTEtMy40OWwtLjE0Ljk5MSA1IC4wNjYuMTQtLjk5LTUtLjA2NnptMS43MS0yLjQ1N2wtMy42NjMtMi45My0uNjkyLjc5NiAyLjYzNiAyLjExMkwzLjczOSA5Ljk1bC40NjUuODEyTDguNjggNy45Mzh6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1Rlcm1pbmFsVG11eCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEzLjUgMWgtMTJsLS41LjV2MTNsLjUuNWgxMmwuNS0uNXYtMTNsLS41LS41ek03IDcuNVYxM0gyVjJoNXY1LjV6bTYgNS41SDhWOGg1djV6bTAtNkg4VjJoNXY1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NUZXJtaW5hbFVidW50dSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0zLjI2IDhBMS4zNyAxLjM3IDAgMSAxIC41MiA4YTEuMzcgMS4zNyAwIDAgMSAyLjc0IDB6bTcuNzkgNi42NmExLjM3IDEuMzcgMCAxIDAgMi4zNzQtMS4zNyAxLjM3IDEuMzcgMCAwIDAtMi4zNzQgMS4zN3ptMi4zNy0xMS45NWExLjM3IDEuMzcgMCAxIDAtMi4zNy0xLjM3MyAxLjM3IDEuMzcgMCAwIDAgMi4zNyAxLjM3M3pNOC43OSA0LjFhMy45IDMuOSAwIDAgMSAzLjg5IDMuNTVoMmE1LjkzIDUuOTMgMCAwIDAtMS43My0zLjggMS45MSAxLjkxIDAgMCAxLTEuNjYtLjEyIDIuMDAxIDIuMDAxIDAgMCAxLS45NC0xLjM4IDYgNiAwIDAgMC0xLjU0LS4yIDUuODMgNS44MyAwIDAgMC0yLjYxLjYxbDEgMS43M2EzLjk0IDMuOTQgMCAwIDEgMS41OS0uMzl6TTQuODggOGEzLjkzIDMuOTMgMCAwIDEgMS42Ni0zLjJsLTEtMS43QTUuOTMgNS45MyAwIDAgMCAzLjEgNi41YTEuOTIgMS45MiAwIDAgMSAwIDMgNS45MyA1LjkzIDAgMCAwIDIuNDIgMy40bDEtMS43QTMuOTMgMy45MyAwIDAgMSA0Ljg4IDh6bTMuOTEgMy45MWE0IDQgMCAwIDEtMS42NS0uMzdsLTEgMS43M2MuODEuNDAzIDEuNzA0LjYxMiAyLjYxLjYxLjUyIDAgMS4wMzgtLjA2NyAxLjU0LS4yYTIgMiAwIDAgMSAuOTQtMS4zOCAxLjkxMSAxLjkxMSAwIDAgMSAxLjY2LS4xMiA1LjkzIDUuOTMgMCAwIDAgMS43My0zLjhoLTJhMy45MSAzLjkxIDAgMCAxLTMuODMgMy41M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGVybWluYWwgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0zIDEuNUwxLjUgM3YxOEwzIDIyLjVoMThsMS41LTEuNVYzTDIxIDEuNUgzek0zIDIxVjNoMTh2MThIM3ptNS42NTYtNC4wMWwxLjAzOCAxLjA2MSA1LjI2LTUuMjQzdi0uOTEybC01LjI2LTUuMjYtMS4wMzUgMS4wNiA0LjU5IDQuNzAyLTQuNTkzIDQuNTkyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NUZXh0U2l6ZSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0zLjM2IDdMMSAxM2gxLjM0bC41MS0xLjQ3aDIuMjZMNS42NCAxM0g3TDQuNjUgN0gzLjM2em0tLjE1IDMuNTNsLjc4LTIuMTQuNzggMi4xNEgzLjIxek0xMS44MiA0aC0xLjZMNyAxM2gxLjU2bC43NS0yLjI5aDMuMzZsLjc3IDIuMjlIMTVsLTMuMTgtOXpNOS42NyA5LjVsMS4xOC0zLjU5Yy4wNTktLjE4NS4xLS4zNzYuMTItLjU3LjAyNy4xOTIuMDY0LjM4Mi4xMS41N2wxLjI1IDMuNTlIOS42N3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGhyZWVCYXJzIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTQgNUgyVjNoMTJ2MnptMCA0SDJWN2gxMnYyek0yIDEzaDEydi0ySDJ2MnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGh1bWJzZG93biAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk01LjQ2IDE0LjExYTEuNDYgMS40NiAwIDAgMS0uODEtLjI1IDEuMzggMS4zOCAwIDAgMS0uNDUtMS42OUw1LjE3IDEwSDIuMzhhMS4zNiAxLjM2IDAgMCAxLTEuMTYtLjYxIDEuMzUgMS4zNSAwIDAgMS0uMDktMS4zMkMxLjggNi42MiAzIDQgMy40IDIuOUExLjM4IDEuMzggMCAwIDEgNC42OSAyaDguOTNBMS40IDEuNCAwIDAgMSAxNSAzLjR2My41MWExLjM4IDEuMzggMCAwIDEtMS4zOCAxLjM4aC0xLjM4TDYuNCAxMy43NWExLjQxIDEuNDEgMCAwIDEtLjk0LjM2ek00LjY5IDNhLjM5LjM5IDAgMCAwLS4zNi4yNUMzLjkzIDQuMzQgMi44NiA2LjcgMiA4LjQ5YS4zOS4zOSAwIDAgMCAwIC4zNi4zNy4zNyAwIDAgMCAuMzguMTVoMy4zbC41Mi42OHYuNDZsLTEuMDkgMi40NGEuMzcuMzcgMCAwIDAgLjEzLjQ2LjM4LjM4IDAgMCAwIC40OCAwbDYuMDYtNS41OS40Ny0uMTNoMS4zN2EuMzguMzggMCAwIDAgLjM4LS40MVYzLjRhLjQuNCAwIDAgMC0uMzgtLjRINC42OXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVGh1bWJzdXAgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTAuNTQgMmMuMjg5LjAwMS41Ny4wODguODEuMjVhMS4zOCAxLjM4IDAgMCAxIC40NSAxLjY5bC0uOTcgMi4xN2gyLjc5YTEuMzYgMS4zNiAwIDAgMSAxLjE2LjYxIDEuMzUgMS4zNSAwIDAgMSAuMDkgMS4zMmMtLjY3IDEuNDUtMS44NyA0LjA3LTIuMjcgNS4xN2ExLjM4IDEuMzggMCAwIDEtMS4yOS45SDIuMzhBMS40IDEuNCAwIDAgMSAxIDEyLjcxVjkuMmExLjM4IDEuMzggMCAwIDEgMS4zOC0xLjM4aDEuMzhMOS42IDIuMzZhMS40MSAxLjQxIDAgMCAxIC45NC0uMzZ6bS43NyAxMS4xMWEuMzkuMzkgMCAwIDAgLjM2LS4yNWMuNC0xLjA5IDEuNDctMy40NSAyLjMzLTUuMjRhLjM5LjM5IDAgMCAwIDAtLjM2LjM3LjM3IDAgMCAwLS4zOC0uMTVoLTMuM2wtLjUyLS42OHYtLjQ2bDEuMDktMi40NGEuMzcuMzcgMCAwIDAtLjEzLS40Ni4zOC4zOCAwIDAgMC0uNDggMEw0LjIyIDguNjZsLS40Ny4xM0gyLjM4QS4zOC4zOCAwIDAgMCAyIDkuMnYzLjUxYS40LjQgMCAwIDAgLjM4LjRoOC45M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVG9vbHMgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC43NzMgMy40ODVsLS43OC0uMTg0LTIuMTA4IDIuMDk2LTEuMTk0LTEuMjE2IDIuMDU2LTIuMTU3LS4xOC0uNzkyYTQuNDIgNC40MiAwIDAgMC0xLjM0Ny0uMjI4IDMuNjQgMy42NCAwIDAgMC0xLjQ1Ny4yOCAzLjgyNCAzLjgyNCAwIDAgMC0xLjE4Ni44NCAzLjczNiAzLjczNiAwIDAgMC0uODc1IDEuMjY1IDMuOTM4IDMuOTM4IDAgMCAwIDAgMi45NjYgMzM1LjM0MSAzMzUuMzQxIDAgMCAwLTYuMTczIDYuMjM0Yy0uMjEuMjc1LS4zMS42MTgtLjI4NC45NjNhMS40MDMgMS40MDMgMCAwIDAgLjQ2NC45NjdjLjEyNC4xMzUuMjcyLjI0Ny40MzcuMzI4LjE3LjA3NS4zNTMuMTE4LjUzOC4xMjcuMzE2LS4wMDYuNjE5LS4xMjYuODU0LS4zMzcgMS41NDgtMS40NTcgNC41MTQtNC40NSA2LjE5OS02LjIwNC40NTcuMTk0Ljk0OC4yOTQgMS40NDQuMjkzYTMuNzM2IDMuNzM2IDAgMCAwIDIuNjc3LTEuMTMzIDMuODg1IDMuODg1IDAgMCAwIDEuMTExLTIuNzMgNC4yMTEgNC4yMTEgMCAwIDAtLjE5Ni0xLjM3OHpNMi45MzMgMTMuOTI4YS4zMS4zMSAwIDAgMS0uMTM1LjA3LjQzNy40MzcgMCAwIDEtLjE0OSAwIC4zNDYuMzQ2IDAgMCAxLS4xNDQtLjA1Ny4zMzYuMzM2IDAgMCAxLS4xMTQtLjExYy0uMTQtLjE0My0uMjcxLS40MTUtLjE0LS41NjggMS4zNy0xLjQ1NyA0LjE5MS00LjMwNSA1Ljk1NS02LjA0Ni4xLjEzMi4yMS4yNTguMzI4LjM3Ni4xMTguMTIzLjI0NS4yMzcuMzguMzQxLTEuNzA2IDEuNzUtNC40ODggNC41NjQtNS45OCA1Ljk5NHptMTEuMTE4LTkuMDY1Yy4wMDIuNzY1LS4yOTYgMS41LS44MzIgMi4wNDhhMi44NjEgMi44NjEgMCAwIDEtNC4wMDcgMCAyLjk5MiAyLjk5MiAwIDAgMS0uNjM1LTMuMTM3QTIuNzQ4IDIuNzQ4IDAgMCAxIDEwLjE0IDIuMThhMi43NiAyLjc2IDAgMCAxIDEuMDcyLS4yMTRoLjI1NEw5LjY0OSAzLjgzOXYuNjk2bDEuODk1IDEuODg2aC42NmwxLjg0Ny0xLjgxNnYuMjU4ek0zLjI0IDYuNjg4aDEuNTMxbC43MDUuNzE3LjY3OC0uNjc0LS42NjUtLjY3OFY2LjAxbC4wNTctMS42NDktLjIyLS40MzctMi44Ni0xLjg4Mi0uNTkxLjA2Ni0uODMxLjg0OS0uMDY2LjU5OSAxLjgzOCAyLjkxOC40MjQuMjE1em0tLjk0NS0zLjYzMkw0LjYwOSA0LjU4IDQuNTcgNS43MDNIMy40OTRMMi4wMDIgMy4zNDFsLjI5My0uMjg1em03LjEwNSA2Ljk2bC42NzQtLjY3MyAzLjEwNiAzLjE4NWExLjQ3OSAxLjQ3OSAwIDAgMSAwIDIuMDM5IDEuNDA0IDEuNDA0IDAgMCAxLTEuNTQ5LjMxNSAxLjMxIDEuMzEgMCAwIDEtLjQzNy0uMzE1bC0zLjE0Mi0zLjIwMy42NzktLjY3OCAzLjEzMiAzLjE5NGEuNDAyLjQwMiAwIDAgMCAuMTUzLjEwNS40NzcuNDc3IDAgMCAwIC4zNTkgMCAuNDAzLjQwMyAwIDAgMCAuMTUzLS4xMDUuNDM2LjQzNiAwIDAgMCAuMS0uMTUzLjUyNS41MjUgMCAwIDAgLjAzNi0uMTg0LjU0Ny41NDcgMCAwIDAtLjAzNS0uMTg0LjQzNi40MzYgMCAwIDAtLjEtLjE1M0w5LjQgMTAuMDE2elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NUcmFzaCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEwIDNoM3YxaC0xdjlsLTEgMUg0bC0xLTFWNEgyVjNoM1YyYTEgMSAwIDAgMSAxLTFoM2ExIDEgMCAwIDEgMSAxdjF6TTkgMkg2djFoM1Yyek00IDEzaDdWNEg0djl6bTItOEg1djdoMVY1em0xIDBoMXY3SDdWNXptMiAwaDF2N0g5VjV6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1RyaWFuZ2xlRG93biAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0yIDUuNTZMMi40MTMgNWgxMS4xOTRsLjM5My41NEw4LjM3MyAxMWgtLjgyN0wyIDUuNTZ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1RyaWFuZ2xlTGVmdCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMC40NCAybC41Ni40MTN2MTEuMTk0bC0uNTQuMzkzTDUgOC4zNzN2LS44MjdMMTAuNDQgMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVHJpYW5nbGVSaWdodCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk01LjU2IDE0TDUgMTMuNTg3VjIuMzkzTDUuNTQgMiAxMSA3LjYyN3YuODI3TDUuNTYgMTR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1RyaWFuZ2xlVXAgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTQgMTAuNDRsLS40MTMuNTZIMi4zOTNMMiAxMC40NiA3LjYyNyA1aC44MjdMMTQgMTAuNDR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1R3aXR0ZXIgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUgMy43ODRhNS42MyA1LjYzIDAgMCAxLS42NS44MDMgNi4wNTggNi4wNTggMCAwIDEtLjc4Ni42OCA1LjQ0MiA1LjQ0MiAwIDAgMSAuMDE0LjM3N2MwIC41NzQtLjA2MSAxLjE0MS0uMTg0IDEuNzAyYTguNDY3IDguNDY3IDAgMCAxLS41MzQgMS42MjcgOC40NDQgOC40NDQgMCAwIDEtMS4yNjQgMi4wNCA3Ljc2OCA3Ljc2OCAwIDAgMS0xLjcyIDEuNTIxIDcuODM1IDcuODM1IDAgMCAxLTIuMDk1Ljk1IDguNTI0IDguNTI0IDAgMCAxLTIuMzc5LjMyOSA4LjE3OCA4LjE3OCAwIDAgMS0yLjI5My0uMzI1QTcuOTIxIDcuOTIxIDAgMCAxIDEgMTIuNTJhNS43NjIgNS43NjIgMCAwIDAgNC4yNTItMS4xOSAyLjg0MiAyLjg0MiAwIDAgMS0yLjI3My0xLjE5IDIuODc4IDIuODc4IDAgMCAxLS40MDctLjhjLjA5MS4wMTQuMTgxLjAyNi4yNy4wMzVhMi43OTcgMi43OTcgMCAwIDAgMS4wMjItLjA4OSAyLjgwOCAyLjgwOCAwIDAgMS0uOTI2LS4zNjIgMi45NDIgMi45NDIgMCAwIDEtLjcyOC0uNjMzIDIuODM5IDIuODM5IDAgMCAxLS42NS0xLjgyMnYtLjAzM2MuNDAyLjIyNy44MzcuMzQ4IDEuMzA2LjM2MmEyLjk0MyAyLjk0MyAwIDAgMS0uOTM2LTEuMDQgMi45NTUgMi45NTUgMCAwIDEtLjI1My0uNjQ5IDIuOTQ1IDIuOTQ1IDAgMCAxIC4wMDctMS40NTNjLjA2My0uMjQzLjE2MS0uNDc0LjI5NC0uNjkzLjM2NC40NTEuNzcuODU2IDEuMjE2IDEuMjEzYTguMjE1IDguMjE1IDAgMCAwIDMuMDA4IDEuNTI1IDcuOTY1IDcuOTY1IDAgMCAwIDEuNjk1LjI2MyAyLjE1IDIuMTUgMCAwIDEtLjA1OC0uMzI1IDMuMjY1IDMuMjY1IDAgMCAxLS4wMTctLjMzMWMwLS4zOTcuMDc1LS43Ny4yMjYtMS4xMThhMi44OTIgMi44OTIgMCAwIDEgMS41MjgtMS41MjggMi43OSAyLjc5IDAgMCAxIDEuMTE3LS4yMjUgMi44NDYgMi44NDYgMCAwIDEgMi4wOTkuOTA5IDUuNyA1LjcgMCAwIDAgMS44MTgtLjY5OCAyLjgxNSAyLjgxNSAwIDAgMS0xLjI1OCAxLjU4NkE1LjcwNCA1LjcwNCAwIDAgMCAxNSAzLjc4NXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVHlwZUhpZXJhcmNoeVN1YiAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41IDExaC0xLjcyOUw4LjQzOCA2SDkuNWwuNS0uNXYtNEw5LjUgMWgtNGwtLjUuNXY0bC41LjVoMS4wNjJsLTMuMzMzIDVIMS41bC0uNS41djNsLjUuNWgzbC41LS41di0zbC0uNS0uNWgtLjA2OEw3LjUgNi40bDMuMDY4IDQuNkgxMC41bC0uNS41djNsLjUuNWgzbC41LS41di0zbC0uNS0uNXpNNiA1VjJoM3YzSDZ6bS0yIDd2Mkgydi0yaDJ6bTkgMmgtMnYtMmgydjJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1R5cGVIaWVyYXJjaHlTdXBlciAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41IDFoLTNsLS41LjV2M2wuNS41aC4wNjhMNy41IDkuNiA0LjQzMiA1SDQuNWwuNS0uNXYtM0w0LjUgMWgtM2wtLjUuNXYzbC41LjVoMS43MjlsMy4zMzMgNUg1LjVsLS41LjV2NGwuNS41aDRsLjUtLjV2LTRsLS41LS41SDguNDM4bDMuMzMzLTVIMTMuNWwuNS0uNXYtM2wtLjUtLjV6TTIgNFYyaDJ2Mkgyem03IDd2M0g2di0zaDN6bTQtN2gtMlYyaDJ2MnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVHlwZUhpZXJhcmNoeSAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMy41IDEyaC0xLjc5M0wxMCAxMC4yOTNWNi41TDkuNSA2SDhWNGguNWwuNS0uNXYtMkw4LjUgMWgtMmwtLjUuNXYybC41LjVIN3YySDUuNWwtLjUuNXYzLjc5M0wzLjI5MyAxMkgxLjVsLS41LjV2MmwuNS41aDJsLjUtLjV2LTEuNzkzTDUuNzA3IDExaDMuNTg2TDExIDEyLjcwN1YxNC41bC41LjVoMmwuNS0uNXYtMmwtLjUtLjV6TTcgMmgxdjFIN1Yyek02IDdoM3YzSDZWN3ptLTMgN0gydi0xaDF2MXptMTAgMGgtMXYtMWgxdjF6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1VuZm9sZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuNTMgNi41MXYtNGwtMSAxLS43MS0uNzFMNy42NSAxaC43MWwxLjg0IDEuODMtLjcxLjctMS0xdjMuOThoLS45NnptMCAyLjk4djRsLTEtMS0uNzEuNzFMNy42NSAxNWguNzFsMS44NC0xLjgzLS43MS0uNy0xIDFWOS40OWgtLjk2ek0xMy43MyA0TDE0IDUuMDJsLTMuNjggMi45M0wxNCAxMC45OCAxMy43MyAxMmgtNC4ydi0xaDNMOS41NSA4LjU3SDYuNTRMMy40NSAxMWgzLjA4djFIMi4yN0wyIDEwLjk4bDMuNjgtMi45MkwyIDUuMDIgMi4yNyA0aDQuMjZ2MUgzLjQ1bDMgMi40MmgzLjAxTDEyLjUzIDVoLTNWNGg0LjJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1VuZ3JvdXBCeVJlZlR5cGUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0yLjkgMUw1IDMuMWwtLjguN0wzIDIuNlY3SDJWMi41TC44IDMuOGwtLjctLjdMMi4yIDFoLjd6TTMgMTMuNFY5SDJ2NC40TC44IDEyLjJsLS43LjdMMi4yIDE1aC43TDUgMTIuOWwtLjctLjdMMyAxMy40ek04LjUgN2gtMkw2IDYuNXYtMmwuNS0uNWgybC41LjV2MmwtLjUuNXpNNyA2aDFWNUg3djF6bTcuNSAxaC0zbC0uNS0uNXYtM2wuNS0uNWgzbC41LjV2M2wtLjUuNXpNMTIgNmgyVjRoLTJ2MnptLTMuNSA2aC0ybC0uNS0uNXYtMmwuNS0uNWgybC41LjV2MmwtLjUuNXpNNyAxMWgxdi0xSDd2MXptNy41IDJoLTNsLS41LS41di0zbC41LS41aDNsLjUuNXYzbC0uNS41ek0xMiAxMmgydi0yaC0ydjJ6bS0xLTJIOXYxaDJ2LTF6bTAtNUg5djFoMlY1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NVbmxvY2sgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01IDdWNWEzIDMgMCAwIDEgNS44My0xaDEuMDQ0QTQuMDAyIDQuMDAyIDAgMCAwIDQgNXYySDNMMiA4djZsMSAxaDEwbDEtMVY4bC0xLTFINXptNiAxaDJ2NkgzVjhoOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVW5tdXRlIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDQuODNoMi43OUw4LjE1IDFsLjg1LjM1djEzbC0uODUuMzMtMy44Ni0zLjg1SDEuNWwtLjUtLjV2LTVsLjUtLjV6TTQuODUgMTBMOCAxMy4xNFYyLjU2TDQuODUgNS42OGwtLjM1LjE1SDJ2NGgyLjVsLjM1LjE3ek0xNSA3LjgzYTYuOTcgNi45NyAwIDAgMS0xLjU3OCA0LjQyOGwtLjcxMi0uNzFBNS45NzUgNS45NzUgMCAwIDAgMTQgNy44M2MwLTEuNC0uNDgtMi42ODktMS4yODQtMy43MWwuNzEyLS43MUE2Ljk3MSA2Ljk3MSAwIDAgMSAxNSA3Ljgzem0tMiAwYTQuOTc4IDQuOTc4IDAgMCAxLTEuMDAyIDMuMDA0bC0uNzE2LS43MTZBMy45ODIgMy45ODIgMCAwIDAgMTIgNy44M2EzLjk4IDMuOTggMCAwIDAtLjcxMy0yLjI4bC43MTYtLjcxNmMuNjI2LjgzNS45OTcgMS44NzIuOTk3IDIuOTk2em0tMiAwYzAgLjU3NC0uMTYgMS4xMS0uNDQgMS41NjZsLS43MzktLjczOGExLjk5MyAxLjk5MyAwIDAgMCAuMDA1LTEuNjQ3bC43MzktLjczOWMuMjc2LjQ1NC40MzUuOTg4LjQzNSAxLjU1OHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVW52ZXJpZmllZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTcuNjcgMTQuNzJoLjcxTDEwLjEgMTNoMi40bC41LS41di0yLjQybDEuNzQtMS43MnYtLjcxbC0xLjcxLTEuNzJWMy40OWwtLjUtLjQ5SDEwLjFMOC4zOCAxLjI5aC0uNzFMNiAzSDMuNTNMMyAzLjV2Mi40M0wxLjMxIDcuNjV2LjcxTDMgMTAuMDh2Mi40MmwuNTMuNUg2bDEuNjcgMS43MnpNNi4xNiAxMkg0VjkuODdsLS4xMi0uMzVMMi4zNyA4bDEuNDgtMS41MS4xNS0uMzVWNGgyLjE2bC4zNi0uMTRMOCAyLjM1bDEuNTQgMS41MS4zNS4xNEgxMnYyLjE0bC4xNy4zNUwxMy42OSA4bC0xLjU1IDEuNTItLjE0LjM1VjEySDkuODlsLS4zOC4xNUw4IDEzLjY2bC0xLjQ4LTEuNTItLjM2LS4xNHptMS40NDMtNS44NTlhLjk2Mi45NjIgMCAwIDAtLjEyOC4yOTFjLS4wMy4xMDktLjA1LjIxNS0uMDYyLjMxN2wtLjAwNS4wNDNoLS44OTVsLjAwMy0uMDUxYy4wMTgtLjMyNi4wODktLjYxNS4yMTItLjg2NC4wNTItLjEwOC4xMTctLjIxNC4xOTMtLjMxOC4wODEtLjEwNi4xOC0uMi4yOTQtLjI4LjExOS0uMDg0LjI1NS0uMTUuNDA5LS4yQTEuNzEgMS43MSAwIDAgMSA4LjE2NSA1Yy4yOCAwIC41MjMuMDQ2LjcyNi4xNC4yLjA4OS4zNjYuMjEuNDk0LjM2My4xMjcuMTUyLjIyLjMyNi4yNzkuNTIuMDU4LjE5NC4wODcuMzk0LjA4Ny41OTkgMCAuMTkxLS4wMzIuMzcxLS4wOTguNTQtLjA2NC4xNjQtLjE0My4zMi0uMjM4LjQ2Ni0uMDk0LjE0My0uMTk3LjI4LS4zMS40MS0uMTEuMTI5LS4yMTEuMjUyLS4zMDQuMzcyYTIuNDcgMi40NyAwIDAgMC0uMjMuMzQuNjUzLjY1MyAwIDAgMC0uMDg4LjMxOHYuNDhoLS44ODh2LS41MzljMC0uMTY4LjAzMS0uMzIzLjA5NC0uNDY0YTIuMTUgMi4xNSAwIDAgMSAuMjQtLjQwMWMuMDk2LS4xMjcuMi0uMjUuMzA4LS4zNjhhNC43NCA0Ljc0IDAgMCAwIC4yOTktLjM1NmMuMDkzLS4xMi4xNy0uMjQ2LjIyOC0uMzc3YS45ODQuOTg0IDAgMCAwIC4wOS0uNDIxIDEuMDQgMS4wNCAwIDAgMC0uMDQ3LS4zMTh2LS4wMDFhLjYzOC42MzggMCAwIDAtLjEzLS4yNDMuNTU4LjU1OCAwIDAgMC0uMjE2LS4xNThIOC40NmEuNjg5LjY4OSAwIDAgMC0uMjk0LS4wNTkuNjQzLjY0MyAwIDAgMC0uMzM5LjA4My43NDIuNzQyIDAgMCAwLS4yMjMuMjE1ek04LjUgMTFoLS44ODh2LS44ODhIOC41VjExelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NWYXJpYWJsZUdyb3VwIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTUuMzg3IDExLjUyM2EuNDAyLjQwMiAwIDAgMSAuNTkzLS4zNjdjLjA1OC4wMzEuMTEuMDY1LjE1Ny4xMDIuMDQ3LjAzNi4wODguMDcuMTI1LjEwMWEuMTc3LjE3NyAwIDAgMCAuMTE3LjA0N2MuMDUyIDAgLjEyLS4wNC4yMDMtLjExNy4wODMtLjA3OC4xNzUtLjE4Mi4yNzMtLjMxMy4xLS4xMy4yMDEtLjI2OC4zMDUtLjQxNC4xMDQtLjE0Ni4yLS4yOTQuMjktLjQ0NWwuMjI2LS4zOWMuMDYyLS4xMS4xMDctLjE5OS4xMzMtLjI2NmExNS4zMyAxNS4zMyAwIDAgMC0uMTMzLS41MjQgMTUuMzg0IDE1LjM4NCAwIDAgMS0uMTMzLS41MjMgMy43MiAzLjcyIDAgMCAwLS4xMzMtLjQyMiAxLjA0IDEuMDQgMCAwIDAtLjE4Ny0uMzEzLjY1Ni42NTYgMCAwIDAtLjI2Ni0uMTg3IDEuMzc0IDEuMzc0IDAgMCAwLS4zNzUtLjA3IDEuNjI4IDEuNjI4IDAgMCAwLS4zMjguMDMxdi0uMTk1TDcuNjkgN2EyLjM0NSAyLjM0NSAwIDAgMSAuNDYxLjczNGMuMDUyLjEzLjA5Ny4yNjMuMTMzLjM5OS4wMzcuMTM1LjA3Ni4yODMuMTE3LjQ0NS4wNzgtLjExNS4xNzUtLjI2LjI5LS40MzhhNC40OSA0LjQ5IDAgMCAxIC4zOTgtLjUyM2MuMTUtLjE3Mi4zMS0uMzE1LjQ3Ni0uNDNBMS4wMiAxLjAyIDAgMCAxIDEwLjA4OSA3Yy4xMyAwIC4yNDcuMDM0LjM1MS4xMDEuMTA1LjA2OC4xNTcuMTc1LjE1Ny4zMiAwIC4yODItLjE0MS40MjMtLjQyMi40MjNhLjYwOC42MDggMCAwIDEtLjI5LS4wNy42MDguNjA4IDAgMCAwLS4yODgtLjA3MWMtLjEgMC0uMjAzLjA1LS4zMTMuMTQ4YTIuMyAyLjMgMCAwIDAtLjMxMi4zNTIgOS41IDkuNSAwIDAgMC0uNDg1LjczNGwuNDQ2IDEuODUyYTEuNTYgMS41NiAwIDAgMCAuMDkzLjM0NC42NjkuNjY5IDAgMCAwIC4wOTQuMTcxLjE4NC4xODQgMCAwIDAgLjEyNS4wNzkuMzcuMzcgMCAwIDAgLjIxMS0uMDg2IDIuMTQgMi4xNCAwIDAgMCAuNDMtLjQ3Yy4wNTItLjA3Ny4wOTMtLjE1LjEyNS0uMjE4bC4xODcuMDk0YTIuMDI1IDIuMDI1IDAgMCAxLS4yMTkuMzY3IDMuNzc1IDMuNzc1IDAgMCAxLS4zNTEuNDIyIDMuMzggMy4zOCAwIDAgMS0uNDA2LjM2Yy0uMTQxLjEwNC0uMjY5LjE1My0uMzgzLjE0OGEuMzk3LjM5NyAwIDAgMS0uMjgxLS4xMDIgMS40OTEgMS40OTEgMCAwIDEtLjIwNC0uMjM0IDEuNTk5IDEuNTk5IDAgMCAxLS4xMzItLjM2IDguMjYzIDguMjYzIDAgMCAxLS4xMTgtLjUwNyAzNC4xNiAzNC4xNiAwIDAgMS0uMTAxLS41MzIgMi4yMTIgMi4yMTIgMCAwIDAtLjExLS40MTRsLS4yMDMuMzc1YTQuNDg5IDQuNDg5IDAgMCAxLS4yOC40NTNjLS4xMS4xNTctLjIyMi4zMTYtLjMzNy40NzdhMi40NiAyLjQ2IDAgMCAxLS4zNzUuNDIyYy0uMTM1LjEyLS4yNjUuMjIxLS4zOS4zMDVBLjY2LjY2IDAgMCAxIDUuOTEgMTJhLjUzOS41MzkgMCAwIDEtLjM2LS4xMzMuNDU0LjQ1NCAwIDAgMS0uMTYzLS4zNDR6bTYuMTEuNDc3Yy4yOC0uMzYuNDk2LS43NDguNjQ4LTEuMTY0YTMuODcgMy44NyAwIDAgMCAuMjI2LTEuMzJjMC0uNDctLjA3NS0uOTEyLS4yMjYtMS4zMjlBNC41NyA0LjU3IDAgMCAwIDExLjQ5NSA3aC43MzRhMy43NyAzLjc3IDAgMCAxIC45MjIgMi41MTVjMCAuNDc0LS4wNzMuOTE3LS4yMTggMS4zMjktLjE0Ni40MTEtLjM4Ljc5Ni0uNzA0IDEuMTU2aC0uNzM0ek0zLjc3IDEyYTMuMzczIDMuMzczIDAgMCAxLS43MDQtMS4xNDkgMy45NyAzLjk3IDAgMCAxLS4yMTgtMS4zMzZjMC0uOTUzLjMwNy0xLjc5MS45MjItMi41MTVoLjcyNmE0LjEzMiA0LjEzMiAwIDAgMC0uNjQgMS4xOCA0LjIwNSA0LjIwNSAwIDAgMC0uMjI3IDEuMzM1QTMuOTI5IDMuOTI5IDAgMCAwIDQuNDk2IDEySDMuNzd6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTUuNSAxSC41bC0uNS41djEzbC41LjVoMTVsLjUtLjV2LTEzbC0uNS0uNXpNMTUgMTRIMVY1aDE0djl6bTAtMTBIMVYyaDE0djJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1ZlcmlmaWVkIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy42NyAxNC43MmguNzFMMTAuMSAxM2gyLjRsLjUtLjV2LTIuNDJsMS43NC0xLjcydi0uNzFsLTEuNzEtMS43MlYzLjQ5bC0uNS0uNDlIMTAuMUw4LjM4IDEuMjloLS43MUw2IDNIMy41M0wzIDMuNXYyLjQzTDEuMzEgNy42NXYuNzFMMyAxMC4wOHYyLjQybC41My41SDZsMS42NyAxLjcyek02LjE2IDEySDRWOS44N2wtLjEyLS4zNUwyLjM3IDhsMS40OC0xLjUxLjE1LS4zNVY0aDIuMTZsLjM2LS4xNEw4IDIuMzVsMS41NCAxLjUxLjM1LjE0SDEydjIuMTRsLjE3LjM1TDEzLjY5IDhsLTEuNTUgMS41Mi0uMTQuMzVWMTJIOS44OWwtLjM4LjE1TDggMTMuNjZsLTEuNDgtMS41Mi0uMzYtLjE0em0uNTctMS41MmguNzFsMy43Ny0zLjc3TDEwLjUgNiA3LjA5IDkuNDIgNS43MSA4LjA0IDUgOC43NWwxLjczIDEuNzN6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1ZlcnNpb25zIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOCAzTDcgNHY4bDEgMWg2bDEtMVY0bC0xLTFIOHptNiA5SDhWNGg2djh6TTUgOVY1aDFWNEg0LjVsLS41LjV2N2wuNS41SDZ2LTFINVY5ek0yIDhWNmgxVjVIMS41bC0uNS41djVsLjUuNUgzdi0xSDJWOHpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVm1BY3RpdmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMmgxM2wuNS41djUuNTAzYTUuMDA2IDUuMDA2IDAgMCAwLTEtLjU4M1YzSDJ2OWg1YTUgNSAwIDAgMCAxIDNINHYtMWgzdi0xSDEuNWwtLjUtLjV2LTEwbC41LS41elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNOS43NzggOC42NzRhNCA0IDAgMSAxIDQuNDQ0IDYuNjUyIDQgNCAwIDAgMS00LjQ0NC02LjY1MnptMi4xMyA0Ljk5bDIuMzg3LTMuMTgyLS44LS42LTIuMDc3IDIuNzY5LTEuMzAxLTEuMDQxLS42MjUuNzggMS43MDQgMS4zNjQuNzEzLS4wOXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVm1Db25uZWN0IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMS41IDJoMTNsLjUuNXY1LjUwM2E1LjAwNiA1LjAwNiAwIDAgMC0xLS41ODNWM0gydjloNWE1IDUgMCAwIDAgMSAzSDR2LTFoM3YtMUgxLjVsLS41LS41di0xMGwuNS0uNXpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk0xMiA4YTQgNCAwIDEgMCAwIDggNCA0IDAgMCAwIDAtOHptMCA3YTMgMyAwIDEgMSAwLTYuMDAxQTMgMyAwIDAgMSAxMiAxNXpcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTEyLjEzMyAxMS40MzVsMS40MzYgMS40MzYuNDMxLS40MzEtMS4wMDQtMS4wMDVMMTQgMTAuNDMxbC0uNDMxLS40My0xLjQzNiAxLjQzNHptLTEuMTI5IDEuMDY3TDEwIDExLjQ5OGwuNDMxLS40MzEgMS40MzYgMS40MzUtMS40MzYgMS40MzYtLjQzMS0uNDMxIDEuMDA0LTEuMDA1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NWbU91dGxpbmUgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMmgxM2wuNS41djUuNTAzYTUuMDA2IDUuMDA2IDAgMCAwLTEtLjU4M1YzSDJ2OWg1YTUgNSAwIDAgMCAxIDNINHYtMWgzdi0xSDEuNWwtLjUtLjV2LTEwbC41LS41elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEyIDhhNCA0IDAgMSAwIDAgOCA0IDQgMCAwIDAgMC04em0wIDdhMyAzIDAgMSAxIDAtNi4wMDFBMyAzIDAgMCAxIDEyIDE1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NWbVJ1bm5pbmcgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xLjUgMmgxM2wuNS41djUuNTAzYTUuMDA2IDUuMDA2IDAgMCAwLTEtLjU4M1YzSDJ2OWg1YTUgNSAwIDAgMCAxIDNINHYtMWgzdi0xSDEuNWwtLjUtLjV2LTEwbC41LS41elwifX0se1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTEyIDhjLjM2NyAwIC43MjEuMDQ3IDEuMDYzLjE0LjM0LjA5NC42NTguMjMuOTUzLjQwNy4yOTQuMTc3LjU2My4zODUuODA4LjYyNS4yNDUuMjQuNDU1LjUwOS42My44MDhhNC4wMyA0LjAzIDAgMCAxIC40MDUgMy4wODJjLS4wOTMuMzQyLS4yMjkuNjYtLjQwNi45NTRhNC4zODIgNC4zODIgMCAwIDEtLjYyNS44MDhjLS4yNC4yNDUtLjUwOS40NTUtLjgwOC42M2E0LjAyOSA0LjAyOSAwIDAgMS0zLjA4Mi40MDUgMy43ODQgMy43ODQgMCAwIDEtLjk1NC0uNDA2IDQuMzgyIDQuMzgyIDAgMCAxLS44MDgtLjYyNSAzLjgwOCAzLjgwOCAwIDAgMS0uNjMtLjgwOCA0LjAyNyA0LjAyNyAwIDAgMS0uNDA1LTMuMDgyYy4wOTMtLjM0Mi4yMjktLjY2LjQwNi0uOTU0LjE3Ny0uMjk0LjM4NS0uNTYzLjYyNS0uODA4LjI0LS4yNDUuNTA5LS40NTUuODA4LS42M0E0LjAyOCA0LjAyOCAwIDAgMSAxMiA4em0yIDMuOTg4TDExIDEwdjRsMy0yLjAxMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjVm0gKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xNC41IDJoLTEzbC0uNS41djEwbC41LjVIN3YxSDR2MWg4di0xSDl2LTFoNS41bC41LS41di0xMGwtLjUtLjV6TTE0IDEySDJWM2gxMnY5elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NXYW5kIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTQuMzggNWgxVjRoMVYzaC0xVjJoLTF2MWgtMXYxaDF2MXptOCA0aC0xdjFoLTF2MWgxdjFoMXYtMWgxdi0xaC0xVjl6TTE0IDJWMWgtMXYxaC0xdjFoMXYxaDFWM2gxVjJoLTF6bS0yLjk0NyAyLjQ0MmExLjQ5IDEuNDkgMCAwIDAtMi4xMiAwbC03LjQ5IDcuNDlhMS40OSAxLjQ5IDAgMCAwIDAgMi4xMmMuNTkuNTkgMS41NC41OSAyLjEyIDBsNy40OS03LjQ5Yy41OC0uNTguNTgtMS41MyAwLTIuMTJ6bS04LjIgOC45Yy0uMi4yLS41MS4yLS43MSAwLS4yLS4yLS4yLS41MSAwLS43MWw2LjQ2LTYuNDYuNzEuNzEtNi40NiA2LjQ2em03LjQ5LTcuNDlsLS4zMi4zMi0uNzEtLjcxLjMyLS4zMmMuMi0uMi41MS0uMi43MSAwIC4xOS4yLjE5LjUyIDAgLjcxelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NXYXJuaW5nIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNNy41NiAxaC44OGw2LjU0IDEyLjI2LS40NC43NEgxLjQ0TDEgMTMuMjYgNy41NiAxek04IDIuMjhMMi4yOCAxM0gxMy43TDggMi4yOHpNOC42MjUgMTJ2LTFoLTEuMjV2MWgxLjI1em0tMS4yNS0yVjZoMS4yNXY0aC0xLjI1elwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NXYXRjaCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk03LjUgOWgyVjhIOFY1LjVIN3YzbC41LjV6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk01LjUgMy42NjlBNC45OTggNC45OTggMCAwIDAgMyA4YTQuOTk4IDQuOTk4IDAgMCAwIDIuNSA0LjMzMVYxNC41bC41LjVoNGwuNS0uNXYtMi4xNjlBNC45OTggNC45OTggMCAwIDAgMTMgOGE0Ljk5OCA0Ljk5OCAwIDAgMC0yLjUtNC4zMzFWMS41TDEwIDFINmwtLjUuNXYyLjE2OXpNMTIgOGE0IDQgMCAxIDEtOCAwIDQgNCAwIDAgMSA4IDB6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1doaXRlc3BhY2UgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTIgMlYxSDYuNWEzLjUgMy41IDAgMCAwIDAgN0g4djVIN3YxaDV2LTFoLTFWMmgxek04IDdINi41YTIuNSAyLjUgMCAxIDEgMC01SDh2NXptMiA2SDlWMmgxdjExelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NXaG9sZVdvcmQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xIDJoMTR2MUgxVjJ6bTEzIDJoLTF2OGgxVjR6bS0yLjcyOCA0LjM4N2EyLjM1MyAyLjM1MyAwIDAgMC0uMzYtLjc4NiAxLjc0NiAxLjc0NiAwIDAgMC0uNjA5LS41MyAxLjgzMiAxLjgzMiAwIDAgMC0uODY2LS4xOTNjLS4xOTggMC0uMzguMDI0LS41NDcuMDczYTEuNzYgMS43NiAwIDAgMC0uNDUzLjIwNSAxLjcyNCAxLjcyNCAwIDAgMC0uMzY1LjMxOGwtLjE3OS4yNThWNC41NzhIN1YxMmguODkzdi0uNTc1bC4xMjYuMTc1Yy4wODcuMTAyLjE4OS4xOS4zMDQuMjY5LjExNy4wNzguMjQ5LjE0LjM5OC4xODYuMTQ5LjA0Ni4zMTQuMDY4LjQ5OC4wNjguMzUzIDAgLjY2Ni0uMDcxLjkzNy0uMjEyLjI3Mi0uMTQzLjQ5OS0uMzM4LjY4Mi0uNTg2LjE4My0uMjUuMzIxLS41NDMuNDE0LS44NzkuMDkzLS4zMzguMTQtLjcwMy4xNC0xLjA5N2EzLjc1NiAzLjc1NiAwIDAgMC0uMTItLjk2MnpNOS43OTMgNy43OGMuMTUxLjA3MS4yODIuMTc2LjM5LjMxNC4xMDkuMTQuMTk0LjMxMy4yNTUuNTE3LjA1MS4xNzQuMDgyLjM3MS4wODkuNTg3bC0uMDA3LjEyNWMwIC4zMjctLjAzMy42Mi0uMS44NjlhMS44ODYgMS44ODYgMCAwIDEtLjI3OC42MTRjLS4xMTcuMTYyLS4yNi4yODUtLjQyMS4zNjYtLjMyMi4xNjItLjc2LjE2Ni0xLjA2OS4wMTVhMS4yNjQgMS4yNjQgMCAwIDEtLjM5My0uMjk2IDEuMjczIDEuMjczIDAgMCAxLS4yMTgtLjM2N3MtLjE3OS0uNDQ3LS4xNzktLjk0N2MwLS41LjE3OS0xLjAwMi4xNzktMS4wMDIuMDYyLS4xNzcuMTM2LS4zMTguMjI0LS40My4xMTQtLjE0My4yNTYtLjI1OS40MjQtLjM0NS4xNjgtLjA4Ni4zNjUtLjEyOS41ODctLjEyOS4xOSAwIC4zNjQuMDM3LjUxNy4xMDl6TTE1IDEzSDF2MWgxNHYtMXpNMi44MTMgMTBsLS43MjggMi4wMzFIMWwuMDI1LS4wNzIgMi40NDEtNy4wODZoLjk0MWwyLjQ4NSA3LjE1OEg1LjgxTDUuMDMyIDEwSDIuODEzem0xLjEyMS0zLjU3OGgtLjAyMmwtLjkwNSAyLjc1M2gxLjg0MWwtLjkxNC0yLjc1M3pcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjV2luZG93IChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZFwiOlwiTTE0LjUgMmgtMTNsLS41LjV2MTFsLjUuNWgxM2wuNS0uNXYtMTFsLS41LS41ek0xNCAxM0gyVjZoMTJ2N3ptMC04SDJWM2gxMnYyelwifX1dfSkocHJvcHMpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBWc2NXb3JkV3JhcCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTMuODY4IDMuNDQ5YTEuMjEgMS4yMSAwIDAgMC0uNDczLS4zMjljLS4yNzQtLjExMS0uNjIzLS4xNS0xLjA1NS0uMDc2YTMuNSAzLjUgMCAwIDAtLjcxLjIwOGMtLjA4Mi4wMzUtLjE2LjA3Ny0uMjM1LjEyNWwtLjA0My4wM3YxLjA1NmwuMTY4LS4xMzljLjE1LS4xMjQuMzI2LS4yMjUuNTI3LS4zMDMuMTk2LS4wNzQuNC0uMTEzLjYwNC0uMTEzLjE4OCAwIC4zMy4wNTEuNDMxLjE1Ny4wODcuMDk1LjEzNy4yNDguMTQ3LjQ1NmwtLjk2Mi4xNDRjLS4yMTkuMDMtLjQxLjA4Ni0uNTcuMTY2YTEuMjQ1IDEuMjQ1IDAgMCAwLS4zOTguMzExYy0uMTAzLjEyNS0uMTgxLjI3LS4yMjkuNDI2LS4wOTcuMzMtLjA5My42OC4wMTEgMS4wMDhhMS4wOTYgMS4wOTYgMCAwIDAgLjYzOC42N2MuMTU1LjA2My4zMjguMDkzLjUyOC4wOTNhMS4yNSAxLjI1IDAgMCAwIC45NzgtLjQ0MXYuMzQ1aDEuMDA3VjQuNjVjMC0uMjU1LS4wMy0uNDg0LS4wODktLjY4MWExLjQyMyAxLjQyMyAwIDAgMC0uMjc1LS41MnptLS42MzYgMS44OTZ2LjIzNmMwIC4xMTktLjAxOC4yMzEtLjA1NS4zNDFhLjc0NS43NDUgMCAwIDEtLjM3Ny40NDcuNjk0LjY5NCAwIDAgMS0uNTEyLjAyNy40NTQuNDU0IDAgMCAxLS4xNTYtLjA5NC4zODkuMzg5IDAgMCAxLS4wOTQtLjEzOS40NzQuNDc0IDAgMCAxLS4wMzUtLjE4NmMwLS4wNzcuMDEtLjE0Ny4wMjQtLjIxMmEuMzMuMzMgMCAwIDEgLjA3OC0uMTQxLjQzNi40MzYgMCAwIDEgLjE2MS0uMTA5IDEuMyAxLjMgMCAwIDEgLjMwNS0uMDczbC42NjEtLjA5N3ptNS4wNTEtMS4wNjdhMi4yNTMgMi4yNTMgMCAwIDAtLjI0NC0uNjU2IDEuMzU0IDEuMzU0IDAgMCAwLS40MzYtLjQ1OSAxLjE2NSAxLjE2NSAwIDAgMC0uNjQyLS4xNzMgMS4xMzYgMS4xMzYgMCAwIDAtLjY5LjIyMyAxLjMzIDEuMzMgMCAwIDAtLjI2NC4yNjZWMUg1LjA5djYuMjI0aC45MTh2LS4yODFjLjEyMy4xNTIuMjg3LjI2Ni40NzIuMzI4LjA5OC4wMzIuMjA4LjA0Ny4zMy4wNDcuMjU1IDAgLjQ4My0uMDYuNjc3LS4xNzcuMTkyLS4xMTUuMzU1LS4yNzguNDg2LS40ODZhMi4yOSAyLjI5IDAgMCAwIC4yOTMtLjcxOCAzLjg3IDMuODcgMCAwIDAgLjA5Ni0uODg2IDMuNzE0IDMuNzE0IDAgMCAwLS4wNzgtLjc3M3ptLS44Ni43NThjMCAuMjMyLS4wMi40MzktLjA2LjYxMy0uMDM2LjE3Mi0uMDkuMzE1LS4xNTkuNDI0YS42MzkuNjM5IDAgMCAxLS4yMzMuMjM3LjU4Mi41ODIgMCAwIDEtLjU2NS4wMTQuNjgzLjY4MyAwIDAgMS0uMjEtLjE4My45MjUuOTI1IDAgMCAxLS4xNDItLjI4M0ExLjE4NyAxLjE4NyAwIDAgMSA2IDUuNXYtLjUxN2MwLS4xNjQuMDItLjMxNC4wNi0uNDQ3LjAzNi0uMTMyLjA4Ny0uMjQyLjE1Ni0uMzM2YS42NjguNjY4IDAgMCAxIC4yMjgtLjIwOC41ODQuNTg0IDAgMCAxIC4yOS0uMDcxLjU1NC41NTQgMCAwIDEgLjQ5Ni4yNzljLjA2My4wOTkuMTA4LjIxNC4xNDMuMzU0LjAzMS4xNDMuMDUuMzA2LjA1LjQ4MnpNMi40MDcgOS45YS45MTMuOTEzIDAgMCAxIC4zMTYtLjIzOWMuMjE4LS4xLjU0Ny0uMTA1Ljc2Ni0uMDE4LjEwNC4wNDIuMjA0LjEuMzIuMTg0bC4zMy4yNlY4Ljk0NWwtLjA5Ny0uMDYyYTEuOTMyIDEuOTMyIDAgMCAwLS45MDUtLjIxNWMtLjMwOCAwLS41OTMuMDU3LS44NDYuMTY4LS4yNS4xMS0uNDY3LjI3LS42NDcuNDc1LS4xOC4yMS0uMzE4LjQ1My0uNDAzLjcxNy0uMDkuMjcyLS4xMzcuNTctLjEzNy44OTUgMCAuMjg5LjA0My41NjEuMTMuODA4LjA4Ni4yNDkuMjExLjQ3MS4zNzMuNjUyLjE2MS4xODUuMzYxLjMzMy41OTcuNDQxLjIzMi4xMDQuNDkzLjE1NS43NzguMTU1LjIzMyAwIC40MzQtLjAyOC42MTMtLjA4NC4xNjUtLjA1LjMyMi0uMTIzLjQ2Ni0uMjE3bC4wNzgtLjA2MXYtLjg4OWwtLjIuMDk1YS40LjQgMCAwIDEtLjA3Ni4wMjZjLS4wNS4wMTctLjA5OS4wMzUtLjEyOC4wNDktLjAzNi4wMjMtLjIyNy4wOS0uMjI3LjA5LS4wNi4wMjQtLjE0LjA0My0uMjE4LjA1OWEuOTc3Ljk3NyAwIDAgMS0uNTk5LS4wNTcuODI3LjgyNyAwIDAgMS0uMzA2LS4yMjUgMS4wODggMS4wODggMCAwIDEtLjIwNS0uMzc2IDEuNzI4IDEuNzI4IDAgMCAxLS4wNzYtLjUyOWMwLS4yMS4wMjgtLjM5OS4wODMtLjU2LjA1NC0uMTU4LjEzLS4yOTQuMjItLjR6TTE0IDZoLTRWNWg0LjVsLjUuNXY2bC0uNS41SDcuODc5bDIuMDcgMi4wNzEtLjcwNi43MDctMi44OS0yLjg4OXYtLjcwN2wyLjg5LTIuODlMOS45NSA5bC0yIDJIMTRWNnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjV29ya3NwYWNlVHJ1c3RlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjA2OSAwYy4yNjIgMCAuNTIuMDE3Ljc2LjA1N2E0LjEgNC4xIDAgMCAxIC42OTcuMTU0Yy4yMjguMDY5LjQ1MS4xNTUuNjc0LjI2My4yMTcuMTAzLjQ0LjIyOS42NjMuMzY2LjM3Ny4yNC43NDguNDM0IDEuMTI2LjU4OWE3LjUzNyA3LjUzNyAwIDAgMCAyLjMzMS41MjVjLjQwNi4wMjkuODIzLjA0NiAxLjI1Ny4wNDZ2NGMwIC43Ni0uMDk3IDEuNDgtLjI5MSAyLjE2NmE4Ljk5NiA4Ljk5NiAwIDAgMS0uNzg5IDEuOTQzIDEwLjMxMiAxMC4zMTIgMCAwIDEtMS4xODggMS43MjUgMTUuMDkxIDE1LjA5MSAwIDAgMS0xLjQ5MiAxLjUzMiAxNy41NyAxNy41NyAwIDAgMS0xLjcwMyAxLjMyNWMtLjU5NC40MTItMS4xOTQuNzk1LTEuNzk0IDEuMTQzbC0uMjQuMTQzLS4yNC0uMTQzYTI3LjA5MyAyNy4wOTMgMCAwIDEtMS44MDYtMS4xNDMgMTUuNTggMTUuNTggMCAwIDEtMS43MDMtMS4zMjUgMTUuMDgyIDE1LjA4MiAwIDAgMS0xLjQ5MS0xLjUzMiAxMC45NDcgMTAuOTQ3IDAgMCAxLTEuMTk0LTEuNzI1IDkuNzUzIDkuNzUzIDAgMCAxLS43ODktMS45NDNBNy44OTcgNy44OTcgMCAwIDEgLjU3MSA2VjJjLjQzNSAwIC44NTItLjAxNyAxLjI1OC0uMDQ2YTguMTYgOC4xNiAwIDAgMCAxLjE4OC0uMTcxYy4zODMtLjA4Ni43NjYtLjIgMS4xNDMtLjM1NEE2LjU2MyA2LjU2MyAwIDAgMCA1LjI4Ljg0NkM1LjcyLjU2IDYuMTY2LjM0OSA2LjYwNi4yMUE0Ljc5IDQuNzkgMCAwIDEgOC4wNjkgMHptNi41MDIgMi45ODNhOS41NjYgOS41NjYgMCAwIDEtMi4yMzQtLjM3NyA3Ljk2IDcuOTYgMCAwIDEtMi4wNDYtLjk0M0E0LjI2MyA0LjI2MyAwIDAgMCA5LjIzIDEuMTYgMy44ODUgMy44ODUgMCAwIDAgOC4wNzQuOTk0YTMuOTkgMy45OSAwIDAgMC0xLjE2NS4xNjYgMy45NDYgMy45NDYgMCAwIDAtMS4wNTguNTAzQTcuOTI2IDcuOTI2IDAgMCAxIDMuOCAyLjYxYy0uNzA5LjIwNi0xLjQ1MS4zMzItMi4yMjkuMzc4djMuMDE3YzAgLjY2My4wODYgMS4yOTcuMjU4IDEuOTA4YTguNTggOC41OCAwIDAgMCAuNzIgMS43NDMgOS42MDQgOS42MDQgMCAwIDAgMS4wOCAxLjU3MmMuNDE3LjQ5MS44NjIuOTQ4IDEuMzQyIDEuMzgyLjQ4LjQzNS45ODMuODM1IDEuNTA5IDEuMjA2LjUzMS4zNzIgMS4wNjMuNzA5IDEuNTk0IDEuMDE3YTIyLjM5NyAyMi4zOTcgMCAwIDAgMS41ODktMS4wMTcgMTUuMzg5IDE1LjM4OSAwIDAgMCAxLjUxNC0xLjIwNmMuNDgtLjQzNC45MjYtLjg5MSAxLjM0My0xLjM4MmE5LjU5NiA5LjU5NiAwIDAgMCAxLjA4LTEuNTcyIDguMjU4IDguMjU4IDAgMCAwIC43MDktMS43NDMgNi44MTQgNi44MTQgMCAwIDAgLjI2Mi0xLjkwOFYyLjk4M3pcIn19LHtcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImZpbGxSdWxlXCI6XCJldmVub2RkXCIsXCJjbGlwUnVsZVwiOlwiZXZlbm9kZFwiLFwiZFwiOlwiTTExLjc5NyA0LjcwOWwtLjQ0LS4zNzgtLjQwNi4wMzUtNC4zNiA1LjE0OC0xLjQ4NS0yLjEyLS40LS4wNjgtLjQ2My4zMzEtLjA2OS40IDEuOTA5IDIuNzI2LjIxNy4xMi40NTcuMDI4LjIzNC0uMTAyIDQuODM1LTUuNzE1LS4wMjktLjQwNXpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjV29ya3NwYWNlVW5rbm93biAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjA2NyAwYy4yNjMgMCAuNTIuMDE3Ljc2LjA1N2E0LjEgNC4xIDAgMCAxIC42OTcuMTU0Yy4yMjkuMDY5LjQ1Mi4xNTUuNjc1LjI2My4yMTcuMTAzLjQ0LjIyOS42NjIuMzY2YTcuMiA3LjIgMCAwIDAgMS4xMjYuNTg5IDcuNTM0IDcuNTM0IDAgMCAwIDIuMzMyLjUyNWMuNDA1LjAyOS44MjIuMDQ2IDEuMjU3LjA0NnY0YzAgLjc2LS4wOTcgMS40OC0uMjkyIDIuMTY2YTguOTk2IDguOTk2IDAgMCAxLS43ODggMS45NDMgMTAuMzA2IDEwLjMwNiAwIDAgMS0xLjE4OSAxLjcyNSAxNS4wODIgMTUuMDgyIDAgMCAxLTEuNDkxIDEuNTMyIDE3LjU3IDE3LjU3IDAgMCAxLTEuNzAzIDEuMzI1Yy0uNTk0LjQxMi0xLjE5NC43OTUtMS43OTQgMS4xNDNsLS4yNC4xNDMtLjI0LS4xNDNhMjcuMDg4IDI3LjA4OCAwIDAgMS0xLjgwNi0xLjE0MyAxNS41NzkgMTUuNTc5IDAgMCAxLTEuNzAzLTEuMzI1IDE1LjA4IDE1LjA4IDAgMCAxLTEuNDkxLTEuNTMyIDEwLjk0OCAxMC45NDggMCAwIDEtMS4xOTUtMS43MjUgOS43NTMgOS43NTMgMCAwIDEtLjc4OC0xLjk0M0E3Ljg5NyA3Ljg5NyAwIDAgMSAuNTcgNlYyYy40MzQgMCAuODUxLS4wMTcgMS4yNTctLjA0NmE4LjE2IDguMTYgMCAwIDAgMS4xODktLjE3MWMuMzgzLS4wODYuNzY1LS4yIDEuMTQzLS4zNTRhNi41NjMgNi41NjMgMCAwIDAgMS4xMi0uNTgzQzUuNzE5LjU2IDYuMTY0LjM0OSA2LjYwNC4yMUE0Ljc5IDQuNzkgMCAwIDEgOC4wNjcgMHptNi41MDMgMi45ODNhOS41NjcgOS41NjcgMCAwIDEtMi4yMzQtLjM3NyA3Ljk2IDcuOTYgMCAwIDEtMi4wNDYtLjk0MyA0LjI2NCA0LjI2NCAwIDAgMC0xLjA2My0uNTAzQTMuODg1IDMuODg1IDAgMCAwIDguMDczLjk5NGEzLjk5IDMuOTkgMCAwIDAtMS4xNjYuMTY2IDMuOTQ2IDMuOTQ2IDAgMCAwLTEuMDU3LjUwMyA3LjkyNyA3LjkyNyAwIDAgMS0yLjA1MS45NDhjLS43MDkuMjA2LTEuNDUyLjMzMi0yLjIyOS4zNzh2My4wMTdjMCAuNjYzLjA4NiAxLjI5Ny4yNTcgMS45MDhhOC41OCA4LjU4IDAgMCAwIC43MiAxLjc0MyA5LjYwNCA5LjYwNCAwIDAgMCAxLjA4IDEuNTcyYy40MTcuNDkxLjg2My45NDggMS4zNDMgMS4zODIuNDguNDM1Ljk4My44MzUgMS41MDkgMS4yMDYuNTMxLjM3MiAxLjA2Mi43MDkgMS41OTQgMS4wMTdhMjIuNCAyMi40IDAgMCAwIDEuNTg4LTEuMDE3IDE1LjM4NCAxNS4zODQgMCAwIDAgMS41MTUtMS4yMDZjLjQ4LS40MzQuOTI1LS44OTEgMS4zNDMtMS4zODJhOS42MDkgOS42MDkgMCAwIDAgMS4wOC0xLjU3MiA4LjI2OSA4LjI2OSAwIDAgMCAuNzA4LTEuNzQzIDYuODE0IDYuODE0IDAgMCAwIC4yNjMtMS45MDhWMi45ODN6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk05LjQzMyA0LjcyYy4xNzEuMTcxLjMxNC4zNzcuNDExLjYwNi4xMDMuMjI4LjE1NS40OC4xNDkuNzU0YTEuNiAxLjYgMCAwIDEtLjExNC42NCAyLjI0IDIuMjQgMCAwIDEtLjI5Mi40OCAyLjc4NyAyLjc4NyAwIDAgMS0uMzU0LjM4MyA0LjUyIDQuNTIgMCAwIDAtLjMzNy4zMiAxLjQyMSAxLjQyMSAwIDAgMC0uMjQuMzIuNy43IDAgMCAwLS4wODYuMzQ4di4zNmwtLjEzMS4xMzhoLS43MTVsLS4xNDMtLjE0M1Y4LjU3YzAtLjI0LjA0LS40NS4xMi0uNjM0LjA3NS0uMTc3LjE2Ni0uMzQzLjI4LS40ODZhMy40MiAzLjQyIDAgMCAxIC4zNjYtLjM4MmMuMTItLjEwOS4yMjktLjIxMi4zMzItLjMyLjA5Ny0uMTAzLjE4Mi0uMjEyLjI0NS0uMzI2YS43MDcuNzA3IDAgMCAwIC4wODYtLjM1NC45NjYuOTY2IDAgMCAwLS4wNzQtLjM2Ljk3Mi45NzIgMCAwIDAtLjItLjI5OC45NC45NCAwIDAgMC0xLjMyIDAgLjg4Ljg4IDAgMCAwLS4yLjI5OC44MjkuODI5IDAgMCAwLS4wNzUuMzZMNyA2LjIxaC0uNzE1bC0uMTMxLS4xMzdjMC0uMjYzLjA0Ni0uNTE0LjE0OC0uNzQ4LjEwMy0uMjI5LjI0LS40MzUuNDEyLS42MDYuMTc3LS4xNzcuMzgzLS4zMi42MTEtLjQxN2ExLjg4MyAxLjg4MyAwIDAgMSAxLjUwMyAwYy4yMjkuMTAzLjQzNC4yNC42MDYuNDE3ek03LjU3IDkuNjQ2bC4xNDMtLjE0M2guNzE0bC4xNDMuMTQzdi43MTRsLS4xNDMuMTQzaC0uNzE0bC0uMTQzLS4xNDN2LS43MTR6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1dvcmtzcGFjZVVudHJ1c3RlZCAocHJvcHMpIHtcbiAgcmV0dXJuIEdlbkljb24oe1widGFnXCI6XCJzdmdcIixcImF0dHJcIjp7XCJ2aWV3Qm94XCI6XCIwIDAgMTYgMTZcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifSxcImNoaWxkXCI6W3tcInRhZ1wiOlwicGF0aFwiLFwiYXR0clwiOntcImRcIjpcIk04LjA2NyAwYy4yNjMgMCAuNTIuMDE3Ljc2LjA1N2E0LjEgNC4xIDAgMCAxIC42OTcuMTU0Yy4yMjkuMDY5LjQ1Mi4xNTUuNjc1LjI2My4yMTcuMTAzLjQ0LjIyOS42NjIuMzY2YTcuMiA3LjIgMCAwIDAgMS4xMjYuNTg5IDcuNTM0IDcuNTM0IDAgMCAwIDIuMzMyLjUyNWMuNDA1LjAyOS44MjIuMDQ2IDEuMjU3LjA0NnY0YzAgLjc2LS4wOTcgMS40OC0uMjkyIDIuMTY2YTguOTk2IDguOTk2IDAgMCAxLS43ODggMS45NDMgMTAuMzA2IDEwLjMwNiAwIDAgMS0xLjE4OSAxLjcyNSAxNS4wODIgMTUuMDgyIDAgMCAxLTEuNDkxIDEuNTMyIDE3LjU3IDE3LjU3IDAgMCAxLTEuNzAzIDEuMzI1Yy0uNTk0LjQxMi0xLjE5NC43OTUtMS43OTQgMS4xNDNsLS4yNC4xNDMtLjI0LS4xNDNhMjcuMDg4IDI3LjA4OCAwIDAgMS0xLjgwNi0xLjE0MyAxNS41NzkgMTUuNTc5IDAgMCAxLTEuNzAzLTEuMzI1IDE1LjA4IDE1LjA4IDAgMCAxLTEuNDkxLTEuNTMyIDEwLjk0OCAxMC45NDggMCAwIDEtMS4xOTUtMS43MjUgOS43NTMgOS43NTMgMCAwIDEtLjc4OC0xLjk0M0E3Ljg5NyA3Ljg5NyAwIDAgMSAuNTcgNlYyYy40MzQgMCAuODUxLS4wMTcgMS4yNTctLjA0NmE4LjE2IDguMTYgMCAwIDAgMS4xODktLjE3MWMuMzgzLS4wODYuNzY1LS4yIDEuMTQzLS4zNTRhNi41NjMgNi41NjMgMCAwIDAgMS4xMi0uNTgzQzUuNzE5LjU2IDYuMTY0LjM0OSA2LjYwNC4yMUE0Ljc5IDQuNzkgMCAwIDEgOC4wNjcgMHptNi41MDMgMi45ODNhOS41NjcgOS41NjcgMCAwIDEtMi4yMzQtLjM3NyA3Ljk2IDcuOTYgMCAwIDEtMi4wNDYtLjk0MyA0LjI2NCA0LjI2NCAwIDAgMC0xLjA2My0uNTAzQTMuODg1IDMuODg1IDAgMCAwIDguMDczLjk5NGEzLjk5IDMuOTkgMCAwIDAtMS4xNjYuMTY2IDMuOTQ2IDMuOTQ2IDAgMCAwLTEuMDU3LjUwMyA3LjkyNyA3LjkyNyAwIDAgMS0yLjA1MS45NDhjLS43MDkuMjA2LTEuNDUyLjMzMi0yLjIyOS4zNzh2My4wMTdjMCAuNjYzLjA4NiAxLjI5Ny4yNTcgMS45MDhhOC41OCA4LjU4IDAgMCAwIC43MiAxLjc0MyA5LjYwNCA5LjYwNCAwIDAgMCAxLjA4IDEuNTcyYy40MTcuNDkxLjg2My45NDggMS4zNDMgMS4zODIuNDguNDM1Ljk4My44MzUgMS41MDkgMS4yMDYuNTMxLjM3MiAxLjA2Mi43MDkgMS41OTQgMS4wMTdhMjIuNCAyMi40IDAgMCAwIDEuNTg4LTEuMDE3IDE1LjM4NCAxNS4zODQgMCAwIDAgMS41MTUtMS4yMDZjLjQ4LS40MzQuOTI1LS44OTEgMS4zNDMtMS4zODJhOS42MDkgOS42MDkgMCAwIDAgMS4wOC0xLjU3MiA4LjI2OSA4LjI2OSAwIDAgMCAuNzA4LTEuNzQzIDYuODE0IDYuODE0IDAgMCAwIC4yNjMtMS45MDhWMi45ODN6XCJ9fSx7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJkXCI6XCJNMTAuNzg3IDUuNDQ2bC0uNC0uNDA2aC0uMjA2TDguMiA3LjAyMyA2LjIxNiA1LjA0aC0uMmwtLjQwNi40MDZ2LjJsMS45ODMgMS45ODNMNS42MSA5LjYxdi4yMDZsLjQwNi40aC4ybDEuOTgzLTEuOTgzIDEuOTgyIDEuOTgzaC4yMDZsLjQtLjRWOS42MUw4LjgwNCA3LjYzbDEuOTgzLTEuOTgzdi0uMnpcIn19XX0pKHByb3BzKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gVnNjWm9vbUluIChwcm9wcykge1xuICByZXR1cm4gR2VuSWNvbih7XCJ0YWdcIjpcInN2Z1wiLFwiYXR0clwiOntcInZpZXdCb3hcIjpcIjAgMCAxNiAxNlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9LFwiY2hpbGRcIjpbe1widGFnXCI6XCJwYXRoXCIsXCJhdHRyXCI6e1wiZmlsbFJ1bGVcIjpcImV2ZW5vZGRcIixcImNsaXBSdWxlXCI6XCJldmVub2RkXCIsXCJkXCI6XCJNMTIuMDI3IDYuMTQ5YTUuNTIgNS41MiAwIDAgMS0xLjI3IDMuOTA4bDQuMjYgNC4yNi0uNy43MS00LjI2LTQuMjdhNS41MiA1LjUyIDAgMSAxIDEuOTctNC42MDh6bS01LjQ1IDQuODg4YTQuNTEgNC41MSAwIDAgMCAzLjE4LTEuMzJsLS4wNC4wMmE0LjUxIDQuNTEgMCAwIDAgMS4zNi0zLjIgNC41IDQuNSAwIDEgMC00LjUgNC41em0yLjQ0LTR2LTFoLTJ2LTJoLTF2MmgtMnYxaDJ2Mmgxdi0yaDJ6XCJ9fV19KShwcm9wcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIFZzY1pvb21PdXQgKHByb3BzKSB7XG4gIHJldHVybiBHZW5JY29uKHtcInRhZ1wiOlwic3ZnXCIsXCJhdHRyXCI6e1widmlld0JveFwiOlwiMCAwIDE2IDE2XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn0sXCJjaGlsZFwiOlt7XCJ0YWdcIjpcInBhdGhcIixcImF0dHJcIjp7XCJmaWxsUnVsZVwiOlwiZXZlbm9kZFwiLFwiY2xpcFJ1bGVcIjpcImV2ZW5vZGRcIixcImRcIjpcIk0xMi4wMjcgNi4xNDlhNS41MiA1LjUyIDAgMCAxLTEuMjcgMy45MDhsNC4yNiA0LjI2LS43LjcxLTQuMjYtNC4yN2E1LjUyIDUuNTIgMCAxIDEgMS45Ny00LjYwOHptLTUuNDUgNC44ODhhNC41MSA0LjUxIDAgMCAwIDMuMTgtMS4zMmwtLjA0LjAyYTQuNTEgNC41MSAwIDAgMCAxLjM2LTMuMiA0LjUgNC41IDAgMSAwLTQuNSA0LjV6bS0yLjU0LTQuOThoNXYxaC01di0xelwifX1dfSkocHJvcHMpO1xufTtcbiIsIi8qKlxuICogQSByZWZlcmVuY2UgdG8gZ2xvYmFsVGhpcywgd2l0aCBzdXBwb3J0XG4gKiBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCB5ZXQgc3VwcG9ydCB0aGUgc3BlYy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0ICRnbG9iYWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBXZSdyZSBydW5uaW5nIGluIGEgbW9kZXJuIGVudmlyb25tZW50LlxuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gV2UncmUgcnVubmluZyBpbiBOb2RlSlNcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgaW4gYSB3b3JrZXIuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBXZSdyZSBydW5uaW5nIGluIHRoZSBicm93c2VyJ3MgbWFpbiB0aHJlYWQuXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIEhvcGVmdWxseSB3ZSBuZXZlciBnZXQgaGVyZS4uLlxuICAgICAgICAvLyBOb3QgYWxsIGVudmlyb25tZW50cyBhbGxvdyBldmFsIGFuZCBGdW5jdGlvbi4gVXNlIG9ubHkgYXMgYSBsYXN0IHJlc29ydDpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgLy8gSWYgYWxsIGZhaWxzLCBnaXZlIHVwIGFuZCBjcmVhdGUgYW4gb2JqZWN0LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59KSgpO1xuLy8gQVBJLW9ubHkgUG9seWZpbGwgZm9yIHRydXN0ZWRUeXBlc1xuaWYgKCRnbG9iYWwudHJ1c3RlZFR5cGVzID09PSB2b2lkIDApIHtcbiAgICAkZ2xvYmFsLnRydXN0ZWRUeXBlcyA9IHsgY3JlYXRlUG9saWN5OiAobiwgcikgPT4gciB9O1xufVxuY29uc3QgcHJvcENvbmZpZyA9IHtcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbn07XG5pZiAoJGdsb2JhbC5GQVNUID09PSB2b2lkIDApIHtcbiAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KCRnbG9iYWwsIFwiRkFTVFwiLCBPYmplY3QuYXNzaWduKHsgdmFsdWU6IE9iamVjdC5jcmVhdGUobnVsbCkgfSwgcHJvcENvbmZpZykpO1xufVxuLyoqXG4gKiBUaGUgRkFTVCBnbG9iYWwuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEZBU1QgPSAkZ2xvYmFsLkZBU1Q7XG5pZiAoRkFTVC5nZXRCeUlkID09PSB2b2lkIDApIHtcbiAgICBjb25zdCBzdG9yYWdlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KEZBU1QsIFwiZ2V0QnlJZFwiLCBPYmplY3QuYXNzaWduKHsgdmFsdWUoaWQsIGluaXRpYWxpemUpIHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IHN0b3JhZ2VbaWRdO1xuICAgICAgICAgICAgaWYgKGZvdW5kID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IGluaXRpYWxpemUgPyAoc3RvcmFnZVtpZF0gPSBpbml0aWFsaXplKCkpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgICAgfSB9LCBwcm9wQ29uZmlnKSk7XG59XG4vKipcbiAqIEEgcmVhZG9ubHksIGVtcHR5IGFycmF5LlxuICogQHJlbWFya3NcbiAqIFR5cGljYWxseSByZXR1cm5lZCBieSBBUElzIHRoYXQgcmV0dXJuIGFycmF5cyB3aGVuIHRoZXJlIGFyZVxuICogbm8gYWN0dWFsIGl0ZW1zIHRvIHJldHVybi5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgZW1wdHlBcnJheSA9IE9iamVjdC5mcmVlemUoW10pO1xuIiwiaW1wb3J0IHsgJGdsb2JhbCB9IGZyb20gXCIuL3BsYXRmb3JtLmpzXCI7XG5jb25zdCB1cGRhdGVRdWV1ZSA9ICRnbG9iYWwuRkFTVC5nZXRCeUlkKDEgLyogdXBkYXRlUXVldWUgKi8sICgpID0+IHtcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuICAgIGNvbnN0IHBlbmRpbmdFcnJvcnMgPSBbXTtcbiAgICBmdW5jdGlvbiB0aHJvd0ZpcnN0RXJyb3IoKSB7XG4gICAgICAgIGlmIChwZW5kaW5nRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgcGVuZGluZ0Vycm9ycy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyeVJ1blRhc2sodGFzaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGFzay5jYWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBwZW5kaW5nRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aHJvd0ZpcnN0RXJyb3IsIDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gMTAyNDtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgdGFza3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnlSdW5UYXNrKHRhc2tzW2luZGV4XSk7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgLy8gUHJldmVudCBsZWFraW5nIG1lbW9yeSBmb3IgbG9uZyBjaGFpbnMgb2YgcmVjdXJzaXZlIGNhbGxzIHRvIGBET00ucXVldWVVcGRhdGVgLlxuICAgICAgICAgICAgLy8gSWYgd2UgY2FsbCBgRE9NLnF1ZXVlVXBkYXRlYCB3aXRoaW4gYSB0YXNrIHNjaGVkdWxlZCBieSBgRE9NLnF1ZXVlVXBkYXRlYCwgdGhlIHF1ZXVlIHdpbGxcbiAgICAgICAgICAgIC8vIGdyb3csIGJ1dCB0byBhdm9pZCBhbiBPKG4pIHdhbGsgZm9yIGV2ZXJ5IHRhc2sgd2UgZXhlY3V0ZSwgd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vIHNoaWZ0IHRhc2tzIG9mZiB0aGUgcXVldWUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gZXhlY3V0ZWQuXG4gICAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBwZXJpb2RpY2FsbHkgc2hpZnQgMTAyNCB0YXNrcyBvZmYgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgaWYgKGluZGV4ID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGJlZ2lubmluZyBvZiB0aGUgcXVldWUuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NhbiA9IDAsIG5ld0xlbmd0aCA9IHRhc2tzLmxlbmd0aCAtIGluZGV4OyBzY2FuIDwgbmV3TGVuZ3RoOyBzY2FuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza3Nbc2Nhbl0gPSB0YXNrc1tzY2FuICsgaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXNrcy5sZW5ndGggLT0gaW5kZXg7XG4gICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRhc2tzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVucXVldWUoY2FsbGFibGUpIHtcbiAgICAgICAgaWYgKHRhc2tzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICRnbG9iYWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHByb2Nlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHRhc2tzLnB1c2goY2FsbGFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGVucXVldWUsXG4gICAgICAgIHByb2Nlc3MsXG4gICAgfSk7XG59KTtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBmYXN0SFRNTFBvbGljeSA9ICRnbG9iYWwudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShcImZhc3QtaHRtbFwiLCB7XG4gICAgY3JlYXRlSFRNTDogaHRtbCA9PiBodG1sLFxufSk7XG4vKiBlc2xpbnQtZW5hYmxlICovXG5sZXQgaHRtbFBvbGljeSA9IGZhc3RIVE1MUG9saWN5O1xuY29uc3QgbWFya2VyID0gYGZhc3QtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCl9YDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBfaW50ZXJwb2xhdGlvblN0YXJ0ID0gYCR7bWFya2VyfXtgO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IF9pbnRlcnBvbGF0aW9uRW5kID0gYH0ke21hcmtlcn1gO1xuLyoqXG4gKiBDb21tb24gRE9NIEFQSXMuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBET00gPSBPYmplY3QuZnJlZXplKHtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgRE9NIHN1cHBvcnRzIHRoZSBhZG9wdGVkU3R5bGVTaGVldHMgZmVhdHVyZS5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0Fkb3B0ZWRTdHlsZVNoZWV0czogQXJyYXkuaXNBcnJheShkb2N1bWVudC5hZG9wdGVkU3R5bGVTaGVldHMpICYmXG4gICAgICAgIFwicmVwbGFjZVwiIGluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLFxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEhUTUwgdHJ1c3RlZCB0eXBlcyBwb2xpY3kgdXNlZCBieSB0aGUgdGVtcGxhdGluZyBlbmdpbmUuXG4gICAgICogQHBhcmFtIHBvbGljeSAtIFRoZSBwb2xpY3kgdG8gc2V0IGZvciBIVE1MLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBBUEkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UsIGZvciBzZWN1cml0eSByZWFzb25zLiBJdCBzaG91bGQgYmVcbiAgICAgKiBjYWxsZWQgYnkgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciBhdCB0aGUgc3RhcnQgb2YgdGhlaXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzZXRIVE1MUG9saWN5KHBvbGljeSkge1xuICAgICAgICBpZiAoaHRtbFBvbGljeSAhPT0gZmFzdEhUTUxQb2xpY3kpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBIVE1MIHBvbGljeSBjYW4gb25seSBiZSBzZXQgb25jZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbFBvbGljeSA9IHBvbGljeTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFR1cm5zIGEgc3RyaW5nIGludG8gdHJ1c3RlZCBIVE1MIHVzaW5nIHRoZSBjb25maWd1cmVkIHRydXN0ZWQgdHlwZXMgcG9saWN5LlxuICAgICAqIEBwYXJhbSBodG1sIC0gVGhlIHN0cmluZyB0byB0dXJuIGludG8gdHJ1c3RlZCBIVE1MLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSB0ZW1wbGF0ZSBlbmdpbmUgd2hlbiBjcmVhdGluZyB0ZW1wbGF0ZXNcbiAgICAgKiBhbmQgc2V0dGluZyBpbm5lckhUTUwuXG4gICAgICovXG4gICAgY3JlYXRlSFRNTChodG1sKSB7XG4gICAgICAgIHJldHVybiBodG1sUG9saWN5LmNyZWF0ZUhUTUwoaHRtbCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlZCBub2RlIGlzIGEgdGVtcGxhdGUgbWFya2VyIHVzZWQgYnkgdGhlIHJ1bnRpbWUuXG4gICAgICogQHBhcmFtIG5vZGUgLSBUaGUgbm9kZSB0byB0ZXN0LlxuICAgICAqL1xuICAgIGlzTWFya2VyKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLmRhdGEuc3RhcnRzV2l0aChtYXJrZXIpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBtYXJrZXIgbm9kZSwgZXh0cmFjdCB0aGUge0BsaW5rIEhUTUxEaXJlY3RpdmV9IGluZGV4IGZyb20gdGhlIHBsYWNlaG9sZGVyLlxuICAgICAqIEBwYXJhbSBub2RlIC0gVGhlIG1hcmtlciBub2RlIHRvIGV4dHJhY3QgdGhlIGluZGV4IGZyb20uXG4gICAgICovXG4gICAgZXh0cmFjdERpcmVjdGl2ZUluZGV4RnJvbU1hcmtlcihub2RlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChub2RlLmRhdGEucmVwbGFjZShgJHttYXJrZXJ9OmAsIFwiXCIpKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFjZWhvbGRlciBzdHJpbmcgc3VpdGFibGUgZm9yIG1hcmtpbmcgb3V0IGEgbG9jYXRpb24gKndpdGhpbipcbiAgICAgKiBhbiBhdHRyaWJ1dGUgdmFsdWUgb3IgSFRNTCBjb250ZW50LlxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBkaXJlY3RpdmUgaW5kZXggdG8gY3JlYXRlIHRoZSBwbGFjZWhvbGRlciBmb3IuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBVc2VkIGludGVybmFsbHkgYnkgYmluZGluZyBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGNyZWF0ZUludGVycG9sYXRpb25QbGFjZWhvbGRlcihpbmRleCkge1xuICAgICAgICByZXR1cm4gYCR7X2ludGVycG9sYXRpb25TdGFydH0ke2luZGV4fSR7X2ludGVycG9sYXRpb25FbmR9YDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFjZWhvbGRlciB0aGF0IG1hbmlmZXN0cyBpdHNlbGYgYXMgYW4gYXR0cmlidXRlIG9uIGFuXG4gICAgICogZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjdXN0b20gYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBkaXJlY3RpdmUgaW5kZXggdG8gY3JlYXRlIHRoZSBwbGFjZWhvbGRlciBmb3IuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBVc2VkIGludGVybmFsbHkgYnkgYXR0cmlidXRlIGRpcmVjdGl2ZXMgc3VjaCBhcyBgcmVmYCwgYHNsb3R0ZWRgLCBhbmQgYGNoaWxkcmVuYC5cbiAgICAgKi9cbiAgICBjcmVhdGVDdXN0b21BdHRyaWJ1dGVQbGFjZWhvbGRlcihhdHRyaWJ1dGVOYW1lLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gYCR7YXR0cmlidXRlTmFtZX09XCIke3RoaXMuY3JlYXRlSW50ZXJwb2xhdGlvblBsYWNlaG9sZGVyKGluZGV4KX1cImA7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhY2Vob2xkZXIgdGhhdCBtYW5pZmVzdHMgaXRzZWxmIGFzIGEgbWFya2VyIHdpdGhpbiB0aGUgRE9NIHN0cnVjdHVyZS5cbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgZGlyZWN0aXZlIGluZGV4IHRvIGNyZWF0ZSB0aGUgcGxhY2Vob2xkZXIgZm9yLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVXNlZCBpbnRlcm5hbGx5IGJ5IHN0cnVjdHVyYWwgZGlyZWN0aXZlcyBzdWNoIGFzIGByZXBlYXRgLlxuICAgICAqL1xuICAgIGNyZWF0ZUJsb2NrUGxhY2Vob2xkZXIoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGA8IS0tJHttYXJrZXJ9OiR7aW5kZXh9LS0+YDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBET00gdXBkYXRlIHdvcmsgaW4gdGhlIG5leHQgYXN5bmMgYmF0Y2guXG4gICAgICogQHBhcmFtIGNhbGxhYmxlIC0gVGhlIGNhbGxhYmxlIGZ1bmN0aW9uIG9yIG9iamVjdCB0byBxdWV1ZS5cbiAgICAgKi9cbiAgICBxdWV1ZVVwZGF0ZTogdXBkYXRlUXVldWUuZW5xdWV1ZSxcbiAgICAvKipcbiAgICAgKiBJbW1lZGlhdGVseSBwcm9jZXNzZXMgYWxsIHdvcmsgcHJldmlvdXNseSBzY2hlZHVsZWRcbiAgICAgKiB0aHJvdWdoIHF1ZXVlVXBkYXRlLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBhbHNvIGZvcmNlcyBuZXh0VXBkYXRlIHByb21pc2VzXG4gICAgICogdG8gcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBwcm9jZXNzVXBkYXRlczogdXBkYXRlUXVldWUucHJvY2VzcyxcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB3aXRoIHRoZSBuZXh0IERPTSB1cGRhdGUuXG4gICAgICovXG4gICAgbmV4dFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHVwZGF0ZVF1ZXVlLmVucXVldWUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0cyBhbiBhdHRyaWJ1dGUgdmFsdWUgb24gYW4gZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIHNldCB0aGUgYXR0cmlidXRlIHZhbHVlIG9uLlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBzZXQuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQsIG90aGVyd2lzZVxuICAgICAqIGl0IGlzIHNldCB0byB0aGUgcHJvdmlkZWQgdmFsdWUgdXNpbmcgdGhlIHN0YW5kYXJkIGBzZXRBdHRyaWJ1dGVgIEFQSS5cbiAgICAgKi9cbiAgICBzZXRBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTZXRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBzZXQgdGhlIGJvb2xlYW4gYXR0cmlidXRlIHZhbHVlIG9uLlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBzZXQuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGF0dHJpYnV0ZSBpcyBhZGRlZDsgb3RoZXJ3aXNlIGl0IGlzIHJlbW92ZWQuXG4gICAgICovXG4gICAgc2V0Qm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgPyBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBcIlwiKVxuICAgICAgICAgICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgcHJvdmlkZWQgcGFyZW50IG5vZGUuXG4gICAgICogQHBhcmFtIHBhcmVudCAtIFRoZSBub2RlIHRvIHJlbW92ZSB0aGUgY2hpbGRyZW4gZnJvbS5cbiAgICAgKi9cbiAgICByZW1vdmVDaGlsZE5vZGVzKHBhcmVudCkge1xuICAgICAgICBmb3IgKGxldCBjaGlsZCA9IHBhcmVudC5maXJzdENoaWxkOyBjaGlsZCAhPT0gbnVsbDsgY2hpbGQgPSBwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFRyZWVXYWxrZXIgY29uZmlndXJlZCB0byB3YWxrIGEgdGVtcGxhdGUgZnJhZ21lbnQuXG4gICAgICogQHBhcmFtIGZyYWdtZW50IC0gVGhlIGZyYWdtZW50IHRvIHdhbGsuXG4gICAgICovXG4gICAgY3JlYXRlVGVtcGxhdGVXYWxrZXIoZnJhZ21lbnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMywgLy8gZWxlbWVudCwgdGV4dCwgY29tbWVudFxuICAgICAgICBudWxsLCBmYWxzZSk7XG4gICAgfSxcbn0pO1xuIiwiZnVuY3Rpb24gc3BpbGxvdmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpIHtcbiAgICBjb25zdCBzcGlsbG92ZXIgPSB0aGlzLnNwaWxsb3ZlcjtcbiAgICBjb25zdCBpbmRleCA9IHNwaWxsb3Zlci5pbmRleE9mKHN1YnNjcmliZXIpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgc3BpbGxvdmVyLnB1c2goc3Vic2NyaWJlcik7XG4gICAgfVxufVxuZnVuY3Rpb24gc3BpbGxvdmVyVW5zdWJzY3JpYmUoc3Vic2NyaWJlcikge1xuICAgIGNvbnN0IHNwaWxsb3ZlciA9IHRoaXMuc3BpbGxvdmVyO1xuICAgIGNvbnN0IGluZGV4ID0gc3BpbGxvdmVyLmluZGV4T2Yoc3Vic2NyaWJlcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzcGlsbG92ZXIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzcGlsbG92ZXJOb3RpZnlTdWJzY3JpYmVycyhhcmdzKSB7XG4gICAgY29uc3Qgc3BpbGxvdmVyID0gdGhpcy5zcGlsbG92ZXI7XG4gICAgY29uc3Qgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3BpbGxvdmVyLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgc3BpbGxvdmVyW2ldLmhhbmRsZUNoYW5nZShzb3VyY2UsIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwaWxsb3ZlckhhcyhzdWJzY3JpYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BpbGxvdmVyLmluZGV4T2Yoc3Vic2NyaWJlcikgIT09IC0xO1xufVxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgTm90aWZpZXJ9IHRoYXQgZWZmaWNpZW50bHkga2VlcHMgdHJhY2sgb2ZcbiAqIHN1YnNjcmliZXJzIGludGVyZXN0ZWQgaW4gYSBzcGVjaWZpYyBjaGFuZ2Ugbm90aWZpY2F0aW9uIG9uIGFuXG4gKiBvYnNlcnZhYmxlIHNvdXJjZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBzZXQgaXMgb3B0aW1pemVkIGZvciB0aGUgbW9zdCBjb21tb24gc2NlbmFyaW8gb2YgMSBvciAyIHN1YnNjcmliZXJzLlxuICogV2l0aCB0aGlzIGluIG1pbmQsIGl0IGNhbiBzdG9yZSBhIHN1YnNjcmliZXIgaW4gYW4gaW50ZXJuYWwgZmllbGQsIGFsbG93aW5nIGl0IHRvIGF2b2lkIEFycmF5I3B1c2ggb3BlcmF0aW9ucy5cbiAqIElmIHRoZSBzZXQgZXZlciBleGNlZWRzIHR3byBzdWJzY3JpYmVycywgaXQgdXBncmFkZXMgdG8gYW4gYXJyYXkgYXV0b21hdGljYWxseS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmliZXJTZXQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU3Vic2NyaWJlclNldCBmb3IgdGhlIHNwZWNpZmllZCBzb3VyY2UuXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIFRoZSBvYmplY3Qgc291cmNlIHRoYXQgc3Vic2NyaWJlcnMgd2lsbCByZWNlaXZlIG5vdGlmaWNhdGlvbnMgZnJvbS5cbiAgICAgKiBAcGFyYW0gaW5pdGlhbFN1YnNjcmliZXIgLSBBbiBpbml0aWFsIHN1YnNjcmliZXIgdG8gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIGluaXRpYWxTdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuc3ViMSA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5zdWIyID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnNwaWxsb3ZlciA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuc3ViMSA9IGluaXRpYWxTdWJzY3JpYmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgc3Vic2NyaWJlciBoYXMgYmVlbiBhZGRlZCB0byB0aGlzIHNldC5cbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIFRoZSBzdWJzY3JpYmVyIHRvIHRlc3QgZm9yIGluY2x1c2lvbiBpbiB0aGlzIHNldC5cbiAgICAgKi9cbiAgICBoYXMoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWIxID09PSBzdWJzY3JpYmVyIHx8IHRoaXMuc3ViMiA9PT0gc3Vic2NyaWJlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byBub3RpZmljYXRpb24gb2YgY2hhbmdlcyBpbiBhbiBvYmplY3QncyBzdGF0ZS5cbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIFRoZSBvYmplY3QgdGhhdCBpcyBzdWJzY3JpYmluZyBmb3IgY2hhbmdlIG5vdGlmaWNhdGlvbi5cbiAgICAgKi9cbiAgICBzdWJzY3JpYmUoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXMoc3Vic2NyaWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdWIxID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHRoaXMuc3ViMSA9IHN1YnNjcmliZXI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3ViMiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aGlzLnN1YjIgPSBzdWJzY3JpYmVyO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BpbGxvdmVyID0gW3RoaXMuc3ViMSwgdGhpcy5zdWIyLCBzdWJzY3JpYmVyXTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUgPSBzcGlsbG92ZXJTdWJzY3JpYmU7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBzcGlsbG92ZXJVbnN1YnNjcmliZTtcbiAgICAgICAgdGhpcy5ub3RpZnkgPSBzcGlsbG92ZXJOb3RpZnlTdWJzY3JpYmVycztcbiAgICAgICAgdGhpcy5oYXMgPSBzcGlsbG92ZXJIYXM7XG4gICAgICAgIHRoaXMuc3ViMSA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5zdWIyID0gdm9pZCAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgZnJvbSBub3RpZmljYXRpb24gb2YgY2hhbmdlcyBpbiBhbiBvYmplY3QncyBzdGF0ZS5cbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIFRoZSBvYmplY3QgdGhhdCBpcyB1bnN1YnNjcmliaW5nIGZyb20gY2hhbmdlIG5vdGlmaWNhdGlvbi5cbiAgICAgKi9cbiAgICB1bnN1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YjEgPT09IHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViMSA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN1YjIgPT09IHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViMiA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICogQHBhcmFtIGFyZ3MgLSBEYXRhIHBhc3NlZCBhbG9uZyB0byBzdWJzY3JpYmVycyBkdXJpbmcgbm90aWZpY2F0aW9uLlxuICAgICAqL1xuICAgIG5vdGlmeShhcmdzKSB7XG4gICAgICAgIGNvbnN0IHN1YjEgPSB0aGlzLnN1YjE7XG4gICAgICAgIGNvbnN0IHN1YjIgPSB0aGlzLnN1YjI7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc3ViMSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBzdWIxLmhhbmRsZUNoYW5nZShzb3VyY2UsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWIyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHN1YjIuaGFuZGxlQ2hhbmdlKHNvdXJjZSwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIE5vdGlmaWVyIHRoYXQgYWxsb3dzIHN1YnNjcmliZXJzIHRvIGJlIG5vdGlmaWVkXG4gKiBvZiBpbmRpdmlkdWFsIHByb3BlcnR5IGNoYW5nZXMgb24gYW4gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlDaGFuZ2VOb3RpZmllciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBQcm9wZXJ0eUNoYW5nZU5vdGlmaWVyIGZvciB0aGUgc3BlY2lmaWVkIHNvdXJjZS5cbiAgICAgKiBAcGFyYW0gc291cmNlIC0gVGhlIG9iamVjdCBzb3VyY2UgdGhhdCBzdWJzY3JpYmVycyB3aWxsIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBmcm9tLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG4gICAgICAgIHRoaXMuc291cmNlU3Vic2NyaWJlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgYWxsIHN1YnNjcmliZXJzLCBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgcHJvcGVydHkgbmFtZSwgcGFzc2VkIGFsb25nIHRvIHN1YnNjcmliZXJzIGR1cmluZyBub3RpZmljYXRpb24uXG4gICAgICovXG4gICAgbm90aWZ5KHByb3BlcnR5TmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVyc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMubm90aWZ5KHByb3BlcnR5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5zb3VyY2VTdWJzY3JpYmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vdGlmeShwcm9wZXJ0eU5hbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRvIG5vdGlmaWNhdGlvbiBvZiBjaGFuZ2VzIGluIGFuIG9iamVjdCdzIHN0YXRlLlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gVGhlIG9iamVjdCB0aGF0IGlzIHN1YnNjcmliaW5nIGZvciBjaGFuZ2Ugbm90aWZpY2F0aW9uLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVRvV2F0Y2ggLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhhdCB0aGUgc3Vic2NyaWJlciBpcyBpbnRlcmVzdGVkIGluIHdhdGNoaW5nIGZvciBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHN1YnNjcmliZShzdWJzY3JpYmVyLCBwcm9wZXJ0eVRvV2F0Y2gpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAocHJvcGVydHlUb1dhdGNoKSB7XG4gICAgICAgICAgICBsZXQgc3Vic2NyaWJlcnMgPSB0aGlzLnN1YnNjcmliZXJzW3Byb3BlcnR5VG9XYXRjaF07XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnNbcHJvcGVydHlUb1dhdGNoXSA9IHN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmliZXJTZXQodGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlcnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VTdWJzY3JpYmVycyA9IChfYSA9IHRoaXMuc291cmNlU3Vic2NyaWJlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBTdWJzY3JpYmVyU2V0KHRoaXMuc291cmNlKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlU3Vic2NyaWJlcnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIG5vdGlmaWNhdGlvbiBvZiBjaGFuZ2VzIGluIGFuIG9iamVjdCdzIHN0YXRlLlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gVGhlIG9iamVjdCB0aGF0IGlzIHVuc3Vic2NyaWJpbmcgZnJvbSBjaGFuZ2Ugbm90aWZpY2F0aW9uLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVRvVW53YXRjaCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHRoZSBzdWJzY3JpYmVyIGlzIG5vIGxvbmdlciBpbnRlcmVzdGVkIGluIHdhdGNoaW5nLlxuICAgICAqL1xuICAgIHVuc3Vic2NyaWJlKHN1YnNjcmliZXIsIHByb3BlcnR5VG9VbndhdGNoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHByb3BlcnR5VG9VbndhdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnNbcHJvcGVydHlUb1Vud2F0Y2hdO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy51bnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuc291cmNlU3Vic2NyaWJlcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IERPTSB9IGZyb20gXCIuLi9kb20uanNcIjtcbmltcG9ydCB7IEZBU1QgfSBmcm9tIFwiLi4vcGxhdGZvcm0uanNcIjtcbmltcG9ydCB7IFByb3BlcnR5Q2hhbmdlTm90aWZpZXIsIFN1YnNjcmliZXJTZXQgfSBmcm9tIFwiLi9ub3RpZmllci5qc1wiO1xuLyoqXG4gKiBDb21tb24gT2JzZXJ2YWJsZSBBUElzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZSA9IEZBU1QuZ2V0QnlJZCgyIC8qIG9ic2VydmFibGUgKi8sICgpID0+IHtcbiAgICBjb25zdCB2b2xhdGlsZVJlZ2V4ID0gLyg6fCYmfFxcfFxcfHxpZikvO1xuICAgIGNvbnN0IG5vdGlmaWVyTG9va3VwID0gbmV3IFdlYWtNYXAoKTtcbiAgICBjb25zdCBhY2Nlc3Nvckxvb2t1cCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgY29uc3QgcXVldWVVcGRhdGUgPSBET00ucXVldWVVcGRhdGU7XG4gICAgbGV0IHdhdGNoZXIgPSB2b2lkIDA7XG4gICAgbGV0IGNyZWF0ZUFycmF5T2JzZXJ2ZXIgPSAoYXJyYXkpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBjYWxsIGVuYWJsZUFycmF5T2JzZXJ2YXRpb24gYmVmb3JlIG9ic2VydmluZyBhcnJheXMuXCIpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZ2V0Tm90aWZpZXIoc291cmNlKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IHNvdXJjZS4kZmFzdENvbnRyb2xsZXIgfHwgbm90aWZpZXJMb29rdXAuZ2V0KHNvdXJjZSk7XG4gICAgICAgIGlmIChmb3VuZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgZm91bmQgPSBjcmVhdGVBcnJheU9ic2VydmVyKHNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBub3RpZmllckxvb2t1cC5zZXQoc291cmNlLCAoZm91bmQgPSBuZXcgUHJvcGVydHlDaGFuZ2VOb3RpZmllcihzb3VyY2UpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRBY2Nlc3NvcnModGFyZ2V0KSB7XG4gICAgICAgIGxldCBhY2Nlc3NvcnMgPSBhY2Nlc3Nvckxvb2t1cC5nZXQodGFyZ2V0KTtcbiAgICAgICAgaWYgKGFjY2Vzc29ycyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFRhcmdldCA9IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICAgICAgICAgIHdoaWxlIChhY2Nlc3NvcnMgPT09IHZvaWQgMCAmJiBjdXJyZW50VGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzb3JzID0gYWNjZXNzb3JMb29rdXAuZ2V0KGN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBSZWZsZWN0LmdldFByb3RvdHlwZU9mKGN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjY2Vzc29ycyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzb3JzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NvcnMgPSBhY2Nlc3NvcnMuc2xpY2UoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2Nlc3Nvckxvb2t1cC5zZXQodGFyZ2V0LCBhY2Nlc3NvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2Nlc3NvcnM7XG4gICAgfVxuICAgIGNsYXNzIERlZmF1bHRPYnNlcnZhYmxlQWNjZXNzb3Ige1xuICAgICAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgdGhpcy5maWVsZCA9IGBfJHtuYW1lfWA7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gYCR7bmFtZX1DaGFuZ2VkYDtcbiAgICAgICAgfVxuICAgICAgICBnZXRWYWx1ZShzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICh3YXRjaGVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICB3YXRjaGVyLndhdGNoKHNvdXJjZSwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VbdGhpcy5maWVsZF07XG4gICAgICAgIH1cbiAgICAgICAgc2V0VmFsdWUoc291cmNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkO1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBzb3VyY2VbZmllbGRdO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZVtmaWVsZF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHNvdXJjZVt0aGlzLmNhbGxiYWNrXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzb3VyY2UsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdldE5vdGlmaWVyKHNvdXJjZSkubm90aWZ5KHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xhc3MgQmluZGluZ09ic2VydmVySW1wbGVtZW50YXRpb24gZXh0ZW5kcyBTdWJzY3JpYmVyU2V0IHtcbiAgICAgICAgY29uc3RydWN0b3IoYmluZGluZywgaW5pdGlhbFN1YnNjcmliZXIsIGlzVm9sYXRpbGVCaW5kaW5nID0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN1cGVyKGJpbmRpbmcsIGluaXRpYWxTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG4gICAgICAgICAgICB0aGlzLmlzVm9sYXRpbGVCaW5kaW5nID0gaXNWb2xhdGlsZUJpbmRpbmc7XG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5lZWRzUXVldWUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5maXJzdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmxhc3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eVNvdXJjZSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHlOYW1lID0gdm9pZCAwO1xuICAgICAgICAgICAgdGhpcy5ub3RpZmllciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBvYnNlcnZlKHNvdXJjZSwgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNSZWZyZXNoICYmIHRoaXMubGFzdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNXYXRjaGVyID0gd2F0Y2hlcjtcbiAgICAgICAgICAgIHdhdGNoZXIgPSB0aGlzLm5lZWRzUmVmcmVzaCA/IHRoaXMgOiB2b2lkIDA7XG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVmcmVzaCA9IHRoaXMuaXNWb2xhdGlsZUJpbmRpbmc7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJpbmRpbmcoc291cmNlLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHdhdGNoZXIgPSBwcmV2aW91c1dhdGNoZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmZpcnN0O1xuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5ub3RpZmllci51bnN1YnNjcmliZSh0aGlzLCBjdXJyZW50LnByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubGFzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1JlZnJlc2ggPSB0aGlzLm5lZWRzUXVldWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdhdGNoKHByb3BlcnR5U291cmNlLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLmxhc3Q7XG4gICAgICAgICAgICBjb25zdCBub3RpZmllciA9IGdldE5vdGlmaWVyKHByb3BlcnR5U291cmNlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBwcmV2ID09PSBudWxsID8gdGhpcy5maXJzdCA6IHt9O1xuICAgICAgICAgICAgY3VycmVudC5wcm9wZXJ0eVNvdXJjZSA9IHByb3BlcnR5U291cmNlO1xuICAgICAgICAgICAgY3VycmVudC5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICBjdXJyZW50Lm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgICAgICAgICBub3RpZmllci5zdWJzY3JpYmUodGhpcywgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5lZWRzUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEZWNsYXJpbmcgdGhlIHZhcmlhYmxlIHByaW9yIHRvIGFzc2lnbm1lbnQgYmVsb3cgY2lyY3VtdmVudHNcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBidWcgaW4gQW5ndWxhcidzIG9wdGltaXphdGlvbiBwcm9jZXNzIGNhdXNpbmcgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoaXMgd2F0Y2goKSBtZXRob2QuIERldGFpbHMgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9mYXN0L2lzc3Vlcy80OTY5XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZXIgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWUgPSBwcmV2LnByb3BlcnR5U291cmNlW3ByZXYucHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hlciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVNvdXJjZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldi5uZXh0ID0gY3VycmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGFzdCA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNRdWV1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZHNRdWV1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHF1ZXVlVXBkYXRlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhbGwoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1F1ZXVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWNvcmRzKCkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLmZpcnN0O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKiBAcGFyYW0gZmFjdG9yeSAtIFRoZSBmYWN0b3J5IHVzZWQgdG8gY3JlYXRlIGFycmF5IG9ic2VydmVycy5cbiAgICAgICAgICovXG4gICAgICAgIHNldEFycmF5T2JzZXJ2ZXJGYWN0b3J5KGZhY3RvcnkpIHtcbiAgICAgICAgICAgIGNyZWF0ZUFycmF5T2JzZXJ2ZXIgPSBmYWN0b3J5O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIG5vdGlmaWVyIGZvciBhbiBvYmplY3Qgb3IgQXJyYXkuXG4gICAgICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgb2JqZWN0IG9yIEFycmF5IHRvIGdldCB0aGUgbm90aWZpZXIgZm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Tm90aWZpZXIsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWNvcmRzIGEgcHJvcGVydHkgY2hhbmdlIGZvciBhIHNvdXJjZSBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgb2JqZWN0IHRvIHJlY29yZCB0aGUgY2hhbmdlIGFnYWluc3QuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgcHJvcGVydHkgdG8gdHJhY2sgYXMgY2hhbmdlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRyYWNrKHNvdXJjZSwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICBpZiAod2F0Y2hlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgd2F0Y2hlci53YXRjaChzb3VyY2UsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyB3YXRjaGVycyB0aGF0IHRoZSBjdXJyZW50bHkgZXhlY3V0aW5nIHByb3BlcnR5IGdldHRlciBvciBmdW5jdGlvbiBpcyB2b2xhdGlsZVxuICAgICAgICAgKiB3aXRoIHJlc3BlY3QgdG8gaXRzIG9ic2VydmFibGUgZGVwZW5kZW5jaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdHJhY2tWb2xhdGlsZSgpIHtcbiAgICAgICAgICAgIGlmICh3YXRjaGVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICB3YXRjaGVyLm5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyBzdWJzY3JpYmVycyBvZiBhIHNvdXJjZSBvYmplY3Qgb2YgY2hhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIHNvdXJjZSAtIHRoZSBvYmplY3QgdG8gbm90aWZ5IG9mIGNoYW5nZXMuXG4gICAgICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGNoYW5nZSBhcmdzIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnMuXG4gICAgICAgICAqL1xuICAgICAgICBub3RpZnkoc291cmNlLCBhcmdzKSB7XG4gICAgICAgICAgICBnZXROb3RpZmllcihzb3VyY2UpLm5vdGlmeShhcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgYW4gb2JzZXJ2YWJsZSBwcm9wZXJ0eSBvbiBhbiBvYmplY3Qgb3IgcHJvdG90eXBlLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgdG8gZGVmaW5lIHRoZSBvYnNlcnZhYmxlIG9uLlxuICAgICAgICAgKiBAcGFyYW0gbmFtZU9yQWNjZXNzb3IgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZGVmaW5lIGFzIG9ic2VydmFibGU7XG4gICAgICAgICAqIG9yIGEgY3VzdG9tIGFjY2Vzc29yIHRoYXQgc3BlY2lmaWVzIHRoZSBwcm9wZXJ0eSBuYW1lIGFuZCBhY2Nlc3NvciBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZU9yQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZU9yQWNjZXNzb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBuYW1lT3JBY2Nlc3NvciA9IG5ldyBEZWZhdWx0T2JzZXJ2YWJsZUFjY2Vzc29yKG5hbWVPckFjY2Vzc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldEFjY2Vzc29ycyh0YXJnZXQpLnB1c2gobmFtZU9yQWNjZXNzb3IpO1xuICAgICAgICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWVPckFjY2Vzc29yLm5hbWUsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZU9yQWNjZXNzb3IuZ2V0VmFsdWUodGhpcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lT3JBY2Nlc3Nvci5zZXRWYWx1ZSh0aGlzLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRmluZHMgYWxsIHRoZSBvYnNlcnZhYmxlIGFjY2Vzc29ycyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQsXG4gICAgICAgICAqIGluY2x1ZGluZyBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgdG8gc2VhcmNoIGZvciBhY2Nlc3NvciBvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldEFjY2Vzc29ycyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSB7QGxpbmsgQmluZGluZ09ic2VydmVyfSB0aGF0IGNhbiB3YXRjaCB0aGVcbiAgICAgICAgICogcHJvdmlkZWQge0BsaW5rIEJpbmRpbmd9IGZvciBjaGFuZ2VzLlxuICAgICAgICAgKiBAcGFyYW0gYmluZGluZyAtIFRoZSBiaW5kaW5nIHRvIG9ic2VydmUuXG4gICAgICAgICAqIEBwYXJhbSBpbml0aWFsU3Vic2NyaWJlciAtIEFuIGluaXRpYWwgc3Vic2NyaWJlciB0byBjaGFuZ2VzIGluIHRoZSBiaW5kaW5nIHZhbHVlLlxuICAgICAgICAgKiBAcGFyYW0gaXNWb2xhdGlsZUJpbmRpbmcgLSBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYmluZGluZydzIGRlcGVuZGVuY3kgbGlzdCBtdXN0IGJlIHJlLWV2YWx1YXRlZCBvbiBldmVyeSB2YWx1ZSBldmFsdWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgYmluZGluZyhiaW5kaW5nLCBpbml0aWFsU3Vic2NyaWJlciwgaXNWb2xhdGlsZUJpbmRpbmcgPSB0aGlzLmlzVm9sYXRpbGVCaW5kaW5nKGJpbmRpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPYnNlcnZlckltcGxlbWVudGF0aW9uKGJpbmRpbmcsIGluaXRpYWxTdWJzY3JpYmVyLCBpc1ZvbGF0aWxlQmluZGluZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBiaW5kaW5nIGV4cHJlc3Npb24gaXMgdm9sYXRpbGUgYW5kIG5lZWRzIHRvIGhhdmUgaXRzIGRlcGVuZGVuY3kgbGlzdCByZS1ldmFsdWF0ZWRcbiAgICAgICAgICogb24gZXZlcnkgZXZhbHVhdGlvbiBvZiB0aGUgdmFsdWUuXG4gICAgICAgICAqIEBwYXJhbSBiaW5kaW5nIC0gVGhlIGJpbmRpbmcgdG8gaW5zcGVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGlzVm9sYXRpbGVCaW5kaW5nKGJpbmRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2xhdGlsZVJlZ2V4LnRlc3QoYmluZGluZy50b1N0cmluZygpKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn0pO1xuLyoqXG4gKiBEZWNvcmF0b3I6IERlZmluZXMgYW4gb2JzZXJ2YWJsZSBwcm9wZXJ0eSBvbiB0aGUgdGFyZ2V0LlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgdG8gZGVmaW5lIHRoZSBvYnNlcnZhYmxlIG9uLlxuICogQHBhcmFtIG5hbWVPckFjY2Vzc29yIC0gVGhlIHByb3BlcnR5IG5hbWUgb3IgYWNjZXNzb3IgdG8gZGVmaW5lIHRoZSBvYnNlcnZhYmxlIGFzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2YWJsZSh0YXJnZXQsIG5hbWVPckFjY2Vzc29yKSB7XG4gICAgT2JzZXJ2YWJsZS5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWVPckFjY2Vzc29yKTtcbn1cbi8qKlxuICogRGVjb3JhdG9yOiBNYXJrcyBhIHByb3BlcnR5IGdldHRlciBhcyBoYXZpbmcgdm9sYXRpbGUgb2JzZXJ2YWJsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0aGF0IHRoZSBwcm9wZXJ0eSBpcyBkZWZpbmVkIG9uLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgcHJvcGVydHkgbmFtZS5cbiAqIEBwYXJhbSBuYW1lIC0gVGhlIGV4aXN0aW5nIGRlc2NyaXB0b3IuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2b2xhdGlsZSh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVzY3JpcHRvciwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9ic2VydmFibGUudHJhY2tWb2xhdGlsZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmFwcGx5KHRoaXMpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuY29uc3QgY29udGV4dEV2ZW50ID0gRkFTVC5nZXRCeUlkKDMgLyogY29udGV4dEV2ZW50ICovLCAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICB9LFxuICAgICAgICBzZXQoZXZlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBldmVudDtcbiAgICAgICAgfSxcbiAgICB9O1xufSk7XG4vKipcbiAqIFByb3ZpZGVzIGFkZGl0aW9uYWwgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBhdmFpbGFibGUgdG8gYmVoYXZpb3JzIGFuZCBleHByZXNzaW9ucy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEV4ZWN1dGlvbkNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGl0ZW0gd2l0aGluIGEgcmVwZWF0IGNvbnRleHQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgY29sbGVjdGlvbiB3aXRoaW4gYSByZXBlYXQgY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYXJlbnQgZGF0YSBvYmplY3Qgd2l0aGluIGEgcmVwZWF0IGNvbnRleHQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGFyZW50IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gaW4gbmVzdGVkIGNvbnRleHQgc2NlbmFyaW9zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnRDb250ZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgZXZlbnQgd2l0aGluIGFuIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICByZXR1cm4gY29udGV4dEV2ZW50LmdldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCBpdGVtIHdpdGhpbiBhIHJlcGVhdCBjb250ZXh0XG4gICAgICogaGFzIGFuIGV2ZW4gaW5kZXguXG4gICAgICovXG4gICAgZ2V0IGlzRXZlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggJSAyID09PSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCBpdGVtIHdpdGhpbiBhIHJlcGVhdCBjb250ZXh0XG4gICAgICogaGFzIGFuIG9kZCBpbmRleC5cbiAgICAgKi9cbiAgICBnZXQgaXNPZGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ICUgMiAhPT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQgaXRlbSB3aXRoaW4gYSByZXBlYXQgY29udGV4dFxuICAgICAqIGlzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBpc0ZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA9PT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQgaXRlbSB3aXRoaW4gYSByZXBlYXQgY29udGV4dFxuICAgICAqIGlzIHNvbWV3aGVyZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBpc0luTWlkZGxlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNGaXJzdCAmJiAhdGhpcy5pc0xhc3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjdXJyZW50IGl0ZW0gd2l0aGluIGEgcmVwZWF0IGNvbnRleHRcbiAgICAgKiBpcyB0aGUgbGFzdCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBpc0xhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ID09PSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGV2ZW50IGZvciB0aGUgY3VycmVudCBleGVjdXRpb24gY29udGV4dC5cbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gc2V0LlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRFdmVudChldmVudCkge1xuICAgICAgICBjb250ZXh0RXZlbnQuc2V0KGV2ZW50KTtcbiAgICB9XG59XG5PYnNlcnZhYmxlLmRlZmluZVByb3BlcnR5KEV4ZWN1dGlvbkNvbnRleHQucHJvdG90eXBlLCBcImluZGV4XCIpO1xuT2JzZXJ2YWJsZS5kZWZpbmVQcm9wZXJ0eShFeGVjdXRpb25Db250ZXh0LnByb3RvdHlwZSwgXCJsZW5ndGhcIik7XG4vKipcbiAqIFRoZSBkZWZhdWx0IGV4ZWN1dGlvbiBjb250ZXh0IHVzZWQgaW4gYmluZGluZyBleHByZXNzaW9ucy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFeGVjdXRpb25Db250ZXh0ID0gT2JqZWN0LnNlYWwobmV3IEV4ZWN1dGlvbkNvbnRleHQoKSk7XG4iLCJpbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgc3R5bGVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gYSBjdXN0b20gZWxlbWVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEVsZW1lbnRTdHlsZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhcmdldHMgPSBuZXcgV2Vha1NldCgpO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuYmVoYXZpb3JzID0gbnVsbDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFkZFN0eWxlc1RvKHRhcmdldCkge1xuICAgICAgICB0aGlzLnRhcmdldHMuYWRkKHRhcmdldCk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZW1vdmVTdHlsZXNGcm9tKHRhcmdldCkge1xuICAgICAgICB0aGlzLnRhcmdldHMuZGVsZXRlKHRhcmdldCk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBpc0F0dGFjaGVkVG8odGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldHMuaGFzKHRhcmdldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZXMgYmVoYXZpb3JzIHdpdGggdGhpcyBzZXQgb2Ygc3R5bGVzLlxuICAgICAqIEBwYXJhbSBiZWhhdmlvcnMgLSBUaGUgYmVoYXZpb3JzIHRvIGFzc29jaWF0ZS5cbiAgICAgKi9cbiAgICB3aXRoQmVoYXZpb3JzKC4uLmJlaGF2aW9ycykge1xuICAgICAgICB0aGlzLmJlaGF2aW9ycyA9XG4gICAgICAgICAgICB0aGlzLmJlaGF2aW9ycyA9PT0gbnVsbCA/IGJlaGF2aW9ycyA6IHRoaXMuYmVoYXZpb3JzLmNvbmNhdChiZWhhdmlvcnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBFbGVtZW50U3R5bGVzIGZyb20gQ29tcG9zYWJsZVN0eWxlcy5cbiAqL1xuRWxlbWVudFN0eWxlcy5jcmVhdGUgPSAoKCkgPT4ge1xuICAgIGlmIChET00uc3VwcG9ydHNBZG9wdGVkU3R5bGVTaGVldHMpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVTaGVldENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gKHN0eWxlcykgPT4gXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgbmV3IEFkb3B0ZWRTdHlsZVNoZWV0c1N0eWxlcyhzdHlsZXMsIHN0eWxlU2hlZXRDYWNoZSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gKHN0eWxlcykgPT4gbmV3IFN0eWxlRWxlbWVudFN0eWxlcyhzdHlsZXMpO1xufSkoKTtcbmZ1bmN0aW9uIHJlZHVjZVN0eWxlcyhzdHlsZXMpIHtcbiAgICByZXR1cm4gc3R5bGVzXG4gICAgICAgIC5tYXAoKHgpID0+IHggaW5zdGFuY2VvZiBFbGVtZW50U3R5bGVzID8gcmVkdWNlU3R5bGVzKHguc3R5bGVzKSA6IFt4XSlcbiAgICAgICAgLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5jb25jYXQoY3VyciksIFtdKTtcbn1cbmZ1bmN0aW9uIHJlZHVjZUJlaGF2aW9ycyhzdHlsZXMpIHtcbiAgICByZXR1cm4gc3R5bGVzXG4gICAgICAgIC5tYXAoKHgpID0+ICh4IGluc3RhbmNlb2YgRWxlbWVudFN0eWxlcyA/IHguYmVoYXZpb3JzIDogbnVsbCkpXG4gICAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgaWYgKGN1cnIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgICAgICAgICBwcmV2ID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXYuY29uY2F0KGN1cnIpO1xuICAgIH0sIG51bGwpO1xufVxuLyoqXG4gKiBodHRwczovL3dpY2cuZ2l0aHViLmlvL2NvbnN0cnVjdC1zdHlsZXNoZWV0cy9cbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTkvMDIvY29uc3RydWN0YWJsZS1zdHlsZXNoZWV0c1xuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgQWRvcHRlZFN0eWxlU2hlZXRzU3R5bGVzIGV4dGVuZHMgRWxlbWVudFN0eWxlcyB7XG4gICAgY29uc3RydWN0b3Ioc3R5bGVzLCBzdHlsZVNoZWV0Q2FjaGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdHlsZXMgPSBzdHlsZXM7XG4gICAgICAgIHRoaXMuc3R5bGVTaGVldENhY2hlID0gc3R5bGVTaGVldENhY2hlO1xuICAgICAgICB0aGlzLl9zdHlsZVNoZWV0cyA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5iZWhhdmlvcnMgPSByZWR1Y2VCZWhhdmlvcnMoc3R5bGVzKTtcbiAgICB9XG4gICAgZ2V0IHN0eWxlU2hlZXRzKCkge1xuICAgICAgICBpZiAodGhpcy5fc3R5bGVTaGVldHMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXM7XG4gICAgICAgICAgICBjb25zdCBzdHlsZVNoZWV0Q2FjaGUgPSB0aGlzLnN0eWxlU2hlZXRDYWNoZTtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXRzID0gcmVkdWNlU3R5bGVzKHN0eWxlcykubWFwKCh4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHggaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgc2hlZXQgPSBzdHlsZVNoZWV0Q2FjaGUuZ2V0KHgpO1xuICAgICAgICAgICAgICAgIGlmIChzaGVldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoZWV0ID0gbmV3IENTU1N0eWxlU2hlZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQucmVwbGFjZVN5bmMoeCk7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRDYWNoZS5zZXQoeCwgc2hlZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2hlZXQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGVTaGVldHM7XG4gICAgfVxuICAgIGFkZFN0eWxlc1RvKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuYWRvcHRlZFN0eWxlU2hlZXRzID0gWy4uLnRhcmdldC5hZG9wdGVkU3R5bGVTaGVldHMsIC4uLnRoaXMuc3R5bGVTaGVldHNdO1xuICAgICAgICBzdXBlci5hZGRTdHlsZXNUbyh0YXJnZXQpO1xuICAgIH1cbiAgICByZW1vdmVTdHlsZXNGcm9tKHRhcmdldCkge1xuICAgICAgICBjb25zdCBzb3VyY2VTaGVldHMgPSB0aGlzLnN0eWxlU2hlZXRzO1xuICAgICAgICB0YXJnZXQuYWRvcHRlZFN0eWxlU2hlZXRzID0gdGFyZ2V0LmFkb3B0ZWRTdHlsZVNoZWV0cy5maWx0ZXIoKHgpID0+IHNvdXJjZVNoZWV0cy5pbmRleE9mKHgpID09PSAtMSk7XG4gICAgICAgIHN1cGVyLnJlbW92ZVN0eWxlc0Zyb20odGFyZ2V0KTtcbiAgICB9XG59XG5sZXQgc3R5bGVDbGFzc0lkID0gMDtcbmZ1bmN0aW9uIGdldE5leHRTdHlsZUNsYXNzKCkge1xuICAgIHJldHVybiBgZmFzdC1zdHlsZS1jbGFzcy0keysrc3R5bGVDbGFzc0lkfWA7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU3R5bGVFbGVtZW50U3R5bGVzIGV4dGVuZHMgRWxlbWVudFN0eWxlcyB7XG4gICAgY29uc3RydWN0b3Ioc3R5bGVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLmJlaGF2aW9ycyA9IG51bGw7XG4gICAgICAgIHRoaXMuYmVoYXZpb3JzID0gcmVkdWNlQmVoYXZpb3JzKHN0eWxlcyk7XG4gICAgICAgIHRoaXMuc3R5bGVTaGVldHMgPSByZWR1Y2VTdHlsZXMoc3R5bGVzKTtcbiAgICAgICAgdGhpcy5zdHlsZUNsYXNzID0gZ2V0TmV4dFN0eWxlQ2xhc3MoKTtcbiAgICB9XG4gICAgYWRkU3R5bGVzVG8odGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXRzID0gdGhpcy5zdHlsZVNoZWV0cztcbiAgICAgICAgY29uc3Qgc3R5bGVDbGFzcyA9IHRoaXMuc3R5bGVDbGFzcztcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy5ub3JtYWxpemVUYXJnZXQodGFyZ2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gc3R5bGVTaGVldHNbaV07XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHN0eWxlQ2xhc3M7XG4gICAgICAgICAgICB0YXJnZXQuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZFN0eWxlc1RvKHRhcmdldCk7XG4gICAgfVxuICAgIHJlbW92ZVN0eWxlc0Zyb20odGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldCA9IHRoaXMubm9ybWFsaXplVGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKGAuJHt0aGlzLnN0eWxlQ2xhc3N9YCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0eWxlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQoc3R5bGVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5yZW1vdmVTdHlsZXNGcm9tKHRhcmdldCk7XG4gICAgfVxuICAgIGlzQXR0YWNoZWRUbyh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmlzQXR0YWNoZWRUbyh0aGlzLm5vcm1hbGl6ZVRhcmdldCh0YXJnZXQpKTtcbiAgICB9XG4gICAgbm9ybWFsaXplVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0ID09PSBkb2N1bWVudCA/IGRvY3VtZW50LmJvZHkgOiB0YXJnZXQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi9vYnNlcnZhdGlvbi9vYnNlcnZhYmxlLmpzXCI7XG5pbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG4vKipcbiAqIEEge0BsaW5rIFZhbHVlQ29udmVydGVyfSB0aGF0IGNvbnZlcnRzIHRvIGFuZCBmcm9tIGBib29sZWFuYCB2YWx1ZXMuXG4gKiBAcmVtYXJrc1xuICogVXNlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGBib29sZWFuYCB7QGxpbmsgQXR0cmlidXRlTW9kZX0gaXMgc2VsZWN0ZWQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBib29sZWFuQ29udmVydGVyID0ge1xuICAgIHRvVmlldyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcbiAgICB9LFxuICAgIGZyb21WaWV3KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdmFsdWUgPT09IHZvaWQgMCB8fFxuICAgICAgICAgICAgdmFsdWUgPT09IFwiZmFsc2VcIiB8fFxuICAgICAgICAgICAgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgICAgICB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG59O1xuLyoqXG4gKiBBIHtAbGluayBWYWx1ZUNvbnZlcnRlcn0gdGhhdCBjb252ZXJ0cyB0byBhbmQgZnJvbSBgbnVtYmVyYCB2YWx1ZXMuXG4gKiBAcmVtYXJrc1xuICogVGhpcyBjb252ZXJ0ZXIgYWxsb3dzIGZvciBudWxsYWJsZSBudW1iZXJzLCByZXR1cm5pbmcgYG51bGxgIGlmIHRoZVxuICogaW5wdXQgd2FzIGBudWxsYCwgYHVuZGVmaW5lZGAsIG9yIGBOYU5gLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgbnVsbGFibGVOdW1iZXJDb252ZXJ0ZXIgPSB7XG4gICAgdG9WaWV3KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW1iZXIgPSB2YWx1ZSAqIDE7XG4gICAgICAgIHJldHVybiBpc05hTihudW1iZXIpID8gbnVsbCA6IG51bWJlci50b1N0cmluZygpO1xuICAgIH0sXG4gICAgZnJvbVZpZXcodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bWJlciA9IHZhbHVlICogMTtcbiAgICAgICAgcmV0dXJuIGlzTmFOKG51bWJlcikgPyBudWxsIDogbnVtYmVyO1xuICAgIH0sXG59O1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQWNjZXNzb3J9IHRoYXQgc3VwcG9ydHMgcmVhY3Rpdml0eSxcbiAqIGNoYW5nZSBjYWxsYmFja3MsIGF0dHJpYnV0ZSByZWZsZWN0aW9uLCBhbmQgdHlwZSBjb252ZXJzaW9uIGZvclxuICogY3VzdG9tIGVsZW1lbnRzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlRGVmaW5pdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBBdHRyaWJ1dGVEZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSBPd25lciAtIFRoZSBjbGFzcyBjb25zdHJ1Y3RvciB0aGF0IG93bnMgdGhpcyBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZSAtIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgaW4gSFRNTC5cbiAgICAgKiBAcGFyYW0gbW9kZSAtIFRoZSB7QGxpbmsgQXR0cmlidXRlTW9kZX0gdGhhdCBkZXNjcmliZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSBjb252ZXJ0ZXIgLSBBIHtAbGluayBWYWx1ZUNvbnZlcnRlcn0gdGhhdCBpbnRlZ3JhdGVzIHdpdGggdGhlIHByb3BlcnR5IGdldHRlci9zZXR0ZXJcbiAgICAgKiB0byBjb252ZXJ0IHZhbHVlcyB0byBhbmQgZnJvbSBhIERPTSBzdHJpbmcuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoT3duZXIsIG5hbWUsIGF0dHJpYnV0ZSA9IG5hbWUudG9Mb3dlckNhc2UoKSwgbW9kZSA9IFwicmVmbGVjdFwiLCBjb252ZXJ0ZXIpIHtcbiAgICAgICAgdGhpcy5ndWFyZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuT3duZXIgPSBPd25lcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICAgIHRoaXMuY29udmVydGVyID0gY29udmVydGVyO1xuICAgICAgICB0aGlzLmZpZWxkTmFtZSA9IGBfJHtuYW1lfWA7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tOYW1lID0gYCR7bmFtZX1DaGFuZ2VkYDtcbiAgICAgICAgdGhpcy5oYXNDYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tOYW1lIGluIE93bmVyLnByb3RvdHlwZTtcbiAgICAgICAgaWYgKG1vZGUgPT09IFwiYm9vbGVhblwiICYmIGNvbnZlcnRlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRlciA9IGJvb2xlYW5Db252ZXJ0ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZS9wcm9wZXJ0eSBvbiB0aGUgc291cmNlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIFRoZSBzb3VyY2UgZWxlbWVudCB0byBhY2Nlc3MuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlL3Byb3BlcnR5IHRvLlxuICAgICAqL1xuICAgIHNldFZhbHVlKHNvdXJjZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBzb3VyY2VbdGhpcy5maWVsZE5hbWVdO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZXIgPSB0aGlzLmNvbnZlcnRlcjtcbiAgICAgICAgaWYgKGNvbnZlcnRlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvbnZlcnRlci5mcm9tVmlldyhuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgc291cmNlW3RoaXMuZmllbGROYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy50cnlSZWZsZWN0VG9BdHRyaWJ1dGUoc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc291cmNlW3RoaXMuY2FsbGJhY2tOYW1lXShvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLiRmYXN0Q29udHJvbGxlci5ub3RpZnkodGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlL3Byb3BlcnR5IG9uIHRoZSBzb3VyY2UgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gc291cmNlIC0gVGhlIHNvdXJjZSBlbGVtZW50IHRvIGFjY2Vzcy5cbiAgICAgKi9cbiAgICBnZXRWYWx1ZShzb3VyY2UpIHtcbiAgICAgICAgT2JzZXJ2YWJsZS50cmFjayhzb3VyY2UsIHRoaXMubmFtZSk7XG4gICAgICAgIHJldHVybiBzb3VyY2VbdGhpcy5maWVsZE5hbWVdO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25BdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZWxlbWVudCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3VhcmRzLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3VhcmRzLmFkZChlbGVtZW50KTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShlbGVtZW50LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuZ3VhcmRzLmRlbGV0ZShlbGVtZW50KTtcbiAgICB9XG4gICAgdHJ5UmVmbGVjdFRvQXR0cmlidXRlKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHRoaXMubW9kZTtcbiAgICAgICAgY29uc3QgZ3VhcmRzID0gdGhpcy5ndWFyZHM7XG4gICAgICAgIGlmIChndWFyZHMuaGFzKGVsZW1lbnQpIHx8IG1vZGUgPT09IFwiZnJvbVZpZXdcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICBndWFyZHMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgbGF0ZXN0VmFsdWUgPSBlbGVtZW50W3RoaXMuZmllbGROYW1lXTtcbiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZWZsZWN0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlciA9IHRoaXMuY29udmVydGVyO1xuICAgICAgICAgICAgICAgICAgICBET00uc2V0QXR0cmlidXRlKGVsZW1lbnQsIHRoaXMuYXR0cmlidXRlLCBjb252ZXJ0ZXIgIT09IHZvaWQgMCA/IGNvbnZlcnRlci50b1ZpZXcobGF0ZXN0VmFsdWUpIDogbGF0ZXN0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgICAgICBET00uc2V0Qm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCB0aGlzLmF0dHJpYnV0ZSwgbGF0ZXN0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGd1YXJkcy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0cyBhbGwgYXR0cmlidXRlIGRlZmluaXRpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3duZXIuXG4gICAgICogQHBhcmFtIE93bmVyIC0gVGhlIGNsYXNzIGNvbnN0cnVjdG9yIHRvIGNvbGxlY3QgYXR0cmlidXRlIGZvci5cbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlTGlzdHMgLSBBbnkgZXhpc3RpbmcgYXR0cmlidXRlcyB0byBjb2xsZWN0IGFuZCBtZXJnZSB3aXRoIHRob3NlIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3duZXIuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc3RhdGljIGNvbGxlY3QoT3duZXIsIC4uLmF0dHJpYnV0ZUxpc3RzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgYXR0cmlidXRlTGlzdHMucHVzaChPd25lci5hdHRyaWJ1dGVzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXR0cmlidXRlTGlzdHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IGF0dHJpYnV0ZUxpc3RzW2ldO1xuICAgICAgICAgICAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gbGlzdC5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbGlzdFtqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmV3IEF0dHJpYnV0ZURlZmluaXRpb24oT3duZXIsIGNvbmZpZykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGVEZWZpbml0aW9uKE93bmVyLCBjb25maWcucHJvcGVydHksIGNvbmZpZy5hdHRyaWJ1dGUsIGNvbmZpZy5tb2RlLCBjb25maWcuY29udmVydGVyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhdHRyKGNvbmZpZ09yVGFyZ2V0LCBwcm9wKSB7XG4gICAgbGV0IGNvbmZpZztcbiAgICBmdW5jdGlvbiBkZWNvcmF0b3IoJHRhcmdldCwgJHByb3ApIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvLyBOb24gaW52b2NhdGlvbjpcbiAgICAgICAgICAgIC8vIC0gQGF0dHJcbiAgICAgICAgICAgIC8vIEludm9jYXRpb24gd2l0aCBvciB3L28gb3B0czpcbiAgICAgICAgICAgIC8vIC0gQGF0dHIoKVxuICAgICAgICAgICAgLy8gLSBAYXR0cih7Li4ub3B0c30pXG4gICAgICAgICAgICBjb25maWcucHJvcGVydHkgPSAkcHJvcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gJHRhcmdldC5jb25zdHJ1Y3Rvci5hdHRyaWJ1dGVzIHx8XG4gICAgICAgICAgICAoJHRhcmdldC5jb25zdHJ1Y3Rvci5hdHRyaWJ1dGVzID0gW10pO1xuICAgICAgICBhdHRyaWJ1dGVzLnB1c2goY29uZmlnKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIE5vbiBpbnZvY2F0aW9uOlxuICAgICAgICAvLyAtIEBhdHRyXG4gICAgICAgIGNvbmZpZyA9IHt9O1xuICAgICAgICBkZWNvcmF0b3IoY29uZmlnT3JUYXJnZXQsIHByb3ApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEludm9jYXRpb24gd2l0aCBvciB3L28gb3B0czpcbiAgICAvLyAtIEBhdHRyKClcbiAgICAvLyAtIEBhdHRyKHsuLi5vcHRzfSlcbiAgICBjb25maWcgPSBjb25maWdPclRhcmdldCA9PT0gdm9pZCAwID8ge30gOiBjb25maWdPclRhcmdldDtcbiAgICByZXR1cm4gZGVjb3JhdG9yO1xufVxuIiwiaW1wb3J0IHsgRkFTVCB9IGZyb20gXCIuLi9wbGF0Zm9ybS5qc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi9vYnNlcnZhdGlvbi9vYnNlcnZhYmxlLmpzXCI7XG5pbXBvcnQgeyBFbGVtZW50U3R5bGVzIH0gZnJvbSBcIi4uL3N0eWxlcy9lbGVtZW50LXN0eWxlcy5qc1wiO1xuaW1wb3J0IHsgQXR0cmlidXRlRGVmaW5pdGlvbiB9IGZyb20gXCIuL2F0dHJpYnV0ZXMuanNcIjtcbmNvbnN0IGRlZmF1bHRTaGFkb3dPcHRpb25zID0geyBtb2RlOiBcIm9wZW5cIiB9O1xuY29uc3QgZGVmYXVsdEVsZW1lbnRPcHRpb25zID0ge307XG5jb25zdCBmYXN0UmVnaXN0cnkgPSBGQVNULmdldEJ5SWQoNCAvKiBlbGVtZW50UmVnaXN0cnkgKi8sICgpID0+IHtcbiAgICBjb25zdCB0eXBlVG9EZWZpbml0aW9uID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgcmVnaXN0ZXIoZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgaWYgKHR5cGVUb0RlZmluaXRpb24uaGFzKGRlZmluaXRpb24udHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlVG9EZWZpbml0aW9uLnNldChkZWZpbml0aW9uLnR5cGUsIGRlZmluaXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEJ5VHlwZShrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlVG9EZWZpbml0aW9uLmdldChrZXkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufSk7XG4vKipcbiAqIERlZmluZXMgbWV0YWRhdGEgZm9yIGEgRkFTVEVsZW1lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBGQVNURWxlbWVudERlZmluaXRpb24ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRkFTVEVsZW1lbnREZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdGhpcyBkZWZpbml0aW9uIGlzIGJlaW5nIGNyZWF0ZWQgZm9yLlxuICAgICAqIEBwYXJhbSBuYW1lT3JDb25maWcgLSBUaGUgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBkZWZpbmUgb3IgYSBjb25maWcgb2JqZWN0XG4gICAgICogdGhhdCBkZXNjcmliZXMgdGhlIGVsZW1lbnQgdG8gZGVmaW5lLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIG5hbWVPckNvbmZpZyA9IHR5cGUuZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckNvbmZpZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbmFtZU9yQ29uZmlnID0geyBuYW1lOiBuYW1lT3JDb25maWcgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lT3JDb25maWcubmFtZTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IG5hbWVPckNvbmZpZy50ZW1wbGF0ZTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IEF0dHJpYnV0ZURlZmluaXRpb24uY29sbGVjdCh0eXBlLCBuYW1lT3JDb25maWcuYXR0cmlidXRlcyk7XG4gICAgICAgIGNvbnN0IG9ic2VydmVkQXR0cmlidXRlcyA9IG5ldyBBcnJheShhdHRyaWJ1dGVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5TG9va3VwID0ge307XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgb2JzZXJ2ZWRBdHRyaWJ1dGVzW2ldID0gY3VycmVudC5hdHRyaWJ1dGU7XG4gICAgICAgICAgICBwcm9wZXJ0eUxvb2t1cFtjdXJyZW50Lm5hbWVdID0gY3VycmVudDtcbiAgICAgICAgICAgIGF0dHJpYnV0ZUxvb2t1cFtjdXJyZW50LmF0dHJpYnV0ZV0gPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gb2JzZXJ2ZWRBdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLnByb3BlcnR5TG9va3VwID0gcHJvcGVydHlMb29rdXA7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlTG9va3VwID0gYXR0cmlidXRlTG9va3VwO1xuICAgICAgICB0aGlzLnNoYWRvd09wdGlvbnMgPVxuICAgICAgICAgICAgbmFtZU9yQ29uZmlnLnNoYWRvd09wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICAgID8gZGVmYXVsdFNoYWRvd09wdGlvbnNcbiAgICAgICAgICAgICAgICA6IG5hbWVPckNvbmZpZy5zaGFkb3dPcHRpb25zID09PSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgICAgICAgIDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0U2hhZG93T3B0aW9ucyksIG5hbWVPckNvbmZpZy5zaGFkb3dPcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbGVtZW50T3B0aW9ucyA9XG4gICAgICAgICAgICBuYW1lT3JDb25maWcuZWxlbWVudE9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICAgID8gZGVmYXVsdEVsZW1lbnRPcHRpb25zXG4gICAgICAgICAgICAgICAgOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRFbGVtZW50T3B0aW9ucyksIG5hbWVPckNvbmZpZy5lbGVtZW50T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc3R5bGVzID1cbiAgICAgICAgICAgIG5hbWVPckNvbmZpZy5zdHlsZXMgPT09IHZvaWQgMFxuICAgICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgICAgOiBBcnJheS5pc0FycmF5KG5hbWVPckNvbmZpZy5zdHlsZXMpXG4gICAgICAgICAgICAgICAgICAgID8gRWxlbWVudFN0eWxlcy5jcmVhdGUobmFtZU9yQ29uZmlnLnN0eWxlcylcbiAgICAgICAgICAgICAgICAgICAgOiBuYW1lT3JDb25maWcuc3R5bGVzIGluc3RhbmNlb2YgRWxlbWVudFN0eWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBuYW1lT3JDb25maWcuc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICA6IEVsZW1lbnRTdHlsZXMuY3JlYXRlKFtuYW1lT3JDb25maWcuc3R5bGVzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGlzIGVsZW1lbnQgaGFzIGJlZW4gZGVmaW5lZCBpbiBhdCBsZWFzdCBvbmUgcmVnaXN0cnkuXG4gICAgICovXG4gICAgZ2V0IGlzRGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuICEhZmFzdFJlZ2lzdHJ5LmdldEJ5VHlwZSh0aGlzLnR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgY3VzdG9tIGVsZW1lbnQgYmFzZWQgb24gdGhpcyBkZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSByZWdpc3RyeSAtIFRoZSBlbGVtZW50IHJlZ2lzdHJ5IHRvIGRlZmluZSB0aGUgZWxlbWVudCBpbi5cbiAgICAgKi9cbiAgICBkZWZpbmUocmVnaXN0cnkgPSBjdXN0b21FbGVtZW50cykge1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICBpZiAoZmFzdFJlZ2lzdHJ5LnJlZ2lzdGVyKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSB0eXBlLnByb3RvdHlwZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgICAgIE9ic2VydmFibGUuZGVmaW5lUHJvcGVydHkocHJvdG8sIGF0dHJpYnV0ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBcIm9ic2VydmVkQXR0cmlidXRlc1wiLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMub2JzZXJ2ZWRBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlZ2lzdHJ5LmdldCh0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICByZWdpc3RyeS5kZWZpbmUodGhpcy5uYW1lLCB0eXBlLCB0aGlzLmVsZW1lbnRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vKipcbiAqIEdldHMgdGhlIGVsZW1lbnQgZGVmaW5pdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCB0eXBlLlxuICogQHBhcmFtIHR5cGUgLSBUaGUgY3VzdG9tIGVsZW1lbnQgdHlwZSB0byByZXRyaWV2ZSB0aGUgZGVmaW5pdGlvbiBmb3IuXG4gKi9cbkZBU1RFbGVtZW50RGVmaW5pdGlvbi5mb3JUeXBlID0gZmFzdFJlZ2lzdHJ5LmdldEJ5VHlwZTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImltcG9ydCB7IERPTSB9IGZyb20gXCIuLi9kb20uanNcIjtcbmltcG9ydCB7IFByb3BlcnR5Q2hhbmdlTm90aWZpZXIgfSBmcm9tIFwiLi4vb2JzZXJ2YXRpb24vbm90aWZpZXIuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRFeGVjdXRpb25Db250ZXh0LCBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uL29ic2VydmF0aW9uL29ic2VydmFibGUuanNcIjtcbmltcG9ydCB7IEZBU1RFbGVtZW50RGVmaW5pdGlvbiB9IGZyb20gXCIuL2Zhc3QtZGVmaW5pdGlvbnMuanNcIjtcbmNvbnN0IHNoYWRvd1Jvb3RzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGRlZmF1bHRFdmVudE9wdGlvbnMgPSB7XG4gICAgYnViYmxlczogdHJ1ZSxcbiAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICBjYW5jZWxhYmxlOiB0cnVlLFxufTtcbmZ1bmN0aW9uIGdldFNoYWRvd1Jvb3QoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LnNoYWRvd1Jvb3QgfHwgc2hhZG93Um9vdHMuZ2V0KGVsZW1lbnQpIHx8IG51bGw7XG59XG4vKipcbiAqIENvbnRyb2xzIHRoZSBsaWZlY3ljbGUgYW5kIHJlbmRlcmluZyBvZiBhIGBGQVNURWxlbWVudGAuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIGV4dGVuZHMgUHJvcGVydHlDaGFuZ2VOb3RpZmllciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIENvbnRyb2xsZXIgdG8gY29udHJvbCB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBiZSBjb250cm9sbGVkIGJ5IHRoaXMgY29udHJvbGxlci5cbiAgICAgKiBAcGFyYW0gZGVmaW5pdGlvbiAtIFRoZSBlbGVtZW50IGRlZmluaXRpb24gbWV0YWRhdGEgdGhhdCBpbnN0cnVjdHMgdGhpc1xuICAgICAqIGNvbnRyb2xsZXIgaW4gaG93IHRvIGhhbmRsZSByZW5kZXJpbmcgYW5kIG90aGVyIHBsYXRmb3JtIGludGVncmF0aW9ucy5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgICAgICB0aGlzLmJvdW5kT2JzZXJ2YWJsZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmJlaGF2aW9ycyA9IG51bGw7XG4gICAgICAgIHRoaXMubmVlZHNJbml0aWFsaXphdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3R5bGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgYWxsb3dzIE9ic2VydmFibGUuZ2V0Tm90aWZpZXIoLi4uKSB0byByZXR1cm4gdGhlIENvbnRyb2xsZXJcbiAgICAgICAgICogd2hlbiB0aGUgbm90aWZpZXIgZm9yIHRoZSBDb250cm9sbGVyIGl0c2VsZiBpcyBiZWluZyByZXF1ZXN0ZWQuIFRoZVxuICAgICAgICAgKiByZXN1bHQgaXMgdGhhdCB0aGUgT2JzZXJ2YWJsZSBzeXN0ZW0gZG9lcyBub3QgbmVlZCB0byBjcmVhdGUgYSBzZXBhcmF0ZVxuICAgICAgICAgKiBpbnN0YW5jZSBvZiBOb3RpZmllciBmb3Igb2JzZXJ2YWJsZXMgb24gdGhlIENvbnRyb2xsZXIuIFRoZSBjb21wb25lbnQgYW5kXG4gICAgICAgICAqIHRoZSBjb250cm9sbGVyIHdpbGwgbm93IHNoYXJlIHRoZSBzYW1lIG5vdGlmaWVyLCByZW1vdmluZyBvbmUtb2JqZWN0IGNvbnN0cnVjdFxuICAgICAgICAgKiBwZXIgd2ViIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGZhc3RDb250cm9sbGVyID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB2aWV3IGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VzdG9tIGVsZW1lbnQuXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGBudWxsYCB0aGVuIHRoZSBlbGVtZW50IGlzIG1hbmFnaW5nIGl0cyBvd24gcmVuZGVyaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgY29uc3Qgc2hhZG93T3B0aW9ucyA9IGRlZmluaXRpb24uc2hhZG93T3B0aW9ucztcbiAgICAgICAgaWYgKHNoYWRvd09wdGlvbnMgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IGVsZW1lbnQuYXR0YWNoU2hhZG93KHNoYWRvd09wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHNoYWRvd09wdGlvbnMubW9kZSA9PT0gXCJjbG9zZWRcIikge1xuICAgICAgICAgICAgICAgIHNoYWRvd1Jvb3RzLnNldChlbGVtZW50LCBzaGFkb3dSb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDYXB0dXJlIGFueSBvYnNlcnZhYmxlIHZhbHVlcyB0aGF0IHdlcmUgc2V0IGJ5IHRoZSBiaW5kaW5nIGVuZ2luZSBiZWZvcmVcbiAgICAgICAgLy8gdGhlIGJyb3dzZXIgdXBncmFkZWQgdGhlIGVsZW1lbnQuIFRoZW4gZGVsZXRlIHRoZSBwcm9wZXJ0eSBzaW5jZSBpdCB3aWxsXG4gICAgICAgIC8vIHNoYWRvdyB0aGUgZ2V0dGVyL3NldHRlciB0aGF0IGlzIHJlcXVpcmVkIHRvIG1ha2UgdGhlIG9ic2VydmFibGUgb3BlcmF0ZS5cbiAgICAgICAgLy8gTGF0ZXIsIGluIHRoZSBjb25uZWN0IGNhbGxiYWNrLCB3ZSdsbCByZS1hcHBseSB0aGUgdmFsdWVzLlxuICAgICAgICBjb25zdCBhY2Nlc3NvcnMgPSBPYnNlcnZhYmxlLmdldEFjY2Vzc29ycyhlbGVtZW50KTtcbiAgICAgICAgaWYgKGFjY2Vzc29ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBib3VuZE9ic2VydmFibGVzID0gKHRoaXMuYm91bmRPYnNlcnZhYmxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYWNjZXNzb3JzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBhY2Nlc3NvcnNbaV0ubmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVsZW1lbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZWxlbWVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBib3VuZE9ic2VydmFibGVzW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBjdXN0b20gZWxlbWVudCBoYXMgYmVlblxuICAgICAqIGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgZ2V0IGlzQ29ubmVjdGVkKCkge1xuICAgICAgICBPYnNlcnZhYmxlLnRyYWNrKHRoaXMsIFwiaXNDb25uZWN0ZWRcIik7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Nvbm5lY3RlZDtcbiAgICB9XG4gICAgc2V0SXNDb25uZWN0ZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSB2YWx1ZTtcbiAgICAgICAgT2JzZXJ2YWJsZS5ub3RpZnkodGhpcywgXCJpc0Nvbm5lY3RlZFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSB0ZW1wbGF0ZSB1c2VkIHRvIHJlbmRlciB0aGUgY29tcG9uZW50LlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyB2YWx1ZSBjYW4gb25seSBiZSBhY2N1cmF0ZWx5IHJlYWQgYWZ0ZXIgY29ubmVjdCBidXQgY2FuIGJlIHNldCBhdCBhbnkgdGltZS5cbiAgICAgKi9cbiAgICBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcbiAgICB9XG4gICAgc2V0IHRlbXBsYXRlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZW1wbGF0ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoIXRoaXMubmVlZHNJbml0aWFsaXphdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUZW1wbGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBwcmltYXJ5IHN0eWxlcyB1c2VkIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyB2YWx1ZSBjYW4gb25seSBiZSBhY2N1cmF0ZWx5IHJlYWQgYWZ0ZXIgY29ubmVjdCBidXQgY2FuIGJlIHNldCBhdCBhbnkgdGltZS5cbiAgICAgKi9cbiAgICBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGVzO1xuICAgIH1cbiAgICBzZXQgc3R5bGVzKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdHlsZXMgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVTdHlsZXModGhpcy5fc3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdHlsZXMgPSB2YWx1ZTtcbiAgICAgICAgaWYgKCF0aGlzLm5lZWRzSW5pdGlhbGl6YXRpb24gJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU3R5bGVzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHN0eWxlcyB0byB0aGlzIGVsZW1lbnQuIFByb3ZpZGluZyBhbiBIVE1MU3R5bGVFbGVtZW50IHdpbGwgYXR0YWNoIHRoZSBlbGVtZW50IGluc3RhbmNlIHRvIHRoZSBzaGFkb3dSb290LlxuICAgICAqIEBwYXJhbSBzdHlsZXMgLSBUaGUgc3R5bGVzIHRvIGFkZC5cbiAgICAgKi9cbiAgICBhZGRTdHlsZXMoc3R5bGVzKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFNoYWRvd1Jvb3QodGhpcy5lbGVtZW50KSB8fFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgICAgIGlmIChzdHlsZXMgaW5zdGFuY2VvZiBIVE1MU3R5bGVFbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQuYXBwZW5kKHN0eWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXN0eWxlcy5pc0F0dGFjaGVkVG8odGFyZ2V0KSkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQmVoYXZpb3JzID0gc3R5bGVzLmJlaGF2aW9ycztcbiAgICAgICAgICAgIHN0eWxlcy5hZGRTdHlsZXNUbyh0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUJlaGF2aW9ycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQmVoYXZpb3JzKHNvdXJjZUJlaGF2aW9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdHlsZXMgZnJvbSB0aGlzIGVsZW1lbnQuIFByb3ZpZGluZyBhbiBIVE1MU3R5bGVFbGVtZW50IHdpbGwgZGV0YWNoIHRoZSBlbGVtZW50IGluc3RhbmNlIGZyb20gdGhlIHNoYWRvd1Jvb3QuXG4gICAgICogQHBhcmFtIHN0eWxlcyAtIHRoZSBzdHlsZXMgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIHJlbW92ZVN0eWxlcyhzdHlsZXMpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0U2hhZG93Um9vdCh0aGlzLmVsZW1lbnQpIHx8XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgaWYgKHN0eWxlcyBpbnN0YW5jZW9mIEhUTUxTdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZW1vdmVDaGlsZChzdHlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0eWxlcy5pc0F0dGFjaGVkVG8odGFyZ2V0KSkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQmVoYXZpb3JzID0gc3R5bGVzLmJlaGF2aW9ycztcbiAgICAgICAgICAgIHN0eWxlcy5yZW1vdmVTdHlsZXNGcm9tKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoc291cmNlQmVoYXZpb3JzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCZWhhdmlvcnMoc291cmNlQmVoYXZpb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGJlaGF2aW9ycyB0byB0aGlzIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGJlaGF2aW9ycyAtIFRoZSBiZWhhdmlvcnMgdG8gYWRkLlxuICAgICAqL1xuICAgIGFkZEJlaGF2aW9ycyhiZWhhdmlvcnMpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0QmVoYXZpb3JzID0gdGhpcy5iZWhhdmlvcnMgfHwgKHRoaXMuYmVoYXZpb3JzID0gbmV3IE1hcCgpKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYmVoYXZpb3JzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYmVoYXZpb3JzVG9CaW5kID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGJlaGF2aW9yID0gYmVoYXZpb3JzW2ldO1xuICAgICAgICAgICAgaWYgKHRhcmdldEJlaGF2aW9ycy5oYXMoYmVoYXZpb3IpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0QmVoYXZpb3JzLnNldChiZWhhdmlvciwgdGFyZ2V0QmVoYXZpb3JzLmdldChiZWhhdmlvcikgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldEJlaGF2aW9ycy5zZXQoYmVoYXZpb3IsIDEpO1xuICAgICAgICAgICAgICAgIGJlaGF2aW9yc1RvQmluZC5wdXNoKGJlaGF2aW9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJlaGF2aW9yc1RvQmluZC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9yc1RvQmluZFtpXS5iaW5kKGVsZW1lbnQsIGRlZmF1bHRFeGVjdXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGJlaGF2aW9ycyBmcm9tIHRoaXMgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gYmVoYXZpb3JzIC0gVGhlIGJlaGF2aW9ycyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIGZvcmNlIC0gRm9yY2VzIHVuYmluZGluZyBvZiBiZWhhdmlvcnMuXG4gICAgICovXG4gICAgcmVtb3ZlQmVoYXZpb3JzKGJlaGF2aW9ycywgZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB0YXJnZXRCZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9ycztcbiAgICAgICAgaWYgKHRhcmdldEJlaGF2aW9ycyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGJlaGF2aW9ycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJlaGF2aW9yc1RvVW5iaW5kID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGJlaGF2aW9yID0gYmVoYXZpb3JzW2ldO1xuICAgICAgICAgICAgaWYgKHRhcmdldEJlaGF2aW9ycy5oYXMoYmVoYXZpb3IpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB0YXJnZXRCZWhhdmlvcnMuZ2V0KGJlaGF2aW9yKSAtIDE7XG4gICAgICAgICAgICAgICAgY291bnQgPT09IDAgfHwgZm9yY2VcbiAgICAgICAgICAgICAgICAgICAgPyB0YXJnZXRCZWhhdmlvcnMuZGVsZXRlKGJlaGF2aW9yKSAmJiBiZWhhdmlvcnNUb1VuYmluZC5wdXNoKGJlaGF2aW9yKVxuICAgICAgICAgICAgICAgICAgICA6IHRhcmdldEJlaGF2aW9ycy5zZXQoYmVoYXZpb3IsIGNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJlaGF2aW9yc1RvVW5iaW5kLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgYmVoYXZpb3JzVG9VbmJpbmRbaV0udW5iaW5kKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgY29ubmVjdGVkIGxpZmVjeWNsZSBiZWhhdmlvciBvbiB0aGUgYXNzb2NpYXRlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIG9uQ29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLm5lZWRzSW5pdGlhbGl6YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoSW5pdGlhbGl6YXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5iaW5kKGVsZW1lbnQsIGRlZmF1bHRFeGVjdXRpb25Db250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9ycztcbiAgICAgICAgaWYgKGJlaGF2aW9ycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbYmVoYXZpb3JdIG9mIGJlaGF2aW9ycykge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9yLmJpbmQoZWxlbWVudCwgZGVmYXVsdEV4ZWN1dGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SXNDb25uZWN0ZWQodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgZGlzY29ubmVjdGVkIGxpZmVjeWNsZSBiZWhhdmlvciBvbiB0aGUgYXNzb2NpYXRlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIG9uRGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldElzQ29ubmVjdGVkKGZhbHNlKTtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgaWYgKHZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmVoYXZpb3JzID0gdGhpcy5iZWhhdmlvcnM7XG4gICAgICAgIGlmIChiZWhhdmlvcnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtiZWhhdmlvcl0gb2YgYmVoYXZpb3JzKSB7XG4gICAgICAgICAgICAgICAgYmVoYXZpb3IudW5iaW5kKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIGF0dHJpYnV0ZSBjaGFuZ2VkIGNhbGxiYWNrIGZvciB0aGUgYXNzb2NpYXRlZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0aGF0IGNoYW5nZWQuXG4gICAgICogQHBhcmFtIG9sZFZhbHVlIC0gVGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIG5ld1ZhbHVlIC0gVGhlIG5ldyB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIG9uQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBjb25zdCBhdHRyRGVmID0gdGhpcy5kZWZpbml0aW9uLmF0dHJpYnV0ZUxvb2t1cFtuYW1lXTtcbiAgICAgICAgaWYgKGF0dHJEZWYgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgYXR0ckRlZi5vbkF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLmVsZW1lbnQsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhIGN1c3RvbSBIVE1MIGV2ZW50LlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIGRldGFpbCAtIFRoZSBldmVudCBkZXRhaWwgb2JqZWN0IHRvIHNlbmQgd2l0aCB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgZXZlbnQgb3B0aW9ucy4gQnkgZGVmYXVsdCBidWJibGVzIGFuZCBjb21wb3NlZC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIE9ubHkgZW1pdHMgZXZlbnRzIGlmIGNvbm5lY3RlZC5cbiAgICAgKi9cbiAgICBlbWl0KHR5cGUsIGRldGFpbCwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5faXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQodHlwZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgZGV0YWlsIH0sIGRlZmF1bHRFdmVudE9wdGlvbnMpLCBvcHRpb25zKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZmluaXNoSW5pdGlhbGl6YXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGJvdW5kT2JzZXJ2YWJsZXMgPSB0aGlzLmJvdW5kT2JzZXJ2YWJsZXM7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYW55IG9ic2VydmFibGVzIHRoYXQgd2VyZSBib3VuZCwgcmUtYXBwbHkgdGhlaXIgdmFsdWVzLlxuICAgICAgICBpZiAoYm91bmRPYnNlcnZhYmxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lcyA9IE9iamVjdC5rZXlzKGJvdW5kT2JzZXJ2YWJsZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcHJvcGVydHlOYW1lcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lc1tpXTtcbiAgICAgICAgICAgICAgICBlbGVtZW50W3Byb3BlcnR5TmFtZV0gPSBib3VuZE9ic2VydmFibGVzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJvdW5kT2JzZXJ2YWJsZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLmRlZmluaXRpb247XG4gICAgICAgIC8vIDEuIFRlbXBsYXRlIG92ZXJyaWRlcyB0YWtlIHRvcCBwcmVjZWRlbmNlLlxuICAgICAgICBpZiAodGhpcy5fdGVtcGxhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQucmVzb2x2ZVRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gMi4gQWxsb3cgZm9yIGVsZW1lbnQgaW5zdGFuY2Ugb3ZlcnJpZGVzIG5leHQuXG4gICAgICAgICAgICAgICAgdGhpcy5fdGVtcGxhdGUgPSB0aGlzLmVsZW1lbnQucmVzb2x2ZVRlbXBsYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWZpbml0aW9uLnRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gMy4gRGVmYXVsdCB0byB0aGUgc3RhdGljIGRlZmluaXRpb24uXG4gICAgICAgICAgICAgICAgdGhpcy5fdGVtcGxhdGUgPSBkZWZpbml0aW9uLnRlbXBsYXRlIHx8IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHRlbXBsYXRlIGFmdGVyIHRoZSBhYm92ZSBwcm9jZXNzLCByZW5kZXIgaXQuXG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGVtcGxhdGUsIHRoZW4gdGhlIGVsZW1lbnQgYXV0aG9yIGhhcyBvcHRlZCBpbnRvXG4gICAgICAgIC8vIGN1c3RvbSByZW5kZXJpbmcgYW5kIHRoZXkgd2lsbCBtYW5hZ2VkIHRoZSBzaGFkb3cgcm9vdCdzIGNvbnRlbnQgdGhlbXNlbHZlcy5cbiAgICAgICAgaWYgKHRoaXMuX3RlbXBsYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRlbXBsYXRlKHRoaXMuX3RlbXBsYXRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAxLiBTdHlsZXMgb3ZlcnJpZGVzIHRha2UgdG9wIHByZWNlZGVuY2UuXG4gICAgICAgIGlmICh0aGlzLl9zdHlsZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQucmVzb2x2ZVN0eWxlcykge1xuICAgICAgICAgICAgICAgIC8vIDIuIEFsbG93IGZvciBlbGVtZW50IGluc3RhbmNlIG92ZXJyaWRlcyBuZXh0LlxuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IHRoaXMuZWxlbWVudC5yZXNvbHZlU3R5bGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWZpbml0aW9uLnN0eWxlcykge1xuICAgICAgICAgICAgICAgIC8vIDMuIERlZmF1bHQgdG8gdGhlIHN0YXRpYyBkZWZpbml0aW9uLlxuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IGRlZmluaXRpb24uc3R5bGVzIHx8IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBzdHlsZXMgYWZ0ZXIgdGhlIGFib3ZlIHByb2Nlc3MsIGFkZCB0aGVtLlxuICAgICAgICBpZiAodGhpcy5fc3R5bGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFN0eWxlcyh0aGlzLl9zdHlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmVlZHNJbml0aWFsaXphdGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICAvLyBXaGVuIGdldHRpbmcgdGhlIGhvc3QgdG8gcmVuZGVyIHRvLCB3ZSBzdGFydCBieSBsb29raW5nXG4gICAgICAgIC8vIHVwIHRoZSBzaGFkb3cgcm9vdC4gSWYgdGhlcmUgaXNuJ3Qgb25lLCB0aGVuIHRoYXQgbWVhbnNcbiAgICAgICAgLy8gd2UncmUgZG9pbmcgYSBMaWdodCBET00gcmVuZGVyIHRvIHRoZSBlbGVtZW50J3MgZGlyZWN0IGNoaWxkcmVuLlxuICAgICAgICBjb25zdCBob3N0ID0gZ2V0U2hhZG93Um9vdChlbGVtZW50KSB8fCBlbGVtZW50O1xuICAgICAgICBpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgYSB2aWV3LCB3ZSBuZWVkIHRvIHVuYmluZCBhbmQgcmVtb3ZlIHRocm91Z2ggZGlzcG9zZS5cbiAgICAgICAgICAgIHRoaXMudmlldy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLm5lZWRzSW5pdGlhbGl6YXRpb24pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBwcmV2aW91cyBjdXN0b20gcmVuZGVyaW5nLCB3ZSBuZWVkIHRvIGNsZWFyIG91dCB0aGUgaG9zdC5cbiAgICAgICAgICAgIERPTS5yZW1vdmVDaGlsZE5vZGVzKGhvc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgLy8gSWYgYSBuZXcgdGVtcGxhdGUgd2FzIHByb3ZpZGVkLCByZW5kZXIgaXQuXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB0ZW1wbGF0ZS5yZW5kZXIoZWxlbWVudCwgaG9zdCwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9jYXRlcyBvciBjcmVhdGVzIGEgY29udHJvbGxlciBmb3IgdGhlIHNwZWNpZmllZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gcmV0dXJuIHRoZSBjb250cm9sbGVyIGZvci5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBzcGVjaWZpZWQgZWxlbWVudCBtdXN0IGhhdmUgYSB7QGxpbmsgRkFTVEVsZW1lbnREZWZpbml0aW9ufVxuICAgICAqIHJlZ2lzdGVyZWQgZWl0aGVyIHRocm91Z2ggdGhlIHVzZSBvZiB0aGUge0BsaW5rIGN1c3RvbUVsZW1lbnR9XG4gICAgICogZGVjb3JhdG9yIG9yIGEgY2FsbCB0byBgRkFTVEVsZW1lbnQuZGVmaW5lYC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yQ3VzdG9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBlbGVtZW50LiRmYXN0Q29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IEZBU1RFbGVtZW50RGVmaW5pdGlvbi5mb3JUeXBlKGVsZW1lbnQuY29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoZGVmaW5pdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEZBU1RFbGVtZW50IGRlZmluaXRpb24uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZWxlbWVudC4kZmFzdENvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcihlbGVtZW50LCBkZWZpbml0aW9uKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gXCIuL2NvbnRyb2xsZXIuanNcIjtcbmltcG9ydCB7IEZBU1RFbGVtZW50RGVmaW5pdGlvbiwgfSBmcm9tIFwiLi9mYXN0LWRlZmluaXRpb25zLmpzXCI7XG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG5mdW5jdGlvbiBjcmVhdGVGQVNURWxlbWVudChCYXNlVHlwZSkge1xuICAgIHJldHVybiBjbGFzcyBleHRlbmRzIEJhc2VUeXBlIHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICBDb250cm9sbGVyLmZvckN1c3RvbUVsZW1lbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgJGVtaXQodHlwZSwgZGV0YWlsLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZmFzdENvbnRyb2xsZXIuZW1pdCh0eXBlLCBkZXRhaWwsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy4kZmFzdENvbnRyb2xsZXIub25Db25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy4kZmFzdENvbnRyb2xsZXIub25EaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuJGZhc3RDb250cm9sbGVyLm9uQXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBBIG1pbmltYWwgYmFzZSBjbGFzcyBmb3IgRkFTVEVsZW1lbnRzIHRoYXQgYWxzbyBwcm92aWRlc1xuICogc3RhdGljIGhlbHBlcnMgZm9yIHdvcmtpbmcgd2l0aCBGQVNURWxlbWVudHMuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBGQVNURWxlbWVudCA9IE9iamVjdC5hc3NpZ24oY3JlYXRlRkFTVEVsZW1lbnQoSFRNTEVsZW1lbnQpLCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGQVNURWxlbWVudCBiYXNlIGNsYXNzIGluaGVyaXRlZCBmcm9tIHRoZVxuICAgICAqIHByb3ZpZGVkIGJhc2UgdHlwZS5cbiAgICAgKiBAcGFyYW0gQmFzZVR5cGUgLSBUaGUgYmFzZSBlbGVtZW50IHR5cGUgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqL1xuICAgIGZyb20oQmFzZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZBU1RFbGVtZW50KEJhc2VUeXBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBwbGF0Zm9ybSBjdXN0b20gZWxlbWVudCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdHlwZSBhbmQgZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRoZSBjdXN0b20gZWxlbWVudCB0eXBlIHRvIGRlZmluZS5cbiAgICAgKiBAcGFyYW0gbmFtZU9yRGVmIC0gVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgdG8gZGVmaW5lIG9yIGEgZGVmaW5pdGlvbiBvYmplY3RcbiAgICAgKiB0aGF0IGRlc2NyaWJlcyB0aGUgZWxlbWVudCB0byBkZWZpbmUuXG4gICAgICovXG4gICAgZGVmaW5lKHR5cGUsIG5hbWVPckRlZikge1xuICAgICAgICByZXR1cm4gbmV3IEZBU1RFbGVtZW50RGVmaW5pdGlvbih0eXBlLCBuYW1lT3JEZWYpLmRlZmluZSgpLnR5cGU7XG4gICAgfSxcbn0pO1xuLyoqXG4gKiBEZWNvcmF0b3I6IERlZmluZXMgYSBwbGF0Zm9ybSBjdXN0b20gZWxlbWVudCBiYXNlZCBvbiBgRkFTVEVsZW1lbnRgLlxuICogQHBhcmFtIG5hbWVPckRlZiAtIFRoZSBuYW1lIG9mIHRoZSBlbGVtZW50IHRvIGRlZmluZSBvciBhIGRlZmluaXRpb24gb2JqZWN0XG4gKiB0aGF0IGRlc2NyaWJlcyB0aGUgZWxlbWVudCB0byBkZWZpbmUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FbGVtZW50KG5hbWVPckRlZikge1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgbmV3IEZBU1RFbGVtZW50RGVmaW5pdGlvbih0eXBlLCBuYW1lT3JEZWYpLmRlZmluZSgpO1xuICAgIH07XG59XG4iLCIvKipcbiAqIEJpZyB0aGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZrbGV1dmVyIGFuZCB0aGUgaHR0cHM6Ly9naXRodWIuY29tL2F1cmVsaWEvYXVyZWxpYSBwcm9qZWN0XG4gKiBmb3IgdGhlIGJ1bGsgb2YgdGhpcyBjb2RlIGFuZCBtYW55IG9mIHRoZSBhc3NvY2lhdGVkIHRlc3RzLlxuICovXG5pbXBvcnQgeyBlbXB0eUFycmF5LCBGQVNURWxlbWVudCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLy8gVGlueSBwb2x5ZmlsbCBmb3IgVHlwZVNjcmlwdCdzIFJlZmxlY3QgbWV0YWRhdGEgQVBJLlxuY29uc3QgbWV0YWRhdGFCeVRhcmdldCA9IG5ldyBNYXAoKTtcbmlmICghKFwibWV0YWRhdGFcIiBpbiBSZWZsZWN0KSkge1xuICAgIFJlZmxlY3QubWV0YWRhdGEgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShrZXksIHZhbHVlLCB0YXJnZXQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1ldGFkYXRhID0gbWV0YWRhdGFCeVRhcmdldC5nZXQodGFyZ2V0KTtcbiAgICAgICAgaWYgKG1ldGFkYXRhID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG1ldGFkYXRhQnlUYXJnZXQuc2V0KHRhcmdldCwgKG1ldGFkYXRhID0gbmV3IE1hcCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YWRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgUmVmbGVjdC5nZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChrZXksIHRhcmdldCkge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG1ldGFkYXRhQnlUYXJnZXQuZ2V0KHRhcmdldCk7XG4gICAgICAgIGlmIChtZXRhZGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGEuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9O1xufVxuLyoqXG4gKiBBIHV0aWxpdHkgY2xhc3MgdXNlZCB0aGF0IGNvbnN0cnVjdHMgYW5kIHJlZ2lzdGVycyByZXNvbHZlcnMgZm9yIGEgZGVwZW5kZW5jeVxuICogaW5qZWN0aW9uIGNvbnRhaW5lci4gU3VwcG9ydHMgYSBzdGFuZGFyZCBzZXQgb2Ygb2JqZWN0IGxpZmV0aW1lcy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc29sdmVyQnVpbGRlciB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciB0byBjcmVhdGUgcmVzb2x2ZXJzIGZvci5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byByZWdpc3RlciByZXNvbHZlcnMgdW5kZXIuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBrZXkpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVzb2x2ZXIgZm9yIGFuIGV4aXN0aW5nIG9iamVjdCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgaW5zdGFuY2UgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzb2x2ZXIuXG4gICAgICovXG4gICAgaW5zdGFuY2UodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJSZXNvbHZlcigwIC8qIGluc3RhbmNlICovLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvbHZlciB0aGF0IGVuZm9yY2VzIGEgc2luZ2xldG9uIGxpZmV0aW1lLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB0eXBlIHRvIGNyZWF0ZSBhbmQgY2FjaGUgdGhlIHNpbmdsZXRvbiBmb3IuXG4gICAgICogQHJldHVybnMgVGhlIHJlc29sdmVyLlxuICAgICAqL1xuICAgIHNpbmdsZXRvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKDEgLyogc2luZ2xldG9uICovLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvbHZlciB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgZm9yIGV2ZXJ5IGRlcGVuZGVuY3kgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdHlwZSB0byBjcmVhdGUgaW5zdGFuY2VzIG9mLlxuICAgICAqIEByZXR1cm5zIC0gVGhlIHJlc29sdmVyLlxuICAgICAqL1xuICAgIHRyYW5zaWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKDIgLyogdHJhbnNpZW50ICovLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvbHZlciB0aGF0IGludm9rZXMgYSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgZXZlcnkgZGVwZW5kZW5jeSByZXNvbHV0aW9uXG4gICAgICogcmVxdWVzdCwgYWxsb3dpbmcgY3VzdG9tIGxvZ2ljIHRvIHJldHVybiB0aGUgZGVwZW5kZW5jeS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgY2FsbGJhY2sgdG8gY2FsbCBkdXJpbmcgcmVzb2x1dGlvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzb2x2ZXIuXG4gICAgICovXG4gICAgY2FsbGJhY2sodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJSZXNvbHZlcigzIC8qIGNhbGxiYWNrICovLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXNvbHZlciB0aGF0IGludm9rZXMgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGUgZmlyc3QgdGltZSB0aGF0IGEgZGVwZW5kZW5jeVxuICAgICAqIHJlc29sdXRpb24gaXMgcmVxdWVzdGVkLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgdGhlbiBjYWNoZWQgYW5kIHByb3ZpZGVkIGZvciBhbGxcbiAgICAgKiBzdWJzZXF1ZW50IHJlcXVlc3RzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBjYWxsYmFjayB0byBjYWxsIGR1cmluZyB0aGUgZmlyc3QgcmVzb2x1dGlvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzb2x2ZXIuXG4gICAgICovXG4gICAgY2FjaGVkQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJSZXNvbHZlcigzIC8qIGNhbGxiYWNrICovLCBjYWNoZUNhbGxiYWNrUmVzdWx0KHZhbHVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzZXMgdGhlIGN1cnJlbnQga2V5IHRvIGEgZGlmZmVyZW50IGtleS5cbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb25LZXkgLSBUaGUga2V5IHRvIHBvaW50IHRoZSBhbGlhcyB0by5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzb2x2ZXIuXG4gICAgICovXG4gICAgYWxpYXNUbyhkZXN0aW5hdGlvbktleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKDUgLyogYWxpYXMgKi8sIGRlc3RpbmF0aW9uS2V5KTtcbiAgICB9XG4gICAgcmVnaXN0ZXJSZXNvbHZlcihzdHJhdGVneSwgc3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIGtleSB9ID0gdGhpcztcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmtleSA9ICh2b2lkIDApO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyLnJlZ2lzdGVyUmVzb2x2ZXIoa2V5LCBuZXcgUmVzb2x2ZXJJbXBsKGtleSwgc3RyYXRlZ3ksIHN0YXRlKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvbmVBcnJheVdpdGhQb3NzaWJsZVByb3BzKHNvdXJjZSkge1xuICAgIGNvbnN0IGNsb25lID0gc291cmNlLnNsaWNlKCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICghaXNBcnJheUluZGV4KGtleSkpIHtcbiAgICAgICAgICAgIGNsb25lW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xvbmU7XG59XG4vKipcbiAqIEEgc2V0IG9mIGRlZmF1bHQgcmVzb2x2ZXJzIHVzZWZ1bCBpbiBjb25maWd1cmluZyBhIGNvbnRhaW5lci5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IERlZmF1bHRSZXNvbHZlciA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIERpc2FibGVzIGF1dG8tcmVnaXN0cmF0aW9uIGFuZCB0aHJvd3MgZm9yIGFsbCB1bi1yZWdpc3RlcmVkIGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byBjcmVhdGUgdGhlIHJlc29sdmVyIGZvci5cbiAgICAgKi9cbiAgICBub25lKGtleSkge1xuICAgICAgICB0aHJvdyBFcnJvcihgJHtrZXkudG9TdHJpbmcoKX0gbm90IHJlZ2lzdGVyZWQsIGRpZCB5b3UgZm9yZ2V0IHRvIGFkZCBAc2luZ2xldG9uKCk/YCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBkZWZhdWx0IHNpbmdsZXRvbiByZXNvbHV0aW9uIGJlaGF2aW9yIGR1cmluZyBhdXRvLXJlZ2lzdHJhdGlvbi5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byBjcmVhdGUgdGhlIHJlc29sdmVyIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzb2x2ZXIuXG4gICAgICovXG4gICAgc2luZ2xldG9uKGtleSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVySW1wbChrZXksIDEgLyogc2luZ2xldG9uICovLCBrZXkpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgZGVmYXVsdCB0cmFuc2llbnQgcmVzb2x1dGlvbiBiZWhhdmlvciBkdXJpbmcgYXV0by1yZWdpc3RyYXRpb24uXG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gY3JlYXRlIHRoZSByZXNvbHZlciBmb3IuXG4gICAgICogQHJldHVybnMgVGhlIHJlc29sdmVyLlxuICAgICAqL1xuICAgIHRyYW5zaWVudChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlckltcGwoa2V5LCAyIC8qIHRyYW5zaWVudCAqLywga2V5KTtcbiAgICB9LFxufSk7XG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGEgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgQ29udGFpbmVyQ29uZmlndXJhdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdXNlZCB3aGVuIGNyZWF0aW5nIGEgRE9NLWRpc2Nvbm5lY3RlZCBjb250YWluZXIuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGUgZGVmYXVsdCBjcmVhdGVzIGEgcm9vdCBjb250YWluZXIsIHdpdGggbm8gcGFyZW50IGNvbnRhaW5lci4gSXQgZG9lcyBub3QgaGFuZGxlXG4gICAgICogb3duZXIgcmVxdWVzdHMgYW5kIGl0IHVzZXMgc2luZ2xldG9uIHJlc29sdXRpb24gYmVoYXZpb3IgZm9yIGF1dG8tcmVnaXN0cmF0aW9uLlxuICAgICAqL1xuICAgIGRlZmF1bHQ6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBwYXJlbnRMb2NhdG9yOiAoKSA9PiBudWxsLFxuICAgICAgICByZXNwb25zaWJsZUZvck93bmVyUmVxdWVzdHM6IGZhbHNlLFxuICAgICAgICBkZWZhdWx0UmVzb2x2ZXI6IERlZmF1bHRSZXNvbHZlci5zaW5nbGV0b24sXG4gICAgfSksXG59KTtcbmNvbnN0IGRlcGVuZGVuY3lMb29rdXAgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRQYXJhbVR5cGVzKGtleSkge1xuICAgIHJldHVybiAoVHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShrZXksIFR5cGUpO1xuICAgIH07XG59XG5sZXQgcm9vdERPTUNvbnRhaW5lciA9IG51bGw7XG4vKipcbiAqIFRoZSBnYXRld2F5IHRvIGRlcGVuZGVuY3kgaW5qZWN0aW9uIEFQSXMuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBESSA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNvbnRhaW5lci5cbiAgICAgKiBAcmV0dXJucyBBIG5ld2x5IGNyZWF0ZWQgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyLlxuICAgICAqL1xuICAgIGNyZWF0ZUNvbnRhaW5lcihjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250YWluZXJJbXBsKG51bGwsIE9iamVjdC5hc3NpZ24oe30sIENvbnRhaW5lckNvbmZpZ3VyYXRpb24uZGVmYXVsdCwgY29uZmlnKSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgZGVwZW5kZW5jaWVzXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gZmluZCB0aGUgcmVzcG9uc2libGUgY29udGFpbmVyIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgY29udGFpbmVyIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgZGVwZW5kZW5jaWVzIHRvIHRoZSBub2RlLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSBwYXJlbnQgY29udGFpbmVyIGlmIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgICAqIGRvZXMgbm90IGl0c2VsZiBob3N0IGEgY29udGFpbmVyIGNvbmZpZ3VyZWQgd2l0aCByZXNwb25zaWJsZUZvck93bmVyUmVxdWVzdHMuXG4gICAgICovXG4gICAgZmluZFJlc3BvbnNpYmxlQ29udGFpbmVyKG5vZGUpIHtcbiAgICAgICAgY29uc3Qgb3duZWQgPSBub2RlLiQkY29udGFpbmVyJCQ7XG4gICAgICAgIGlmIChvd25lZCAmJiBvd25lZC5yZXNwb25zaWJsZUZvck93bmVyUmVxdWVzdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBvd25lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gREkuZmluZFBhcmVudENvbnRhaW5lcihub2RlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvbnRhaW5lciB1cCB0aGUgRE9NIHRyZWUgZnJvbSB0aGlzIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGUgLSBUaGUgbm9kZSB0byBmaW5kIHRoZSBwYXJlbnQgY29udGFpbmVyIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGFyZW50IGNvbnRhaW5lciBvZiB0aGlzIG5vZGUuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHJlc3BvbnNpYmxlIGNvbnRhaW5lciBpZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAgICAgKiBkb2VzIG5vdCBpdHNlbGYgaG9zdCBhIGNvbnRhaW5lciBjb25maWd1cmVkIHdpdGggcmVzcG9uc2libGVGb3JPd25lclJlcXVlc3RzLlxuICAgICAqL1xuICAgIGZpbmRQYXJlbnRDb250YWluZXIobm9kZSkge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChESUxvY2F0ZVBhcmVudEV2ZW50VHlwZSwge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogeyBjb250YWluZXI6IHZvaWQgMCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmRldGFpbC5jb250YWluZXIgfHwgREkuZ2V0T3JDcmVhdGVET01Db250YWluZXIoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBkZXBlbmRlbmN5IGluamVjdGlvbiBjb250YWluZXIgaWYgb25lIGlzIGV4cGxpY2l0bHkgb3duZWQgYnkgdGhlIHNwZWNpZmllZFxuICAgICAqIG5vZGUuIElmIG9uZSBpcyBub3Qgb3duZWQsIHRoZW4gYSBuZXcgY29udGFpbmVyIGlzIGNyZWF0ZWQgYW5kIGFzc2lnbmVkIHRvIHRoZSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gZmluZCBvciBjcmVhdGUgdGhlIGNvbnRhaW5lciBmb3IuXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgY29udGFpbmVyIGlmIG9uZSBuZWVkcyB0byBiZSBjcmVhdGVkLlxuICAgICAqIEByZXR1cm5zIFRoZSBsb2NhdGVkIG9yIGNyZWF0ZWQgY29udGFpbmVyLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBBUEkgZG9lcyBub3Qgc2VhcmNoIGZvciBhIHJlc3BvbnNpYmxlIG9yIHBhcmVudCBjb250YWluZXIuIEl0IGxvb2tzIG9ubHkgZm9yIGEgY29udGFpbmVyXG4gICAgICogZGlyZWN0bHkgZGVmaW5lZCBvbiB0aGUgc3BlY2lmaWVkIG5vZGUgYW5kIGNyZWF0ZXMgb25lIGF0IHRoYXQgbG9jYXRpb24gaWYgb25lIGRvZXMgbm90XG4gICAgICogYWxyZWFkeSBleGlzdC5cbiAgICAgKi9cbiAgICBnZXRPckNyZWF0ZURPTUNvbnRhaW5lcihub2RlLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHJvb3RET01Db250YWluZXIgfHxcbiAgICAgICAgICAgICAgICAocm9vdERPTUNvbnRhaW5lciA9IG5ldyBDb250YWluZXJJbXBsKG51bGwsIE9iamVjdC5hc3NpZ24oe30sIENvbnRhaW5lckNvbmZpZ3VyYXRpb24uZGVmYXVsdCwgY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudExvY2F0b3I6ICgpID0+IG51bGwsXG4gICAgICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChub2RlLiQkY29udGFpbmVyJCQgfHxcbiAgICAgICAgICAgIG5ldyBDb250YWluZXJJbXBsKG5vZGUsIE9iamVjdC5hc3NpZ24oe30sIENvbnRhaW5lckNvbmZpZ3VyYXRpb24uZGVmYXVsdCwgY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgcGFyZW50TG9jYXRvcjogREkuZmluZFBhcmVudENvbnRhaW5lcixcbiAgICAgICAgICAgIH0pKSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBcImRlc2lnbjpwYXJhbXR5cGVzXCIgbWV0YWRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgdHlwZS5cbiAgICAgKiBAcGFyYW0gVHlwZSAtIFRoZSB0eXBlIHRvIGdldCB0aGUgbWV0YWRhdGEgZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSBhcnJheSBvciB1bmRlZmluZWQgaWYgbm8gbWV0YWRhdGEgaXMgZm91bmQuXG4gICAgICovXG4gICAgZ2V0RGVzaWduUGFyYW10eXBlczogZ2V0UGFyYW1UeXBlcyhcImRlc2lnbjpwYXJhbXR5cGVzXCIpLFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFwiZGk6cGFyYW10eXBlc1wiIG1ldGFkYXRhIGZvciB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAgICogQHBhcmFtIFR5cGUgLSBUaGUgdHlwZSB0byBnZXQgdGhlIG1ldGFkYXRhIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgYXJyYXkgb3IgdW5kZWZpbmVkIGlmIG5vIG1ldGFkYXRhIGlzIGZvdW5kLlxuICAgICAqL1xuICAgIGdldEFubm90YXRpb25QYXJhbXR5cGVzOiBnZXRQYXJhbVR5cGVzKFwiZGk6cGFyYW10eXBlc1wiKSxcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBUeXBlIC0gR2V0cyB0aGUgXCJkaTpwYXJhbXR5cGVzXCIgbWV0YWRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgdHlwZS4gSWYgbm9uZSBpcyBmb3VuZCxcbiAgICAgKiBhbiBlbXB0eSBtZXRhZGF0YSBhcnJheSBpcyBjcmVhdGVkIGFuZCBhZGRlZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgYXJyYXkuXG4gICAgICovXG4gICAgZ2V0T3JDcmVhdGVBbm5vdGF0aW9uUGFyYW1UeXBlcyhUeXBlKSB7XG4gICAgICAgIGxldCBhbm5vdGF0aW9uUGFyYW10eXBlcyA9IHRoaXMuZ2V0QW5ub3RhdGlvblBhcmFtdHlwZXMoVHlwZSk7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uUGFyYW10eXBlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiZGk6cGFyYW10eXBlc1wiLCAoYW5ub3RhdGlvblBhcmFtdHlwZXMgPSBbXSksIFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbm5vdGF0aW9uUGFyYW10eXBlcztcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRlcGVuZGVuY3kga2V5cyByZXByZXNlbnRpbmcgd2hhdCBpcyBuZWVkZWQgdG8gaW5zdGFudGlhdGUgdGhlIHNwZWNpZmllZCB0eXBlLlxuICAgICAqIEBwYXJhbSBUeXBlIC0gVGhlIHR5cGUgdG8gZ2V0IHRoZSBkZXBlbmRlbmNpZXMgZm9yLlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGRlcGVuZGVuY3kga2V5cy5cbiAgICAgKi9cbiAgICBnZXREZXBlbmRlbmNpZXMoVHlwZSkge1xuICAgICAgICAvLyBOb3RlOiBFdmVyeSBkZXRhaWwgb2YgdGhpcyBnZXREZXBlbmRlbmNpZXMgbWV0aG9kIGlzIHByZXR0eSBkZWxpYmVyYXRlIGF0IHRoZSBtb21lbnQsIGFuZCBwcm9iYWJseSBub3QgeWV0IDEwMCUgdGVzdGVkIGZyb20gZXZlcnkgcG9zc2libGUgYW5nbGUsXG4gICAgICAgIC8vIHNvIGJlIGNhcmVmdWwgd2l0aCBtYWtpbmcgY2hhbmdlcyBoZXJlIGFzIGl0IGNhbiBoYXZlIGEgaHVnZSBpbXBhY3Qgb24gY29tcGxleCBlbmQgdXNlciBhcHBzLlxuICAgICAgICAvLyBQcmVmZXJhYmx5LCBvbmx5IG1ha2UgY2hhbmdlcyB0byB0aGUgZGVwZW5kZW5jeSByZXNvbHV0aW9uIHByb2Nlc3MgdmlhIGEgUkZDLlxuICAgICAgICBsZXQgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jeUxvb2t1cC5nZXQoVHlwZSk7XG4gICAgICAgIGlmIChkZXBlbmRlbmNpZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgLy8gVHlwZS5sZW5ndGggaXMgdGhlIG51bWJlciBvZiBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLiBJZiB0aGlzIGlzIDAsIGl0IGNvdWxkIG1lYW4gdGhlIGNsYXNzIGhhcyBhbiBlbXB0eSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgLy8gYnV0IGl0IGNvdWxkIGFsc28gbWVhbiB0aGUgY2xhc3MgaGFzIG5vIGNvbnN0cnVjdG9yIGF0IGFsbCAoaW4gd2hpY2ggY2FzZSBpdCBpbmhlcml0cyB0aGUgY29uc3RydWN0b3IgZnJvbSB0aGUgcHJvdG90eXBlKS5cbiAgICAgICAgICAgIC8vIE5vbi16ZXJvIGNvbnN0cnVjdG9yIGxlbmd0aCArIG5vIHBhcmFtdHlwZXMgbWVhbnMgZW1pdERlY29yYXRvck1ldGFkYXRhIGlzIG9mZiwgb3IgdGhlIGNsYXNzIGhhcyBubyBkZWNvcmF0b3IuXG4gICAgICAgICAgICAvLyBXZSdyZSBub3QgZG9pbmcgYW55dGhpbmcgd2l0aCB0aGUgYWJvdmUgcmlnaHQgbm93LCBidXQgaXQncyBnb29kIHRvIGtlZXAgaW4gbWluZCBmb3IgYW55IGZ1dHVyZSBpc3N1ZXMuXG4gICAgICAgICAgICBjb25zdCBpbmplY3QgPSBUeXBlLmluamVjdDtcbiAgICAgICAgICAgIGlmIChpbmplY3QgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIC8vIGRlc2lnbjpwYXJhbXR5cGVzIGlzIHNldCBieSB0c2Mgd2hlbiBlbWl0RGVjb3JhdG9yTWV0YWRhdGEgaXMgZW5hYmxlZC5cbiAgICAgICAgICAgICAgICBjb25zdCBkZXNpZ25QYXJhbXR5cGVzID0gREkuZ2V0RGVzaWduUGFyYW10eXBlcyhUeXBlKTtcbiAgICAgICAgICAgICAgICAvLyBkaTpwYXJhbXR5cGVzIGlzIHNldCBieSB0aGUgcGFyYW1ldGVyIGRlY29yYXRvciBmcm9tIERJLmNyZWF0ZUludGVyZmFjZSBvciBieSBAaW5qZWN0XG4gICAgICAgICAgICAgICAgY29uc3QgYW5ub3RhdGlvblBhcmFtdHlwZXMgPSBESS5nZXRBbm5vdGF0aW9uUGFyYW10eXBlcyhUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzaWduUGFyYW10eXBlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uUGFyYW10eXBlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGdvIHVwIHRoZSBwcm90b3R5cGUgaWYgbmVpdGhlciBzdGF0aWMgaW5qZWN0IG5vciBhbnkgb2YgdGhlIHBhcmFtdHlwZXMgaXMgZGVmaW5lZCwgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIHNvdW5kIHdheSB0byBtZXJnZSBhIHR5cGUncyBkZXBzIHdpdGggaXRzIHByb3RvdHlwZSdzIGRlcHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm90byA9PT0gXCJmdW5jdGlvblwiICYmIFByb3RvICE9PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBjbG9uZUFycmF5V2l0aFBvc3NpYmxlUHJvcHMoREkuZ2V0RGVwZW5kZW5jaWVzKFByb3RvKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGRlc2lnbjpwYXJhbXR5cGVzIHNvIGp1c3QgdXNlIHRoZSBkaTpwYXJhbXR5cGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBjbG9uZUFycmF5V2l0aFBvc3NpYmxlUHJvcHMoYW5ub3RhdGlvblBhcmFtdHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFubm90YXRpb25QYXJhbXR5cGVzID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gZGk6cGFyYW10eXBlcyBzbyBqdXN0IHVzZSB0aGUgZGVzaWduOnBhcmFtdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gY2xvbmVBcnJheVdpdGhQb3NzaWJsZVByb3BzKGRlc2lnblBhcmFtdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UndmUgZ290IGJvdGgsIHNvIG1lcmdlIHRoZW0gKGluIGNhc2Ugb2YgY29uZmxpY3Qgb24gc2FtZSBpbmRleCwgZGk6cGFyYW10eXBlcyB0YWtlIHByZWNlZGVuY2UpXG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IGNsb25lQXJyYXlXaXRoUG9zc2libGVQcm9wcyhkZXNpZ25QYXJhbXR5cGVzKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlbiA9IGFubm90YXRpb25QYXJhbXR5cGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF1QW5ub3RhdGlvblBhcmFtdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVBbm5vdGF0aW9uUGFyYW10eXBlID0gYW5ub3RhdGlvblBhcmFtdHlwZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXVBbm5vdGF0aW9uUGFyYW10eXBlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXNbaV0gPSBhdUFubm90YXRpb25QYXJhbXR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFubm90YXRpb25QYXJhbXR5cGVzKTtcbiAgICAgICAgICAgICAgICAgICAgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXlJbmRleChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzW2tleV0gPSBhbm5vdGF0aW9uUGFyYW10eXBlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHBhcmFtdHlwZXMgaWYgd2UgaGF2ZSBzdGF0aWMgaW5qZWN0XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gY2xvbmVBcnJheVdpdGhQb3NzaWJsZVByb3BzKGluamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXBlbmRlbmN5TG9va3VwLnNldChUeXBlLCBkZXBlbmRlbmNpZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXBlbmRlbmNpZXM7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgcHJvcGVydHkgb24gYSB3ZWIgY29tcG9uZW50IGNsYXNzLiBUaGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSB3aWxsXG4gICAgICogYmUgcmVzb2x2ZWQgZnJvbSB0aGUgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyIHJlc3BvbnNpYmxlIGZvciB0aGUgZWxlbWVudFxuICAgICAqIGluc3RhbmNlLCBiYXNlZCBvbiB3aGVyZSBpdCBpcyBjb25uZWN0ZWQgaW4gdGhlIERPTS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBkZWZpbmUgdGhlIHByb3BlcnR5IG9uLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZGVmaW5lLlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUgZGVwZW5kZW5jeSBpbmplY3Rpb24ga2V5LlxuICAgICAqIEBwYXJhbSByZXNwZWN0Q29ubmVjdGlvbiAtIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byB1cGRhdGUgdGhlIHByb3BlcnR5IHZhbHVlIGlmIHRoZVxuICAgICAqIGhvc3RpbmcgY29tcG9uZW50IGlzIGRpc2Nvbm5lY3RlZCBhbmQgdGhlbiByZS1jb25uZWN0ZWQgYXQgYSBkaWZmZXJlbnQgbG9jYXRpb24gaW4gdGhlIERPTS5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSByZXNwZWN0Q29ubmVjdGlvbiBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIGVsZW1lbnRzIHRoYXQgZGVzY2VuZCBmcm9tIEZBU1RFbGVtZW50LlxuICAgICAqL1xuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlOYW1lLCBrZXksIHJlc3BlY3RDb25uZWN0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgZGlQcm9wZXJ0eUtleSA9IGAkZGlfJHtwcm9wZXJ0eU5hbWV9YDtcbiAgICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5TmFtZSwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpc1tkaVByb3BlcnR5S2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gREkuZmluZFJlc3BvbnNpYmxlQ29udGFpbmVyKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IERJLmdldE9yQ3JlYXRlRE9NQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY29udGFpbmVyLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2RpUHJvcGVydHlLZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwZWN0Q29ubmVjdGlvbiAmJiB0aGlzIGluc3RhbmNlb2YgRkFTVEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vdGlmaWVyID0gdGhpcy4kZmFzdENvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGFpbmVyID0gREkuZmluZFJlc3BvbnNpYmxlQ29udGFpbmVyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3Q29udGFpbmVyLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tkaVByb3BlcnR5S2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZGlQcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpZXIubm90aWZ5KHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyLnN1YnNjcmliZSh7IGhhbmRsZUNoYW5nZSB9LCBcImlzQ29ubmVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGtleS5cbiAgICAgKiBAcGFyYW0gbmFtZUNvbmZpZ09yQ2FsbGJhY2sgLSBBIGZyaWVuZGx5IG5hbWUgZm9yIHRoZSBrZXkgb3IgYSBsYW1iZGEgdGhhdCBjb25maWd1cmVzIGFcbiAgICAgKiBkZWZhdWx0IHJlc29sdXRpb24gZm9yIHRoZSBkZXBlbmRlbmN5LlxuICAgICAqIEBwYXJhbSBjb25maWd1cm9yIC0gSWYgYSBmcmllbmRseSBuYW1lIHdhcyBwcm92aWRlZCBmb3IgdGhlIGZpcnN0IHBhcmFtZXRlciwgdGhlbiBhbiBvcHRpb25hbFxuICAgICAqIGxhbWJkYSB0aGF0IGNvbmZpZ3VyZXMgYSBkZWZhdWx0IHJlc29sdXRpb24gZm9yIHRoZSBkZXBlbmRlbmN5IGNhbiBiZSBwcm92aWRlZCBzZWNvbmQuXG4gICAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQga2V5LlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhlIGNyZWF0ZWQga2V5IGNhbiBiZSB1c2VkIGFzIGEgcHJvcGVydHkgZGVjb3JhdG9yIG9yIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBkZWNvcmF0b3IsXG4gICAgICogaW4gYWRkaXRpb24gdG8gaXRzIHN0YW5kYXJkIHVzZSBpbiBhbiBpbmplY3QgYXJyYXkgb3IgdGhyb3VnaCBkaXJlY3QgY29udGFpbmVyIEFQSXMuXG4gICAgICovXG4gICAgY3JlYXRlSW50ZXJmYWNlKG5hbWVDb25maWdPckNhbGxiYWNrLCBjb25maWd1cm9yKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyZSA9IHR5cGVvZiBuYW1lQ29uZmlnT3JDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IG5hbWVDb25maWdPckNhbGxiYWNrXG4gICAgICAgICAgICA6IGNvbmZpZ3Vyb3I7XG4gICAgICAgIGNvbnN0IGZyaWVuZGx5TmFtZSA9IHR5cGVvZiBuYW1lQ29uZmlnT3JDYWxsYmFjayA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgPyBuYW1lQ29uZmlnT3JDYWxsYmFja1xuICAgICAgICAgICAgOiBuYW1lQ29uZmlnT3JDYWxsYmFjayAmJiBcImZyaWVuZGx5TmFtZVwiIGluIG5hbWVDb25maWdPckNhbGxiYWNrXG4gICAgICAgICAgICAgICAgPyBuYW1lQ29uZmlnT3JDYWxsYmFjay5mcmllbmRseU5hbWUgfHwgZGVmYXVsdEZyaWVuZGx5TmFtZVxuICAgICAgICAgICAgICAgIDogZGVmYXVsdEZyaWVuZGx5TmFtZTtcbiAgICAgICAgY29uc3QgcmVzcGVjdENvbm5lY3Rpb24gPSB0eXBlb2YgbmFtZUNvbmZpZ09yQ2FsbGJhY2sgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogbmFtZUNvbmZpZ09yQ2FsbGJhY2sgJiYgXCJyZXNwZWN0Q29ubmVjdGlvblwiIGluIG5hbWVDb25maWdPckNhbGxiYWNrXG4gICAgICAgICAgICAgICAgPyBuYW1lQ29uZmlnT3JDYWxsYmFjay5yZXNwZWN0Q29ubmVjdGlvbiB8fCBmYWxzZVxuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IEludGVyZmFjZSA9IGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsIHx8IG5ldy50YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcmVnaXN0cmF0aW9uIGZvciBpbnRlcmZhY2U6ICcke0ludGVyZmFjZS5mcmllbmRseU5hbWV9J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgREkuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgSW50ZXJmYWNlLCByZXNwZWN0Q29ubmVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uUGFyYW10eXBlcyA9IERJLmdldE9yQ3JlYXRlQW5ub3RhdGlvblBhcmFtVHlwZXModGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uUGFyYW10eXBlc1tpbmRleF0gPSBJbnRlcmZhY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEludGVyZmFjZS4kaXNJbnRlcmZhY2UgPSB0cnVlO1xuICAgICAgICBJbnRlcmZhY2UuZnJpZW5kbHlOYW1lID0gZnJpZW5kbHlOYW1lID09IG51bGwgPyBcIihhbm9ueW1vdXMpXCIgOiBmcmllbmRseU5hbWU7XG4gICAgICAgIGlmIChjb25maWd1cmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgSW50ZXJmYWNlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lciwga2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyZShuZXcgUmVzb2x2ZXJCdWlsZGVyKGNvbnRhaW5lciwga2V5ICE9PSBudWxsICYmIGtleSAhPT0gdm9pZCAwID8ga2V5IDogSW50ZXJmYWNlKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIEludGVyZmFjZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBJbnRlcmZhY2VTeW1ib2w8JHtJbnRlcmZhY2UuZnJpZW5kbHlOYW1lfT5gO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gSW50ZXJmYWNlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQSBkZWNvcmF0b3IgdGhhdCBzcGVjaWZpZXMgd2hhdCB0byBpbmplY3QgaW50byBpdHMgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSBkZXBlbmRlbmNpZXMgLSBUaGUgZGVwZW5kZW5jaWVzIHRvIGluamVjdC5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGVjb3JhdG9yIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHRhcmdldCBjbGFzcy5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBkZWNvcmF0b3IgY2FuIGJlIHVzZWQgdG8gZGVjb3JhdGUgYSBjbGFzcywgbGlzdGluZyBhbGwgb2YgdGhlIGNsYXNzZXMgZGVwZW5kZW5jaWVzLlxuICAgICAqIE9yIGl0IGNhbiBiZSB1c2VkIHRvIGRlY29yYXRlIGEgY29uc3RydWN0b3IgcGFyYW10ZXIsIGluZGljYXRpbmcgd2hhdCB0byBpbmplY3QgZm9yIHRoYXRcbiAgICAgKiBwYXJhbWV0ZXIuXG4gICAgICogT3IgaXQgY2FuIGJlIHVzZWQgZm9yIGEgd2ViIGNvbXBvbmVudCBwcm9wZXJ0eSwgaW5kaWNhdGluZyB3aGF0IHRoYXQgcHJvcGVydHkgc2hvdWxkIHJlc29sdmUgdG8uXG4gICAgICovXG4gICAgaW5qZWN0KC4uLmRlcGVuZGVuY2llcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGEgcGFyYW1ldGVyIGRlY29yYXRvci5cbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uUGFyYW10eXBlcyA9IERJLmdldE9yQ3JlYXRlQW5ub3RhdGlvblBhcmFtVHlwZXModGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXAgPSBkZXBlbmRlbmNpZXNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGRlcCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25QYXJhbXR5cGVzW2Rlc2NyaXB0b3JdID0gZGVwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIERJLmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXBlbmRlbmNpZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5ub3RhdGlvblBhcmFtdHlwZXMgPSBkZXNjcmlwdG9yXG4gICAgICAgICAgICAgICAgICAgID8gREkuZ2V0T3JDcmVhdGVBbm5vdGF0aW9uUGFyYW1UeXBlcyhkZXNjcmlwdG9yLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IERJLmdldE9yQ3JlYXRlQW5ub3RhdGlvblBhcmFtVHlwZXModGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBsZXQgZGVwO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcCA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uUGFyYW10eXBlc1tpXSA9IGRlcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyB0aGUgYHRhcmdldGAgY2xhc3MgYXMgYSB0cmFuc2llbnQgZGVwZW5kZW5jeTsgZWFjaCB0aW1lIHRoZSBkZXBlbmRlbmN5IGlzIHJlc29sdmVkXG4gICAgICogYSBuZXcgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBjbGFzcyAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFzIHRyYW5zaWVudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2FtZSBjbGFzcywgd2l0aCBhIHN0YXRpYyBgcmVnaXN0ZXJgIG1ldGhvZCB0aGF0IHRha2VzIGEgY29udGFpbmVyIGFuZCByZXR1cm5zIHRoZSBhcHByb3ByaWF0ZSByZXNvbHZlci5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogT24gYW4gZXhpc3RpbmcgY2xhc3NcbiAgICAgKiBgYGB0c1xuICAgICAqIGNsYXNzIEZvbyB7IH1cbiAgICAgKiBESS50cmFuc2llbnQoRm9vKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogSW5saW5lIGRlY2xhcmF0aW9uXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IEZvbyA9IERJLnRyYW5zaWVudChjbGFzcyB7IH0pO1xuICAgICAqIC8vIEZvbyBpcyBub3cgc3Ryb25nbHkgdHlwZWQgd2l0aCByZWdpc3RlclxuICAgICAqIEZvby5yZWdpc3Rlcihjb250YWluZXIpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHRyYW5zaWVudCh0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBSZWdpc3RyYXRpb24udHJhbnNpZW50KHRhcmdldCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb24ucmVnaXN0ZXIoY29udGFpbmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGFyZ2V0LnJlZ2lzdGVySW5SZXF1ZXN0b3IgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyB0aGUgYHRhcmdldGAgY2xhc3MgYXMgYSBzaW5nbGV0b24gZGVwZW5kZW5jeTsgdGhlIGNsYXNzIHdpbGwgb25seSBiZSBjcmVhdGVkIG9uY2UuIEVhY2hcbiAgICAgKiBjb25zZWN1dGl2ZSB0aW1lIHRoZSBkZXBlbmRlbmN5IGlzIHJlc29sdmVkLCB0aGUgc2FtZSBpbnN0YW5jZSB3aWxsIGJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBjbGFzcyAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFzIGEgc2luZ2xldG9uLlxuICAgICAqIEByZXR1cm5zIFRoZSBzYW1lIGNsYXNzLCB3aXRoIGEgc3RhdGljIGByZWdpc3RlcmAgbWV0aG9kIHRoYXQgdGFrZXMgYSBjb250YWluZXIgYW5kIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlIHJlc29sdmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogT24gYW4gZXhpc3RpbmcgY2xhc3NcbiAgICAgKiBgYGB0c1xuICAgICAqIGNsYXNzIEZvbyB7IH1cbiAgICAgKiBESS5zaW5nbGV0b24oRm9vKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogSW5saW5lIGRlY2xhcmF0aW9uXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBGb28gPSBESS5zaW5nbGV0b24oY2xhc3MgeyB9KTtcbiAgICAgKiAvLyBGb28gaXMgbm93IHN0cm9uZ2x5IHR5cGVkIHdpdGggcmVnaXN0ZXJcbiAgICAgKiBGb28ucmVnaXN0ZXIoY29udGFpbmVyKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzaW5nbGV0b24odGFyZ2V0LCBvcHRpb25zID0gZGVmYXVsdFNpbmdsZXRvbk9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSBSZWdpc3RyYXRpb24uc2luZ2xldG9uKHRhcmdldCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb24ucmVnaXN0ZXIoY29udGFpbmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGFyZ2V0LnJlZ2lzdGVySW5SZXF1ZXN0b3IgPSBvcHRpb25zLnNjb3BlZDtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LFxufSk7XG4vKipcbiAqIFRoZSBpbnRlcmZhY2Uga2V5IHRoYXQgcmVzb2x2ZXMgdGhlIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvbnRhaW5lciBpdHNlbGYuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBESS5jcmVhdGVJbnRlcmZhY2UoXCJDb250YWluZXJcIik7XG4vKipcbiAqIFRoZSBpbnRlcmZhY2Uga2V5IHRoYXQgcmVzb2x2ZXMgdGhlIHNlcnZpY2UgbG9jYXRvciBpdHNlbGYuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBTZXJ2aWNlTG9jYXRvciA9IENvbnRhaW5lcjtcbmZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyKGdldHRlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIERJLmluamVjdChyZXNvbHZlcikodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH07XG4gICAgICAgIHJlc29sdmVyLiRpc1Jlc29sdmVyID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZSA9IGZ1bmN0aW9uIChoYW5kbGVyLCByZXF1ZXN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXR0ZXIoa2V5LCBoYW5kbGVyLCByZXF1ZXN0b3IpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgfTtcbn1cbi8qKlxuICogQSBkZWNvcmF0b3IgdGhhdCBzcGVjaWZpZXMgd2hhdCB0byBpbmplY3QgaW50byBpdHMgdGFyZ2V0LlxuICogQHBhcmFtIGRlcGVuZGVuY2llcyAtIFRoZSBkZXBlbmRlbmNpZXMgdG8gaW5qZWN0LlxuICogQHJldHVybnMgVGhlIGRlY29yYXRvciB0byBiZSBhcHBsaWVkIHRvIHRoZSB0YXJnZXQgY2xhc3MuXG4gKiBAcmVtYXJrc1xuICogVGhlIGRlY29yYXRvciBjYW4gYmUgdXNlZCB0byBkZWNvcmF0ZSBhIGNsYXNzLCBsaXN0aW5nIGFsbCBvZiB0aGUgY2xhc3NlcyBkZXBlbmRlbmNpZXMuXG4gKiBPciBpdCBjYW4gYmUgdXNlZCB0byBkZWNvcmF0ZSBhIGNvbnN0cnVjdG9yIHBhcmFtdGVyLCBpbmRpY2F0aW5nIHdoYXQgdG8gaW5qZWN0IGZvciB0aGF0XG4gKiBwYXJhbWV0ZXIuXG4gKiBPciBpdCBjYW4gYmUgdXNlZCBmb3IgYSB3ZWIgY29tcG9uZW50IHByb3BlcnR5LCBpbmRpY2F0aW5nIHdoYXQgdGhhdCBwcm9wZXJ0eSBzaG91bGQgcmVzb2x2ZSB0by5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBpbmplY3QgPSBESS5pbmplY3Q7XG5mdW5jdGlvbiB0cmFuc2llbnREZWNvcmF0b3IodGFyZ2V0KSB7XG4gICAgcmV0dXJuIERJLnRyYW5zaWVudCh0YXJnZXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zaWVudCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0ID09IG51bGwgPyB0cmFuc2llbnREZWNvcmF0b3IgOiB0cmFuc2llbnREZWNvcmF0b3IodGFyZ2V0KTtcbn1cbmNvbnN0IGRlZmF1bHRTaW5nbGV0b25PcHRpb25zID0geyBzY29wZWQ6IGZhbHNlIH07XG5mdW5jdGlvbiBzaW5nbGV0b25EZWNvcmF0b3IodGFyZ2V0KSB7XG4gICAgcmV0dXJuIERJLnNpbmdsZXRvbih0YXJnZXQpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGV0b24odGFyZ2V0T3JPcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRPck9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gREkuc2luZ2xldG9uKHRhcmdldE9yT3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgICAgICByZXR1cm4gREkuc2luZ2xldG9uKCR0YXJnZXQsIHRhcmdldE9yT3B0aW9ucyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFsbFJlc29sdmVyKGdldHRlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCBzZWFyY2hBbmNlc3RvcnMpIHtcbiAgICAgICAgc2VhcmNoQW5jZXN0b3JzID0gISFzZWFyY2hBbmNlc3RvcnM7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIERJLmluamVjdChyZXNvbHZlcikodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH07XG4gICAgICAgIHJlc29sdmVyLiRpc1Jlc29sdmVyID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZSA9IGZ1bmN0aW9uIChoYW5kbGVyLCByZXF1ZXN0b3IpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uICovXG4gICAgICAgICAgICByZXR1cm4gZ2V0dGVyKGtleSwgaGFuZGxlciwgcmVxdWVzdG9yLCBzZWFyY2hBbmNlc3RvcnMpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgfTtcbn1cbi8qKlxuICogQSBkZWNvcmF0b3IgYW5kIERJIHJlc29sdmVyIHRoYXQgd2lsbCByZXNvbHZlIGFuIGFycmF5IG9mIGFsbCBkZXBlbmRlbmNpZXNcbiAqIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHJlc29sdmUgYWxsIGRlcGVuZGVuY2llcyBmb3IuXG4gKiBAcGFyYW0gc2VhcmNoQW5jZXN0b3JzIC0gW29wdGlvbmFsXSBJbmRpY2F0ZXMgd2hldGhlciB0byBzZWFyY2ggYW5jZXN0b3IgY29udGFpbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGFsbCA9IGNyZWF0ZUFsbFJlc29sdmVyKChrZXksIGhhbmRsZXIsIHJlcXVlc3Rvciwgc2VhcmNoQW5jZXN0b3JzKSA9PiByZXF1ZXN0b3IuZ2V0QWxsKGtleSwgc2VhcmNoQW5jZXN0b3JzKSk7XG4vKipcbiAqIEEgZGVjb3JhdG9yIHRoYXQgbGF6aWx5IGluamVjdHMgYSBkZXBlbmRlbmN5IGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBgS2V5YCBpcyBwcmVzZW50IGF0IHRoZSB0aW1lIG9mIGZ1bmN0aW9uIGNhbGwuXG4gKlxuICogQGV4YW1wbGVcbiAqIFlvdSBuZWVkIHRvIG1ha2UgeW91ciBhcmd1bWVudCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdHlwZSwgZm9yIGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjbGFzcyBGb28ge1xuICogICBjb25zdHJ1Y3RvciggQGxhenkoJ3JhbmRvbScpIHB1YmxpYyByYW5kb206ICgpID0+IG51bWJlciApXG4gKiB9XG4gKiBjb25zdCBmb28gPSBjb250YWluZXIuZ2V0KEZvbyk7IC8vIGluc3RhbmNlb2YgRm9vXG4gKiBmb28ucmFuZG9tKCk7IC8vIHRocm93c1xuICogYGBgXG4gKiB3b3VsZCB0aHJvdyBhbiBleGNlcHRpb24gYmVjYXVzZSB5b3UgaGF2ZW4ndCByZWdpc3RlcmVkIGAncmFuZG9tJ2AgYmVmb3JlIGNhbGxpbmcgdGhlIG1ldGhvZC5cbiAqIEBleGFtcGxlXG4gKiBUaGlzLCB3b3VsZCBnaXZlIHlvdSBhIG5ldyAnTWF0aC5yYW5kb20oKScgbnVtYmVyIGVhY2ggdGltZS5cbiAqIGBgYHRzXG4gKiBjbGFzcyBGb28ge1xuICogICBjb25zdHJ1Y3RvciggQGxhenkoJ3JhbmRvbScpIHB1YmxpYyByYW5kb206ICgpID0+IHJhbmRvbSApXG4gKiB9XG4gKiBjb250YWluZXIucmVnaXN0ZXIoUmVnaXN0cmF0aW9uLmNhbGxiYWNrKCdyYW5kb20nLCBNYXRoLnJhbmRvbSApKTtcbiAqIGNvbnRhaW5lci5nZXQoRm9vKS5yYW5kb20oKTsgLy8gc29tZSByYW5kb20gbnVtYmVyXG4gKiBjb250YWluZXIuZ2V0KEZvbykucmFuZG9tKCk7IC8vIGFub3RoZXIgcmFuZG9tIG51bWJlclxuICogYGBgXG4gKlxuICogYEBsYXp5YCBkb2VzIG5vdCBtYW5hZ2UgdGhlIGxpZmVjeWNsZSBvZiB0aGUgdW5kZXJseWluZyBrZXkuIElmIHlvdSB3YW50IGEgc2luZ2xldG9uLCB5b3UgaGF2ZSB0byByZWdpc3RlciBhcyBhXG4gKiBgc2luZ2xldG9uYCwgYHRyYW5zaWVudGAgd291bGQgYWxzbyBiZWhhdmUgYXMgeW91IHdvdWxkIGV4cGVjdCwgcHJvdmlkaW5nIHlvdSBhIG5ldyBpbnN0YW5jZSBlYWNoIHRpbWUuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gbGF6aWx5IHJlc29sdmUuXG4gKiBzZWUge0BsaW5rIERJLmNyZWF0ZUludGVyZmFjZX0gb24gaW50ZXJhY3Rpb25zIHdpdGggaW50ZXJmYWNlc1xuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGxhenkgPSBjcmVhdGVSZXNvbHZlcigoa2V5LCBoYW5kbGVyLCByZXF1ZXN0b3IpID0+IHtcbiAgICByZXR1cm4gKCkgPT4gcmVxdWVzdG9yLmdldChrZXkpO1xufSk7XG4vKipcbiAqIEEgZGVjb3JhdG9yIHRoYXQgYWxsb3dzIHlvdSB0byBvcHRpb25hbGx5IGluamVjdCBhIGRlcGVuZGVuY3kgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIFtbYEtleWBdXSBpcyBwcmVzZW50LCBmb3IgZXhhbXBsZTpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY2xhc3MgRm9vIHtcbiAqICAgY29uc3RydWN0b3IoIEBpbmplY3QoJ215c3RyaW5nJykgcHVibGljIHN0cjogc3RyaW5nID0gJ3NvbWVzdHJpbmcnIClcbiAqIH1cbiAqIGNvbnRhaW5lci5nZXQoRm9vKTsgLy8gdGhyb3dzXG4gKiBgYGBcbiAqIHdvdWxkIGZhaWxcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNsYXNzIEZvbyB7XG4gKiAgIGNvbnN0cnVjdG9yKCBAb3B0aW9uYWwoJ215c3RyaW5nJykgcHVibGljIHN0cjogc3RyaW5nID0gJ3NvbWVzdHJpbmcnIClcbiAqIH1cbiAqIGNvbnRhaW5lci5nZXQoRm9vKS5zdHIgLy8gc29tZXN0cmluZ1xuICogYGBgXG4gKiBpZiB5b3UgdXNlIGl0IHdpdGhvdXQgYSBkZWZhdWx0IGl0IHdpbGwgaW5qZWN0IGB1bmRlZmluZWRgLCBzbyByZW1lbWJlciB0byBtYXJrIHlvdXIgaW5wdXQgdHlwZSBhc1xuICogcG9zc2libHkgYHVuZGVmaW5lZGAhXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gb3B0aW9uYWxseSByZXNvbHZlLlxuICogc2VlIHtAbGluayBESS5jcmVhdGVJbnRlcmZhY2V9IG9uIGludGVyYWN0aW9ucyB3aXRoIGludGVyZmFjZXNcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvcHRpb25hbCA9IGNyZWF0ZVJlc29sdmVyKChrZXksIGhhbmRsZXIsIHJlcXVlc3RvcikgPT4ge1xuICAgIGlmIChyZXF1ZXN0b3IuaGFzKGtleSwgdHJ1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Rvci5nZXQoa2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufSk7XG4vKipcbiAqIEEgZGVjb3JhdG9yIHRoYXQgdGVsbHMgdGhlIGNvbnRhaW5lciBub3QgdG8gdHJ5IHRvIGluamVjdCBhIGRlcGVuZGVuY3kuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaWdub3JlKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICBESS5pbmplY3QoaWdub3JlKSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbn1cbi8vIEhhY2s6IGNhc3RpbmcgYmVsb3cgdXNlZCB0byBwcmV2ZW50IFRTIGZyb20gZ2VuZXJhdGUgYSBuYW1lc3BhY2Ugd2hpY2ggY2FuJ3QgYmUgY29tbWVudGVkXG4vLyBhbmQgcmVzdWx0cyBpbiBkb2N1bWVudGF0aW9uIHZhbGlkYXRpb24gZXJyb3JzLlxuaWdub3JlLiRpc1Jlc29sdmVyID0gdHJ1ZTtcbmlnbm9yZS5yZXNvbHZlID0gKCkgPT4gdW5kZWZpbmVkO1xuLyoqXG4gKiBBIGRlY29yYXRvciB0aGF0IGluZGljYXRlcyB0aGF0IGEgbmV3IGluc3RhbmNlIHNob3VsZCBiZSBpbmplY3RlZCBzY29wZWQgdG8gdGhlXG4gKiBjb250YWluZXIgdGhhdCByZXF1ZXN0ZWQgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIGtleSAtIFRoZSBkZXBlbmRlbmN5IGtleSBmb3IgdGhlIG5ldyBpbnN0YW5jZS5cbiAqIEByZW1hcmtzXG4gKiBUaGlzIGNyZWF0ZXMgYSByZXNvbHZlciB3aXRoIGFuIGluc3RhbmNlIHN0cmF0ZWd5IHBvaW50aW5nIHRvIHRoZSBuZXcgaW5zdGFuY2UsIGVmZmVjdGl2ZWx5XG4gKiBtYWtpbmcgdGhpcyBhIHNpbmdsZXRvbiwgc2NvcGVkIHRvIHRoZSBjb250YWluZXIgb3IgRE9NJ3Mgc3VidHJlZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBuZXdJbnN0YW5jZUZvclNjb3BlID0gY3JlYXRlUmVzb2x2ZXIoKGtleSwgaGFuZGxlciwgcmVxdWVzdG9yKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBjcmVhdGVOZXdJbnN0YW5jZShrZXksIGhhbmRsZXIpO1xuICAgIGNvbnN0IHJlc29sdmVyID0gbmV3IFJlc29sdmVySW1wbChrZXksIDAgLyogaW5zdGFuY2UgKi8sIGluc3RhbmNlKTtcbiAgICByZXF1ZXN0b3IucmVnaXN0ZXJSZXNvbHZlcihrZXksIHJlc29sdmVyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG59KTtcbi8qKlxuICogQSBkZWNvcmF0b3IgdGhhdCBpbmRpY2F0ZXMgdGhhdCBhIG5ldyBpbnN0YW5jZSBzaG91bGQgYmUgaW5qZWN0ZWQuXG4gKiBAcGFyYW0ga2V5IC0gVGhlIGRlcGVuZGVuY3kga2V5IGZvciB0aGUgbmV3IGluc3RhbmNlLlxuICogQHJlbWFya3NcbiAqIFRoZSBpbnN0YW5jZSBpcyBub3QgaW50ZXJuYWxseSBjYWNoZWQgd2l0aCBhIHJlc29sdmVyIGFzIG5ld0luc3RhbmNlRm9yU2NvcGUgZG9lcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBuZXdJbnN0YW5jZU9mID0gY3JlYXRlUmVzb2x2ZXIoKGtleSwgaGFuZGxlciwgX3JlcXVlc3RvcikgPT4gY3JlYXRlTmV3SW5zdGFuY2Uoa2V5LCBoYW5kbGVyKSk7XG5mdW5jdGlvbiBjcmVhdGVOZXdJbnN0YW5jZShrZXksIGhhbmRsZXIpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqL1xuICAgIHJldHVybiBoYW5kbGVyLmdldEZhY3Rvcnkoa2V5KS5jb25zdHJ1Y3QoaGFuZGxlcik7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgUmVzb2x2ZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihrZXksIHN0cmF0ZWd5LCBzdGF0ZSkge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMucmVzb2x2aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCAkaXNSZXNvbHZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJlZ2lzdGVyKGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gY29udGFpbmVyLnJlZ2lzdGVyUmVzb2x2ZXIodGhpcy5rZXksIHRoaXMpO1xuICAgIH1cbiAgICByZXNvbHZlKGhhbmRsZXIsIHJlcXVlc3Rvcikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBpbnN0YW5jZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNhc2UgMSAvKiBzaW5nbGV0b24gKi86IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXNvbHZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDeWNsaWMgZGVwZW5kZW5jeSBmb3VuZDogJHt0aGlzLnN0YXRlLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAuZ2V0RmFjdG9yeSh0aGlzLnN0YXRlKVxuICAgICAgICAgICAgICAgICAgICAuY29uc3RydWN0KHJlcXVlc3Rvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJhdGVneSA9IDAgLyogaW5zdGFuY2UgKi87XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMiAvKiB0cmFuc2llbnQgKi86IHtcbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgY3JlYXRlIHRyYW5zaWVudHMgZnJvbSB0aGUgcmVxdWVzdGluZyBjb250YWluZXJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWN0b3J5ID0gaGFuZGxlci5nZXRGYWN0b3J5KHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChmYWN0b3J5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVzb2x2ZXIgZm9yICR7U3RyaW5nKHRoaXMua2V5KX0gcmV0dXJuZWQgYSBudWxsIGZhY3RvcnlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkuY29uc3RydWN0KHJlcXVlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDMgLyogY2FsbGJhY2sgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUoaGFuZGxlciwgcmVxdWVzdG9yLCB0aGlzKTtcbiAgICAgICAgICAgIGNhc2UgNCAvKiBhcnJheSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZVswXS5yZXNvbHZlKGhhbmRsZXIsIHJlcXVlc3Rvcik7XG4gICAgICAgICAgICBjYXNlIDUgLyogYWxpYXMgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Rvci5nZXQodGhpcy5zdGF0ZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZXNvbHZlciBzdHJhdGVneSBzcGVjaWZpZWQ6ICR7dGhpcy5zdHJhdGVneX0uYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RmFjdG9yeShjb250YWluZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdHJhdGVneSkge1xuICAgICAgICAgICAgY2FzZSAxIC8qIHNpbmdsZXRvbiAqLzpcbiAgICAgICAgICAgIGNhc2UgMiAvKiB0cmFuc2llbnQgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXRGYWN0b3J5KHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgY2FzZSA1IC8qIGFsaWFzICovOlxuICAgICAgICAgICAgICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EgPSBjb250YWluZXIuZ2V0UmVzb2x2ZXIodGhpcy5zdGF0ZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRGYWN0b3J5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgY29udGFpbmVyKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbnVsbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjb250YWluZXJHZXRLZXkoZCkge1xuICAgIHJldHVybiB0aGlzLmdldChkKTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUluc3RhbmNlKGluc3QsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm0oaW5zdCk7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgRmFjdG9yeUltcGwge1xuICAgIGNvbnN0cnVjdG9yKFR5cGUsIGRlcGVuZGVuY2llcykge1xuICAgICAgICB0aGlzLlR5cGUgPSBUeXBlO1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1lcnMgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdHJ1Y3QoY29udGFpbmVyLCBkeW5hbWljRGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIGxldCBpbnN0YW5jZTtcbiAgICAgICAgaWYgKGR5bmFtaWNEZXBlbmRlbmNpZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgdGhpcy5UeXBlKC4uLnRoaXMuZGVwZW5kZW5jaWVzLm1hcChjb250YWluZXJHZXRLZXksIGNvbnRhaW5lcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgdGhpcy5UeXBlKC4uLnRoaXMuZGVwZW5kZW5jaWVzLm1hcChjb250YWluZXJHZXRLZXksIGNvbnRhaW5lciksIC4uLmR5bmFtaWNEZXBlbmRlbmNpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybWVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtZXJzLnJlZHVjZSh0cmFuc2Zvcm1JbnN0YW5jZSwgaW5zdGFuY2UpO1xuICAgIH1cbiAgICByZWdpc3RlclRyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICh0aGlzLnRyYW5zZm9ybWVycyB8fCAodGhpcy50cmFuc2Zvcm1lcnMgPSBbXSkpLnB1c2godHJhbnNmb3JtZXIpO1xuICAgIH1cbn1cbmNvbnN0IGNvbnRhaW5lclJlc29sdmVyID0ge1xuICAgICRpc1Jlc29sdmVyOiB0cnVlLFxuICAgIHJlc29sdmUoaGFuZGxlciwgcmVxdWVzdG9yKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0b3I7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc1JlZ2lzdHJ5KG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqLnJlZ2lzdGVyID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1NlbGZSZWdpc3RyeShvYmopIHtcbiAgICByZXR1cm4gaXNSZWdpc3RyeShvYmopICYmIHR5cGVvZiBvYmoucmVnaXN0ZXJJblJlcXVlc3RvciA9PT0gXCJib29sZWFuXCI7XG59XG5mdW5jdGlvbiBpc1JlZ2lzdGVySW5SZXF1ZXN0ZXIob2JqKSB7XG4gICAgcmV0dXJuIGlzU2VsZlJlZ2lzdHJ5KG9iaikgJiYgb2JqLnJlZ2lzdGVySW5SZXF1ZXN0b3I7XG59XG5mdW5jdGlvbiBpc0NsYXNzKG9iaikge1xuICAgIHJldHVybiBvYmoucHJvdG90eXBlICE9PSB2b2lkIDA7XG59XG5jb25zdCBJbnN0cmluc2ljVHlwZU5hbWVzID0gbmV3IFNldChbXG4gICAgXCJBcnJheVwiLFxuICAgIFwiQXJyYXlCdWZmZXJcIixcbiAgICBcIkJvb2xlYW5cIixcbiAgICBcIkRhdGFWaWV3XCIsXG4gICAgXCJEYXRlXCIsXG4gICAgXCJFcnJvclwiLFxuICAgIFwiRXZhbEVycm9yXCIsXG4gICAgXCJGbG9hdDMyQXJyYXlcIixcbiAgICBcIkZsb2F0NjRBcnJheVwiLFxuICAgIFwiRnVuY3Rpb25cIixcbiAgICBcIkludDhBcnJheVwiLFxuICAgIFwiSW50MTZBcnJheVwiLFxuICAgIFwiSW50MzJBcnJheVwiLFxuICAgIFwiTWFwXCIsXG4gICAgXCJOdW1iZXJcIixcbiAgICBcIk9iamVjdFwiLFxuICAgIFwiUHJvbWlzZVwiLFxuICAgIFwiUmFuZ2VFcnJvclwiLFxuICAgIFwiUmVmZXJlbmNlRXJyb3JcIixcbiAgICBcIlJlZ0V4cFwiLFxuICAgIFwiU2V0XCIsXG4gICAgXCJTaGFyZWRBcnJheUJ1ZmZlclwiLFxuICAgIFwiU3RyaW5nXCIsXG4gICAgXCJTeW50YXhFcnJvclwiLFxuICAgIFwiVHlwZUVycm9yXCIsXG4gICAgXCJVaW50OEFycmF5XCIsXG4gICAgXCJVaW50OENsYW1wZWRBcnJheVwiLFxuICAgIFwiVWludDE2QXJyYXlcIixcbiAgICBcIlVpbnQzMkFycmF5XCIsXG4gICAgXCJVUklFcnJvclwiLFxuICAgIFwiV2Vha01hcFwiLFxuICAgIFwiV2Vha1NldFwiLFxuXSk7XG5jb25zdCBESUxvY2F0ZVBhcmVudEV2ZW50VHlwZSA9IFwiX19ESV9MT0NBVEVfUEFSRU5UX19cIjtcbmNvbnN0IGZhY3RvcmllcyA9IG5ldyBNYXAoKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250YWluZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRlcHRoID0gMDtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvd25lci4kJGNvbnRhaW5lciQkID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc29sdmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5yZXNvbHZlcnMuc2V0KENvbnRhaW5lciwgY29udGFpbmVyUmVzb2x2ZXIpO1xuICAgICAgICBpZiAob3duZXIgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICBvd25lci5hZGRFdmVudExpc3RlbmVyKERJTG9jYXRlUGFyZW50RXZlbnRUeXBlLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmNvbXBvc2VkUGF0aCgpWzBdICE9PSB0aGlzLm93bmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuZGV0YWlsLmNvbnRhaW5lciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLmNvbmZpZy5wYXJlbnRMb2NhdG9yKHRoaXMub3duZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuICAgIGdldCBkZXB0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID09PSBudWxsID8gMCA6IHRoaXMucGFyZW50LmRlcHRoICsgMTtcbiAgICB9XG4gICAgZ2V0IHJlc3BvbnNpYmxlRm9yT3duZXJSZXF1ZXN0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnJlc3BvbnNpYmxlRm9yT3duZXJSZXF1ZXN0cztcbiAgICB9XG4gICAgcmVnaXN0ZXJXaXRoQ29udGV4dChjb250ZXh0LCAuLi5wYXJhbXMpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5yZWdpc3RlciguLi5wYXJhbXMpO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVnaXN0ZXIoLi4ucGFyYW1zKSB7XG4gICAgICAgIGlmICgrK3RoaXMucmVnaXN0ZXJEZXB0aCA9PT0gMTAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gYXV0b3JlZ2lzdGVyIGRlcGVuZGVuY3lcIik7XG4gICAgICAgICAgICAvLyBNb3N0IGxpa2VseSBjYXVzZSBpcyB0cnlpbmcgdG8gcmVnaXN0ZXIgYSBwbGFpbiBvYmplY3QgdGhhdCBkb2VzIG5vdCBoYXZlIGFcbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIG1ldGhvZCBhbmQgaXMgbm90IGEgY2xhc3MgY29uc3RydWN0b3JcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgbGV0IGtleXM7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgbGV0IGo7XG4gICAgICAgIGxldCBqajtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcGFyYW1zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBwYXJhbXNbaV07XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZWdpc3RyeShjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQucmVnaXN0ZXIodGhpcywgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0NsYXNzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgUmVnaXN0cmF0aW9uLnNpbmdsZXRvbihjdXJyZW50LCBjdXJyZW50KS5yZWdpc3Rlcih0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBqID0gMDtcbiAgICAgICAgICAgICAgICBqaiA9IGtleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoOyBqIDwgamo7ICsraikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGN1cnJlbnRba2V5c1tqXV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB3ZSBjb3VsZCByZW1vdmUgdGhpcyBpZi1icmFuY2ggYW5kIGNhbGwgdGhpcy5yZWdpc3RlciBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICAvLyAtIHRoZSBleHRyYSBjaGVjayBpcyBqdXN0IGEgcGVyZiB0d2VhayB0byBjcmVhdGUgZmV3ZXIgdW5uZWNlc3NhcnkgYXJyYXlzIGJ5IHRoZSBzcHJlYWQgb3BlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVnaXN0cnkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5yZWdpc3Rlcih0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC0tdGhpcy5yZWdpc3RlckRlcHRoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVnaXN0ZXJSZXNvbHZlcihrZXksIHJlc29sdmVyKSB7XG4gICAgICAgIHZhbGlkYXRlS2V5KGtleSk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVycyA9IHRoaXMucmVzb2x2ZXJzO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNvbHZlcnMuZ2V0KGtleSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZXJzLnNldChrZXksIHJlc29sdmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNvbHZlckltcGwgJiZcbiAgICAgICAgICAgIHJlc3VsdC5zdHJhdGVneSA9PT0gNCAvKiBhcnJheSAqLykge1xuICAgICAgICAgICAgcmVzdWx0LnN0YXRlLnB1c2gocmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZXJzLnNldChrZXksIG5ldyBSZXNvbHZlckltcGwoa2V5LCA0IC8qIGFycmF5ICovLCBbcmVzdWx0LCByZXNvbHZlcl0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgfVxuICAgIHJlZ2lzdGVyVHJhbnNmb3JtZXIoa2V5LCB0cmFuc2Zvcm1lcikge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IHRoaXMuZ2V0UmVzb2x2ZXIoa2V5KTtcbiAgICAgICAgaWYgKHJlc29sdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb2x2ZXIuZ2V0RmFjdG9yeSkge1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHJlc29sdmVyLmdldEZhY3RvcnkodGhpcyk7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyB0eXBlIGNhc3QgaXMgYSBiaXQgb2YgYSBoYWNreSBvbmUsIG5lY2Vzc2FyeSBkdWUgdG8gdGhlIGR1cGxpY2l0eSBvZiBJUmVzb2x2ZXJMaWtlLlxuICAgICAgICAgICAgLy8gUHJvYmxlbSBpcyB0aGF0IHRoYXQgaW50ZXJmYWNlJ3MgdHlwZSBhcmcgY2FuIGJlIG9mIHR5cGUgS2V5LCBidXQgdGhlIGdldEZhY3RvcnkgbWV0aG9kIG9ubHkgd29ya3Mgb25cbiAgICAgICAgICAgIC8vIHR5cGUgQ29uc3RydWN0YWJsZS4gU28gdGhlIHJldHVybiB0eXBlIG9mIHRoYXQgb3B0aW9uYWwgbWV0aG9kIGhhcyB0aGlzIGFkZGl0aW9uYWwgY29uc3RyYWludCwgd2hpY2hcbiAgICAgICAgICAgIC8vIHNlZW1zIHRvIGNvbmZ1c2UgdGhlIHR5cGUgY2hlY2tlci5cbiAgICAgICAgICAgIGZhY3RvcnkucmVnaXN0ZXJUcmFuc2Zvcm1lcih0cmFuc2Zvcm1lcik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldFJlc29sdmVyKGtleSwgYXV0b1JlZ2lzdGVyID0gdHJ1ZSkge1xuICAgICAgICB2YWxpZGF0ZUtleShrZXkpO1xuICAgICAgICBpZiAoa2V5LnJlc29sdmUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICBsZXQgcmVzb2x2ZXI7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc29sdmVyID0gY3VycmVudC5yZXNvbHZlcnMuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LnBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBpc1JlZ2lzdGVySW5SZXF1ZXN0ZXIoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdXRvUmVnaXN0ZXIgPyB0aGlzLmppdFJlZ2lzdGVyKGtleSwgaGFuZGxlcikgOiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGhhcyhrZXksIHNlYXJjaEFuY2VzdG9ycyA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVycy5oYXMoa2V5KVxuICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICA6IHNlYXJjaEFuY2VzdG9ycyAmJiB0aGlzLnBhcmVudCAhPSBudWxsXG4gICAgICAgICAgICAgICAgPyB0aGlzLnBhcmVudC5oYXMoa2V5LCB0cnVlKVxuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcbiAgICAgICAgaWYgKGtleS4kaXNSZXNvbHZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5yZXNvbHZlKHRoaXMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAqL1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXM7XG4gICAgICAgIGxldCByZXNvbHZlcjtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZXIgPSBjdXJyZW50LnJlc29sdmVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGlzUmVnaXN0ZXJJblJlcXVlc3RlcihrZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSB0aGlzLmppdFJlZ2lzdGVyKGtleSwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlci5yZXNvbHZlKGN1cnJlbnQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIucmVzb2x2ZShjdXJyZW50LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byByZXNvbHZlIGtleTogJHtrZXl9YCk7XG4gICAgfVxuICAgIGdldEFsbChrZXksIHNlYXJjaEFuY2VzdG9ycyA9IGZhbHNlKSB7XG4gICAgICAgIHZhbGlkYXRlS2V5KGtleSk7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAqL1xuICAgICAgICBjb25zdCByZXF1ZXN0b3IgPSB0aGlzO1xuICAgICAgICBsZXQgY3VycmVudCA9IHJlcXVlc3RvcjtcbiAgICAgICAgbGV0IHJlc29sdmVyO1xuICAgICAgICBpZiAoc2VhcmNoQW5jZXN0b3JzKSB7XG4gICAgICAgICAgICBsZXQgcmVzb2x1dGlvbnMgPSBlbXB0eUFycmF5O1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVyID0gY3VycmVudC5yZXNvbHZlcnMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbnMgPSByZXNvbHV0aW9ucy5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uICovXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkQWxsUmVzcG9uc2UocmVzb2x2ZXIsIGN1cnJlbnQsIHJlcXVlc3RvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSBjdXJyZW50LnJlc29sdmVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eUFycmF5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRBbGxSZXNwb25zZShyZXNvbHZlciwgY3VycmVudCwgcmVxdWVzdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtcHR5QXJyYXk7XG4gICAgfVxuICAgIGdldEZhY3RvcnkoVHlwZSkge1xuICAgICAgICBsZXQgZmFjdG9yeSA9IGZhY3Rvcmllcy5nZXQoVHlwZSk7XG4gICAgICAgIGlmIChmYWN0b3J5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGlmIChpc05hdGl2ZUZ1bmN0aW9uKFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke1R5cGUubmFtZX0gaXMgYSBuYXRpdmUgZnVuY3Rpb24gYW5kIHRoZXJlZm9yZSBjYW5ub3QgYmUgc2FmZWx5IGNvbnN0cnVjdGVkIGJ5IERJLiBJZiB0aGlzIGlzIGludGVudGlvbmFsLCBwbGVhc2UgdXNlIGEgY2FsbGJhY2sgb3IgY2FjaGVkQ2FsbGJhY2sgcmVzb2x2ZXIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmYWN0b3JpZXMuc2V0KFR5cGUsIChmYWN0b3J5ID0gbmV3IEZhY3RvcnlJbXBsKFR5cGUsIERJLmdldERlcGVuZGVuY2llcyhUeXBlKSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICB9XG4gICAgcmVnaXN0ZXJGYWN0b3J5KGtleSwgZmFjdG9yeSkge1xuICAgICAgICBmYWN0b3JpZXMuc2V0KGtleSwgZmFjdG9yeSk7XG4gICAgfVxuICAgIGNyZWF0ZUNoaWxkKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lckltcGwobnVsbCwgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcsIGNvbmZpZywgeyBwYXJlbnRMb2NhdG9yOiAoKSA9PiB0aGlzIH0pKTtcbiAgICB9XG4gICAgaml0UmVnaXN0ZXIoa2V5QXNWYWx1ZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAodHlwZW9mIGtleUFzVmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gaml0UmVnaXN0ZXIgc29tZXRoaW5nIHRoYXQgaXMgbm90IGEgY29uc3RydWN0b3I6ICcke2tleUFzVmFsdWV9Jy4gRGlkIHlvdSBmb3JnZXQgdG8gcmVnaXN0ZXIgdGhpcyBkZXBlbmRlbmN5P2ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJbnN0cmluc2ljVHlwZU5hbWVzLmhhcyhrZXlBc1ZhbHVlLm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBqaXRSZWdpc3RlciBhbiBpbnRyaW5zaWMgdHlwZTogJHtrZXlBc1ZhbHVlLm5hbWV9LiBEaWQgeW91IGZvcmdldCB0byBhZGQgQGluamVjdChLZXkpYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVnaXN0cnkoa2V5QXNWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvblJlc29sdmVyID0ga2V5QXNWYWx1ZS5yZWdpc3RlcihoYW5kbGVyKTtcbiAgICAgICAgICAgIGlmICghKHJlZ2lzdHJhdGlvblJlc29sdmVyIGluc3RhbmNlb2YgT2JqZWN0KSB8fFxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblJlc29sdmVyLnJlc29sdmUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Jlc29sdmVyID0gaGFuZGxlci5yZXNvbHZlcnMuZ2V0KGtleUFzVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdSZXNvbHZlciAhPSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1Jlc29sdmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIHZhbGlkIHJlc29sdmVyIHdhcyBub3QgcmV0dXJuZWQgZnJvbSB0aGUgc3RhdGljIHJlZ2lzdGVyIG1ldGhvZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb25SZXNvbHZlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlBc1ZhbHVlLiRpc0ludGVyZmFjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gaml0UmVnaXN0ZXIgYW4gaW50ZXJmYWNlOiAke2tleUFzVmFsdWUuZnJpZW5kbHlOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSB0aGlzLmNvbmZpZy5kZWZhdWx0UmVzb2x2ZXIoa2V5QXNWYWx1ZSwgaGFuZGxlcik7XG4gICAgICAgICAgICBoYW5kbGVyLnJlc29sdmVycy5zZXQoa2V5QXNWYWx1ZSwgcmVzb2x2ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY2FjaGVDYWxsYmFja1Jlc3VsdChmdW4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIsIHJlcXVlc3RvciwgcmVzb2x2ZXIpIHtcbiAgICAgICAgaWYgKGNhY2hlLmhhcyhyZXNvbHZlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQocmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHQgPSBmdW4oaGFuZGxlciwgcmVxdWVzdG9yLCByZXNvbHZlcik7XG4gICAgICAgIGNhY2hlLnNldChyZXNvbHZlciwgdCk7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG59XG4vKipcbiAqIFlvdSBjYW4gdXNlIHRoZSByZXN1bHRpbmcgUmVnaXN0cmF0aW9uIG9mIGFueSBvZiB0aGUgZmFjdG9yeSBtZXRob2RzXG4gKiB0byByZWdpc3RlciB3aXRoIHRoZSBjb250YWluZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY2xhc3MgRm9vIHt9XG4gKiBjb25zdCBjb250YWluZXIgPSBESS5jcmVhdGVDb250YWluZXIoKTtcbiAqIGNvbnRhaW5lci5yZWdpc3RlcihSZWdpc3RyYXRpb24uaW5zdGFuY2UoRm9vLCBuZXcgRm9vKCkpKTtcbiAqIGNvbnRhaW5lci5nZXQoRm9vKTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFJlZ2lzdHJhdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB5b3UgdG8gcGFzcyBhbiBpbnN0YW5jZS5cbiAgICAgKiBFdmVyeSB0aW1lIHlvdSByZXF1ZXN0IHRoaXMge0BsaW5rIEtleX0geW91IHdpbGwgZ2V0IHRoaXMgaW5zdGFuY2UgYmFjay5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogUmVnaXN0cmF0aW9uLmluc3RhbmNlKEZvbywgbmV3IEZvbygpKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byByZWdpc3RlciB0aGUgaW5zdGFuY2UgdW5kZXIuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGluc3RhbmNlIHRvIHJldHVybiB3aGVuIHRoZSBrZXkgaXMgcmVxdWVzdGVkLlxuICAgICAqL1xuICAgIGluc3RhbmNlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlckltcGwoa2V5LCAwIC8qIGluc3RhbmNlICovLCB2YWx1ZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIGZyb20gdGhlIGNsYXNzLlxuICAgICAqIEV2ZXJ5IHRpbWUgeW91IHJlcXVlc3QgdGhpcyB7QGxpbmsgS2V5fSB5b3Ugd2lsbCBnZXQgdGhlIHNhbWUgb25lIGJhY2suXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIFJlZ2lzdHJhdGlvbi5zaW5nbGV0b24oRm9vLCBGb28pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gcmVnaXN0ZXIgdGhlIHNpbmdsZXRvbiB1bmRlci5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgY2xhc3MgdG8gaW5zdGFudGlhdGUgYXMgYSBzaW5nbGV0b24gd2hlbiBmaXJzdCByZXF1ZXN0ZWQuXG4gICAgICovXG4gICAgc2luZ2xldG9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlckltcGwoa2V5LCAxIC8qIHNpbmdsZXRvbiAqLywgdmFsdWUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBmcm9tIGEgY2xhc3MuXG4gICAgICogRXZlcnkgdGltZSB5b3UgcmVxdWVzdCB0aGlzIHtAbGluayBLZXl9IHlvdSB3aWxsIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogUmVnaXN0cmF0aW9uLmluc3RhbmNlKEZvbywgRm9vKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHJlZ2lzdGVyIHRoZSBpbnN0YW5jZSB0eXBlIHVuZGVyLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBjbGFzcyB0byBpbnN0YW50aWF0ZSBlYWNoIHRpbWUgdGhlIGtleSBpcyByZXF1ZXN0ZWQuXG4gICAgICovXG4gICAgdHJhbnNpZW50KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlckltcGwoa2V5LCAyIC8qIHRyYW5zaWVudCAqLywgdmFsdWUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGVzIHRvIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcHJvdmlkZSB0aGUgZGVwZW5kZW5jeS5cbiAgICAgKiBFdmVyeSB0aW1lIHlvdSByZXF1ZXN0IHRoaXMge0BsaW5rIEtleX0gdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCB0byBwcm92aWRlXG4gICAgICogdGhlIGRlcGVuZGVuY3kuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIFJlZ2lzdHJhdGlvbi5jYWxsYmFjayhGb28sICgpID0+IG5ldyBGb28oKSk7XG4gICAgICogUmVnaXN0cmF0aW9uLmNhbGxiYWNrKEJhciwgKGM6IENvbnRhaW5lcikgPT4gbmV3IEJhcihjLmdldChGb28pKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byByZWdpc3RlciB0aGUgY2FsbGJhY2sgZm9yLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHJldHVybiB0aGUgZGVwZW5kZW5jeS5cbiAgICAgKi9cbiAgICBjYWxsYmFjayhrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzb2x2ZXJJbXBsKGtleSwgMyAvKiBjYWxsYmFjayAqLywgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGVzIHRvIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcHJvdmlkZSB0aGUgZGVwZW5kZW5jeSBhbmQgdGhlbiBjYWNoZXMgdGhlXG4gICAgICogZGVwZW5kZW5jeSBmb3IgZnV0dXJlIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBSZWdpc3RyYXRpb24uY2FjaGVkQ2FsbGJhY2soRm9vLCAoKSA9PiBuZXcgRm9vKCkpO1xuICAgICAqIFJlZ2lzdHJhdGlvbi5jYWNoZWRDYWxsYmFjayhCYXIsIChjOiBDb250YWluZXIpID0+IG5ldyBCYXIoYy5nZXQoRm9vKSkpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gcmVnaXN0ZXIgdGhlIGNhbGxiYWNrIGZvci5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdGhhdCBpcyBleHBlY3RlZCB0byByZXR1cm4gdGhlIGRlcGVuZGVuY3kuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiB5b3UgcGFzcyB0aGUgc2FtZSBSZWdpc3RyYXRpb24gdG8gYW5vdGhlciBjb250YWluZXIsIHRoZSBzYW1lIGNhY2hlZCB2YWx1ZSB3aWxsIGJlIHVzZWQuXG4gICAgICogU2hvdWxkIGFsbCByZWZlcmVuY2VzIHRvIHRoZSByZXNvbHZlciByZXR1cm5lZCBiZSByZW1vdmVkLCB0aGUgY2FjaGUgd2lsbCBleHBpcmUuXG4gICAgICovXG4gICAgY2FjaGVkQ2FsbGJhY2soa2V5LCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVySW1wbChrZXksIDMgLyogY2FsbGJhY2sgKi8sIGNhY2hlQ2FsbGJhY2tSZXN1bHQoY2FsbGJhY2spKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYWx0ZXJuYXRlIHtAbGluayBLZXl9IHRvIHJldHJpZXZlIGFuIGluc3RhbmNlIGJ5LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBSZWdpc3Rlci5zaW5nbGV0b24oRm9vLCBGb28pXG4gICAgICogUmVnaXN0ZXIuYWxpYXNUbyhGb28sIE15Rm9vcyk7XG4gICAgICpcbiAgICAgKiBjb250YWluZXIuZ2V0QWxsKE15Rm9vcykgLy8gY29udGFpbnMgYW4gaW5zdGFuY2Ugb2YgRm9vXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxLZXkgLSBUaGUgb3JpZ2luYWwga2V5IHRoYXQgaGFzIGJlZW4gcmVnaXN0ZXJlZC5cbiAgICAgKiBAcGFyYW0gYWxpYXNLZXkgLSBUaGUgYWxpYXMgdG8gdGhlIG9yaWdpbmFsIGtleS5cbiAgICAgKi9cbiAgICBhbGlhc1RvKG9yaWdpbmFsS2V5LCBhbGlhc0tleSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVySW1wbChhbGlhc0tleSwgNSAvKiBhbGlhcyAqLywgb3JpZ2luYWxLZXkpO1xuICAgIH0sXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUtleShrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImtleS92YWx1ZSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEFyZSB5b3UgdHJ5aW5nIHRvIGluamVjdC9yZWdpc3RlciBzb21ldGhpbmcgdGhhdCBkb2Vzbid0IGV4aXN0IHdpdGggREk/XCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkQWxsUmVzcG9uc2UocmVzb2x2ZXIsIGhhbmRsZXIsIHJlcXVlc3Rvcikge1xuICAgIGlmIChyZXNvbHZlciBpbnN0YW5jZW9mIFJlc29sdmVySW1wbCAmJlxuICAgICAgICByZXNvbHZlci5zdHJhdGVneSA9PT0gNCAvKiBhcnJheSAqLykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHJlc29sdmVyLnN0YXRlO1xuICAgICAgICBsZXQgaSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IG5ldyBBcnJheShpKTtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgcmVzdWx0c1tpXSA9IHN0YXRlW2ldLnJlc29sdmUoaGFuZGxlciwgcmVxdWVzdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgcmV0dXJuIFtyZXNvbHZlci5yZXNvbHZlKGhhbmRsZXIsIHJlcXVlc3RvcildO1xufVxuY29uc3QgZGVmYXVsdEZyaWVuZGx5TmFtZSA9IFwiKGFub255bW91cylcIjtcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgdmFsdWUgaXMgYSBuYXRpdmUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlzIHRoZSBmdW5jdGlvbiBpcyBhIG5hdGl2ZSBmdW5jdGlvbiwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuY29uc3QgaXNOYXRpdmVGdW5jdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbG9va3VwID0gbmV3IFdlYWtNYXAoKTtcbiAgICBsZXQgaXNOYXRpdmUgPSBmYWxzZTtcbiAgICBsZXQgc291cmNlVGV4dCA9IFwiXCI7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgaXNOYXRpdmUgPSBsb29rdXAuZ2V0KGZuKTtcbiAgICAgICAgaWYgKGlzTmF0aXZlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHNvdXJjZVRleHQgPSBmbi50b1N0cmluZygpO1xuICAgICAgICAgICAgaSA9IHNvdXJjZVRleHQubGVuZ3RoO1xuICAgICAgICAgICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLyNwcm9kLU5hdGl2ZUZ1bmN0aW9uXG4gICAgICAgICAgICBpc05hdGl2ZSA9XG4gICAgICAgICAgICAgICAgLy8gMjkgaXMgdGhlIGxlbmd0aCBvZiAnZnVuY3Rpb24gKCkgeyBbbmF0aXZlIGNvZGVdIH0nIHdoaWNoIGlzIHRoZSBzbWFsbGVzdCBsZW5ndGggb2YgYSBuYXRpdmUgZnVuY3Rpb24gc3RyaW5nXG4gICAgICAgICAgICAgICAgaSA+PSAyOSAmJlxuICAgICAgICAgICAgICAgICAgICAvLyAxMDAgc2VlbXMgdG8gYmUgYSBzYWZlIHVwcGVyIGJvdW5kIG9mIHRoZSBtYXggbGVuZ3RoIG9mIGEgbmF0aXZlIGZ1bmN0aW9uLiBJbiBDaHJvbWUgYW5kIEZGIGl0J3MgNTYsIGluIEVkZ2UgaXQncyA2MS5cbiAgICAgICAgICAgICAgICAgICAgaSA8PSAxMDAgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aG9sZSBoZXVyaXN0aWMgKmNvdWxkKiBiZSB0cmlja2VkIGJ5IGEgY29tbWVudC4gRG8gd2UgbmVlZCB0byBjYXJlIGFib3V0IHRoYXQ/XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gMSkgPT09IDB4N2QgJiYgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB0aGUgc3BlYyBpcyBhIGxpdHRsZSB2YWd1ZSBhYm91dCB0aGUgcHJlY2lzZSBjb25zdHJhaW50cywgc28gd2UgZG8gbmVlZCB0byB0ZXN0IHRoaXMgYWNyb3NzIHZhcmlvdXMgYnJvd3NlcnMgdG8gbWFrZSBzdXJlIGp1c3Qgb25lIHdoaXRlc3BhY2UgaXMgYSBzYWZlIGFzc3VtcHRpb24uXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gMikgPD0gMHgyMCAmJiAvLyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gMykgPT09IDB4NWQgJiYgLy8gXVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0LmNoYXJDb2RlQXQoaSAtIDQpID09PSAweDY1ICYmIC8vIGVcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGV4dC5jaGFyQ29kZUF0KGkgLSA1KSA9PT0gMHg2NCAmJiAvLyBkXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gNikgPT09IDB4NmYgJiYgLy8gb1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0LmNoYXJDb2RlQXQoaSAtIDcpID09PSAweDYzICYmIC8vIGNcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGV4dC5jaGFyQ29kZUF0KGkgLSA4KSA9PT0gMHgyMCAmJiAvL1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0LmNoYXJDb2RlQXQoaSAtIDkpID09PSAweDY1ICYmIC8vIGVcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGV4dC5jaGFyQ29kZUF0KGkgLSAxMCkgPT09IDB4NzYgJiYgLy8gdlxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0LmNoYXJDb2RlQXQoaSAtIDExKSA9PT0gMHg2OSAmJiAvLyBpXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gMTIpID09PSAweDc0ICYmIC8vIHRcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGV4dC5jaGFyQ29kZUF0KGkgLSAxMykgPT09IDB4NjEgJiYgLy8gYVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUZXh0LmNoYXJDb2RlQXQoaSAtIDE0KSA9PT0gMHg2ZSAmJiAvLyBuXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRleHQuY2hhckNvZGVBdChpIC0gMTUpID09PSAweDU4OyAvLyBbXG4gICAgICAgICAgICBsb29rdXAuc2V0KGZuLCBpc05hdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmF0aXZlO1xuICAgIH07XG59KSgpO1xuY29uc3QgaXNOdW1lcmljTG9va3VwID0ge307XG5mdW5jdGlvbiBpc0FycmF5SW5kZXgodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiAodmFsdWUgfCAwKSA9PT0gdmFsdWU7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaXNOdW1lcmljTG9va3VwW3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpc051bWVyaWNMb29rdXBbdmFsdWVdID0gZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKChpID09PSAwICYmIGNoID09PSAweDMwICYmIGxlbmd0aCA+IDEpIC8qIG11c3Qgbm90IHN0YXJ0IHdpdGggMCAqLyB8fFxuICAgICAgICAgICAgICAgICAgICBjaCA8IDB4MzAgLyogMCAqLyB8fFxuICAgICAgICAgICAgICAgICAgICBjaCA+IDB4MzkgLyogOSAqLykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGlzTnVtZXJpY0xvb2t1cFt2YWx1ZV0gPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChpc051bWVyaWNMb29rdXBbdmFsdWVdID0gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbGVtZW50U3R5bGVzLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgREksIFJlZ2lzdHJhdGlvbiB9IGZyb20gXCIuLi9kaS9kaS5qc1wiO1xuZnVuY3Rpb24gcHJlc2VudGF0aW9uS2V5RnJvbVRhZyh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGAke3RhZ05hbWUudG9Mb3dlckNhc2UoKX06cHJlc2VudGF0aW9uYDtcbn1cbmNvbnN0IHByZXNlbnRhdGlvblJlZ2lzdHJ5ID0gbmV3IE1hcCgpO1xuLyoqXG4gKiBBbiBBUEkgZ2F0ZXdheSB0byBjb21wb25lbnQgcHJlc2VudGF0aW9uIGZlYXR1cmVzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgQ29tcG9uZW50UHJlc2VudGF0aW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGNvbXBvbmVudCBwcmVzZW50YXRpb24gZm9yIGFuIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHRhZ05hbWUgLSBUaGUgZWxlbWVudCBuYW1lIHRvIGRlZmluZSB0aGUgcHJlc2VudGF0aW9uIGZvci5cbiAgICAgKiBAcGFyYW0gcHJlc2VudGF0aW9uIC0gVGhlIHByZXNlbnRhdGlvbiB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBtYXRjaGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIC0gVGhlIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvbnRhaW5lciB0byByZWdpc3RlciB0aGUgY29uZmlndXJhdGlvbiBpbi5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZGVmaW5lKHRhZ05hbWUsIHByZXNlbnRhdGlvbiwgY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHByZXNlbnRhdGlvbktleUZyb21UYWcodGFnTmFtZSk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJlc2VudGF0aW9uUmVnaXN0cnkuZ2V0KGtleSk7XG4gICAgICAgIGlmIChleGlzdGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBwcmVzZW50YXRpb25SZWdpc3RyeS5zZXQoa2V5LCBwcmVzZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZmFsc2UgaW5kaWNhdGVzIHRoYXQgd2UgaGF2ZSBtb3JlIHRoYW4gb25lIHByZXNlbnRhdGlvblxuICAgICAgICAgICAgLy8gcmVnaXN0ZXJlZCBmb3IgYSB0YWdOYW1lIGFuZCB3ZSBtdXN0IHJlc29sdmUgdGhyb3VnaCBESVxuICAgICAgICAgICAgcHJlc2VudGF0aW9uUmVnaXN0cnkuc2V0KGtleSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5yZWdpc3RlcihSZWdpc3RyYXRpb24uaW5zdGFuY2Uoa2V5LCBwcmVzZW50YXRpb24pKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpbmRzIGEgY29tcG9uZW50IHByZXNlbnRhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCBlbGVtZW50IG5hbWUsXG4gICAgICogc2VhcmNoaW5nIHRoZSBET00gaGllcmFyY2h5IHN0YXJ0aW5nIGZyb20gdGhlIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHRhZ05hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBsb2NhdGUgdGhlIHByZXNlbnRhdGlvbiBmb3IuXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBiZWdpbiB0aGUgc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgVGhlIGNvbXBvbmVudCBwcmVzZW50YXRpb24gb3IgbnVsbCBpZiBub25lIGlzIGZvdW5kLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBmb3JUYWcodGFnTmFtZSwgZWxlbWVudCkge1xuICAgICAgICBjb25zdCBrZXkgPSBwcmVzZW50YXRpb25LZXlGcm9tVGFnKHRhZ05hbWUpO1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHByZXNlbnRhdGlvblJlZ2lzdHJ5LmdldChrZXkpO1xuICAgICAgICBpZiAoZXhpc3RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBESS5maW5kUmVzcG9uc2libGVDb250YWluZXIoZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleGlzdGluZyB8fCBudWxsO1xuICAgIH0sXG59KTtcbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgQ29tcG9uZW50UHJlc2VudGF0aW9uLCB1c2VkIGJ5IEZvdW5kYXRpb25FbGVtZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbXBvbmVudFByZXNlbnRhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBEZWZhdWx0Q29tcG9uZW50UHJlc2VudGF0aW9uLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZSAtIFRoZSB0ZW1wbGF0ZSB0byBhcHBseSB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gc3R5bGVzIC0gVGhlIHN0eWxlcyB0byBhcHBseSB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGVtcGxhdGUsIHN0eWxlcykge1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGUgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdHlsZXMgPVxuICAgICAgICAgICAgc3R5bGVzID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IEFycmF5LmlzQXJyYXkoc3R5bGVzKVxuICAgICAgICAgICAgICAgICAgICA/IEVsZW1lbnRTdHlsZXMuY3JlYXRlKHN0eWxlcylcbiAgICAgICAgICAgICAgICAgICAgOiBzdHlsZXMgaW5zdGFuY2VvZiBFbGVtZW50U3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN0eWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBFbGVtZW50U3R5bGVzLmNyZWF0ZShbc3R5bGVzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIHByZXNlbnRhdGlvbiBkZXRhaWxzIHRvIHRoZSBzcGVjaWZpZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGFwcGx5IHRoZSBwcmVzZW50YXRpb24gZGV0YWlscyB0by5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgYXBwbHlUbyhlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBlbGVtZW50LiRmYXN0Q29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIudGVtcGxhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sbGVyLnN0eWxlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZXMgPSB0aGlzLnN0eWxlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEZBU1RFbGVtZW50LCBvYnNlcnZhYmxlIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyBDb21wb25lbnRQcmVzZW50YXRpb24sIERlZmF1bHRDb21wb25lbnRQcmVzZW50YXRpb24sIH0gZnJvbSBcIi4uL2Rlc2lnbi1zeXN0ZW0vY29tcG9uZW50LXByZXNlbnRhdGlvbi5qc1wiO1xuLyoqXG4gKiBEZWZpbmVzIGEgZm91bmRhdGlvbiBlbGVtZW50IGNsYXNzIHRoYXQ6XG4gKiAxLiBDb25uZWN0cyB0aGUgZWxlbWVudCB0byBpdHMgQ29tcG9uZW50UHJlc2VudGF0aW9uXG4gKiAyLiBBbGxvd3MgcmVzb2x2aW5nIHRoZSBlbGVtZW50IHRlbXBsYXRlIGZyb20gdGhlIGluc3RhbmNlIG9yIENvbXBvbmVudFByZXNlbnRhdGlvblxuICogMy4gQWxsb3dzIHJlc29sdmluZyB0aGUgZWxlbWVudCBzdHlsZXMgZnJvbSB0aGUgaW5zdGFuY2Ugb3IgQ29tcG9uZW50UHJlc2VudGF0aW9uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRm91bmRhdGlvbkVsZW1lbnQgZXh0ZW5kcyBGQVNURWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3ByZXNlbnRhdGlvbiA9IHZvaWQgMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9wZXJ0eSB3aGljaCByZXNvbHZlcyB0aGUgQ29tcG9uZW50UHJlc2VudGF0aW9uIGluc3RhbmNlXG4gICAgICogZm9yIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0ICRwcmVzZW50YXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcmVzZW50YXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdGhpcy5fcHJlc2VudGF0aW9uID0gQ29tcG9uZW50UHJlc2VudGF0aW9uLmZvclRhZyh0aGlzLnRhZ05hbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVzZW50YXRpb247XG4gICAgfVxuICAgIHRlbXBsYXRlQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy4kZmFzdENvbnRyb2xsZXIudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0eWxlc0NoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLiRmYXN0Q29udHJvbGxlci5zdHlsZXMgPSB0aGlzLnN0eWxlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29ubmVjdGVkIGNhbGxiYWNrIGZvciB0aGlzIEZBU1RFbGVtZW50LlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBieSB0aGUgcGxhdGZvcm0gd2hlbmV2ZXIgdGhpcyBGb3VuZGF0aW9uRWxlbWVudFxuICAgICAqIGJlY29tZXMgY29ubmVjdGVkIHRvIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICh0aGlzLiRwcmVzZW50YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuJHByZXNlbnRhdGlvbi5hcHBseVRvKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYW4gZWxlbWVudCByZWdpc3RyeSBmdW5jdGlvbiB3aXRoIGEgc2V0IG9mIGVsZW1lbnQgZGVmaW5pdGlvbiBkZWZhdWx0cy5cbiAgICAgKiBAcGFyYW0gZWxlbWVudERlZmluaXRpb24gLSBUaGUgZGVmaW5pdGlvbiBvZiB0aGUgZWxlbWVudCB0byBjcmVhdGUgdGhlIHJlZ2lzdHJ5XG4gICAgICogZnVuY3Rpb24gZm9yLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzdGF0aWMgY29tcG9zZShlbGVtZW50RGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gKG92ZXJyaWRlRGVmaW5pdGlvbiA9IHt9KSA9PiBuZXcgRm91bmRhdGlvbkVsZW1lbnRSZWdpc3RyeSh0aGlzID09PSBGb3VuZGF0aW9uRWxlbWVudFxuICAgICAgICAgICAgPyBjbGFzcyBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdGhpcywgZWxlbWVudERlZmluaXRpb24sIG92ZXJyaWRlRGVmaW5pdGlvbik7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRm91bmRhdGlvbkVsZW1lbnQucHJvdG90eXBlLCBcInRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBGb3VuZGF0aW9uRWxlbWVudC5wcm90b3R5cGUsIFwic3R5bGVzXCIsIHZvaWQgMCk7XG5mdW5jdGlvbiByZXNvbHZlT3B0aW9uKG9wdGlvbiwgY29udGV4dCwgZGVmaW5pdGlvbikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbihjb250ZXh0LCBkZWZpbml0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbjtcbn1cbi8qKlxuICogUmVnaXN0cnkgY2FwYWJsZSBvZiBkZWZpbmluZyBwcmVzZW50YXRpb24gcHJvcGVydGllcyBmb3IgYSBET00gQ29udGFpbmVyIGhpZXJhcmNoeS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5leHBvcnQgY2xhc3MgRm91bmRhdGlvbkVsZW1lbnRSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgZWxlbWVudERlZmluaXRpb24sIG92ZXJyaWRlRGVmaW5pdGlvbikge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmVsZW1lbnREZWZpbml0aW9uID0gZWxlbWVudERlZmluaXRpb247XG4gICAgICAgIHRoaXMub3ZlcnJpZGVEZWZpbml0aW9uID0gb3ZlcnJpZGVEZWZpbml0aW9uO1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZWxlbWVudERlZmluaXRpb24pLCB0aGlzLm92ZXJyaWRlRGVmaW5pdGlvbik7XG4gICAgfVxuICAgIHJlZ2lzdGVyKGNvbnRhaW5lciwgY29udGV4dCkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gdGhpcy5kZWZpbml0aW9uO1xuICAgICAgICBjb25zdCBvdmVycmlkZURlZmluaXRpb24gPSB0aGlzLm92ZXJyaWRlRGVmaW5pdGlvbjtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gZGVmaW5pdGlvbi5wcmVmaXggfHwgY29udGV4dC5lbGVtZW50UHJlZml4O1xuICAgICAgICBjb25zdCBuYW1lID0gYCR7cHJlZml4fS0ke2RlZmluaXRpb24uYmFzZU5hbWV9YDtcbiAgICAgICAgY29udGV4dC50cnlEZWZpbmVFbGVtZW50KHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBiYXNlQ2xhc3M6IHRoaXMuZWxlbWVudERlZmluaXRpb24uYmFzZUNsYXNzLFxuICAgICAgICAgICAgY2FsbGJhY2s6IHggPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXNlbnRhdGlvbiA9IG5ldyBEZWZhdWx0Q29tcG9uZW50UHJlc2VudGF0aW9uKHJlc29sdmVPcHRpb24oZGVmaW5pdGlvbi50ZW1wbGF0ZSwgeCwgZGVmaW5pdGlvbiksIHJlc29sdmVPcHRpb24oZGVmaW5pdGlvbi5zdHlsZXMsIHgsIGRlZmluaXRpb24pKTtcbiAgICAgICAgICAgICAgICB4LmRlZmluZVByZXNlbnRhdGlvbihwcmVzZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIGxldCBzaGFkb3dPcHRpb25zID0gcmVzb2x2ZU9wdGlvbihkZWZpbml0aW9uLnNoYWRvd09wdGlvbnMsIHgsIGRlZmluaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICh4LnNoYWRvd1Jvb3RNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkZXNpZ24gc3lzdGVtIGhhcyBvdmVycmlkZGVuIHRoZSBzaGFkb3cgcm9vdCBtb2RlLCB3ZSBuZWVkIHNwZWNpYWwgaGFuZGxpbmcuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFkb3dPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgc2hhZG93IG9wdGlvbnMgcHJlc2VudCBpbiB0aGUgZGVmaW5pdGlvbiwgdGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWl0aGVyIHRoZSBjb21wb25lbnQgaXRzZWxmIGhhcyBzcGVjaWZpZWQgYW4gb3B0aW9uIG9yIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0cnkgZnVuY3Rpb24gaGFzIG92ZXJyaWRkZW4gaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW92ZXJyaWRlRGVmaW5pdGlvbi5zaGFkb3dPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgd2VyZSBzaGFkb3cgb3B0aW9ucyBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGFuZCBub3Qgb3ZlcnJpZGRlbiBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSByZWdpc3RyeS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dPcHRpb25zLm1vZGUgPSB4LnNoYWRvd1Jvb3RNb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYWRvd09wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjb21wb25lbnQgYXV0aG9yIGRpZCBub3QgcHJvdmlkZSBzaGFkb3cgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBkaWQgbm90IG51bGwgdGhlbSBvdXQgKGxpZ2h0IGRvbSBvcHQtaW4pIHRoZW4gdGhleVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2VyZSByZWx5aW5nIG9uIHRoZSBGQVNURWxlbWVudCBkZWZhdWx0LiBTbywgaWYgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXNpZ24gc3lzdGVtIHByb3ZpZGVzIGEgbW9kZSwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93T3B0aW9ucyA9IHsgbW9kZTogeC5zaGFkb3dSb290TW9kZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHguZGVmaW5lRWxlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRPcHRpb25zOiByZXNvbHZlT3B0aW9uKGRlZmluaXRpb24uZWxlbWVudE9wdGlvbnMsIHgsIGRlZmluaXRpb24pLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiByZXNvbHZlT3B0aW9uKGRlZmluaXRpb24uYXR0cmlidXRlcywgeCwgZGVmaW5pdGlvbiksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuIiwiaW1wb3J0IHsgRkFTVEVsZW1lbnREZWZpbml0aW9uLCBPYnNlcnZhYmxlLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnRSZWdpc3RyeSwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb25cIjtcbmNvbnN0IHJlc2VydmVkUmVhY3RQcm9wZXJ0aWVzID0gbmV3IFNldChbXG4gICAgXCJjaGlsZHJlblwiLFxuICAgIFwibG9jYWxOYW1lXCIsXG4gICAgXCJyZWZcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJjbGFzc05hbWVcIixcbl0pO1xuY29uc3QgZW1wdHlQcm9wcyA9IE9iamVjdC5mcmVlemUoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5jb25zdCBERUZBVUxUX0NBQ0hFX05BTUUgPSBcIl9kZWZhdWx0XCI7XG4vLyBUaGlzIHdpbGwgYmUgYSB0d28gbGV2ZWxzIGNhY2hlIE1hcDx0eXBlLCBNYXA8bmFtZSwgUmVhY3RXcmFwcGVyPj5cbi8vIHRvIGRpc3Rpbmd1aXNoIGNvbXBvbmVudHMgb2Ygc2FtZSB0eXBlIGJ1dCBkaWZmZXJlbnQgdGFnIG5hbWUuXG4vLyBEZWZhdWx0IG5hbWU6ICdfZGVmYXVsdCdcbmNvbnN0IHdyYXBwZXJzQ2FjaGUgPSBuZXcgTWFwKCk7XG4vLyBUaGVyZSBhcmUgMiBraW5kcyBvZiByZWZzIGFuZCB0aGVyZSdzIG5vIGJ1aWx0IGluIFJlYWN0IEFQSSB0byBzZXQgb25lLlxuZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRhZ05hbWUodHlwZSwgY29uZmlnKSB7XG4gICAgaWYgKCFjb25maWcubmFtZSkge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqL1xuICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gRkFTVEVsZW1lbnREZWZpbml0aW9uLmZvclR5cGUodHlwZSk7XG4gICAgICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBjb25maWcubmFtZSA9IGRlZmluaXRpb24ubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWN0IHdyYXBwZXJzIG11c3Qgd3JhcCBhIEZBU1RFbGVtZW50IG9yIGJlIGNvbmZpZ3VyZWQgd2l0aCBhIG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb25maWcubmFtZTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRFdmVudHMoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5ldmVudHMgfHwgKGNvbmZpZy5ldmVudHMgPSB7fSk7XG59XG5mdW5jdGlvbiBrZXlJc1ZhbGlkKHR5cGUsIGNvbmZpZywgbmFtZSkge1xuICAgIGlmIChyZXNlcnZlZFJlYWN0UHJvcGVydGllcy5oYXMobmFtZSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGAke2dldFRhZ05hbWUodHlwZSwgY29uZmlnKX0gY29udGFpbnMgcHJvcGVydHkgJHtuYW1lfSB3aGljaCBpcyBhIFJlYWN0IGAgK1xuICAgICAgICAgICAgYHJlc2VydmVkIHByb3BlcnR5LiBJdCB3aWxsIGJlIHVzZWQgYnkgUmVhY3QgYW5kIG5vdCBzZXQgb24gYCArXG4gICAgICAgICAgICBgdGhlIGVsZW1lbnQuYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50S2V5cyh0eXBlLCBjb25maWcpIHtcbiAgICBpZiAoIWNvbmZpZy5rZXlzKSB7XG4gICAgICAgIGlmIChjb25maWcucHJvcGVydGllcykge1xuICAgICAgICAgICAgY29uZmlnLmtleXMgPSBuZXcgU2V0KGNvbmZpZy5wcm9wZXJ0aWVzLmNvbmNhdChPYmplY3Qua2V5cyhnZXRFbGVtZW50RXZlbnRzKGNvbmZpZykpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldChPYmplY3Qua2V5cyhnZXRFbGVtZW50RXZlbnRzKGNvbmZpZykpKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc29ycyA9IE9ic2VydmFibGUuZ2V0QWNjZXNzb3JzKHR5cGUucHJvdG90eXBlKTtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYSBvZiBhY2Nlc3NvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleUlzVmFsaWQodHlwZSwgY29uZmlnLCBhLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzLmFkZChhLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwIGluIHR5cGUucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHAgaW4gSFRNTEVsZW1lbnQucHJvdG90eXBlKSAmJiBrZXlJc1ZhbGlkKHR5cGUsIGNvbmZpZywgcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMuYWRkKHApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLmtleXMgPSBrZXlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb25maWcua2V5cztcbn1cbi8qKlxuICogQHBhcmFtIFJlYWN0IC0gVGhlIFJlYWN0IG1vZHVsZSwgdHlwaWNhbGx5IGltcG9ydGVkIGZyb20gdGhlIGByZWFjdGAgbnBtXG4gKiBwYWNrYWdlXG4gKiBAcGFyYW0gZGVzaWduU3lzdGVtIC0gQSBkZXNpZ24gc3lzdGVtIHRvIHJlZ2lzdGVyIHRoZSBjb21wb25lbnRzIHdpdGguXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUmVhY3RXcmFwcGVyKFJlYWN0LCBkZXNpZ25TeXN0ZW0pIHtcbiAgICBsZXQgcmVnaXN0cmF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0ge1xuICAgICAgICByZWdpc3Rlcihjb250YWluZXIsIC4uLnJlc3QpIHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbnMuZm9yRWFjaCh4ID0+IHgucmVnaXN0ZXIoY29udGFpbmVyLCAuLi5yZXN0KSk7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25zID0gW107XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBmdW5jdGlvbiB3cmFwKHR5cGUsIGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0eXBlIGluc3RhbmNlb2YgRm91bmRhdGlvbkVsZW1lbnRSZWdpc3RyeSkge1xuICAgICAgICAgICAgaWYgKGRlc2lnblN5c3RlbSkge1xuICAgICAgICAgICAgICAgIGRlc2lnblN5c3RlbS5yZWdpc3Rlcih0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbnMucHVzaCh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FjaGVkQ2FuZGlkYXRlcyA9IHdyYXBwZXJzQ2FjaGUuZ2V0KHR5cGUpO1xuICAgICAgICBpZiAoY2FjaGVkQ2FuZGlkYXRlcykge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkV3JhcHBlciA9IGNhY2hlZENhbmRpZGF0ZXMuZ2V0KChfYSA9IGNvbmZpZy5uYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0NBQ0hFX05BTUUpO1xuICAgICAgICAgICAgaWYgKGNhY2hlZFdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkV3JhcHBlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjbGFzcyBSZWFjdENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3VwZGF0ZUVsZW1lbnQob2xkUHJvcHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNQcm9wcyA9IG9sZFByb3BzIHx8IGVtcHR5UHJvcHM7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gZ2V0RWxlbWVudEV2ZW50cyhjb25maWcpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2VsZW1lbnRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGN1cnJlbnRQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1trZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFtrZXldID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHByZXZpb3VzUHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRWxlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50RGlkVXBkYXRlKG9sZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUVsZW1lbnQob2xkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSByZWZzIG9ubHkgZ2V0IGZ1bGZpbGxlZCBvbmNlLCBwYXNzIGEgbmV3IG9uZSBpZiB0aGUgdXNlcidzXG4gICAgICAgICAgICAgICAgLy8gcmVmIGNoYW5nZWQuIFRoaXMgYWxsb3dzIHJlZnMgdG8gYmUgZnVsZmlsbGVkIGFzIGV4cGVjdGVkLCBnb2luZyBmcm9tXG4gICAgICAgICAgICAgICAgLy8gaGF2aW5nIGEgdmFsdWUgdG8gbnVsbC5cbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyUmVmID0gdGhpcy5wcm9wcy5fX2ZvcndhcmRlZFJlZjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVmID09PSB1bmRlZmluZWQgfHwgdGhpcy5fdXNlclJlZiAhPT0gdXNlclJlZikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWYgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJSZWYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZWYodXNlclJlZiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlclJlZiA9IHVzZXJSZWY7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZpbHRlciBjbGFzcyBwcm9wZXJ0aWVzIGFuZCBwYXNzIHRoZSByZW1haW5pbmcgYXR0cmlidXRlcyB0byBSZWFjdC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBhdHRyaWJ1dGVzIHRvIHVzZSBmcmFtZXdvcmsgcnVsZXNcbiAgICAgICAgICAgICAgICAvLyBmb3Igc2V0dGluZyBhdHRyaWJ1dGVzIGFuZCByZW5kZXIgY29ycmVjdGx5IHVuZGVyIFNTUi5cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSZWFjdFByb3BzID0geyByZWY6IHRoaXMuX3JlZiB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VsZW1lbnRQcm9wcyA9ICh0aGlzLl9lbGVtZW50UHJvcHMgPSB7fSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudEtleXMgPSBnZXRFbGVtZW50S2V5cyh0eXBlLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrIGluIGN1cnJlbnRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gY3VycmVudFByb3BzW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEtleXMuaGFzKGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50UHJvcHNba10gPSB2O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVhY3QgZG9lcyAqbm90KiBoYW5kbGUgYGNsYXNzTmFtZWAgZm9yIGN1c3RvbSBlbGVtZW50cyBzb1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29lcmNlIGl0IHRvIGBjbGFzc2Agc28gaXQncyBoYW5kbGVkIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlYWN0UHJvcHNbayA9PT0gXCJjbGFzc05hbWVcIiA/IFwiY2xhc3NcIiA6IGtdID0gdjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChnZXRUYWdOYW1lKHR5cGUsIGNvbmZpZyksIG5ld1JlYWN0UHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlYWN0Q29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdENvbXBvbmVudCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcm9wcyksIHsgX19mb3J3YXJkZWRSZWY6IHJlZiB9KSwgcHJvcHMgPT09IG51bGwgfHwgcHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb3BzLmNoaWxkcmVuKSk7XG4gICAgICAgIGlmICghd3JhcHBlcnNDYWNoZS5oYXModHlwZSkpIHtcbiAgICAgICAgICAgIHdyYXBwZXJzQ2FjaGUuc2V0KHR5cGUsIG5ldyBNYXAoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgd3JhcHBlcnNDYWNoZS5nZXQodHlwZSkuc2V0KChfYiA9IGNvbmZpZy5uYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBERUZBVUxUX0NBQ0hFX05BTUUsIHJlYWN0Q29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIHJlYWN0Q29tcG9uZW50O1xuICAgIH1cbiAgICByZXR1cm4geyB3cmFwLCByZWdpc3RyeSB9O1xufVxuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuLyoqXG4gKiBBIEJhZGdlIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQmFkZ2UgZXh0ZW5kcyBGb3VuZGF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVCYWRnZVN0eWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbGwgJiYgIXRoaXMuY29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaWxsID0gYGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhZGdlLWZpbGwtJHt0aGlzLmZpbGx9KTtgO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBgY29sb3I6IHZhcigtLWJhZGdlLWNvbG9yLSR7dGhpcy5jb2xvcn0pO2A7XG4gICAgICAgICAgICBpZiAodGhpcy5maWxsICYmICF0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbG9yICYmICF0aGlzLmZpbGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7Y29sb3J9ICR7ZmlsbH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiZmlsbFwiIH0pXG5dLCBCYWRnZS5wcm90b3R5cGUsIFwiZmlsbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJjb2xvclwiIH0pXG5dLCBCYWRnZS5wcm90b3R5cGUsIFwiY29sb3JcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgQmFkZ2UucHJvdG90eXBlLCBcImNpcmN1bGFyXCIsIHZvaWQgMCk7XG4iLCJpbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG4vKipcbiAqIEluc3RydWN0cyB0aGUgdGVtcGxhdGUgZW5naW5lIHRvIGFwcGx5IGJlaGF2aW9yIHRvIGEgbm9kZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEhUTUxEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluZGV4IG9mIHRoZSBET00gbm9kZSB0byB3aGljaCB0aGUgY3JlYXRlZCBiZWhhdmlvciB3aWxsIGFwcGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50YXJnZXRJbmRleCA9IDA7XG4gICAgfVxufVxuLyoqXG4gKiBBIHtAbGluayBIVE1MRGlyZWN0aXZlfSB0aGF0IHRhcmdldHMgYSBuYW1lZCBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgb24gYSBub2RlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVGFyZ2V0ZWRIVE1MRGlyZWN0aXZlIGV4dGVuZHMgSFRNTERpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhY2Vob2xkZXIgc3RyaW5nIGJhc2VkIG9uIHRoZSBkaXJlY3RpdmUncyBpbmRleCB3aXRoaW4gdGhlIHRlbXBsYXRlLlxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGRpcmVjdGl2ZSB3aXRoaW4gdGhlIHRlbXBsYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVQbGFjZWhvbGRlciA9IERPTS5jcmVhdGVJbnRlcnBvbGF0aW9uUGxhY2Vob2xkZXI7XG4gICAgfVxufVxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGF0dGFjaGVzIHNwZWNpYWwgYmVoYXZpb3IgdG8gYW4gZWxlbWVudCB2aWEgYSBjdXN0b20gYXR0cmlidXRlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQXR0YWNoZWRCZWhhdmlvckhUTUxEaXJlY3RpdmUgZXh0ZW5kcyBIVE1MRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGJlaGF2aW9yOyB1c2VkIGFzIGEgY3VzdG9tIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gYmVoYXZpb3IgLSBUaGUgYmVoYXZpb3IgdG8gaW5zdGFudGlhdGUgYW5kIGF0dGFjaCB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgYmVoYXZpb3IgZHVyaW5nIGNyZWF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGJlaGF2aW9yLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuYmVoYXZpb3IgPSBiZWhhdmlvcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBsYWNlaG9sZGVyIHN0cmluZyBiYXNlZCBvbiB0aGUgZGlyZWN0aXZlJ3MgaW5kZXggd2l0aGluIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGRpcmVjdGl2ZSB3aXRoaW4gdGhlIHRlbXBsYXRlLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQ3JlYXRlcyBhIGN1c3RvbSBhdHRyaWJ1dGUgcGxhY2Vob2xkZXIuXG4gICAgICovXG4gICAgY3JlYXRlUGxhY2Vob2xkZXIoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIERPTS5jcmVhdGVDdXN0b21BdHRyaWJ1dGVQbGFjZWhvbGRlcih0aGlzLm5hbWUsIGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJlaGF2aW9yIGZvciB0aGUgcHJvdmlkZWQgdGFyZ2V0IG5vZGUuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBub2RlIGluc3RhbmNlIHRvIGNyZWF0ZSB0aGUgYmVoYXZpb3IgZm9yLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgYGJlaGF2aW9yYCB0eXBlIHRoaXMgZGlyZWN0aXZlIHdhcyBjb25zdHJ1Y3RlZCB3aXRoXG4gICAgICogYW5kIHBhc3NlcyB0aGUgdGFyZ2V0IGFuZCBvcHRpb25zIHRvIHRoYXQgYGJlaGF2aW9yYCdzIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGNyZWF0ZUJlaGF2aW9yKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMuYmVoYXZpb3IodGFyZ2V0LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IERPTSB9IGZyb20gXCIuLi9kb20uanNcIjtcbmltcG9ydCB7IEV4ZWN1dGlvbkNvbnRleHQsIE9ic2VydmFibGUsIH0gZnJvbSBcIi4uL29ic2VydmF0aW9uL29ic2VydmFibGUuanNcIjtcbmltcG9ydCB7IFRhcmdldGVkSFRNTERpcmVjdGl2ZSB9IGZyb20gXCIuL2h0bWwtZGlyZWN0aXZlLmpzXCI7XG5mdW5jdGlvbiBub3JtYWxCaW5kKHNvdXJjZSwgY29udGV4dCkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgaWYgKHRoaXMuYmluZGluZ09ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ09ic2VydmVyID0gT2JzZXJ2YWJsZS5iaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcywgdGhpcy5pc0JpbmRpbmdWb2xhdGlsZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlVGFyZ2V0KHRoaXMuYmluZGluZ09ic2VydmVyLm9ic2VydmUoc291cmNlLCBjb250ZXh0KSk7XG59XG5mdW5jdGlvbiB0cmlnZ2VyQmluZChzb3VyY2UsIGNvbnRleHQpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodGhpcy50YXJnZXROYW1lLCB0aGlzKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbFVuYmluZCgpIHtcbiAgICB0aGlzLmJpbmRpbmdPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG59XG5mdW5jdGlvbiBjb250ZW50VW5iaW5kKCkge1xuICAgIHRoaXMuYmluZGluZ09ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICBjb25zdCB2aWV3ID0gdGhpcy50YXJnZXQuJGZhc3RWaWV3O1xuICAgIGlmICh2aWV3ICE9PSB2b2lkIDAgJiYgdmlldy5pc0NvbXBvc2VkKSB7XG4gICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICAgIHZpZXcubmVlZHNCaW5kT25seSA9IHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlclVuYmluZCgpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudGFyZ2V0TmFtZSwgdGhpcyk7XG4gICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG59XG5mdW5jdGlvbiB1cGRhdGVBdHRyaWJ1dGVUYXJnZXQodmFsdWUpIHtcbiAgICBET00uc2V0QXR0cmlidXRlKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldE5hbWUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUJvb2xlYW5BdHRyaWJ1dGVUYXJnZXQodmFsdWUpIHtcbiAgICBET00uc2V0Qm9vbGVhbkF0dHJpYnV0ZSh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXROYW1lLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVDb250ZW50VGFyZ2V0KHZhbHVlKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyBhY3R1YWwgdmFsdWUsIHRoZW4gdGhpcyBlcXVhdGVzIHRvIHRoZVxuICAgIC8vIGVtcHR5IHN0cmluZyBmb3IgdGhlIHB1cnBvc2VzIG9mIGNvbnRlbnQgYmluZGluZ3MuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgdmFsdWUgaGFzIGEgXCJjcmVhdGVcIiBtZXRob2QsIHRoZW4gaXQncyBhIHRlbXBsYXRlLWxpa2UuXG4gICAgaWYgKHZhbHVlLmNyZWF0ZSkge1xuICAgICAgICB0aGlzLnRhcmdldC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIGxldCB2aWV3ID0gdGhpcy50YXJnZXQuJGZhc3RWaWV3O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHByZXZpb3VzIHZpZXcgdGhhdCB3ZSBtaWdodCBiZSBhYmxlIHRvXG4gICAgICAgIC8vIHJldXNlIHRoZW4gY3JlYXRlIGEgbmV3IHZpZXcgZnJvbSB0aGUgdGVtcGxhdGUuXG4gICAgICAgIGlmICh2aWV3ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZpZXcgPSB2YWx1ZS5jcmVhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcHJldmlvdXMgdmlldywgYnV0IGl0IHdhc24ndCBjcmVhdGVkXG4gICAgICAgICAgICAvLyBmcm9tIHRoZSBzYW1lIHRlbXBsYXRlIGFzIHRoZSBuZXcgdmFsdWUsIHRoZW4gd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gcmVtb3ZlIHRoZSBvbGQgdmlldyBpZiBpdCdzIHN0aWxsIGluIHRoZSBET01cbiAgICAgICAgICAgIC8vIGFuZCBjcmVhdGUgYSBuZXcgdmlldyBmcm9tIHRoZSB0ZW1wbGF0ZS5cbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldC4kZmFzdFRlbXBsYXRlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2aWV3LmlzQ29tcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy51bmJpbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlldyA9IHZhbHVlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzIHRlbXBsYXRlXG4gICAgICAgIC8vIGFuZCB0aGF0IHRoZXJlJ3MgYWN0dWFsbHkgbm8gbmVlZCB0byBjb21wb3NlIGl0LlxuICAgICAgICBpZiAoIXZpZXcuaXNDb21wb3NlZCkge1xuICAgICAgICAgICAgdmlldy5pc0NvbXBvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZpZXcuYmluZCh0aGlzLnNvdXJjZSwgdGhpcy5jb250ZXh0KTtcbiAgICAgICAgICAgIHZpZXcuaW5zZXJ0QmVmb3JlKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LiRmYXN0VmlldyA9IHZpZXc7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC4kZmFzdFRlbXBsYXRlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmlldy5uZWVkc0JpbmRPbmx5KSB7XG4gICAgICAgICAgICB2aWV3Lm5lZWRzQmluZE9ubHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHZpZXcuYmluZCh0aGlzLnNvdXJjZSwgdGhpcy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudGFyZ2V0LiRmYXN0VmlldztcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSB2aWV3IGFuZCBpdCdzIGN1cnJlbnRseSBjb21wb3NlZCBpbnRvXG4gICAgICAgIC8vIHRoZSBET00sIHRoZW4gd2UgbmVlZCB0byByZW1vdmUgaXQuXG4gICAgICAgIGlmICh2aWV3ICE9PSB2b2lkIDAgJiYgdmlldy5pc0NvbXBvc2VkKSB7XG4gICAgICAgICAgICB2aWV3LmlzQ29tcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZpZXcucmVtb3ZlKCk7XG4gICAgICAgICAgICBpZiAodmlldy5uZWVkc0JpbmRPbmx5KSB7XG4gICAgICAgICAgICAgICAgdmlldy5uZWVkc0JpbmRPbmx5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3LnVuYmluZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFyZ2V0LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlUHJvcGVydHlUYXJnZXQodmFsdWUpIHtcbiAgICB0aGlzLnRhcmdldFt0aGlzLnRhcmdldE5hbWVdID0gdmFsdWU7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGFzc1RhcmdldCh2YWx1ZSkge1xuICAgIGNvbnN0IGNsYXNzVmVyc2lvbnMgPSB0aGlzLmNsYXNzVmVyc2lvbnMgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICBsZXQgdmVyc2lvbiA9IHRoaXMudmVyc2lvbiB8fCAwO1xuICAgIC8vIEFkZCB0aGUgY2xhc3NlcywgdHJhY2tpbmcgdGhlIHZlcnNpb24gYXQgd2hpY2ggdGhleSB3ZXJlIGFkZGVkLlxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHZhbHVlLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICBpZiAoY3VycmVudE5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsYXNzVmVyc2lvbnNbY3VycmVudE5hbWVdID0gdmVyc2lvbjtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKGN1cnJlbnROYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNsYXNzVmVyc2lvbnMgPSBjbGFzc1ZlcnNpb25zO1xuICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb24gKyAxO1xuICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwgdG8gYWRkIGNsYXNzZXMsIHRoZXJlJ3Mgbm8gbmVlZCB0byByZW1vdmUgb2xkIG9uZXMuXG4gICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgY2xhc3NlcyBmcm9tIHRoZSBwcmV2aW91cyB2ZXJzaW9uLlxuICAgIHZlcnNpb24gLT0gMTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gY2xhc3NWZXJzaW9ucykge1xuICAgICAgICBpZiAoY2xhc3NWZXJzaW9uc1tuYW1lXSA9PT0gdmVyc2lvbikge1xuICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgY29uZmlndXJlcyBkYXRhIGJpbmRpbmcgdG8gZWxlbWVudCBjb250ZW50IGFuZCBhdHRyaWJ1dGVzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgSFRNTEJpbmRpbmdEaXJlY3RpdmUgZXh0ZW5kcyBUYXJnZXRlZEhUTUxEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQmluZGluZ0RpcmVjdGl2ZS5cbiAgICAgKiBAcGFyYW0gYmluZGluZyAtIEEgYmluZGluZyB0aGF0IHJldHVybnMgdGhlIGRhdGEgdXNlZCB0byB1cGRhdGUgdGhlIERPTS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihiaW5kaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG4gICAgICAgIHRoaXMuYmluZCA9IG5vcm1hbEJpbmQ7XG4gICAgICAgIHRoaXMudW5iaW5kID0gbm9ybWFsVW5iaW5kO1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldCA9IHVwZGF0ZUF0dHJpYnV0ZVRhcmdldDtcbiAgICAgICAgdGhpcy5pc0JpbmRpbmdWb2xhdGlsZSA9IE9ic2VydmFibGUuaXNWb2xhdGlsZUJpbmRpbmcodGhpcy5iaW5kaW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgdGhhdCB0aGlzXG4gICAgICogYmluZGluZyBpcyB0YXJnZXRpbmcuXG4gICAgICovXG4gICAgZ2V0IHRhcmdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsVGFyZ2V0TmFtZTtcbiAgICB9XG4gICAgc2V0IHRhcmdldE5hbWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFRhcmdldE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHZhbHVlWzBdKSB7XG4gICAgICAgICAgICBjYXNlIFwiOlwiOlxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW5lZFRhcmdldE5hbWUgPSB2YWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQgPSB1cGRhdGVQcm9wZXJ0eVRhcmdldDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGVhbmVkVGFyZ2V0TmFtZSA9PT0gXCJpbm5lckhUTUxcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRpbmcgPSAocywgYykgPT4gRE9NLmNyZWF0ZUhUTUwoYmluZGluZyhzLCBjKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFuZWRUYXJnZXROYW1lID0gdmFsdWUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0ID0gdXBkYXRlQm9vbGVhbkF0dHJpYnV0ZVRhcmdldDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJAXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbmVkVGFyZ2V0TmFtZSA9IHZhbHVlLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQgPSB0cmlnZ2VyQmluZDtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmluZCA9IHRyaWdnZXJVbmJpbmQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW5lZFRhcmdldE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiY2xhc3NcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldCA9IHVwZGF0ZUNsYXNzVGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGlzIGJpbmRpbmcgdGFyZ2V0IHRoZSBjb250ZW50IG9mIGFuIGVsZW1lbnQgcmF0aGVyIHRoYW5cbiAgICAgKiBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIG9yIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHRhcmdldEF0Q29udGVudCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQgPSB1cGRhdGVDb250ZW50VGFyZ2V0O1xuICAgICAgICB0aGlzLnVuYmluZCA9IGNvbnRlbnRVbmJpbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHJ1bnRpbWUgQmluZGluZ0JlaGF2aW9yIGluc3RhbmNlIGJhc2VkIG9uIHRoZSBjb25maWd1cmF0aW9uXG4gICAgICogaW5mb3JtYXRpb24gc3RvcmVkIGluIHRoZSBCaW5kaW5nRGlyZWN0aXZlLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG5vZGUgdGhhdCB0aGUgYmluZGluZyBiZWhhdmlvciBzaG91bGQgYXR0YWNoIHRvLlxuICAgICAqL1xuICAgIGNyZWF0ZUJlaGF2aW9yKHRhcmdldCkge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ0JlaGF2aW9yKHRhcmdldCwgdGhpcy5iaW5kaW5nLCB0aGlzLmlzQmluZGluZ1ZvbGF0aWxlLCB0aGlzLmJpbmQsIHRoaXMudW5iaW5kLCB0aGlzLnVwZGF0ZVRhcmdldCwgdGhpcy5jbGVhbmVkVGFyZ2V0TmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBIGJlaGF2aW9yIHRoYXQgdXBkYXRlcyBjb250ZW50IGFuZCBhdHRyaWJ1dGVzIGJhc2VkIG9uIGEgY29uZmlndXJlZFxuICogQmluZGluZ0RpcmVjdGl2ZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJpbmRpbmdCZWhhdmlvciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBCaW5kaW5nQmVoYXZpb3IuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgb2YgdGhlIGRhdGEgdXBkYXRlcy5cbiAgICAgKiBAcGFyYW0gYmluZGluZyAtIFRoZSBiaW5kaW5nIHRoYXQgcmV0dXJucyB0aGUgbGF0ZXN0IHZhbHVlIGZvciBhbiB1cGRhdGUuXG4gICAgICogQHBhcmFtIGlzQmluZGluZ1ZvbGF0aWxlIC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGJpbmRpbmcgaGFzIHZvbGF0aWxlIGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0gYmluZCAtIFRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybSBkdXJpbmcgYmluZGluZy5cbiAgICAgKiBAcGFyYW0gdW5iaW5kIC0gVGhlIG9wZXJhdGlvbiB0byBwZXJmb3JtIGR1cmluZyB1bmJpbmRpbmcuXG4gICAgICogQHBhcmFtIHVwZGF0ZVRhcmdldCAtIFRoZSBvcGVyYXRpb24gdG8gcGVyZm9ybSB3aGVuIHVwZGF0aW5nLlxuICAgICAqIEBwYXJhbSB0YXJnZXROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgYmluZGluZywgaXNCaW5kaW5nVm9sYXRpbGUsIGJpbmQsIHVuYmluZCwgdXBkYXRlVGFyZ2V0LCB0YXJnZXROYW1lKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5iaW5kaW5nT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5iaW5kaW5nID0gYmluZGluZztcbiAgICAgICAgdGhpcy5pc0JpbmRpbmdWb2xhdGlsZSA9IGlzQmluZGluZ1ZvbGF0aWxlO1xuICAgICAgICB0aGlzLmJpbmQgPSBiaW5kO1xuICAgICAgICB0aGlzLnVuYmluZCA9IHVuYmluZDtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQgPSB1cGRhdGVUYXJnZXQ7XG4gICAgICAgIHRoaXMudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KHRoaXMuYmluZGluZ09ic2VydmVyLm9ic2VydmUodGhpcy5zb3VyY2UsIHRoaXMuY29udGV4dCkpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgRXhlY3V0aW9uQ29udGV4dC5zZXRFdmVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYmluZGluZyh0aGlzLnNvdXJjZSwgdGhpcy5jb250ZXh0KTtcbiAgICAgICAgRXhlY3V0aW9uQ29udGV4dC5zZXRFdmVudChudWxsKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IF9pbnRlcnBvbGF0aW9uRW5kLCBfaW50ZXJwb2xhdGlvblN0YXJ0LCBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG5pbXBvcnQgeyBIVE1MQmluZGluZ0RpcmVjdGl2ZSB9IGZyb20gXCIuL2JpbmRpbmcuanNcIjtcbmxldCBzaGFyZWRDb250ZXh0ID0gbnVsbDtcbmNsYXNzIENvbXBpbGF0aW9uQ29udGV4dCB7XG4gICAgYWRkRmFjdG9yeShmYWN0b3J5KSB7XG4gICAgICAgIGZhY3RvcnkudGFyZ2V0SW5kZXggPSB0aGlzLnRhcmdldEluZGV4O1xuICAgICAgICB0aGlzLmJlaGF2aW9yRmFjdG9yaWVzLnB1c2goZmFjdG9yeSk7XG4gICAgfVxuICAgIGNhcHR1cmVDb250ZW50QmluZGluZyhkaXJlY3RpdmUpIHtcbiAgICAgICAgZGlyZWN0aXZlLnRhcmdldEF0Q29udGVudCgpO1xuICAgICAgICB0aGlzLmFkZEZhY3RvcnkoZGlyZWN0aXZlKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuYmVoYXZpb3JGYWN0b3JpZXMgPSBbXTtcbiAgICAgICAgdGhpcy50YXJnZXRJbmRleCA9IC0xO1xuICAgIH1cbiAgICByZWxlYXNlKCkge1xuICAgICAgICBzaGFyZWRDb250ZXh0ID0gdGhpcztcbiAgICB9XG4gICAgc3RhdGljIGJvcnJvdyhkaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IHNoYXJlYWJsZSA9IHNoYXJlZENvbnRleHQgfHwgbmV3IENvbXBpbGF0aW9uQ29udGV4dCgpO1xuICAgICAgICBzaGFyZWFibGUuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XG4gICAgICAgIHNoYXJlYWJsZS5yZXNldCgpO1xuICAgICAgICBzaGFyZWRDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHNoYXJlYWJsZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdGVCaW5kaW5nKHBhcnRzKSB7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgfVxuICAgIGxldCB0YXJnZXROYW1lO1xuICAgIGNvbnN0IHBhcnRDb3VudCA9IHBhcnRzLmxlbmd0aDtcbiAgICBjb25zdCBmaW5hbFBhcnRzID0gcGFydHMubWFwKCh4KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHg7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0TmFtZSA9IHgudGFyZ2V0TmFtZSB8fCB0YXJnZXROYW1lO1xuICAgICAgICByZXR1cm4geC5iaW5kaW5nO1xuICAgIH0pO1xuICAgIGNvbnN0IGJpbmRpbmcgPSAoc2NvcGUsIGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydENvdW50OyArK2kpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBmaW5hbFBhcnRzW2ldKHNjb3BlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG4gICAgY29uc3QgZGlyZWN0aXZlID0gbmV3IEhUTUxCaW5kaW5nRGlyZWN0aXZlKGJpbmRpbmcpO1xuICAgIGRpcmVjdGl2ZS50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xufVxuY29uc3QgaW50ZXJwb2xhdGlvbkVuZExlbmd0aCA9IF9pbnRlcnBvbGF0aW9uRW5kLmxlbmd0aDtcbmZ1bmN0aW9uIHBhcnNlQ29udGVudChjb250ZXh0LCB2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlUGFydHMgPSB2YWx1ZS5zcGxpdChfaW50ZXJwb2xhdGlvblN0YXJ0KTtcbiAgICBpZiAodmFsdWVQYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGJpbmRpbmdQYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZhbHVlUGFydHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdmFsdWVQYXJ0c1tpXTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjdXJyZW50LmluZGV4T2YoX2ludGVycG9sYXRpb25FbmQpO1xuICAgICAgICBsZXQgbGl0ZXJhbDtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgbGl0ZXJhbCA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmVJbmRleCA9IHBhcnNlSW50KGN1cnJlbnQuc3Vic3RyaW5nKDAsIGluZGV4KSk7XG4gICAgICAgICAgICBiaW5kaW5nUGFydHMucHVzaChjb250ZXh0LmRpcmVjdGl2ZXNbZGlyZWN0aXZlSW5kZXhdKTtcbiAgICAgICAgICAgIGxpdGVyYWwgPSBjdXJyZW50LnN1YnN0cmluZyhpbmRleCArIGludGVycG9sYXRpb25FbmRMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXRlcmFsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBiaW5kaW5nUGFydHMucHVzaChsaXRlcmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ1BhcnRzO1xufVxuZnVuY3Rpb24gY29tcGlsZUF0dHJpYnV0ZXMoY29udGV4dCwgbm9kZSwgaW5jbHVkZUJhc2ljVmFsdWVzID0gZmFsc2UpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgY29uc3QgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgICAgY29uc3QgcGFyc2VSZXN1bHQgPSBwYXJzZUNvbnRlbnQoY29udGV4dCwgYXR0clZhbHVlKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmIChwYXJzZVJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVCYXNpY1ZhbHVlcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBIVE1MQmluZGluZ0RpcmVjdGl2ZSgoKSA9PiBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC50YXJnZXROYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlQWdncmVnYXRlQmluZGluZyhwYXJzZVJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgaWktLTtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFjdG9yeShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcGlsZUNvbnRlbnQoY29udGV4dCwgbm9kZSwgd2Fsa2VyKSB7XG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSBwYXJzZUNvbnRlbnQoY29udGV4dCwgbm9kZS50ZXh0Q29udGVudCk7XG4gICAgaWYgKHBhcnNlUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgIGxldCBsYXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBhcnNlUmVzdWx0Lmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYXJ0ID0gcGFyc2VSZXN1bHRbaV07XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IGkgPT09IDBcbiAgICAgICAgICAgICAgICA/IG5vZGVcbiAgICAgICAgICAgICAgICA6IGxhc3ROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpLCBsYXN0Tm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRQYXJ0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUudGV4dENvbnRlbnQgPSBjdXJyZW50UGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnRleHRDb250ZW50ID0gXCIgXCI7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jYXB0dXJlQ29udGVudEJpbmRpbmcoY3VycmVudFBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgIGNvbnRleHQudGFyZ2V0SW5kZXgrKztcbiAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSAhPT0gbm9kZSkge1xuICAgICAgICAgICAgICAgIHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQudGFyZ2V0SW5kZXgtLTtcbiAgICB9XG59XG4vKipcbiAqIENvbXBpbGVzIGEgdGVtcGxhdGUgYW5kIGFzc29jaWF0ZWQgZGlyZWN0aXZlcyBpbnRvIGEgcmF3IGNvbXBpbGF0aW9uXG4gKiByZXN1bHQgd2hpY2ggaW5jbHVkZSBhIGNsb25lYWJsZSBEb2N1bWVudEZyYWdtZW50IGFuZCBmYWN0b3JpZXMgY2FwYWJsZVxuICogb2YgYXR0YWNoaW5nIHJ1bnRpbWUgYmVoYXZpb3IgdG8gbm9kZXMgd2l0aGluIHRoZSBmcmFnbWVudC5cbiAqIEBwYXJhbSB0ZW1wbGF0ZSAtIFRoZSB0ZW1wbGF0ZSB0byBjb21waWxlLlxuICogQHBhcmFtIGRpcmVjdGl2ZXMgLSBUaGUgZGlyZWN0aXZlcyByZWZlcmVuY2VkIGJ5IHRoZSB0ZW1wbGF0ZS5cbiAqIEByZW1hcmtzXG4gKiBUaGUgdGVtcGxhdGUgdGhhdCBpcyBwcm92aWRlZCBmb3IgY29tcGlsYXRpb24gaXMgYWx0ZXJlZCBpbi1wbGFjZVxuICogYW5kIGNhbm5vdCBiZSBjb21waWxlZCBhZ2Fpbi4gSWYgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIG11c3QgYmUgcHJlc2VydmVkLFxuICogaXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgY2xvbmUgdGhlIG9yaWdpbmFsIGFuZCBwYXNzIHRoZSBjbG9uZSB0byB0aGlzIEFQSS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGlyZWN0aXZlcykge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGVtcGxhdGUuY29udGVudDtcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMTExODY0XG4gICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTtcbiAgICBjb25zdCBjb250ZXh0ID0gQ29tcGlsYXRpb25Db250ZXh0LmJvcnJvdyhkaXJlY3RpdmVzKTtcbiAgICBjb21waWxlQXR0cmlidXRlcyhjb250ZXh0LCB0ZW1wbGF0ZSwgdHJ1ZSk7XG4gICAgY29uc3QgaG9zdEJlaGF2aW9yRmFjdG9yaWVzID0gY29udGV4dC5iZWhhdmlvckZhY3RvcmllcztcbiAgICBjb250ZXh0LnJlc2V0KCk7XG4gICAgY29uc3Qgd2Fsa2VyID0gRE9NLmNyZWF0ZVRlbXBsYXRlV2Fsa2VyKGZyYWdtZW50KTtcbiAgICBsZXQgbm9kZTtcbiAgICB3aGlsZSAoKG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAgICAgY29udGV4dC50YXJnZXRJbmRleCsrO1xuICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTogLy8gZWxlbWVudCBub2RlXG4gICAgICAgICAgICAgICAgY29tcGlsZUF0dHJpYnV0ZXMoY29udGV4dCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6IC8vIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgIGNvbXBpbGVDb250ZW50KGNvbnRleHQsIG5vZGUsIHdhbGtlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6IC8vIGNvbW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoRE9NLmlzTWFya2VyKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkRmFjdG9yeShkaXJlY3RpdmVzW0RPTS5leHRyYWN0RGlyZWN0aXZlSW5kZXhGcm9tTWFya2VyKG5vZGUpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0YXJnZXRPZmZzZXQgPSAwO1xuICAgIGlmIChcbiAgICAvLyBJZiB0aGUgZmlyc3Qgbm9kZSBpbiBhIGZyYWdtZW50IGlzIGEgbWFya2VyLCB0aGF0IG1lYW5zIGl0J3MgYW4gdW5zdGFibGUgZmlyc3Qgbm9kZSxcbiAgICAvLyBiZWNhdXNlIHNvbWV0aGluZyBsaWtlIGEgd2hlbiwgcmVwZWF0LCBldGMuIGNvdWxkIGFkZCBub2RlcyBiZWZvcmUgdGhlIG1hcmtlci5cbiAgICAvLyBUbyBtaXRpZ2F0ZSB0aGlzLCB3ZSBpbnNlcnQgYSBzdGFibGUgZmlyc3Qgbm9kZS4gSG93ZXZlciwgaWYgd2UgaW5zZXJ0IGEgbm9kZSxcbiAgICAvLyB0aGF0IHdpbGwgYWx0ZXIgdGhlIHJlc3VsdCBvZiB0aGUgVHJlZVdhbGtlci4gU28sIHdlIGFsc28gbmVlZCB0byBvZmZzZXQgdGhlIHRhcmdldCBpbmRleC5cbiAgICBET00uaXNNYXJrZXIoZnJhZ21lbnQuZmlyc3RDaGlsZCkgfHxcbiAgICAgICAgLy8gT3IgaWYgdGhlcmUgaXMgb25seSBvbmUgbm9kZSBhbmQgYSBkaXJlY3RpdmUsIGl0IG1lYW5zIHRoZSB0ZW1wbGF0ZSdzIGNvbnRlbnRcbiAgICAgICAgLy8gaXMgKm9ubHkqIHRoZSBkaXJlY3RpdmUuIEluIHRoYXQgY2FzZSwgSFRNTFZpZXcuZGlzcG9zZSgpIG1pc3NlcyBhbnkgbm9kZXMgaW5zZXJ0ZWQgYnlcbiAgICAgICAgLy8gdGhlIGRpcmVjdGl2ZS4gSW5zZXJ0aW5nIGEgbmV3IG5vZGUgZW5zdXJlcyBwcm9wZXIgZGlzcG9zYWwgb2Ygbm9kZXMgYWRkZWQgYnkgdGhlIGRpcmVjdGl2ZS5cbiAgICAgICAgKGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIGRpcmVjdGl2ZXMubGVuZ3RoKSkge1xuICAgICAgICBmcmFnbWVudC5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSwgZnJhZ21lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIHRhcmdldE9mZnNldCA9IC0xO1xuICAgIH1cbiAgICBjb25zdCB2aWV3QmVoYXZpb3JGYWN0b3JpZXMgPSBjb250ZXh0LmJlaGF2aW9yRmFjdG9yaWVzO1xuICAgIGNvbnRleHQucmVsZWFzZSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGZyYWdtZW50LFxuICAgICAgICB2aWV3QmVoYXZpb3JGYWN0b3JpZXMsXG4gICAgICAgIGhvc3RCZWhhdmlvckZhY3RvcmllcyxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgIH07XG59XG4iLCIvLyBBIHNpbmdsZXRvbiBSYW5nZSBpbnN0YW5jZSB1c2VkIHRvIGVmZmljaWVudGx5IHJlbW92ZSByYW5nZXMgb2YgRE9NIG5vZGVzLlxuLy8gU2VlIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBIVE1MVmlldyBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLlxuY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuLyoqXG4gKiBUaGUgc3RhbmRhcmQgVmlldyBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggYWxzbyBpbXBsZW1lbnRzIEVsZW1lbnRWaWV3IGFuZCBTeW50aGV0aWNWaWV3LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgSFRNTFZpZXcge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgSFRNTFZpZXcuXG4gICAgICogQHBhcmFtIGZyYWdtZW50IC0gVGhlIGh0bWwgZnJhZ21lbnQgdGhhdCBjb250YWlucyB0aGUgbm9kZXMgZm9yIHRoaXMgdmlldy5cbiAgICAgKiBAcGFyYW0gYmVoYXZpb3JzIC0gVGhlIGJlaGF2aW9ycyB0byBiZSBhcHBsaWVkIHRvIHRoaXMgdmlldy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihmcmFnbWVudCwgYmVoYXZpb3JzKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDtcbiAgICAgICAgdGhpcy5iZWhhdmlvcnMgPSBiZWhhdmlvcnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGF0YSB0aGF0IHRoZSB2aWV3IGlzIGJvdW5kIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGV4ZWN1dGlvbiBjb250ZXh0IHRoZSB2aWV3IGlzIHJ1bm5pbmcgd2l0aGluLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdENoaWxkID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgdGhpcy5sYXN0Q2hpbGQgPSBmcmFnbWVudC5sYXN0Q2hpbGQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhlIHZpZXcncyBET00gbm9kZXMgdG8gdGhlIHJlZmVyZW5jZWQgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZSAtIFRoZSBwYXJlbnQgbm9kZSB0byBhcHBlbmQgdGhlIHZpZXcncyBET00gbm9kZXMgdG8uXG4gICAgICovXG4gICAgYXBwZW5kVG8obm9kZSkge1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMuZnJhZ21lbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoZSB2aWV3J3MgRE9NIG5vZGVzIGJlZm9yZSB0aGUgcmVmZXJlbmNlZCBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gaW5zZXJ0IHRoZSB2aWV3J3MgRE9NIGJlZm9yZS5cbiAgICAgKi9cbiAgICBpbnNlcnRCZWZvcmUobm9kZSkge1xuICAgICAgICBpZiAodGhpcy5mcmFnbWVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5mcmFnbWVudCwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gdGhpcy5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGxldCBuZXh0O1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IGVuZCkge1xuICAgICAgICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGN1cnJlbnQsIG5vZGUpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZW5kLCBub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSB2aWV3J3MgRE9NIG5vZGVzLlxuICAgICAqIFRoZSBub2RlcyBhcmUgbm90IGRpc3Bvc2VkIGFuZCB0aGUgdmlldyBjYW4gbGF0ZXIgYmUgcmUtaW5zZXJ0ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgICAgIGNvbnN0IGVuZCA9IHRoaXMubGFzdENoaWxkO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuZmlyc3RDaGlsZDtcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBlbmQpIHtcbiAgICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY3VycmVudCk7XG4gICAgICAgICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSB2aWV3IGFuZCB1bmJpbmRzIGl0cyBiZWhhdmlvcnMsIGRpc3Bvc2luZyBvZiBET00gbm9kZXMgYWZ0ZXJ3YXJkLlxuICAgICAqIE9uY2UgYSB2aWV3IGhhcyBiZWVuIGRpc3Bvc2VkLCBpdCBjYW5ub3QgYmUgaW5zZXJ0ZWQgb3IgYm91bmQgYWdhaW4uXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5maXJzdENoaWxkLnBhcmVudE5vZGU7XG4gICAgICAgIGNvbnN0IGVuZCA9IHRoaXMubGFzdENoaWxkO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuZmlyc3RDaGlsZDtcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBlbmQpIHtcbiAgICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGN1cnJlbnQpO1xuICAgICAgICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVuZCk7XG4gICAgICAgIGNvbnN0IGJlaGF2aW9ycyA9IHRoaXMuYmVoYXZpb3JzO1xuICAgICAgICBjb25zdCBvbGRTb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYmVoYXZpb3JzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGJlaGF2aW9yc1tpXS51bmJpbmQob2xkU291cmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCaW5kcyBhIHZpZXcncyBiZWhhdmlvcnMgdG8gaXRzIGJpbmRpbmcgc291cmNlLlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgYmluZGluZyBzb3VyY2UgZm9yIHRoZSB2aWV3J3MgYmluZGluZyBiZWhhdmlvcnMuXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBUaGUgZXhlY3V0aW9uIGNvbnRleHQgdG8gcnVuIHRoZSBiZWhhdmlvcnMgd2l0aGluLlxuICAgICAqL1xuICAgIGJpbmQoc291cmNlLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGJlaGF2aW9ycyA9IHRoaXMuYmVoYXZpb3JzO1xuICAgICAgICBpZiAodGhpcy5zb3VyY2UgPT09IHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRTb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGJlaGF2aW9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGJlaGF2aW9yc1tpXTtcbiAgICAgICAgICAgICAgICBjdXJyZW50LnVuYmluZChvbGRTb3VyY2UpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQuYmluZChzb3VyY2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYmVoYXZpb3JzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBiZWhhdmlvcnNbaV0uYmluZChzb3VyY2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgYSB2aWV3J3MgYmVoYXZpb3JzIGZyb20gaXRzIGJpbmRpbmcgc291cmNlLlxuICAgICAqL1xuICAgIHVuYmluZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc291cmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmVoYXZpb3JzID0gdGhpcy5iZWhhdmlvcnM7XG4gICAgICAgIGNvbnN0IG9sZFNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBiZWhhdmlvcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgYmVoYXZpb3JzW2ldLnVuYmluZChvbGRTb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRWZmaWNpZW50bHkgZGlzcG9zZXMgb2YgYSBjb250aWd1b3VzIHJhbmdlIG9mIHN5bnRoZXRpYyB2aWV3IGluc3RhbmNlcy5cbiAgICAgKiBAcGFyYW0gdmlld3MgLSBBIGNvbnRpZ3VvdXMgcmFuZ2Ugb2Ygdmlld3MgdG8gYmUgZGlzcG9zZWQuXG4gICAgICovXG4gICAgc3RhdGljIGRpc3Bvc2VDb250aWd1b3VzQmF0Y2godmlld3MpIHtcbiAgICAgICAgaWYgKHZpZXdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKHZpZXdzWzBdLmZpcnN0Q2hpbGQpO1xuICAgICAgICByYW5nZS5zZXRFbmRBZnRlcih2aWV3c1t2aWV3cy5sZW5ndGggLSAxXS5sYXN0Q2hpbGQpO1xuICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB2aWV3cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld3NbaV07XG4gICAgICAgICAgICBjb25zdCBiZWhhdmlvcnMgPSB2aWV3LmJlaGF2aW9ycztcbiAgICAgICAgICAgIGNvbnN0IG9sZFNvdXJjZSA9IHZpZXcuc291cmNlO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gYmVoYXZpb3JzLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgICAgICAgICBiZWhhdmlvcnNbal0udW5iaW5kKG9sZFNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RXhlY3V0aW9uQ29udGV4dCB9IGZyb20gXCIuLi9vYnNlcnZhdGlvbi9vYnNlcnZhYmxlLmpzXCI7XG5pbXBvcnQgeyBjb21waWxlVGVtcGxhdGUgfSBmcm9tIFwiLi9jb21waWxlci5qc1wiO1xuaW1wb3J0IHsgSFRNTFZpZXcgfSBmcm9tIFwiLi92aWV3LmpzXCI7XG5pbXBvcnQgeyBIVE1MRGlyZWN0aXZlLCBUYXJnZXRlZEhUTUxEaXJlY3RpdmUsIH0gZnJvbSBcIi4vaHRtbC1kaXJlY3RpdmUuanNcIjtcbmltcG9ydCB7IEhUTUxCaW5kaW5nRGlyZWN0aXZlIH0gZnJvbSBcIi4vYmluZGluZy5qc1wiO1xuLyoqXG4gKiBBIHRlbXBsYXRlIGNhcGFibGUgb2YgY3JlYXRpbmcgSFRNTFZpZXcgaW5zdGFuY2VzIG9yIHJlbmRlcmluZyBkaXJlY3RseSB0byBET00uXG4gKiBAcHVibGljXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbmV4cG9ydCBjbGFzcyBWaWV3VGVtcGxhdGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVmlld1RlbXBsYXRlLlxuICAgICAqIEBwYXJhbSBodG1sIC0gVGhlIGh0bWwgcmVwcmVzZW50aW5nIHdoYXQgdGhpcyB0ZW1wbGF0ZSB3aWxsIGluc3RhbnRpYXRlLCBpbmNsdWRpbmcgcGxhY2Vob2xkZXJzIGZvciBkaXJlY3RpdmVzLlxuICAgICAqIEBwYXJhbSBkaXJlY3RpdmVzIC0gVGhlIGRpcmVjdGl2ZXMgdGhhdCB3aWxsIGJlIGNvbm5lY3RlZCB0byBwbGFjZWhvbGRlcnMgaW4gdGhlIGh0bWwuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaHRtbCwgZGlyZWN0aXZlcykge1xuICAgICAgICB0aGlzLmJlaGF2aW9yQ291bnQgPSAwO1xuICAgICAgICB0aGlzLmhhc0hvc3RCZWhhdmlvcnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy52aWV3QmVoYXZpb3JGYWN0b3JpZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmhvc3RCZWhhdmlvckZhY3RvcmllcyA9IG51bGw7XG4gICAgICAgIHRoaXMuaHRtbCA9IGh0bWw7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSFRNTFZpZXcgaW5zdGFuY2UgYmFzZWQgb24gdGhpcyB0ZW1wbGF0ZSBkZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSBob3N0QmluZGluZ1RhcmdldCAtIFRoZSBlbGVtZW50IHRoYXQgaG9zdCBiZWhhdmlvcnMgd2lsbCBiZSBib3VuZCB0by5cbiAgICAgKi9cbiAgICBjcmVhdGUoaG9zdEJpbmRpbmdUYXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSB0aGlzLmh0bWw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGh0bWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBET00uY3JlYXRlSFRNTChodG1sKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWMgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgIGlmIChmZWMgIT09IG51bGwgJiYgZmVjLnRhZ05hbWUgPT09IFwiVEVNUExBVEVcIikge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGZlYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb21waWxlVGVtcGxhdGUodGVtcGxhdGUsIHRoaXMuZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gcmVzdWx0LmZyYWdtZW50O1xuICAgICAgICAgICAgdGhpcy52aWV3QmVoYXZpb3JGYWN0b3JpZXMgPSByZXN1bHQudmlld0JlaGF2aW9yRmFjdG9yaWVzO1xuICAgICAgICAgICAgdGhpcy5ob3N0QmVoYXZpb3JGYWN0b3JpZXMgPSByZXN1bHQuaG9zdEJlaGF2aW9yRmFjdG9yaWVzO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRPZmZzZXQgPSByZXN1bHQudGFyZ2V0T2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5iZWhhdmlvckNvdW50ID1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdCZWhhdmlvckZhY3Rvcmllcy5sZW5ndGggKyB0aGlzLmhvc3RCZWhhdmlvckZhY3Rvcmllcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmhhc0hvc3RCZWhhdmlvcnMgPSB0aGlzLmhvc3RCZWhhdmlvckZhY3Rvcmllcy5sZW5ndGggPiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IHZpZXdGYWN0b3JpZXMgPSB0aGlzLnZpZXdCZWhhdmlvckZhY3RvcmllcztcbiAgICAgICAgY29uc3QgYmVoYXZpb3JzID0gbmV3IEFycmF5KHRoaXMuYmVoYXZpb3JDb3VudCk7XG4gICAgICAgIGNvbnN0IHdhbGtlciA9IERPTS5jcmVhdGVUZW1wbGF0ZVdhbGtlcihmcmFnbWVudCk7XG4gICAgICAgIGxldCBiZWhhdmlvckluZGV4ID0gMDtcbiAgICAgICAgbGV0IHRhcmdldEluZGV4ID0gdGhpcy50YXJnZXRPZmZzZXQ7XG4gICAgICAgIGxldCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIGZvciAobGV0IGlpID0gdmlld0ZhY3Rvcmllcy5sZW5ndGg7IGJlaGF2aW9ySW5kZXggPCBpaTsgKytiZWhhdmlvckluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBmYWN0b3J5ID0gdmlld0ZhY3Rvcmllc1tiZWhhdmlvckluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnlJbmRleCA9IGZhY3RvcnkudGFyZ2V0SW5kZXg7XG4gICAgICAgICAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJbmRleCA9PT0gZmFjdG9yeUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yc1tiZWhhdmlvckluZGV4XSA9IGZhY3RvcnkuY3JlYXRlQmVoYXZpb3Iobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNIb3N0QmVoYXZpb3JzKSB7XG4gICAgICAgICAgICBjb25zdCBob3N0RmFjdG9yaWVzID0gdGhpcy5ob3N0QmVoYXZpb3JGYWN0b3JpZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBob3N0RmFjdG9yaWVzLmxlbmd0aDsgaSA8IGlpOyArK2ksICsrYmVoYXZpb3JJbmRleCkge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9yc1tiZWhhdmlvckluZGV4XSA9IGhvc3RGYWN0b3JpZXNbaV0uY3JlYXRlQmVoYXZpb3IoaG9zdEJpbmRpbmdUYXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSFRNTFZpZXcoZnJhZ21lbnQsIGJlaGF2aW9ycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSFRNTFZpZXcgZnJvbSB0aGlzIHRlbXBsYXRlLCBiaW5kcyBpdCB0byB0aGUgc291cmNlLCBhbmQgdGhlbiBhcHBlbmRzIGl0IHRvIHRoZSBob3N0LlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgZGF0YSBzb3VyY2UgdG8gYmluZCB0aGUgdGVtcGxhdGUgdG8uXG4gICAgICogQHBhcmFtIGhvc3QgLSBUaGUgRWxlbWVudCB3aGVyZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKiBAcGFyYW0gaG9zdEJpbmRpbmdUYXJnZXQgLSBBbiBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0IHRoZSBob3N0IGJpbmRpbmdzIGF0IGlmIGRpZmZlcmVudCBmcm9tIHRoZVxuICAgICAqIGhvc3QgdGhhdCB0aGUgdGVtcGxhdGUgaXMgYmVpbmcgYXR0YWNoZWQgdG8uXG4gICAgICovXG4gICAgcmVuZGVyKHNvdXJjZSwgaG9zdCwgaG9zdEJpbmRpbmdUYXJnZXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBob3N0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBob3N0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaG9zdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvc3RCaW5kaW5nVGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGhvc3RCaW5kaW5nVGFyZ2V0ID0gaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5jcmVhdGUoaG9zdEJpbmRpbmdUYXJnZXQpO1xuICAgICAgICB2aWV3LmJpbmQoc291cmNlLCBkZWZhdWx0RXhlY3V0aW9uQ29udGV4dCk7XG4gICAgICAgIHZpZXcuYXBwZW5kVG8oaG9zdCk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbn1cbi8vIE11Y2ggdGhhbmtzIHRvIExpdEhUTUwgZm9yIHdvcmtpbmcgdGhpcyBvdXQhXG5jb25zdCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4ID0gXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleCAqL1xuLyhbIFxceDA5XFx4MGFcXHgwY1xceDBkXSkoW15cXDAtXFx4MUZcXHg3Ri1cXHg5RiBcIic+PS9dKykoWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qPVsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKig/OlteIFxceDA5XFx4MGFcXHgwY1xceDBkXCInYDw+PV0qfFwiW15cIl0qfCdbXiddKikpJC87XG4vKipcbiAqIFRyYW5zZm9ybXMgYSB0ZW1wbGF0ZSBsaXRlcmFsIHN0cmluZyBpbnRvIGEgcmVuZGVyYWJsZSBWaWV3VGVtcGxhdGUuXG4gKiBAcGFyYW0gc3RyaW5ncyAtIFRoZSBzdHJpbmcgZnJhZ21lbnRzIHRoYXQgYXJlIGludGVycG9sYXRlZCB3aXRoIHRoZSB2YWx1ZXMuXG4gKiBAcGFyYW0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgc3RyaW5nIGZyYWdtZW50cy5cbiAqIEByZW1hcmtzXG4gKiBUaGUgaHRtbCBoZWxwZXIgc3VwcG9ydHMgaW50ZXJwb2xhdGlvbiBvZiBzdHJpbmdzLCBudW1iZXJzLCBiaW5kaW5nIGV4cHJlc3Npb25zLFxuICogb3RoZXIgdGVtcGxhdGUgaW5zdGFuY2VzLCBhbmQgRGlyZWN0aXZlIGluc3RhbmNlcy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IFtdO1xuICAgIGxldCBodG1sID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHJpbmdzLmxlbmd0aCAtIDE7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdHJpbmcgPSBzdHJpbmdzW2ldO1xuICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIGh0bWwgKz0gY3VycmVudFN0cmluZztcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVmlld1RlbXBsYXRlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdmFsdWUgPSAoKSA9PiB0ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbmV3IEhUTUxCaW5kaW5nRGlyZWN0aXZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUYXJnZXRlZEhUTUxEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKGN1cnJlbnRTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUudGFyZ2V0TmFtZSA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEhUTUxEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIC8vIFNpbmNlIG5vdCBhbGwgdmFsdWVzIGFyZSBkaXJlY3RpdmVzLCB3ZSBjYW4ndCB1c2UgaVxuICAgICAgICAgICAgLy8gYXMgdGhlIGluZGV4IGZvciB0aGUgcGxhY2Vob2xkZXIuIEluc3RlYWQsIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIHVzZSBkaXJlY3RpdmVzLmxlbmd0aCB0byBnZXQgdGhlIG5leHQgaW5kZXguXG4gICAgICAgICAgICBodG1sICs9IHZhbHVlLmNyZWF0ZVBsYWNlaG9sZGVyKGRpcmVjdGl2ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBodG1sICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGh0bWwgKz0gc3RyaW5nc1tzdHJpbmdzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBuZXcgVmlld1RlbXBsYXRlKGh0bWwsIGRpcmVjdGl2ZXMpO1xufVxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jQmFkZ2V9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGJhZGdlVGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHRlbXBsYXRlIGNsYXNzPVwiJHt4ID0+ICh4LmNpcmN1bGFyID8gXCJjaXJjdWxhclwiIDogXCJcIil9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCIgcGFydD1cImNvbnRyb2xcIiBzdHlsZT1cIiR7eCA9PiB4LmdlbmVyYXRlQmFkZ2VTdHlsZSgpfVwiPlxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuYDtcbiIsIi8qKlxuICogRGlyZWN0aXZlIGZvciB1c2UgaW4ge0BsaW5rIGNzc30uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQ1NTRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQ1NTIGZyYWdtZW50IHRvIGludGVycG9sYXRlIGludG8gdGhlIENTUyBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyAtIHRoZSBzdHJpbmcgdG8gaW50ZXJwb2xhdGUgaW50byBDU1NcbiAgICAgKi9cbiAgICBjcmVhdGVDU1MoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmVoYXZpb3IgdG8gYmluZCB0byB0aGUgaG9zdCBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIC0gdGhlIGJlaGF2aW9yIHRvIGJpbmQgdG8gdGhlIGhvc3QgZWxlbWVudCwgb3IgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGNyZWF0ZUJlaGF2aW9yKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENTU0RpcmVjdGl2ZSB9IGZyb20gXCIuL2Nzcy1kaXJlY3RpdmUuanNcIjtcbmltcG9ydCB7IEVsZW1lbnRTdHlsZXMgfSBmcm9tIFwiLi9lbGVtZW50LXN0eWxlcy5qc1wiO1xuZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICBsZXQgY3NzU3RyaW5nID0gXCJcIjtcbiAgICBjb25zdCBiZWhhdmlvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHJpbmdzLmxlbmd0aCAtIDE7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGNzc1N0cmluZyArPSBzdHJpbmdzW2ldO1xuICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENTU0RpcmVjdGl2ZSkge1xuICAgICAgICAgICAgY29uc3QgYmVoYXZpb3IgPSB2YWx1ZS5jcmVhdGVCZWhhdmlvcigpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5jcmVhdGVDU1MoKTtcbiAgICAgICAgICAgIGlmIChiZWhhdmlvcikge1xuICAgICAgICAgICAgICAgIGJlaGF2aW9ycy5wdXNoKGJlaGF2aW9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFbGVtZW50U3R5bGVzIHx8IHZhbHVlIGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldCkge1xuICAgICAgICAgICAgaWYgKGNzc1N0cmluZy50cmltKCkgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMucHVzaChjc3NTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGNzc1N0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHlsZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjc3NTdHJpbmcgKz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3NzU3RyaW5nICs9IHN0cmluZ3Nbc3RyaW5ncy5sZW5ndGggLSAxXTtcbiAgICBpZiAoY3NzU3RyaW5nLnRyaW0oKSAhPT0gXCJcIikge1xuICAgICAgICBzdHlsZXMucHVzaChjc3NTdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdHlsZXMsXG4gICAgICAgIGJlaGF2aW9ycyxcbiAgICB9O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgdGVtcGxhdGUgbGl0ZXJhbCBzdHJpbmcgaW50byBzdHlsZXMuXG4gKiBAcGFyYW0gc3RyaW5ncyAtIFRoZSBzdHJpbmcgZnJhZ21lbnRzIHRoYXQgYXJlIGludGVycG9sYXRlZCB3aXRoIHRoZSB2YWx1ZXMuXG4gKiBAcGFyYW0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgc3RyaW5nIGZyYWdtZW50cy5cbiAqIEByZW1hcmtzXG4gKiBUaGUgY3NzIGhlbHBlciBzdXBwb3J0cyBpbnRlcnBvbGF0aW9uIG9mIHN0cmluZ3MgYW5kIEVsZW1lbnRTdHlsZSBpbnN0YW5jZXMuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3Moc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgY29uc3QgeyBzdHlsZXMsIGJlaGF2aW9ycyB9ID0gY29sbGVjdFN0eWxlcyhzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIGNvbnN0IGVsZW1lbnRTdHlsZXMgPSBFbGVtZW50U3R5bGVzLmNyZWF0ZShzdHlsZXMpO1xuICAgIGlmIChiZWhhdmlvcnMubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRTdHlsZXMud2l0aEJlaGF2aW9ycyguLi5iZWhhdmlvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudFN0eWxlcztcbn1cbmNsYXNzIENTU1BhcnRpYWwgZXh0ZW5kcyBDU1NEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHN0eWxlcywgYmVoYXZpb3JzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmVoYXZpb3JzID0gYmVoYXZpb3JzO1xuICAgICAgICB0aGlzLmNzcyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHN0eWxlc2hlZXRzID0gc3R5bGVzLnJlZHVjZSgoYWNjdW11bGF0ZWQsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuY3NzICs9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZC5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmIChzdHlsZXNoZWV0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVzID0gRWxlbWVudFN0eWxlcy5jcmVhdGUoc3R5bGVzaGVldHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUJlaGF2aW9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY3JlYXRlQ1NTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jc3M7XG4gICAgfVxuICAgIGJpbmQoZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVzKSB7XG4gICAgICAgICAgICBlbC4kZmFzdENvbnRyb2xsZXIuYWRkU3R5bGVzKHRoaXMuc3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5iZWhhdmlvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbC4kZmFzdENvbnRyb2xsZXIuYWRkQmVoYXZpb3JzKHRoaXMuYmVoYXZpb3JzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bmJpbmQoZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVzKSB7XG4gICAgICAgICAgICBlbC4kZmFzdENvbnRyb2xsZXIucmVtb3ZlU3R5bGVzKHRoaXMuc3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5iZWhhdmlvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbC4kZmFzdENvbnRyb2xsZXIucmVtb3ZlQmVoYXZpb3JzKHRoaXMuYmVoYXZpb3JzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhIHRlbXBsYXRlIGxpdGVyYWwgc3RyaW5nIGludG8gcGFydGlhbCBDU1MuXG4gKiBAcGFyYW0gc3RyaW5ncyAtIFRoZSBzdHJpbmcgZnJhZ21lbnRzIHRoYXQgYXJlIGludGVycG9sYXRlZCB3aXRoIHRoZSB2YWx1ZXMuXG4gKiBAcGFyYW0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgc3RyaW5nIGZyYWdtZW50cy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc1BhcnRpYWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgY29uc3QgeyBzdHlsZXMsIGJlaGF2aW9ycyB9ID0gY29sbGVjdFN0eWxlcyhzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIHJldHVybiBuZXcgQ1NTUGFydGlhbChzdHlsZXMsIGJlaGF2aW9ycyk7XG59XG4iLCIvKipcbiAqIEEgQ1NTIGZyYWdtZW50IHRvIHNldCBgZGlzcGxheTogbm9uZTtgIHdoZW4gdGhlIGhvc3QgaXMgaGlkZGVuIHVzaW5nIHRoZSBbaGlkZGVuXSBhdHRyaWJ1dGUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBoaWRkZW4gPSBgOmhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX1gO1xuLyoqXG4gKiBBcHBsaWVzIGEgQ1NTIGRpc3BsYXkgcHJvcGVydHkuXG4gKiBBbHNvIGFkZHMgQ1NTIHJ1bGVzIHRvIG5vdCBkaXNwbGF5IHRoZSBlbGVtZW50IHdoZW4gdGhlIFtoaWRkZW5dIGF0dHJpYnV0ZSBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIGRpc3BsYXkgLSBUaGUgQ1NTIGRpc3BsYXkgcHJvcGVydHkgdmFsdWVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXkoZGlzcGxheVZhbHVlKSB7XG4gICAgcmV0dXJuIGAke2hpZGRlbn06aG9zdHtkaXNwbGF5OiR7ZGlzcGxheVZhbHVlfX1gO1xufVxuIiwiLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIFwiY29tcG9zZWQgcGFyZW50XCIgZWxlbWVudCBvZiBhIG5vZGUsIGlnbm9yaW5nIERPTSB0cmVlIGJvdW5kYXJpZXMuXG4gKiBXaGVuIHRoZSBwYXJlbnQgb2YgYSBub2RlIGlzIGEgc2hhZG93LXJvb3QsIGl0IHdpbGwgcmV0dXJuIHRoZSBob3N0XG4gKiBlbGVtZW50IG9mIHRoZSBzaGFkb3cgcm9vdC4gT3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuIHRoZSBwYXJlbnQgbm9kZSBvciBudWxsIGlmXG4gKiBubyBwYXJlbnQgbm9kZSBleGlzdHMuXG4gKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZvciB3aGljaCB0byByZXRyaWV2ZSB0aGUgY29tcG9zZWQgcGFyZW50XG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZWRQYXJlbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudE5vZGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCByb290Tm9kZSA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgaWYgKHJvb3ROb2RlLmhvc3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBzaGFkb3ctcm9vdFxuICAgICAgICAgICAgcmV0dXJuIHJvb3ROb2RlLmhvc3Q7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgeyBjb21wb3NlZFBhcmVudCB9IGZyb20gXCIuL2NvbXBvc2VkLXBhcmVudC5qc1wiO1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBjb250YWlucyB0aGUgdGVzdCBlbGVtZW50IGluIGEgXCJjb21wb3NlZFwiIERPTSB0cmVlIHRoYXRcbiAqIGlnbm9yZXMgc2hhZG93IERPTSBib3VuZGFyaWVzLlxuICpcbiAqIFJldHVybnMgdHJ1ZSBvZiB0aGUgdGVzdCBlbGVtZW50IGlzIGEgZGVzY2VuZGVudCBvZiB0aGUgcmVmZXJlbmNlLCBvciBleGlzdCBpblxuICogYSBzaGFkb3cgRE9NIHRoYXQgaXMgYSBsb2dpY2FsIGRlc2NlbmRlbnQgb2YgdGhlIHJlZmVyZW5jZS4gT3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gcmVmZXJlbmNlIC0gVGhlIGVsZW1lbnQgdG8gdGVzdCBmb3IgY29udGFpbm1lbnQgYWdhaW5zdC5cbiAqIEBwYXJhbSB0ZXN0IC0gVGhlIGVsZW1lbnQgYmVpbmcgdGVzdGVkIGZvciBjb250YWlubWVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlZENvbnRhaW5zKHJlZmVyZW5jZSwgdGVzdCkge1xuICAgIGxldCBjdXJyZW50ID0gdGVzdDtcbiAgICB3aGlsZSAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29tcG9zZWRQYXJlbnQoY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERPTSwgRWxlbWVudFN0eWxlcywgRkFTVEVsZW1lbnQsIG9ic2VydmFibGUsIE9ic2VydmFibGUsIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuZnVuY3Rpb24gaXNGYXN0RWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBGQVNURWxlbWVudDtcbn1cbmNsYXNzIFF1ZXVlZFN0eWxlU2hlZXRUYXJnZXQge1xuICAgIHNldFByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB0aGlzLnRhcmdldC5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkpO1xuICAgIH1cbiAgICByZW1vdmVQcm9wZXJ0eShuYW1lKSB7XG4gICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB0aGlzLnRhcmdldC5yZW1vdmVQcm9wZXJ0eShuYW1lKSk7XG4gICAgfVxufVxuLyoqXG4gKiBIYW5kbGVzIHNldHRpbmcgcHJvcGVydGllcyBmb3IgYSBGQVNURWxlbWVudCB1c2luZyBDb25zdHJ1Y3RhYmxlIFN0eWxlc2hlZXRzXG4gKi9cbmNsYXNzIENvbnN0cnVjdGFibGVTdHlsZVNoZWV0VGFyZ2V0IGV4dGVuZHMgUXVldWVkU3R5bGVTaGVldFRhcmdldCB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnN0IHNoZWV0ID0gbmV3IENTU1N0eWxlU2hlZXQoKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBzaGVldC5jc3NSdWxlc1tzaGVldC5pbnNlcnRSdWxlKFwiOmhvc3R7fVwiKV0uc3R5bGU7XG4gICAgICAgIHNvdXJjZS4kZmFzdENvbnRyb2xsZXIuYWRkU3R5bGVzKEVsZW1lbnRTdHlsZXMuY3JlYXRlKFtzaGVldF0pKTtcbiAgICB9XG59XG5jbGFzcyBEb2N1bWVudFN0eWxlU2hlZXRUYXJnZXQgZXh0ZW5kcyBRdWV1ZWRTdHlsZVNoZWV0VGFyZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3Qgc2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHNoZWV0LmNzc1J1bGVzW3NoZWV0Lmluc2VydFJ1bGUoXCI6cm9vdHt9XCIpXS5zdHlsZTtcbiAgICAgICAgZG9jdW1lbnQuYWRvcHRlZFN0eWxlU2hlZXRzID0gW1xuICAgICAgICAgICAgLi4uZG9jdW1lbnQuYWRvcHRlZFN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgc2hlZXQsXG4gICAgICAgIF07XG4gICAgfVxufVxuY2xhc3MgSGVhZFN0eWxlRWxlbWVudFN0eWxlU2hlZXRUYXJnZXQgZXh0ZW5kcyBRdWV1ZWRTdHlsZVNoZWV0VGFyZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlKTtcbiAgICAgICAgY29uc3QgeyBzaGVldCB9ID0gdGhpcy5zdHlsZTtcbiAgICAgICAgLy8gQmVjYXVzZSB0aGUgSFRNTFN0eWxlRWxlbWVudCBoYXMgYmVlbiBhcHBlbmRlZCxcbiAgICAgICAgLy8gdGhlcmUgc2hvdWxkbid0IGV4aXN0IGEgY2FzZSB3aGVyZSBgc2hlZXRgIGlzIG51bGwsXG4gICAgICAgIC8vIGJ1dCBpZi1jaGVjayBpdCBqdXN0IGluIGNhc2UuXG4gICAgICAgIGlmIChzaGVldCkge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tIHVzZXMgaHR0cHM6Ly9naXRodWIuY29tL05WL0NTU09NIGZvciBpdCdzIENTU09NIGltcGxlbWVudGF0aW9uLFxuICAgICAgICAgICAgLy8gd2hpY2ggaW1wbGVtZW50cyB0aGUgRE9NIExldmVsIDIgc3BlYyBmb3IgQ1NTU3R5bGVTaGVldCB3aGVyZSBpbnNlcnRSdWxlKCkgcmVxdWlyZXMgYW4gaW5kZXggYXJndW1lbnQuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHNoZWV0Lmluc2VydFJ1bGUoXCI6cm9vdHt9XCIsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHNoZWV0LmNzc1J1bGVzW2luZGV4XS5zdHlsZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogSGFuZGxlcyBzZXR0aW5nIHByb3BlcnRpZXMgZm9yIGEgRkFTVEVsZW1lbnQgdXNpbmcgYW4gSFRNTFN0eWxlRWxlbWVudFxuICovXG5jbGFzcyBTdHlsZUVsZW1lbnRTdHlsZVNoZWV0VGFyZ2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGFyZ2V0LiRmYXN0Q29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5zdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgY29udHJvbGxlci5hZGRTdHlsZXModGhpcy5zdHlsZSk7XG4gICAgICAgIE9ic2VydmFibGUuZ2V0Tm90aWZpZXIoY29udHJvbGxlcikuc3Vic2NyaWJlKHRoaXMsIFwiaXNDb25uZWN0ZWRcIik7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGNvbnRyb2xsZXIsIFwiaXNDb25uZWN0ZWRcIik7XG4gICAgfVxuICAgIHRhcmdldENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5zdG9yZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnN0b3JlLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVQcm9wZXJ0eShuYW1lKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuZGVsZXRlKG5hbWUpO1xuICAgICAgICBET00ucXVldWVVcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2Uoc291cmNlLCBrZXkpIHtcbiAgICAgICAgLy8gSFRNTFN0eWxlRWxlbWVudC5zaGVldCBpcyBudWxsIGlmIHRoZSBlbGVtZW50IGlzbid0IGNvbm5lY3RlZCB0byB0aGUgRE9NLFxuICAgICAgICAvLyBzbyB0aGlzIG1ldGhvZCByZWFjdHMgdG8gY2hhbmdlcyBpbiBET00gY29ubmVjdGlvbiBmb3IgdGhlIGVsZW1lbnQgaG9zdGluZ1xuICAgICAgICAvLyB0aGUgSFRNTFN0eWxlRWxlbWVudC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWxsIHJ1bGVzIGFwcGxpZWQgdmlhIHRoZSBDU1NPTSBhbHNvIGdldCBjbGVhcmVkIHdoZW4gdGhlIGVsZW1lbnQgZGlzY29ubmVjdHMsXG4gICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gYWRkIGEgbmV3IHJ1bGUgZWFjaCB0aW1lIGFuZCBwb3B1bGF0ZSBpdCB3aXRoIHRoZSBzdG9yZWQgcHJvcGVydGllc1xuICAgICAgICBjb25zdCB7IHNoZWV0IH0gPSB0aGlzLnN0eWxlO1xuICAgICAgICBpZiAoc2hlZXQpIHtcbiAgICAgICAgICAgIC8vIFNhZmFyaSB3aWxsIHRocm93IGlmIHdlIHRyeSB0byB1c2UgdGhlIHJldHVybiByZXN1bHQgb2YgaW5zZXJ0UnVsZSgpXG4gICAgICAgICAgICAvLyB0byBpbmRleCB0aGUgcnVsZSBpbmxpbmUsIHNvIHN0b3JlIGFzIGEgY29uc3QgcHJpb3IgdG8gaW5kZXhpbmcuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vanNkb20gdXNlcyBodHRwczovL2dpdGh1Yi5jb20vTlYvQ1NTT00gZm9yIGl0J3MgQ1NTT00gaW1wbGVtZW50YXRpb24sXG4gICAgICAgICAgICAvLyB3aGljaCBpbXBsZW1lbnRzIHRoZSBET00gTGV2ZWwgMiBzcGVjIGZvciBDU1NTdHlsZVNoZWV0IHdoZXJlIGluc2VydFJ1bGUoKSByZXF1aXJlcyBhbiBpbmRleCBhcmd1bWVudC5cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2hlZXQuaW5zZXJ0UnVsZShcIjpob3N0e31cIiwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gc2hlZXQuY3NzUnVsZXNbaW5kZXhdLnN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgU3R5bGVFbGVtZW50U3R5bGVTaGVldFRhcmdldC5wcm90b3R5cGUsIFwidGFyZ2V0XCIsIHZvaWQgMCk7XG4vKipcbiAqIEhhbmRsZXMgc2V0dGluZyBwcm9wZXJ0aWVzIGZvciBhIG5vcm1hbCBIVE1MRWxlbWVudFxuICovXG5jbGFzcyBFbGVtZW50U3R5bGVTaGVldFRhcmdldCB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gc291cmNlLnN0eWxlO1xuICAgIH1cbiAgICBzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgICAgICBET00ucXVldWVVcGRhdGUoKCkgPT4gdGhpcy50YXJnZXQuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpKTtcbiAgICB9XG4gICAgcmVtb3ZlUHJvcGVydHkobmFtZSkge1xuICAgICAgICBET00ucXVldWVVcGRhdGUoKCkgPT4gdGhpcy50YXJnZXQucmVtb3ZlUHJvcGVydHkobmFtZSkpO1xuICAgIH1cbn1cbi8qKlxuICogQ29udHJvbHMgZW1pc3Npb24gZm9yIGRlZmF1bHQgdmFsdWVzLiBUaGlzIGNvbnRyb2wgaXMgY2FwYWJsZVxuICogb2YgZW1pdHRpbmcgdG8gbXVsdGlwbGUge0BsaW5rIFByb3BlcnR5VGFyZ2V0IHwgUHJvcGVydHlUYXJnZXRzfSxcbiAqIGFuZCBvbmx5IGVtaXRzIGlmIGl0IGhhcyBhdCBsZWFzdCBvbmUgcm9vdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFJvb3RTdHlsZVNoZWV0VGFyZ2V0IHtcbiAgICBzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgICAgICBSb290U3R5bGVTaGVldFRhcmdldC5wcm9wZXJ0aWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIGZvciAoY29uc3QgdGFyZ2V0IG9mIFJvb3RTdHlsZVNoZWV0VGFyZ2V0LnJvb3RzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBQcm9wZXJ0eVRhcmdldE1hbmFnZXIuZ2V0T3JDcmVhdGUoUm9vdFN0eWxlU2hlZXRUYXJnZXQubm9ybWFsaXplUm9vdCh0YXJnZXQpKS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlUHJvcGVydHkobmFtZSkge1xuICAgICAgICBkZWxldGUgUm9vdFN0eWxlU2hlZXRUYXJnZXQucHJvcGVydGllc1tuYW1lXTtcbiAgICAgICAgZm9yIChjb25zdCB0YXJnZXQgb2YgUm9vdFN0eWxlU2hlZXRUYXJnZXQucm9vdHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIFByb3BlcnR5VGFyZ2V0TWFuYWdlci5nZXRPckNyZWF0ZShSb290U3R5bGVTaGVldFRhcmdldC5ub3JtYWxpemVSb290KHRhcmdldCkpLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyByZWdpc3RlclJvb3Qocm9vdCkge1xuICAgICAgICBjb25zdCB7IHJvb3RzIH0gPSBSb290U3R5bGVTaGVldFRhcmdldDtcbiAgICAgICAgaWYgKCFyb290cy5oYXMocm9vdCkpIHtcbiAgICAgICAgICAgIHJvb3RzLmFkZChyb290KTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IFByb3BlcnR5VGFyZ2V0TWFuYWdlci5nZXRPckNyZWF0ZSh0aGlzLm5vcm1hbGl6ZVJvb3Qocm9vdCkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gUm9vdFN0eWxlU2hlZXRUYXJnZXQucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5zZXRQcm9wZXJ0eShrZXksIFJvb3RTdHlsZVNoZWV0VGFyZ2V0LnByb3BlcnRpZXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHVucmVnaXN0ZXJSb290KHJvb3QpIHtcbiAgICAgICAgY29uc3QgeyByb290cyB9ID0gUm9vdFN0eWxlU2hlZXRUYXJnZXQ7XG4gICAgICAgIGlmIChyb290cy5oYXMocm9vdCkpIHtcbiAgICAgICAgICAgIHJvb3RzLmRlbGV0ZShyb290KTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IFByb3BlcnR5VGFyZ2V0TWFuYWdlci5nZXRPckNyZWF0ZShSb290U3R5bGVTaGVldFRhcmdldC5ub3JtYWxpemVSb290KHJvb3QpKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIFJvb3RTdHlsZVNoZWV0VGFyZ2V0LnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb2N1bWVudCB3aGVuIHByb3ZpZGVkIHRoZSBkZWZhdWx0IGVsZW1lbnQsXG4gICAgICogb3RoZXJ3aXNlIGlzIGEgbm8tb3BcbiAgICAgKiBAcGFyYW0gcm9vdCAtIHRoZSByb290IHRvIG5vcm1hbGl6ZVxuICAgICAqL1xuICAgIHN0YXRpYyBub3JtYWxpemVSb290KHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIHJvb3QgPT09IGRlZmF1bHRFbGVtZW50ID8gZG9jdW1lbnQgOiByb290O1xuICAgIH1cbn1cblJvb3RTdHlsZVNoZWV0VGFyZ2V0LnJvb3RzID0gbmV3IFNldCgpO1xuUm9vdFN0eWxlU2hlZXRUYXJnZXQucHJvcGVydGllcyA9IHt9O1xuLy8gQ2FjaGVzIFByb3BlcnR5VGFyZ2V0IGluc3RhbmNlc1xuY29uc3QgcHJvcGVydHlUYXJnZXRDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4vLyBVc2UgQ29uc3RydWN0YWJsZSBTdHlsZVNoZWV0cyBmb3IgRkFTVCBlbGVtZW50cyB3aGVuIHN1cHBvcnRlZCwgb3RoZXJ3aXNlIHVzZVxuLy8gSFRNTFN0eWxlRWxlbWVudCBpbnN0YW5jZXNcbmNvbnN0IHByb3BlcnR5VGFyZ2V0Q3RvciA9IERPTS5zdXBwb3J0c0Fkb3B0ZWRTdHlsZVNoZWV0c1xuICAgID8gQ29uc3RydWN0YWJsZVN0eWxlU2hlZXRUYXJnZXRcbiAgICA6IFN0eWxlRWxlbWVudFN0eWxlU2hlZXRUYXJnZXQ7XG4vKipcbiAqIE1hbmFnZXMgY3JlYXRpb24gYW5kIGNhY2hpbmcgb2YgUHJvcGVydHlUYXJnZXQgaW5zdGFuY2VzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydHlUYXJnZXRNYW5hZ2VyID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ2V0T3JDcmVhdGUoc291cmNlKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVRhcmdldENhY2hlLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqL1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5VGFyZ2V0Q2FjaGUuZ2V0KHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRhcmdldDtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gZGVmYXVsdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IG5ldyBSb290U3R5bGVTaGVldFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBET00uc3VwcG9ydHNBZG9wdGVkU3R5bGVTaGVldHNcbiAgICAgICAgICAgICAgICA/IG5ldyBEb2N1bWVudFN0eWxlU2hlZXRUYXJnZXQoKVxuICAgICAgICAgICAgICAgIDogbmV3IEhlYWRTdHlsZUVsZW1lbnRTdHlsZVNoZWV0VGFyZ2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGYXN0RWxlbWVudChzb3VyY2UpKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBuZXcgcHJvcGVydHlUYXJnZXRDdG9yKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBuZXcgRWxlbWVudFN0eWxlU2hlZXRUYXJnZXQoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0eVRhcmdldENhY2hlLnNldChzb3VyY2UsIHRhcmdldCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ1NTRGlyZWN0aXZlLCBkZWZhdWx0RXhlY3V0aW9uQ29udGV4dCwgRkFTVEVsZW1lbnQsIG9ic2VydmFibGUsIE9ic2VydmFibGUsIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyBjb21wb3NlZFBhcmVudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvY29tcG9zZWQtcGFyZW50LmpzXCI7XG5pbXBvcnQgeyBjb21wb3NlZENvbnRhaW5zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb21wb3NlZC1jb250YWlucy5qc1wiO1xuaW1wb3J0IHsgUHJvcGVydHlUYXJnZXRNYW5hZ2VyLCBSb290U3R5bGVTaGVldFRhcmdldCwgfSBmcm9tIFwiLi9jdXN0b20tcHJvcGVydHktbWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdEVsZW1lbnQgfSBmcm9tIFwiLi9jdXN0b20tcHJvcGVydHktbWFuYWdlci5qc1wiO1xuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgKERlc2lnblRva2VuOmludGVyZmFjZSl9XG4gKi9cbmNsYXNzIERlc2lnblRva2VuSW1wbCBleHRlbmRzIENTU0RpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgdGhpcy5fYXBwbGllZFRvID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWd1cmF0aW9uLm5hbWU7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uLmNzc0N1c3RvbVByb3BlcnR5TmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jc3NDdXN0b21Qcm9wZXJ0eSA9IGAtLSR7Y29uZmlndXJhdGlvbi5jc3NDdXN0b21Qcm9wZXJ0eU5hbWV9YDtcbiAgICAgICAgICAgIHRoaXMuY3NzVmFyID0gYHZhcigke3RoaXMuY3NzQ3VzdG9tUHJvcGVydHl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZCA9IERlc2lnblRva2VuSW1wbC51bmlxdWVJZCgpO1xuICAgICAgICBEZXNpZ25Ub2tlbkltcGwudG9rZW5zQnlJZC5zZXQodGhpcy5pZCwgdGhpcyk7XG4gICAgfVxuICAgIGdldCBhcHBsaWVkVG8oKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5fYXBwbGllZFRvXTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20obmFtZU9yQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVzaWduVG9rZW5JbXBsKHtcbiAgICAgICAgICAgIG5hbWU6IHR5cGVvZiBuYW1lT3JDb25maWcgPT09IFwic3RyaW5nXCIgPyBuYW1lT3JDb25maWcgOiBuYW1lT3JDb25maWcubmFtZSxcbiAgICAgICAgICAgIGNzc0N1c3RvbVByb3BlcnR5TmFtZTogdHlwZW9mIG5hbWVPckNvbmZpZyA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgID8gbmFtZU9yQ29uZmlnXG4gICAgICAgICAgICAgICAgOiBuYW1lT3JDb25maWcuY3NzQ3VzdG9tUHJvcGVydHlOYW1lID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgPyBuYW1lT3JDb25maWcubmFtZVxuICAgICAgICAgICAgICAgICAgICA6IG5hbWVPckNvbmZpZy5jc3NDdXN0b21Qcm9wZXJ0eU5hbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgaXNDU1NEZXNpZ25Ub2tlbih0b2tlbikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRva2VuLmNzc0N1c3RvbVByb3BlcnR5ID09PSBcInN0cmluZ1wiO1xuICAgIH1cbiAgICBzdGF0aWMgaXNEZXJpdmVkRGVzaWduVG9rZW5WYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSB0b2tlbiBieSBJRC4gUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIHRva2VuIHdhcyBub3QgZm91bmQuXG4gICAgICogQHBhcmFtIGlkIC0gVGhlIElEIG9mIHRoZSB0b2tlblxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgc3RhdGljIGdldFRva2VuQnlJZChpZCkge1xuICAgICAgICByZXR1cm4gRGVzaWduVG9rZW5JbXBsLnRva2Vuc0J5SWQuZ2V0KGlkKTtcbiAgICB9XG4gICAgZ2V0T3JDcmVhdGVTdWJzY3JpYmVyU2V0KHRhcmdldCA9IHRoaXMpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnN1YnNjcmliZXJzLmdldCh0YXJnZXQpIHx8XG4gICAgICAgICAgICAodGhpcy5zdWJzY3JpYmVycy5zZXQodGFyZ2V0LCBuZXcgU2V0KCkpICYmIHRoaXMuc3Vic2NyaWJlcnMuZ2V0KHRhcmdldCkpKTtcbiAgICB9XG4gICAgY3JlYXRlQ1NTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jc3NWYXIgfHwgXCJcIjtcbiAgICB9XG4gICAgZ2V0VmFsdWVGb3IoZWxlbWVudCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IERlc2lnblRva2VuTm9kZS5nZXRPckNyZWF0ZShlbGVtZW50KS5nZXQodGhpcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYWx1ZSBjb3VsZCBub3QgYmUgcmV0cmlldmVkIGZvciB0b2tlbiBuYW1lZCBcIiR7dGhpcy5uYW1lfVwiLiBFbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBmb3IgJHtlbGVtZW50fSBvciBhbiBhbmNlc3RvciBvZiAke2VsZW1lbnR9LmApO1xuICAgIH1cbiAgICBzZXRWYWx1ZUZvcihlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hcHBsaWVkVG8uYWRkKGVsZW1lbnQpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEZXNpZ25Ub2tlbkltcGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5hbGlhcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgRGVzaWduVG9rZW5Ob2RlLmdldE9yQ3JlYXRlKGVsZW1lbnQpLnNldCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZWxldGVWYWx1ZUZvcihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2FwcGxpZWRUby5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIGlmIChEZXNpZ25Ub2tlbk5vZGUuZXhpc3RzRm9yKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBEZXNpZ25Ub2tlbk5vZGUuZ2V0T3JDcmVhdGUoZWxlbWVudCkuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB3aXRoRGVmYXVsdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFZhbHVlRm9yKGRlZmF1bHRFbGVtZW50LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdWJzY3JpYmUoc3Vic2NyaWJlciwgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXJTZXQgPSB0aGlzLmdldE9yQ3JlYXRlU3Vic2NyaWJlclNldCh0YXJnZXQpO1xuICAgICAgICBpZiAodGFyZ2V0ICYmICFEZXNpZ25Ub2tlbk5vZGUuZXhpc3RzRm9yKHRhcmdldCkpIHtcbiAgICAgICAgICAgIERlc2lnblRva2VuTm9kZS5nZXRPckNyZWF0ZSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3Vic2NyaWJlclNldC5oYXMoc3Vic2NyaWJlcikpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJTZXQuYWRkKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKHN1YnNjcmliZXIsIHRhcmdldCkge1xuICAgICAgICBjb25zdCBsaXN0ID0gdGhpcy5zdWJzY3JpYmVycy5nZXQodGFyZ2V0IHx8IHRoaXMpO1xuICAgICAgICBpZiAobGlzdCAmJiBsaXN0LmhhcyhzdWJzY3JpYmVyKSkge1xuICAgICAgICAgICAgbGlzdC5kZWxldGUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgc3Vic2NyaWJlcnMgdGhhdCB0aGUgdmFsdWUgZm9yIGFuIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBlbWl0IGEgbm90aWZpY2F0aW9uIGZvclxuICAgICAqL1xuICAgIG5vdGlmeShlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHJlY29yZCA9IE9iamVjdC5mcmVlemUoeyB0b2tlbjogdGhpcywgdGFyZ2V0OiBlbGVtZW50IH0pO1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpYmVycy5oYXModGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZ2V0KHRoaXMpLmZvckVhY2goc3ViID0+IHN1Yi5oYW5kbGVDaGFuZ2UocmVjb3JkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaWJlcnMuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJzLmdldChlbGVtZW50KS5mb3JFYWNoKHN1YiA9PiBzdWIuaGFuZGxlQ2hhbmdlKHJlY29yZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIHRoZSB0b2tlbiB0byB0aGUgcHJvdmlkZWQgdG9rZW4uXG4gICAgICogQHBhcmFtIHRva2VuIC0gdGhlIHRva2VuIHRvIGFsaWFzIHRvXG4gICAgICovXG4gICAgYWxpYXModG9rZW4pIHtcbiAgICAgICAgcmV0dXJuICgodGFyZ2V0KSA9PiB0b2tlbi5nZXRWYWx1ZUZvcih0YXJnZXQpKTtcbiAgICB9XG59XG5EZXNpZ25Ub2tlbkltcGwudW5pcXVlSWQgPSAoKCkgPT4ge1xuICAgIGxldCBpZCA9IDA7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWQrKztcbiAgICAgICAgcmV0dXJuIGlkLnRvU3RyaW5nKDE2KTtcbiAgICB9O1xufSkoKTtcbi8qKlxuICogVG9rZW4gc3RvcmFnZSBieSB0b2tlbiBJRFxuICovXG5EZXNpZ25Ub2tlbkltcGwudG9rZW5zQnlJZCA9IG5ldyBNYXAoKTtcbmNsYXNzIEN1c3RvbVByb3BlcnR5UmVmbGVjdG9yIHtcbiAgICBzdGFydFJlZmxlY3Rpb24odG9rZW4sIHRhcmdldCkge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoeyB0b2tlbiwgdGFyZ2V0IH0pO1xuICAgIH1cbiAgICBzdG9wUmVmbGVjdGlvbih0b2tlbiwgdGFyZ2V0KSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKHRva2VuLCB0YXJnZXQpO1xuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2UocmVjb3JkKSB7XG4gICAgICAgIGNvbnN0IHsgdG9rZW4sIHRhcmdldCB9ID0gcmVjb3JkO1xuICAgICAgICB0aGlzLmFkZCh0b2tlbiwgdGFyZ2V0KTtcbiAgICB9XG4gICAgYWRkKHRva2VuLCB0YXJnZXQpIHtcbiAgICAgICAgUHJvcGVydHlUYXJnZXRNYW5hZ2VyLmdldE9yQ3JlYXRlKHRhcmdldCkuc2V0UHJvcGVydHkodG9rZW4uY3NzQ3VzdG9tUHJvcGVydHksIHRoaXMucmVzb2x2ZUNTU1ZhbHVlKERlc2lnblRva2VuTm9kZS5nZXRPckNyZWF0ZSh0YXJnZXQpLmdldCh0b2tlbikpKTtcbiAgICB9XG4gICAgcmVtb3ZlKHRva2VuLCB0YXJnZXQpIHtcbiAgICAgICAgUHJvcGVydHlUYXJnZXRNYW5hZ2VyLmdldE9yQ3JlYXRlKHRhcmdldCkucmVtb3ZlUHJvcGVydHkodG9rZW4uY3NzQ3VzdG9tUHJvcGVydHkpO1xuICAgIH1cbiAgICByZXNvbHZlQ1NTVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5jcmVhdGVDU1MgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlLmNyZWF0ZUNTUygpIDogdmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBBIGxpZ2h0IHdyYXBwZXIgYXJvdW5kIEJpbmRpbmdPYnNlcnZlciB0byBoYW5kbGUgdmFsdWUgY2FjaGluZyBhbmRcbiAqIHRva2VuIG5vdGlmaWNhdGlvblxuICovXG5jbGFzcyBEZXNpZ25Ub2tlbkJpbmRpbmdPYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlLCB0b2tlbiwgbm9kZSkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IE9ic2VydmFibGUuYmluZGluZyhzb3VyY2UsIHRoaXMsIGZhbHNlKTtcbiAgICAgICAgLy8gVGhpcyBpcyBhIGxpdHRsZSBiaXQgaGFja3kgYmVjYXVzZSBpdCdzIHVzaW5nIGludGVybmFsIEFQSXMgb2YgQmluZGluZ09ic2VydmVySW1wbC5cbiAgICAgICAgLy8gQmluZGluZ09ic2VydmVySW1wbCBxdWV1ZXMgdXBkYXRlcyB0byBiYXRjaCBpdCdzIG5vdGlmaWNhdGlvbnMgd2hpY2ggZG9lc24ndCB3b3JrIGZvciB0aGlzXG4gICAgICAgIC8vIHNjZW5hcmlvIGJlY2F1c2UgdGhlIERlc2lnblRva2VuLmdldFZhbHVlRm9yIEFQSSBpcyBub3QgYXN5bmMuIFdpdGhvdXQgdGhpcywgdXNpbmcgRGVzaWduVG9rZW4uZ2V0VmFsdWVGb3IoKVxuICAgICAgICAvLyBhZnRlciBEZXNpZ25Ub2tlbi5zZXRWYWx1ZUZvcigpIHdoZW4gc2V0dGluZyBhIGRlcGVuZGVuY3kgb2YgdGhlIHZhbHVlIGJlaW5nIHJldHJpZXZlZCBjYW4gcmV0dXJuIGEgc3RhbGVcbiAgICAgICAgLy8gdmFsdWUuIEFzc2lnbmluZyAuaGFuZGxlQ2hhbmdlIHRvIC5jYWxsIGZvcmNlcyBpbW1lZGlhdGUgaW52b2NhdGlvbiBvZiB0aGlzIGNsYXNzZXMgaGFuZGxlQ2hhbmdlKCkgbWV0aG9kLFxuICAgICAgICAvLyBhbGxvd2luZyByZXNvbHV0aW9uIG9mIHZhbHVlcyBzeW5jaHJvbm91c2x5LlxuICAgICAgICAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L2Zhc3QvaXNzdWVzLzUxMTBcbiAgICAgICAgdGhpcy5vYnNlcnZlci5oYW5kbGVDaGFuZ2UgPSB0aGlzLm9ic2VydmVyLmNhbGw7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMubm9kZS5zdG9yZS5zZXQodGhpcy50b2tlbiwgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMubm9kZS50YXJnZXQsIGRlZmF1bHRFeGVjdXRpb25Db250ZXh0KSk7XG4gICAgfVxufVxuLyoqXG4gKiBTdG9yZXMgcmVzb2x2ZWQgdG9rZW4vdmFsdWUgcGFpcnMgYW5kIG5vdGlmaWVzIG9uIGNoYW5nZXNcbiAqL1xuY2xhc3MgU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0KHRva2VuLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZXMuZ2V0KHRva2VuKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnNldCh0b2tlbiwgdmFsdWUpO1xuICAgICAgICAgICAgT2JzZXJ2YWJsZS5nZXROb3RpZmllcih0aGlzKS5ub3RpZnkodG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCh0b2tlbikge1xuICAgICAgICBPYnNlcnZhYmxlLnRyYWNrKHRoaXMsIHRva2VuLmlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldCh0b2tlbik7XG4gICAgfVxuICAgIGRlbGV0ZSh0b2tlbikge1xuICAgICAgICB0aGlzLnZhbHVlcy5kZWxldGUodG9rZW4pO1xuICAgIH1cbiAgICBhbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5lbnRyaWVzKCk7XG4gICAgfVxufVxuY29uc3Qgbm9kZUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGNoaWxkVG9QYXJlbnQgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBBIG5vZGUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgYW5kIGdldHRpbmcgdG9rZW4gdmFsdWVzLFxuICogZW1pdHRpbmcgdmFsdWVzIHRvIENTUyBjdXN0b20gcHJvcGVydGllcywgYW5kIG1haW50YWluaW5nXG4gKiBpbmhlcml0YW5jZSBzdHJ1Y3R1cmVzLlxuICovXG5jbGFzcyBEZXNpZ25Ub2tlbk5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBhbGwgcmVzb2x2ZWQgdG9rZW4gdmFsdWVzIGZvciBhIG5vZGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RvcmUgPSBuZXcgU3RvcmUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBjaGlsZHJlbiBhc3NpZ25lZCB0byB0aGUgbm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIHZhbHVlcyBleHBsaWNpdGx5IGFzc2lnbmVkIHRvIHRoZSBub2RlIGluIHRoZWlyIHJhdyBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFzc2lnbmVkVmFsdWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVG9rZW5zIGN1cnJlbnRseSBiZWluZyByZWZsZWN0ZWQgdG8gQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlZmxlY3RpbmcgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCaW5kaW5nIG9ic2VydmVycyBmb3IgYXNzaWduZWQgYW5kIGluaGVyaXRlZCBkZXJpdmVkIHZhbHVlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmluZGluZ09ic2VydmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtaXRzIG5vdGlmaWNhdGlvbnMgdG8gdG9rZW4gd2hlbiB0b2tlbiB2YWx1ZXNcbiAgICAgICAgICogY2hhbmdlIHRoZSBEZXNpZ25Ub2tlbk5vZGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudG9rZW5WYWx1ZUNoYW5nZUhhbmRsZXIgPSB7XG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2U6IChzb3VyY2UsIGFyZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gRGVzaWduVG9rZW5JbXBsLmdldFRva2VuQnlJZChhcmcpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55IHRva2VuIHN1YnNjcmliZXJzXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLm5vdGlmeSh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChEZXNpZ25Ub2tlbkltcGwuaXNDU1NEZXNpZ25Ub2tlbih0b2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmbGVjdGluZyA9IHRoaXMuaXNSZWZsZWN0aW5nKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRWYWx1ZSA9IHBhcmVudC5nZXQodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlID0gc291cmNlLmdldCh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFZhbHVlICE9PSBzb3VyY2VWYWx1ZSAmJiAhcmVmbGVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmxlY3RUb0NTUyh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBhcmVudFZhbHVlID09PSBzb3VyY2VWYWx1ZSAmJiByZWZsZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcFJlZmxlY3RUb0NTUyh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXJlZmxlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmxlY3RUb0NTUyh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBub2RlQ2FjaGUuc2V0KHRhcmdldCwgdGhpcyk7XG4gICAgICAgIC8vIE1hcCBzdG9yZSBjaGFuZ2Ugbm90aWZpY2F0aW9ucyB0byB0b2tlbiBjaGFuZ2Ugbm90aWZpY2F0aW9uc1xuICAgICAgICBPYnNlcnZhYmxlLmdldE5vdGlmaWVyKHRoaXMuc3RvcmUpLnN1YnNjcmliZSh0aGlzLnRva2VuVmFsdWVDaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZBU1RFbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQuJGZhc3RDb250cm9sbGVyLmFkZEJlaGF2aW9ycyhbdGhpc10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRhcmdldC5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIERlc2lnblRva2VuTm9kZSBmb3IgYW4gZWxlbWVudC5cbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGlmIG9uZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0IGZvciBhIG5vZGUsXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgdGhlIGNhY2hlZCBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBIVE1MIGVsZW1lbnQgdG8gcmV0cmlldmUgYSBEZXNpZ25Ub2tlbk5vZGUgZm9yXG4gICAgICovXG4gICAgc3RhdGljIGdldE9yQ3JlYXRlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gbm9kZUNhY2hlLmdldCh0YXJnZXQpIHx8IG5ldyBEZXNpZ25Ub2tlbk5vZGUodGFyZ2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIERlc2lnblRva2VuTm9kZSBoYXMgYmVlbiBjcmVhdGVkIGZvciBhIHRhcmdldFxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgZWxlbWVudCB0byB0ZXN0XG4gICAgICovXG4gICAgc3RhdGljIGV4aXN0c0Zvcih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVDYWNoZS5oYXModGFyZ2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGFuZCByZXR1cm4gdGhlIG5lYXJlc3QgcGFyZW50IERlc2lnblRva2VuTm9kZS5cbiAgICAgKiBOdWxsIGlzIHJldHVybmVkIGlmIG5vIG5vZGUgaXMgZm91bmQgb3IgdGhlIG5vZGUgcHJvdmlkZWQgaXMgZm9yIGEgZGVmYXVsdCBlbGVtZW50LlxuICAgICAqL1xuICAgIHN0YXRpYyBmaW5kUGFyZW50KG5vZGUpIHtcbiAgICAgICAgaWYgKCEoZGVmYXVsdEVsZW1lbnQgPT09IG5vZGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IGNvbXBvc2VkUGFyZW50KG5vZGUudGFyZ2V0KTtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZUNhY2hlLmhhcyhwYXJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlQ2FjaGUuZ2V0KHBhcmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudCA9IGNvbXBvc2VkUGFyZW50KHBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRGVzaWduVG9rZW5Ob2RlLmdldE9yQ3JlYXRlKGRlZmF1bHRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGNsb3Nlc3Qgbm9kZSB3aXRoIGEgdmFsdWUgZXhwbGljaXRseSBhc3NpZ25lZCBmb3IgYSB0b2tlbiwgb3RoZXJ3aXNlIG51bGwuXG4gICAgICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHRvIGxvb2sgZm9yXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gVGhlIG5vZGUgdG8gc3RhcnQgbG9va2luZyBmb3IgdmFsdWUgYXNzaWdubWVudFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgc3RhdGljIGZpbmRDbG9zZXN0QXNzaWduZWROb2RlKHRva2VuLCBzdGFydCkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHN0YXJ0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnRcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQucGFyZW50XG4gICAgICAgICAgICAgICAgOiBjdXJyZW50LnRhcmdldCAhPT0gZGVmYXVsdEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgPyBEZXNpZ25Ub2tlbk5vZGUuZ2V0T3JDcmVhdGUoZGVmYXVsdEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfSB3aGlsZSAoY3VycmVudCAhPT0gbnVsbCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcGFyZW50IERlc2lnblRva2VuTm9kZSwgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICByZXR1cm4gY2hpbGRUb1BhcmVudC5nZXQodGhpcykgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgdG9rZW4gaGFzIGJlZW4gYXNzaWduZWQgYW4gZXhwbGljaXQgdmFsdWUgdGhlIG5vZGUuXG4gICAgICogQHBhcmFtIHRva2VuIC0gdGhlIHRva2VuIHRvIGNoZWNrLlxuICAgICAqL1xuICAgIGhhcyh0b2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NpZ25lZFZhbHVlcy5oYXModG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiBhIHRva2VuIGZvciBhIG5vZGVcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gcmV0cmlldmUgdGhlIHZhbHVlIGZvclxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgZ2V0KHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdG9yZS5nZXQodG9rZW4pO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhdyA9IHRoaXMuZ2V0UmF3KHRva2VuKTtcbiAgICAgICAgaWYgKHJhdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmh5ZHJhdGUodG9rZW4sIHJhdyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQodG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgcmF3IGFzc2lnbmVkIHZhbHVlIG9mIGEgdG9rZW4gZnJvbSB0aGUgbmVhcmVzdCBhc3NpZ25lZCBub2RlLlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byByZXRyaWV2ZSBhIHJhdyB2YWx1ZSBmb3JcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldFJhdyh0b2tlbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmFzc2lnbmVkVmFsdWVzLmhhcyh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2lnbmVkVmFsdWVzLmdldCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IERlc2lnblRva2VuTm9kZS5maW5kQ2xvc2VzdEFzc2lnbmVkTm9kZSh0b2tlbiwgdGhpcykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRSYXcodG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdG9rZW4gdG8gYSB2YWx1ZSBmb3IgYSBub2RlXG4gICAgICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHRvIHNldFxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHRva2VuIHRvXG4gICAgICovXG4gICAgc2V0KHRva2VuLCB2YWx1ZSkge1xuICAgICAgICBpZiAoRGVzaWduVG9rZW5JbXBsLmlzRGVyaXZlZERlc2lnblRva2VuVmFsdWUodGhpcy5hc3NpZ25lZFZhbHVlcy5nZXQodG9rZW4pKSkge1xuICAgICAgICAgICAgdGhpcy50ZWFyRG93bkJpbmRpbmdPYnNlcnZlcih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hc3NpZ25lZFZhbHVlcy5zZXQodG9rZW4sIHZhbHVlKTtcbiAgICAgICAgaWYgKERlc2lnblRva2VuSW1wbC5pc0Rlcml2ZWREZXNpZ25Ub2tlblZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5zZXR1cEJpbmRpbmdPYnNlcnZlcih0b2tlbiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXQodG9rZW4sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgdG9rZW4gdmFsdWUgZm9yIHRoZSBub2RlLlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byBkZWxldGUgdGhlIHZhbHVlIGZvclxuICAgICAqL1xuICAgIGRlbGV0ZSh0b2tlbikge1xuICAgICAgICB0aGlzLmFzc2lnbmVkVmFsdWVzLmRlbGV0ZSh0b2tlbik7XG4gICAgICAgIHRoaXMudGVhckRvd25CaW5kaW5nT2JzZXJ2ZXIodG9rZW4pO1xuICAgICAgICBjb25zdCB1cHN0cmVhbSA9IHRoaXMuZ2V0UmF3KHRva2VuKTtcbiAgICAgICAgaWYgKHVwc3RyZWFtKSB7XG4gICAgICAgICAgICB0aGlzLmh5ZHJhdGUodG9rZW4sIHVwc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGVsZXRlKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIERlc2lnblRva2VuTm9kZS50YXJnZXQgaXMgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50XG4gICAgICovXG4gICAgYmluZCgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gRGVzaWduVG9rZW5Ob2RlLmZpbmRQYXJlbnQodGhpcyk7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmFzc2lnbmVkVmFsdWVzLmtleXMoKSkge1xuICAgICAgICAgICAga2V5Lm5vdGlmeSh0aGlzLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBEZXNpZ25Ub2tlbk5vZGUudGFyZ2V0IGlzIGRldGFjaGVkIGZyb20gdGhlIGRvY3VtZW50XG4gICAgICovXG4gICAgdW5iaW5kKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkVG9QYXJlbnQuZ2V0KHRoaXMpO1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgYSBjaGlsZCB0byBhIHBhcmVudCBEZXNpZ25Ub2tlbk5vZGUuXG4gICAgICogQHBhcmFtIGNoaWxkIC0gVGhlIGNoaWxkIHRvIGFwcGVuZCB0byB0aGUgbm9kZVxuICAgICAqL1xuICAgIGFwcGVuZENoaWxkKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNoaWxkVG9QYXJlbnQuZ2V0KGNoaWxkKS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVQYXJlbnQgPSB0aGlzLmNoaWxkcmVuLmZpbHRlcih4ID0+IGNoaWxkLmNvbnRhaW5zKHgpKTtcbiAgICAgICAgY2hpbGRUb1BhcmVudC5zZXQoY2hpbGQsIHRoaXMpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICByZVBhcmVudC5mb3JFYWNoKHggPT4gY2hpbGQuYXBwZW5kQ2hpbGQoeCkpO1xuICAgICAgICBPYnNlcnZhYmxlLmdldE5vdGlmaWVyKHRoaXMuc3RvcmUpLnN1YnNjcmliZShjaGlsZCk7XG4gICAgICAgIC8vIEhvdyBjYW4gd2Ugbm90IG5vdGlmeSAqZXZlcnkqIHN1YnNjcmliZXI/XG4gICAgICAgIGZvciAoY29uc3QgW3Rva2VuLCB2YWx1ZV0gb2YgdGhpcy5zdG9yZS5hbGwoKSkge1xuICAgICAgICAgICAgY2hpbGQuaHlkcmF0ZSh0b2tlbiwgdGhpcy5iaW5kaW5nT2JzZXJ2ZXJzLmhhcyh0b2tlbikgPyB0aGlzLmdldFJhdyh0b2tlbikgOiB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGZyb20gYSBub2RlLlxuICAgICAqIEBwYXJhbSBjaGlsZCAtIFRoZSBjaGlsZCB0byByZW1vdmUuXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICAgICAgY29uc3QgY2hpbGRJbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoY2hpbGRJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JzZXJ2YWJsZS5nZXROb3RpZmllcih0aGlzLnN0b3JlKS51bnN1YnNjcmliZShjaGlsZCk7XG4gICAgICAgIHJldHVybiBjaGlsZC5wYXJlbnQgPT09IHRoaXMgPyBjaGlsZFRvUGFyZW50LmRlbGV0ZShjaGlsZCkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdHMgd2hldGhlciBhIHByb3ZpZGVkIG5vZGUgaXMgY29udGFpbmVkIGJ5XG4gICAgICogdGhlIGNhbGxpbmcgbm9kZS5cbiAgICAgKiBAcGFyYW0gdGVzdCAtIFRoZSBub2RlIHRvIHRlc3RcbiAgICAgKi9cbiAgICBjb250YWlucyh0ZXN0KSB7XG4gICAgICAgIHJldHVybiBjb21wb3NlZENvbnRhaW5zKHRoaXMudGFyZ2V0LCB0ZXN0LnRhcmdldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc3RydWN0cyB0aGUgbm9kZSB0byByZWZsZWN0IGEgZGVzaWduIHRva2VuIGZvciB0aGUgcHJvdmlkZWQgdG9rZW4uXG4gICAgICogQHBhcmFtIHRva2VuIC0gVGhlIGRlc2lnbiB0b2tlbiB0byByZWZsZWN0XG4gICAgICovXG4gICAgcmVmbGVjdFRvQ1NTKHRva2VuKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JlZmxlY3RpbmcodG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLnJlZmxlY3RpbmcuYWRkKHRva2VuKTtcbiAgICAgICAgICAgIERlc2lnblRva2VuTm9kZS5jc3NDdXN0b21Qcm9wZXJ0eVJlZmxlY3Rvci5zdGFydFJlZmxlY3Rpb24odG9rZW4sIHRoaXMudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyByZWZsZWN0aW5nIGEgRGVzaWduVG9rZW4gdG8gQ1NTXG4gICAgICogQHBhcmFtIHRva2VuIC0gVGhlIGRlc2lnbiB0b2tlbiB0byBzdG9wIHJlZmxlY3RpbmdcbiAgICAgKi9cbiAgICBzdG9wUmVmbGVjdFRvQ1NTKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVmbGVjdGluZyh0b2tlbikpIHtcbiAgICAgICAgICAgIHRoaXMucmVmbGVjdGluZy5kZWxldGUodG9rZW4pO1xuICAgICAgICAgICAgRGVzaWduVG9rZW5Ob2RlLmNzc0N1c3RvbVByb3BlcnR5UmVmbGVjdG9yLnN0b3BSZWZsZWN0aW9uKHRva2VuLCB0aGlzLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIHRva2VuIGlzIGJlaW5nIHJlZmxlY3RlZCB0byBDU1MgZm9yIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gY2hlY2sgZm9yIHJlZmxlY3Rpb25cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGlzUmVmbGVjdGluZyh0b2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW5nLmhhcyh0b2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjaGFuZ2VzIHRvIHVwc3RyZWFtIHRva2Vuc1xuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgcGFyZW50IERlc2lnblRva2VuTm9kZVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSB0b2tlbiBJRCB0aGF0IGNoYW5nZWRcbiAgICAgKi9cbiAgICBoYW5kbGVDaGFuZ2Uoc291cmNlLCBwcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IERlc2lnblRva2VuSW1wbC5nZXRUb2tlbkJ5SWQocHJvcGVydHkpO1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oeWRyYXRlKHRva2VuLCB0aGlzLmdldFJhdyh0b2tlbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIeWRyYXRlcyBhIHRva2VuIHdpdGggYSBEZXNpZ25Ub2tlblZhbHVlLCBtYWtpbmcgcmV0cmlldmFsIGF2YWlsYWJsZS5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gaHlkcmF0ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBoeWRyYXRlXG4gICAgICovXG4gICAgaHlkcmF0ZSh0b2tlbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyh0b2tlbikpIHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gdGhpcy5iaW5kaW5nT2JzZXJ2ZXJzLmdldCh0b2tlbik7XG4gICAgICAgICAgICBpZiAoRGVzaWduVG9rZW5JbXBsLmlzRGVyaXZlZERlc2lnblRva2VuVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBiaW5kaW5nIHNvdXJjZSBkb2Vzbid0IG1hdGNoLCB3ZSBuZWVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHVwZGF0ZSB0aGUgYmluZGluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuc291cmNlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWFyRG93bkJpbmRpbmdPYnNlcnZlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwQmluZGluZ09ic2VydmVyKHRva2VuLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBCaW5kaW5nT2JzZXJ2ZXIodG9rZW4sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWFyRG93bkJpbmRpbmdPYnNlcnZlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0KHRva2VuLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBhIGJpbmRpbmcgb2JzZXJ2ZXIgZm9yIGEgZGVyaXZlZCB0b2tlbiB2YWx1ZSB0aGF0IG5vdGlmaWVzIHRva2VuXG4gICAgICogc3Vic2NyaWJlcnMgb24gY2hhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHRvIG5vdGlmeSB3aGVuIHRoZSBiaW5kaW5nIHVwZGF0ZXNcbiAgICAgKiBAcGFyYW0gc291cmNlIC0gVGhlIGJpbmRpbmcgc291cmNlXG4gICAgICovXG4gICAgc2V0dXBCaW5kaW5nT2JzZXJ2ZXIodG9rZW4sIHNvdXJjZSkge1xuICAgICAgICBjb25zdCBiaW5kaW5nID0gbmV3IERlc2lnblRva2VuQmluZGluZ09ic2VydmVyKHNvdXJjZSwgdG9rZW4sIHRoaXMpO1xuICAgICAgICB0aGlzLmJpbmRpbmdPYnNlcnZlcnMuc2V0KHRva2VuLCBiaW5kaW5nKTtcbiAgICAgICAgcmV0dXJuIGJpbmRpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlYXIgZG93biBhIGJpbmRpbmcgb2JzZXJ2ZXIgZm9yIGEgdG9rZW4uXG4gICAgICovXG4gICAgdGVhckRvd25CaW5kaW5nT2JzZXJ2ZXIodG9rZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuYmluZGluZ09ic2VydmVycy5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdPYnNlcnZlcnMuZ2V0KHRva2VuKS5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdPYnNlcnZlcnMuZGVsZXRlKHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciByZWZsZWN0aW5nIHRva2VucyB0byBDU1MgY3VzdG9tIHByb3BlcnRpZXNcbiAqL1xuRGVzaWduVG9rZW5Ob2RlLmNzc0N1c3RvbVByb3BlcnR5UmVmbGVjdG9yID0gbmV3IEN1c3RvbVByb3BlcnR5UmVmbGVjdG9yKCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZXNpZ25Ub2tlbk5vZGUucHJvdG90eXBlLCBcImNoaWxkcmVuXCIsIHZvaWQgMCk7XG5mdW5jdGlvbiBjcmVhdGUobmFtZU9yQ29uZmlnKSB7XG4gICAgcmV0dXJuIERlc2lnblRva2VuSW1wbC5mcm9tKG5hbWVPckNvbmZpZyk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBGYWN0b3J5IG9iamVjdCBmb3IgY3JlYXRpbmcge0BsaW5rIChEZXNpZ25Ub2tlbjppbnRlcmZhY2UpfSBpbnN0YW5jZXMuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBEZXNpZ25Ub2tlbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNyZWF0ZSxcbiAgICAvKipcbiAgICAgKiBJbmZvcm1zIERlc2lnblRva2VuIHRoYXQgYW4gSFRNTEVsZW1lbnQgZm9yIHdoaWNoIHRva2VucyBoYXZlXG4gICAgICogYmVlbiBzZXQgaGFzIGJlZW4gY29ubmVjdGVkIHRvIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBicm93c2VyIGRvZXMgbm90IHByb3ZpZGUgYSByZWxpYWJsZSBtZWNoYW5pc20gdG8gb2JzZXJ2ZSBhbiBIVE1MRWxlbWVudCdzIGNvbm5lY3RlZG5lc3NcbiAgICAgKiBpbiBhbGwgc2NlbmFyaW9zLCBzbyBpbnZva2luZyB0aGlzIG1ldGhvZCBtYW51YWxseSBpcyBuZWNlc3Nhcnkgd2hlbjpcbiAgICAgKlxuICAgICAqIDEuIFRva2VuIHZhbHVlcyBhcmUgc2V0IGZvciBhbiBIVE1MRWxlbWVudC5cbiAgICAgKiAyLiBUaGUgSFRNTEVsZW1lbnQgZG9lcyBub3QgaW5oZXJpdCBmcm9tIEZBU1RFbGVtZW50LlxuICAgICAqIDMuIFRoZSBIVE1MRWxlbWVudCBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBkb2N1bWVudCB3aGVuIHRva2VuIHZhbHVlcyBhcmUgc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBub3RpZnlcbiAgICAgKiBAcmV0dXJucyAtIHRydWUgaWYgbm90aWZpY2F0aW9uIHdhcyBzdWNjZXNzZnVsLCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICovXG4gICAgbm90aWZ5Q29ubmVjdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudC5pc0Nvbm5lY3RlZCB8fCAhRGVzaWduVG9rZW5Ob2RlLmV4aXN0c0ZvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIERlc2lnblRva2VuTm9kZS5nZXRPckNyZWF0ZShlbGVtZW50KS5iaW5kKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogSW5mb3JtcyBEZXNpZ25Ub2tlbiB0aGF0IGFuIEhUTUxFbGVtZW50IGZvciB3aGljaCB0b2tlbnMgaGF2ZVxuICAgICAqIGJlZW4gc2V0IGhhcyBiZWVuIGRpc2Nvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYnJvd3NlciBkb2VzIG5vdCBwcm92aWRlIGEgcmVsaWFibGUgbWVjaGFuaXNtIHRvIG9ic2VydmUgYW4gSFRNTEVsZW1lbnQncyBjb25uZWN0ZWRuZXNzXG4gICAgICogaW4gYWxsIHNjZW5hcmlvcywgc28gaW52b2tpbmcgdGhpcyBtZXRob2QgbWFudWFsbHkgaXMgbmVjZXNzYXJ5IHdoZW46XG4gICAgICpcbiAgICAgKiAxLiBUb2tlbiB2YWx1ZXMgYXJlIHNldCBmb3IgYW4gSFRNTEVsZW1lbnQuXG4gICAgICogMi4gVGhlIEhUTUxFbGVtZW50IGRvZXMgbm90IGluaGVyaXQgZnJvbSBGQVNURWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gbm90aWZ5XG4gICAgICogQHJldHVybnMgLSB0cnVlIGlmIG5vdGlmaWNhdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIG5vdGlmeURpc2Nvbm5lY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC5pc0Nvbm5lY3RlZCB8fCAhRGVzaWduVG9rZW5Ob2RlLmV4aXN0c0ZvcihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIERlc2lnblRva2VuTm9kZS5nZXRPckNyZWF0ZShlbGVtZW50KS51bmJpbmQoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYW5kIGVsZW1lbnQgb3IgZG9jdW1lbnQgYXMgYSBEZXNpZ25Ub2tlbiByb290LlxuICAgICAqIHtAbGluayBDU1NEZXNpZ25Ub2tlbiB8IENTU0Rlc2lnblRva2Vuc30gd2l0aCBkZWZhdWx0IHZhbHVlcyBhc3NpZ25lZCB2aWFcbiAgICAgKiB7QGxpbmsgKERlc2lnblRva2VuOmludGVyZmFjZSkud2l0aERlZmF1bHR9IHdpbGwgZW1pdCBDU1MgY3VzdG9tIHByb3BlcnRpZXMgdG8gYWxsXG4gICAgICogcmVnaXN0ZXJlZCByb290cy5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHJvb3QgdG8gcmVnaXN0ZXJcbiAgICAgKi9cbiAgICByZWdpc3RlclJvb3QodGFyZ2V0ID0gZGVmYXVsdEVsZW1lbnQpIHtcbiAgICAgICAgUm9vdFN0eWxlU2hlZXRUYXJnZXQucmVnaXN0ZXJSb290KHRhcmdldCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVyIGFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgYXMgYSBEZXNpZ25Ub2tlbiByb290LlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgcm9vdCB0byBkZXJlZ2lzdGVyXG4gICAgICovXG4gICAgdW5yZWdpc3RlclJvb3QodGFyZ2V0ID0gZGVmYXVsdEVsZW1lbnQpIHtcbiAgICAgICAgUm9vdFN0eWxlU2hlZXRUYXJnZXQudW5yZWdpc3RlclJvb3QodGFyZ2V0KTtcbiAgICB9LFxufSk7XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBDb25maWd1cmVzIGEgTXV0YXRpb25PYnNlcnZlciB0byB3YXRjaCBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIHRoZW1lIGNoYW5nZXMgYW5kXG4gKiBhcHBsaWVzIHRoZSBjdXJyZW50IFZpc3VhbCBTdHVkaW8gQ29kZSB0aGVtZSB0byB0aGUgdG9vbGtpdCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRoZW1lQ2hhbmdlTGlzdGVuZXIodG9rZW5NYXBwaW5ncykge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgIGFwcGx5Q3VycmVudFRoZW1lKHRva2VuTWFwcGluZ3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbJ2NsYXNzJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBhcHBseUN1cnJlbnRUaGVtZSh0b2tlbk1hcHBpbmdzKTtcbiAgICB9KTtcbn1cbi8qKlxuICogQXBwbGllcyB0aGUgY3VycmVudCBWaXN1YWwgU3R1ZGlvIENvZGUgdGhlbWUgdG8gdGhlIHRvb2xraXQgY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlDdXJyZW50VGhlbWUodG9rZW5NYXBwaW5ncykge1xuICAgIC8vIEdldCBhbGwgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSA8Ym9keT4gdGFnIGluIHRoZSB3ZWJ2aWV3IEhUTUxcbiAgICAvLyBJbXBvcnRhbnRseSB0aGlzIGluY2x1ZGVzIGFsbCB0aGUgQ1NTIHZhcmlhYmxlcyBhc3NvY2lhdGVkIHdpdGggdGhlXG4gICAgLy8gY3VycmVudCBWaXN1YWwgU3R1ZGlvIENvZGUgdGhlbWVcbiAgICBjb25zdCBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpO1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgICAgY29uc3QgdGhlbWVLaW5kID0gYm9keS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdnNjb2RlLXRoZW1lLWtpbmQnKTtcbiAgICAgICAgZm9yIChjb25zdCBbdnNjb2RlVG9rZW5OYW1lLCB0b29sa2l0VG9rZW5dIG9mIHRva2VuTWFwcGluZ3MpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKHZzY29kZVRva2VuTmFtZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhIGNvdXBsZSBvZiBzdHlsaW5nIGVkZ2UgY2FzZXMgd2hlbiBhIGhpZ2ggY29udHJhc3QgdGhlbWUgaXMgYXBwbGllZFxuICAgICAgICAgICAgaWYgKHRoZW1lS2luZCA9PT0gJ3ZzY29kZS1oaWdoLWNvbnRyYXN0Jykge1xuICAgICAgICAgICAgICAgIC8vIERldmVsb3BlciBub3RlOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIGEgaGFuZGZ1bCBvZiBWUyBDb2RlIHRoZW1lIHRva2VucyB0aGF0IGhhdmUgbm8gdmFsdWUgd2hlbiBhIGhpZ2hcbiAgICAgICAgICAgICAgICAvLyBjb250cmFzdCB0aGVtZSBpcyBhcHBsaWVkLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBpc3N1ZSBiZWNhdXNlIHdoZW4gbm8gdmFsdWUgaXMgc2V0IHRoZSB0b29sa2l0IHRva2VucyB3aWxsIGZhbGxcbiAgICAgICAgICAgICAgICAvLyBiYWNrIHRvIHRoZWlyIGRlZmF1bHQgY29sb3IgdmFsdWVzIChha2EgdGhlIFZTIENvZGUgZGFyayB0aGVtZSBjb2xvciBwYWxldHRlKS5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIHJlc3VsdHMgaW4gdGhlIGJhY2tncm91bmRzIG9mIGEgY291cGxlIG9mIGNvbXBvbmVudHMgaGF2aW5nIGRlZmF1bHQgZGFya1xuICAgICAgICAgICAgICAgIC8vIHRoZW1lIGNvbG9yc+KAk+KAk3RodXMgYnJlYWtpbmcgdGhlIGhpZ2ggY29udHJhc3QgdGhlbWUuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBUaGUgYmVsb3cgY29kZSwgY2F0Y2hlcyB0aGVzZSB0b2tlbnMgd2hpY2ggaGF2ZSBubyB2YWx1ZSBhbmQgYXJlIGFsc28gYmFja2dyb3VuZFxuICAgICAgICAgICAgICAgIC8vIHRva2VucywgdGhlbiBvdmVycmlkZXMgdGhlaXIgdmFsdWUgdG8gYmUgdHJhbnNwYXJlbnQuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICB0b29sa2l0VG9rZW4ubmFtZS5pbmNsdWRlcygnYmFja2dyb3VuZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2V0IGljb24gYnV0dG9uIGhvdmVyIHRvIGJlIHRyYW5zcGFyZW50IGluIGhpZ2ggY29udHJhc3QgdGhlbWVzXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xraXRUb2tlbi5uYW1lID09PSAnYnV0dG9uLWljb24taG92ZXItYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAndHJhbnNwYXJlbnQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNldCBjb250cmFzdC1hY3RpdmUtYm9yZGVyIHRva2VuIHRvIGJlIHRyYW5zcGFyZW50IGluIG5vbi1oaWdoLWNvbnRyYXN0IHRoZW1lc1xuICAgICAgICAgICAgICAgIGlmICh0b29sa2l0VG9rZW4ubmFtZSA9PT0gJ2NvbnRyYXN0LWFjdGl2ZS1ib3JkZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b29sa2l0VG9rZW4uc2V0VmFsdWVGb3IoYm9keSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBEZXNpZ25Ub2tlbiB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGluaXRUaGVtZUNoYW5nZUxpc3RlbmVyIH0gZnJvbSAnLi4vdGhlbWUvYXBwbHlUaGVtZSc7XG4vKipcbiAqIEEgbWFwcGluZyBvZiBhbGwgdGhlIFZpc3VhbCBTdHVkaW8gQ29kZSB0aGVtZSBDU1MgdmFyaWFibGVzIG1hcHBlZCB0byB0aGVcbiAqIHRvb2xraXQgZGVzaWduIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHRva2VuTWFwcGluZ3MgPSBuZXcgTWFwKCk7XG4vKipcbiAqIEJvb2xlYW4gZmxhZyB0aGF0IGVuc3VyZXMgdGhlIFZTIENvZGUgdGhlbWUgbGlzdGVuZXIgaXMgaW5pdGlhbGl6ZWQgb25jZS5cbiAqL1xubGV0IGlzVGhlbWVMaXN0ZW5lckluaXRpYWxpemVkID0gZmFsc2U7XG4vKipcbiAqIEdpdmVuIGEgZGVzaWduIHRva2VuIG5hbWUsIHJldHVybiBhIG5ldyBGQVNUIENTU0Rlc2lnblRva2VuLlxuICpcbiAqIEByZW1hcmtzIEEgVlMgQ29kZSB0aGVtZSBDU1MgdmFyaWFibGUgY2FuIGJlIG9wdGlvbmFsbHkgcGFzc2VkIHRvIGJlXG4gKiBhc3NvY2lhdGVkIHdpdGggdGhlIGRlc2lnbiB0b2tlbi5cbiAqXG4gKiBAcmVtYXJrcyBPbiB0aGUgZmlyc3QgZXhlY3V0aW9uIHRoZSBWUyBDb2RlIHRoZW1lIGxpc3RlbmVyIHdpbGwgYWxzbyBiZVxuICogaW5pdGlhbGl6ZWQuXG4gKlxuICogQHBhcmFtIG5hbWUgQSBkZXNpZ24gdG9rZW4gbmFtZS5cbiAqIEBwYXJhbSB2c2NvZGVUaGVtZVZhciBBIFZTIENvZGUgdGhlbWUgQ1NTIHZhcmlhYmxlIG5hbWUgdG8gYmUgYXNzb2NpYXRlZCB3aXRoXG4gKiB0aGUgZGVzaWduIHRva2VuLlxuICogQHJldHVybnMgQSBGQVNUIENTU0Rlc2lnblRva2VuIHRoYXQgZW1pdHMgYSBDU1MgY3VzdG9tIHByb3BlcnR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIHZzY29kZVRoZW1lVmFyKSB7XG4gICAgY29uc3QgZGVzaWduVG9rZW4gPSBEZXNpZ25Ub2tlbi5jcmVhdGUobmFtZSk7XG4gICAgaWYgKHZzY29kZVRoZW1lVmFyKSB7XG4gICAgICAgIC8vIElmIHRoZSBmYWtlIHZzY29kZSB0b2tlbiBpcyBwYXNzZWQgaW4sIGF0dGFjaCBhIHVuaXF1ZSBJRCB0byBpdCBzbyB0aGF0IGl0IGNhblxuICAgICAgICAvLyBiZSBhZGRlZCB0byB0aGUgdG9rZW5NYXBwaW5ncyBtYXAgd2l0aG91dCBvdmVycmlkaW5nIGEgcHJldmlvdXMgZmFrZSB0b2tlbiB2YWx1ZVxuICAgICAgICBpZiAodnNjb2RlVGhlbWVWYXIuaW5jbHVkZXMoJy0tZmFrZS12c2NvZGUtdG9rZW4nKSkge1xuICAgICAgICAgICAgY29uc3QgdW5pcXVlSWQgPSAnaWQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc2xpY2UoMik7XG4gICAgICAgICAgICB2c2NvZGVUaGVtZVZhciA9IGAke3ZzY29kZVRoZW1lVmFyfS0ke3VuaXF1ZUlkfWA7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5NYXBwaW5ncy5zZXQodnNjb2RlVGhlbWVWYXIsIGRlc2lnblRva2VuKTtcbiAgICB9XG4gICAgaWYgKCFpc1RoZW1lTGlzdGVuZXJJbml0aWFsaXplZCkge1xuICAgICAgICBpbml0VGhlbWVDaGFuZ2VMaXN0ZW5lcih0b2tlbk1hcHBpbmdzKTtcbiAgICAgICAgaXNUaGVtZUxpc3RlbmVySW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZGVzaWduVG9rZW47XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vdXRpbGl0aWVzL2Rlc2lnbi10b2tlbnMvY3JlYXRlJztcbi8qKlxuICogRGV2ZWxvcGVyIG5vdGU6XG4gKlxuICogVGhlcmUgYXJlIHNvbWUgdG9rZW5zIGRlZmluZWQgaW4gdGhpcyBmaWxlIHRoYXQgbWFrZSB1c2Ugb2YgYC0tZmFrZS12c2NvZGUtdG9rZW5gLiBUaGlzIGlzXG4gKiBkb25lIHdoZW4gYSB0b29sa2l0IHRva2VuIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgdG9rZW5NYXBwaW5ncyBtYXAgKGFuZCBzdWJzZXF1ZW50bHkgYWx0ZXJlZFxuICogaW4gdGhlIGFwcGx5VGhlbWUgZnVuY3Rpb24pIGJ1dCBkb2VzIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZyBWUyBDb2RlIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQuXG4gKlxuICogQW4gZXhhbXBsZSBpcyBidXR0b25JY29uSG92ZXJCYWNrZ3JvdW5kIHRva2VuIHdoaWNoIGRvZXMgbm90IGhhdmUgYSBjb3JyZXNwb25kaW5nIFZTIENvZGUgdG9rZW5cbiAqIGF0IHRoaXMgdGltZSAoaXQncyBhIGhhcmRjb2RlZCB2YWx1ZSBpbiBWUyBDb2RlKSwgYnV0IG5lZWRzIHRvIGJlIGFkanVzdGVkIHRvIGJlIHRyYW5zcGFyZW50IHdoZW4gYVxuICogaGlnaCBjb250cmFzdCB0aGVtZSBpcyBhcHBsaWVkLlxuICpcbiAqIEFzIGEgcnVsZSBvZiB0aHVtYiwgaWYgdGhlcmUgYXJlIHNwZWNpYWwgY2FzZXMgd2hlcmUgYSB0b2tlbiBuZWVkcyB0byBiZSBhZGp1c3RlZCBiYXNlZCBvbiB0aGVcbiAqIFZTIENvZGUgdGhlbWUgYW5kIGRvZXMgbm90IGhhdmUgYSBjb3JyZXNwb25kaW5nIFZTIENvZGUgdG9rZW4sIGAtLWZha2UtdnNjb2RlLXRva2VuYCBjYW4gYmUgdXNlZFxuICogdG8gaW5kaWNhdGUgdGhhdCBpdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIHRva2VuTWFwcGluZ3MgbWFwIGFuZCB0aHVzIG1ha2UgaXQgYWNjZXNzaWJsZSB0byB0aGVcbiAqIGFwcGx5VGhlbWUgZnVuY3Rpb24gd2hlcmUgaXQgY2FuIGJlIGR5bmFtaWNhbGx5IGFkanVzdGVkLlxuICovXG4vKipcbiAqIEdsb2JhbCBkZXNpZ24gdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZCA9IGNyZWF0ZSgnYmFja2dyb3VuZCcsICctLXZzY29kZS1lZGl0b3ItYmFja2dyb3VuZCcpLndpdGhEZWZhdWx0KCcjMWUxZTFlJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyV2lkdGggPSBjcmVhdGUoJ2JvcmRlci13aWR0aCcpLndpdGhEZWZhdWx0KDEpO1xuZXhwb3J0IGNvbnN0IGNvbnRyYXN0QWN0aXZlQm9yZGVyID0gY3JlYXRlKCdjb250cmFzdC1hY3RpdmUtYm9yZGVyJywgJy0tdnNjb2RlLWNvbnRyYXN0QWN0aXZlQm9yZGVyJykud2l0aERlZmF1bHQoJyNmMzg1MTgnKTtcbmV4cG9ydCBjb25zdCBjb250cmFzdEJvcmRlciA9IGNyZWF0ZSgnY29udHJhc3QtYm9yZGVyJywgJy0tdnNjb2RlLWNvbnRyYXN0Qm9yZGVyJykud2l0aERlZmF1bHQoJyM2ZmMzZGYnKTtcbmV4cG9ydCBjb25zdCBjb3JuZXJSYWRpdXMgPSBjcmVhdGUoJ2Nvcm5lci1yYWRpdXMnKS53aXRoRGVmYXVsdCgwKTtcbmV4cG9ydCBjb25zdCBkZXNpZ25Vbml0ID0gY3JlYXRlKCdkZXNpZ24tdW5pdCcpLndpdGhEZWZhdWx0KDQpO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkT3BhY2l0eSA9IGNyZWF0ZSgnZGlzYWJsZWQtb3BhY2l0eScpLndpdGhEZWZhdWx0KDAuNCk7XG5leHBvcnQgY29uc3QgZm9jdXNCb3JkZXIgPSBjcmVhdGUoJ2ZvY3VzLWJvcmRlcicsICctLXZzY29kZS1mb2N1c0JvcmRlcicpLndpdGhEZWZhdWx0KCcjMDA3ZmQ0Jyk7XG5leHBvcnQgY29uc3QgZm9udEZhbWlseSA9IGNyZWF0ZSgnZm9udC1mYW1pbHknLCAnLS12c2NvZGUtZm9udC1mYW1pbHknKS53aXRoRGVmYXVsdCgnLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBTZWdvZSBVSSwgUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmLCBBcHBsZSBDb2xvciBFbW9qaSwgU2Vnb2UgVUkgRW1vamksIFNlZ29lIFVJIFN5bWJvbCcpO1xuZXhwb3J0IGNvbnN0IGZvbnRXZWlnaHQgPSBjcmVhdGUoJ2ZvbnQtd2VpZ2h0JywgJy0tdnNjb2RlLWZvbnQtd2VpZ2h0Jykud2l0aERlZmF1bHQoJzQwMCcpO1xuZXhwb3J0IGNvbnN0IGZvcmVncm91bmQgPSBjcmVhdGUoJ2ZvcmVncm91bmQnLCAnLS12c2NvZGUtZm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjY2NjY2NjJyk7XG5leHBvcnQgY29uc3QgaW5wdXRIZWlnaHQgPSBjcmVhdGUoJ2lucHV0LWhlaWdodCcpLndpdGhEZWZhdWx0KCcyNicpO1xuZXhwb3J0IGNvbnN0IGlucHV0TWluV2lkdGggPSBjcmVhdGUoJ2lucHV0LW1pbi13aWR0aCcpLndpdGhEZWZhdWx0KCcxMDBweCcpO1xuZXhwb3J0IGNvbnN0IHR5cGVSYW1wQmFzZUZvbnRTaXplID0gY3JlYXRlKCd0eXBlLXJhbXAtYmFzZS1mb250LXNpemUnLCAnLS12c2NvZGUtZm9udC1zaXplJykud2l0aERlZmF1bHQoJzEzcHgnKTtcbmV4cG9ydCBjb25zdCB0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0ID0gY3JlYXRlKCd0eXBlLXJhbXAtYmFzZS1saW5lLWhlaWdodCcpLndpdGhEZWZhdWx0KCdub3JtYWwnKTtcbmV4cG9ydCBjb25zdCB0eXBlUmFtcE1pbnVzMUZvbnRTaXplID0gY3JlYXRlKCd0eXBlLXJhbXAtbWludXMxLWZvbnQtc2l6ZScpLndpdGhEZWZhdWx0KCcxMXB4Jyk7XG5leHBvcnQgY29uc3QgdHlwZVJhbXBNaW51czFMaW5lSGVpZ2h0ID0gY3JlYXRlKCd0eXBlLXJhbXAtbWludXMxLWxpbmUtaGVpZ2h0Jykud2l0aERlZmF1bHQoJzE2cHgnKTtcbmV4cG9ydCBjb25zdCB0eXBlUmFtcE1pbnVzMkZvbnRTaXplID0gY3JlYXRlKCd0eXBlLXJhbXAtbWludXMyLWZvbnQtc2l6ZScpLndpdGhEZWZhdWx0KCc5cHgnKTtcbmV4cG9ydCBjb25zdCB0eXBlUmFtcE1pbnVzMkxpbmVIZWlnaHQgPSBjcmVhdGUoJ3R5cGUtcmFtcC1taW51czItbGluZS1oZWlnaHQnKS53aXRoRGVmYXVsdCgnMTZweCcpO1xuZXhwb3J0IGNvbnN0IHR5cGVSYW1wUGx1czFGb250U2l6ZSA9IGNyZWF0ZSgndHlwZS1yYW1wLXBsdXMxLWZvbnQtc2l6ZScpLndpdGhEZWZhdWx0KCcxNnB4Jyk7XG5leHBvcnQgY29uc3QgdHlwZVJhbXBQbHVzMUxpbmVIZWlnaHQgPSBjcmVhdGUoJ3R5cGUtcmFtcC1wbHVzMS1saW5lLWhlaWdodCcpLndpdGhEZWZhdWx0KCcyNHB4Jyk7XG5leHBvcnQgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSBjcmVhdGUoJ3Njcm9sbGJhcldpZHRoJykud2l0aERlZmF1bHQoJzEwcHgnKTtcbmV4cG9ydCBjb25zdCBzY3JvbGxiYXJIZWlnaHQgPSBjcmVhdGUoJ3Njcm9sbGJhckhlaWdodCcpLndpdGhEZWZhdWx0KCcxMHB4Jyk7XG5leHBvcnQgY29uc3Qgc2Nyb2xsYmFyU2xpZGVyQmFja2dyb3VuZCA9IGNyZWF0ZSgnc2Nyb2xsYmFyLXNsaWRlci1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLXNjcm9sbGJhclNsaWRlci1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyM3OTc5Nzk2NicpO1xuZXhwb3J0IGNvbnN0IHNjcm9sbGJhclNsaWRlckhvdmVyQmFja2dyb3VuZCA9IGNyZWF0ZSgnc2Nyb2xsYmFyLXNsaWRlci1ob3Zlci1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLXNjcm9sbGJhclNsaWRlci1ob3ZlckJhY2tncm91bmQnKS53aXRoRGVmYXVsdCgnIzY0NjQ2NGIzJyk7XG5leHBvcnQgY29uc3Qgc2Nyb2xsYmFyU2xpZGVyQWN0aXZlQmFja2dyb3VuZCA9IGNyZWF0ZSgnc2Nyb2xsYmFyLXNsaWRlci1hY3RpdmUtYmFja2dyb3VuZCcsICctLXZzY29kZS1zY3JvbGxiYXJTbGlkZXItYWN0aXZlQmFja2dyb3VuZCcpLndpdGhEZWZhdWx0KCcjYmZiZmJmNjYnKTtcbi8qKlxuICogQmFkZ2UgZGVzaWduIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IGJhZGdlQmFja2dyb3VuZCA9IGNyZWF0ZSgnYmFkZ2UtYmFja2dyb3VuZCcsICctLXZzY29kZS1iYWRnZS1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyM0ZDRkNGQnKTtcbmV4cG9ydCBjb25zdCBiYWRnZUZvcmVncm91bmQgPSBjcmVhdGUoJ2JhZGdlLWZvcmVncm91bmQnLCAnLS12c2NvZGUtYmFkZ2UtZm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjZmZmZmZmJyk7XG4vKipcbiAqIEJ1dHRvbiBkZXNpZ24gdG9rZW5zLlxuICovXG4vLyBOb3RlOiBCdXR0b24gYm9yZGVyIGlzIHVzZWQgb25seSBmb3IgaGlnaCBjb250cmFzdCB0aGVtZXMgYW5kIHNob3VsZCBiZSBsZWZ0IGFzIHRyYW5zcGFyZW50IG90aGVyd2lzZS5cbmV4cG9ydCBjb25zdCBidXR0b25Cb3JkZXIgPSBjcmVhdGUoJ2J1dHRvbi1ib3JkZXInLCAnLS12c2NvZGUtYnV0dG9uLWJvcmRlcicpLndpdGhEZWZhdWx0KCd0cmFuc3BhcmVudCcpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvbkljb25CYWNrZ3JvdW5kID0gY3JlYXRlKCdidXR0b24taWNvbi1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJ3RyYW5zcGFyZW50Jyk7XG5leHBvcnQgY29uc3QgYnV0dG9uSWNvbkNvcm5lclJhZGl1cyA9IGNyZWF0ZSgnYnV0dG9uLWljb24tY29ybmVyLXJhZGl1cycpLndpdGhEZWZhdWx0KCc1cHgnKTtcbmV4cG9ydCBjb25zdCBidXR0b25JY29uRm9jdXNCb3JkZXJPZmZzZXQgPSBjcmVhdGUoJ2J1dHRvbi1pY29uLW91dGxpbmUtb2Zmc2V0Jykud2l0aERlZmF1bHQoMCk7XG4vLyBOb3RlIHVzYWdlIG9mIGAtLWZha2UtdnNjb2RlLXRva2VuYCAocmVmZXIgdG8gZG9jIGNvbW1lbnQgYXQgdG9wIG9mIGZpbGUgZm9yIGV4cGxhbmF0aW9uKS5cbmV4cG9ydCBjb25zdCBidXR0b25JY29uSG92ZXJCYWNrZ3JvdW5kID0gY3JlYXRlKCdidXR0b24taWNvbi1ob3Zlci1iYWNrZ3JvdW5kJywgJy0tZmFrZS12c2NvZGUtdG9rZW4nKS53aXRoRGVmYXVsdCgncmdiYSg5MCwgOTMsIDk0LCAwLjMxKScpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvbkljb25QYWRkaW5nID0gY3JlYXRlKCdidXR0b24taWNvbi1wYWRkaW5nJykud2l0aERlZmF1bHQoJzNweCcpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvblByaW1hcnlCYWNrZ3JvdW5kID0gY3JlYXRlKCdidXR0b24tcHJpbWFyeS1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLWJ1dHRvbi1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyMwZTYzOWMnKTtcbmV4cG9ydCBjb25zdCBidXR0b25QcmltYXJ5Rm9yZWdyb3VuZCA9IGNyZWF0ZSgnYnV0dG9uLXByaW1hcnktZm9yZWdyb3VuZCcsICctLXZzY29kZS1idXR0b24tZm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjZmZmZmZmJyk7XG5leHBvcnQgY29uc3QgYnV0dG9uUHJpbWFyeUhvdmVyQmFja2dyb3VuZCA9IGNyZWF0ZSgnYnV0dG9uLXByaW1hcnktaG92ZXItYmFja2dyb3VuZCcsICctLXZzY29kZS1idXR0b24taG92ZXJCYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyMxMTc3YmInKTtcbmV4cG9ydCBjb25zdCBidXR0b25TZWNvbmRhcnlCYWNrZ3JvdW5kID0gY3JlYXRlKCdidXR0b24tc2Vjb25kYXJ5LWJhY2tncm91bmQnLCAnLS12c2NvZGUtYnV0dG9uLXNlY29uZGFyeUJhY2tncm91bmQnKS53aXRoRGVmYXVsdCgnIzNhM2Q0MScpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvblNlY29uZGFyeUZvcmVncm91bmQgPSBjcmVhdGUoJ2J1dHRvbi1zZWNvbmRhcnktZm9yZWdyb3VuZCcsICctLXZzY29kZS1idXR0b24tc2Vjb25kYXJ5Rm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjZmZmZmZmJyk7XG5leHBvcnQgY29uc3QgYnV0dG9uU2Vjb25kYXJ5SG92ZXJCYWNrZ3JvdW5kID0gY3JlYXRlKCdidXR0b24tc2Vjb25kYXJ5LWhvdmVyLWJhY2tncm91bmQnLCAnLS12c2NvZGUtYnV0dG9uLXNlY29uZGFyeUhvdmVyQmFja2dyb3VuZCcpLndpdGhEZWZhdWx0KCcjNDU0OTRlJyk7XG5leHBvcnQgY29uc3QgYnV0dG9uUGFkZGluZ0hvcml6b250YWwgPSBjcmVhdGUoJ2J1dHRvbi1wYWRkaW5nLWhvcml6b250YWwnKS53aXRoRGVmYXVsdCgnMTFweCcpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvblBhZGRpbmdWZXJ0aWNhbCA9IGNyZWF0ZSgnYnV0dG9uLXBhZGRpbmctdmVydGljYWwnKS53aXRoRGVmYXVsdCgnNHB4Jyk7XG4vKipcbiAqIENoZWNrYm94IGRlc2lnbiB0b2tlbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja2JveEJhY2tncm91bmQgPSBjcmVhdGUoJ2NoZWNrYm94LWJhY2tncm91bmQnLCAnLS12c2NvZGUtY2hlY2tib3gtYmFja2dyb3VuZCcpLndpdGhEZWZhdWx0KCcjM2MzYzNjJyk7XG5leHBvcnQgY29uc3QgY2hlY2tib3hCb3JkZXIgPSBjcmVhdGUoJ2NoZWNrYm94LWJvcmRlcicsICctLXZzY29kZS1jaGVja2JveC1ib3JkZXInKS53aXRoRGVmYXVsdCgnIzNjM2MzYycpO1xuZXhwb3J0IGNvbnN0IGNoZWNrYm94Q29ybmVyUmFkaXVzID0gY3JlYXRlKCdjaGVja2JveC1jb3JuZXItcmFkaXVzJykud2l0aERlZmF1bHQoMyk7XG5leHBvcnQgY29uc3QgY2hlY2tib3hGb3JlZ3JvdW5kID0gY3JlYXRlKCdjaGVja2JveC1mb3JlZ3JvdW5kJywgJy0tdnNjb2RlLWNoZWNrYm94LWZvcmVncm91bmQnKS53aXRoRGVmYXVsdCgnI2YwZjBmMCcpO1xuLyoqXG4gKiBEYXRhIEdyaWQgZGVzaWduIHRva2Vuc1xuICovXG5leHBvcnQgY29uc3QgbGlzdEFjdGl2ZVNlbGVjdGlvbkJhY2tncm91bmQgPSBjcmVhdGUoJ2xpc3QtYWN0aXZlLXNlbGVjdGlvbi1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLWxpc3QtYWN0aXZlU2VsZWN0aW9uQmFja2dyb3VuZCcpLndpdGhEZWZhdWx0KCcjMDk0NzcxJyk7XG5leHBvcnQgY29uc3QgbGlzdEFjdGl2ZVNlbGVjdGlvbkZvcmVncm91bmQgPSBjcmVhdGUoJ2xpc3QtYWN0aXZlLXNlbGVjdGlvbi1mb3JlZ3JvdW5kJywgJy0tdnNjb2RlLWxpc3QtYWN0aXZlU2VsZWN0aW9uRm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjZmZmZmZmJyk7XG5leHBvcnQgY29uc3QgbGlzdEhvdmVyQmFja2dyb3VuZCA9IGNyZWF0ZSgnbGlzdC1ob3Zlci1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLWxpc3QtaG92ZXJCYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyMyYTJkMmUnKTtcbi8qKlxuICogRGl2aWRlciBkZXNpZ24gdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgZGl2aWRlckJhY2tncm91bmQgPSBjcmVhdGUoJ2RpdmlkZXItYmFja2dyb3VuZCcsICctLXZzY29kZS1zZXR0aW5ncy1kcm9wZG93bkxpc3RCb3JkZXInKS53aXRoRGVmYXVsdCgnIzQ1NDU0NScpO1xuLyoqXG4gKiBEcm9wZG93biBkZXNpZ24gdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgZHJvcGRvd25CYWNrZ3JvdW5kID0gY3JlYXRlKCdkcm9wZG93bi1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLWRyb3Bkb3duLWJhY2tncm91bmQnKS53aXRoRGVmYXVsdCgnIzNjM2MzYycpO1xuZXhwb3J0IGNvbnN0IGRyb3Bkb3duQm9yZGVyID0gY3JlYXRlKCdkcm9wZG93bi1ib3JkZXInLCAnLS12c2NvZGUtZHJvcGRvd24tYm9yZGVyJykud2l0aERlZmF1bHQoJyMzYzNjM2MnKTtcbmV4cG9ydCBjb25zdCBkcm9wZG93bkZvcmVncm91bmQgPSBjcmVhdGUoJ2Ryb3Bkb3duLWZvcmVncm91bmQnLCAnLS12c2NvZGUtZHJvcGRvd24tZm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjZjBmMGYwJyk7XG5leHBvcnQgY29uc3QgZHJvcGRvd25MaXN0TWF4SGVpZ2h0ID0gY3JlYXRlKCdkcm9wZG93bi1saXN0LW1heC1oZWlnaHQnKS53aXRoRGVmYXVsdCgnMjAwcHgnKTtcbi8qKlxuICogVGV4dCBGaWVsZCAmIEFyZWEgZGVzaWduIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IGlucHV0QmFja2dyb3VuZCA9IGNyZWF0ZSgnaW5wdXQtYmFja2dyb3VuZCcsICctLXZzY29kZS1pbnB1dC1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyMzYzNjM2MnKTtcbmV4cG9ydCBjb25zdCBpbnB1dEZvcmVncm91bmQgPSBjcmVhdGUoJ2lucHV0LWZvcmVncm91bmQnLCAnLS12c2NvZGUtaW5wdXQtZm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjY2NjY2NjJyk7XG5leHBvcnQgY29uc3QgaW5wdXRQbGFjZWhvbGRlckZvcmVncm91bmQgPSBjcmVhdGUoJ2lucHV0LXBsYWNlaG9sZGVyLWZvcmVncm91bmQnLCAnLS12c2NvZGUtaW5wdXQtcGxhY2Vob2xkZXJGb3JlZ3JvdW5kJykud2l0aERlZmF1bHQoJyNjY2NjY2MnKTtcbi8qKlxuICogTGluayBkZXNpZ24gdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgbGlua0FjdGl2ZUZvcmVncm91bmQgPSBjcmVhdGUoJ2xpbmstYWN0aXZlLWZvcmVncm91bmQnLCAnLS12c2NvZGUtdGV4dExpbmstYWN0aXZlRm9yZWdyb3VuZCcpLndpdGhEZWZhdWx0KCcjMzc5NGZmJyk7XG5leHBvcnQgY29uc3QgbGlua0ZvcmVncm91bmQgPSBjcmVhdGUoJ2xpbmstZm9yZWdyb3VuZCcsICctLXZzY29kZS10ZXh0TGluay1mb3JlZ3JvdW5kJykud2l0aERlZmF1bHQoJyMzNzk0ZmYnKTtcbi8qKlxuICogUHJvZ3Jlc3MgcmluZyBkZXNpZ24gdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NCYWNrZ3JvdW5kID0gY3JlYXRlKCdwcm9ncmVzcy1iYWNrZ3JvdW5kJywgJy0tdnNjb2RlLXByb2dyZXNzQmFyLWJhY2tncm91bmQnKS53aXRoRGVmYXVsdCgnIzBlNzBjMCcpO1xuLyoqXG4gKiBQYW5lbHMgZGVzaWduIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhbmVsVGFiQWN0aXZlQm9yZGVyID0gY3JlYXRlKCdwYW5lbC10YWItYWN0aXZlLWJvcmRlcicsICctLXZzY29kZS1wYW5lbFRpdGxlLWFjdGl2ZUJvcmRlcicpLndpdGhEZWZhdWx0KCcjZTdlN2U3Jyk7XG5leHBvcnQgY29uc3QgcGFuZWxUYWJBY3RpdmVGb3JlZ3JvdW5kID0gY3JlYXRlKCdwYW5lbC10YWItYWN0aXZlLWZvcmVncm91bmQnLCAnLS12c2NvZGUtcGFuZWxUaXRsZS1hY3RpdmVGb3JlZ3JvdW5kJykud2l0aERlZmF1bHQoJyNlN2U3ZTcnKTtcbmV4cG9ydCBjb25zdCBwYW5lbFRhYkZvcmVncm91bmQgPSBjcmVhdGUoJ3BhbmVsLXRhYi1mb3JlZ3JvdW5kJywgJy0tdnNjb2RlLXBhbmVsVGl0bGUtaW5hY3RpdmVGb3JlZ3JvdW5kJykud2l0aERlZmF1bHQoJyNlN2U3ZTc5OScpO1xuZXhwb3J0IGNvbnN0IHBhbmVsVmlld0JhY2tncm91bmQgPSBjcmVhdGUoJ3BhbmVsLXZpZXctYmFja2dyb3VuZCcsICctLXZzY29kZS1wYW5lbC1iYWNrZ3JvdW5kJykud2l0aERlZmF1bHQoJyMxZTFlMWUnKTtcbmV4cG9ydCBjb25zdCBwYW5lbFZpZXdCb3JkZXIgPSBjcmVhdGUoJ3BhbmVsLXZpZXctYm9yZGVyJywgJy0tdnNjb2RlLXBhbmVsLWJvcmRlcicpLndpdGhEZWZhdWx0KCcjODA4MDgwNTknKTtcbi8qKlxuICogVGFnIGRlc2lnbiB0b2tlbnMuXG4gKi9cbmV4cG9ydCBjb25zdCB0YWdDb3JuZXJSYWRpdXMgPSBjcmVhdGUoJ3RhZy1jb3JuZXItcmFkaXVzJykud2l0aERlZmF1bHQoJzJweCcpO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNwbGF5LCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJhZGdlQmFja2dyb3VuZCwgYmFkZ2VGb3JlZ3JvdW5kLCBib3JkZXJXaWR0aCwgYnV0dG9uQm9yZGVyLCBkZXNpZ25Vbml0LCBmb250RmFtaWx5LCB0eXBlUmFtcE1pbnVzMUZvbnRTaXplLCB0eXBlUmFtcE1pbnVzMUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgYmFkZ2VTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdpbmxpbmUtYmxvY2snKX0gOmhvc3Qge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wTWludXMxRm9udFNpemV9O1xuXHRcdGxpbmUtaGVpZ2h0OiAke3R5cGVSYW1wTWludXMxTGluZUhlaWdodH07XG5cdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHR9XG5cdC5jb250cm9sIHtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICR7YmFkZ2VCYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7YnV0dG9uQm9yZGVyfTtcblx0XHRib3JkZXItcmFkaXVzOiAxMXB4O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Y29sb3I6ICR7YmFkZ2VGb3JlZ3JvdW5kfTtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGhlaWdodDogY2FsYygke2Rlc2lnblVuaXR9ICogNHB4KTtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRtaW4td2lkdGg6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDRweCArIDJweCk7XG5cdFx0bWluLWhlaWdodDogY2FsYygke2Rlc2lnblVuaXR9ICogNHB4ICsgMnB4KTtcblx0XHRwYWRkaW5nOiAzcHggNnB4O1xuXHR9XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBCYWRnZSBhcyBGb3VuZGF0aW9uQmFkZ2UsIGJhZGdlVGVtcGxhdGUgYXMgdGVtcGxhdGUsIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuaW1wb3J0IHsgYmFkZ2VTdHlsZXMgYXMgc3R5bGVzIH0gZnJvbSAnLi9iYWRnZS5zdHlsZXMnO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIGJhZGdlIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJhZGdlIGV4dGVuZHMgRm91bmRhdGlvbkJhZGdlIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgdXNhZ2Ugb2YgdGhlIGNpcmN1bGFyIGF0dHJpYnV0ZVxuICAgICAgICAvLyBpbmhlcml0ZWQgYnkgdGhlIEZBU1QgRm91bmRhdGlvbiBCYWRnZSBjb21wb25lbnQgc29cbiAgICAgICAgLy8gdGhhdCBWU0NvZGUgQmFkZ2VzIGFyZSBhbHdheXMgY2lyY3VsYXJcbiAgICAgICAgaWYgKCF0aGlzLmNpcmN1bGFyKSB7XG4gICAgICAgICAgICB0aGlzLmNpcmN1bGFyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBiYWRnZSBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLWJhZGdlPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVCYWRnZSA9IEJhZGdlLmNvbXBvc2Uoe1xuICAgIGJhc2VOYW1lOiAnYmFkZ2UnLFxuICAgIHRlbXBsYXRlLFxuICAgIHN0eWxlcyxcbn0pO1xuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBTb21lIHN0YXRlcyBhbmQgcHJvcGVydGllcyBhcmUgYXBwbGljYWJsZSB0byBhbGwgaG9zdCBsYW5ndWFnZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgYSByb2xlIGlzIGFwcGxpZWQuXG4gKiBUaGUgZm9sbG93aW5nIGdsb2JhbCBzdGF0ZXMgYW5kIHByb3BlcnRpZXMgYXJlIHN1cHBvcnRlZCBieSBhbGwgcm9sZXMgYW5kIGJ5IGFsbCBiYXNlIG1hcmt1cCBlbGVtZW50cy5cbiAqIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNnbG9iYWxfc3RhdGVzfVxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBhIG1peGluLiBCZSBzdXJlIHlvdSBleHRlbmQgRkFTVEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMge1xufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWF0b21pY1wiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYUF0b21pY1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWJ1c3lcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFCdXN5XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImFyaWEtY29udHJvbHNcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFDb250cm9sc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWN1cnJlbnRcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFDdXJyZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImFyaWEtZGVzY3JpYmVkYnlcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFEZXNjcmliZWRieVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWRldGFpbHNcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFEZXRhaWxzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImFyaWEtZGlzYWJsZWRcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFEaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWVycm9ybWVzc2FnZVwiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYUVycm9ybWVzc2FnZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWZsb3d0b1wiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYUZsb3d0b1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWhhc3BvcHVwXCIgfSlcbl0sIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLnByb3RvdHlwZSwgXCJhcmlhSGFzcG9wdXBcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1oaWRkZW5cIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFIaWRkZW5cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1pbnZhbGlkXCIgfSlcbl0sIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLnByb3RvdHlwZSwgXCJhcmlhSW52YWxpZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWtleXNob3J0Y3V0c1wiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYUtleXNob3J0Y3V0c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWxhYmVsXCIgfSlcbl0sIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1sYWJlbGxlZGJ5XCIgfSlcbl0sIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxsZWRieVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJhcmlhLWxpdmVcIiB9KVxuXSwgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMucHJvdG90eXBlLCBcImFyaWFMaXZlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImFyaWEtb3duc1wiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYU93bnNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1yZWxldmFudFwiIH0pXG5dLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcy5wcm90b3R5cGUsIFwiYXJpYVJlbGV2YW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCIgfSlcbl0sIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLnByb3RvdHlwZSwgXCJhcmlhUm9sZWRlc2NyaXB0aW9uXCIsIHZvaWQgMCk7XG4iLCJpbXBvcnQgeyBBdHRhY2hlZEJlaGF2aW9ySFRNTERpcmVjdGl2ZSB9IGZyb20gXCIuL2h0bWwtZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIFRoZSBydW50aW1lIGJlaGF2aW9yIGZvciB0ZW1wbGF0ZSByZWZlcmVuY2VzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUmVmQmVoYXZpb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgUmVmQmVoYXZpb3IuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBlbGVtZW50IHRvIHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbiB0aGUgcmVmZXJlbmNlIHRvLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmluZCB0aGlzIGJlaGF2aW9yIHRvIHRoZSBzb3VyY2UuXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIFRoZSBzb3VyY2UgdG8gYmluZCB0by5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBleGVjdXRpb24gY29udGV4dCB0aGF0IHRoZSBiaW5kaW5nIGlzIG9wZXJhdGluZyB3aXRoaW4uXG4gICAgICovXG4gICAgYmluZChzb3VyY2UpIHtcbiAgICAgICAgc291cmNlW3RoaXMucHJvcGVydHlOYW1lXSA9IHRoaXMudGFyZ2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbmJpbmRzIHRoaXMgYmVoYXZpb3IgZnJvbSB0aGUgc291cmNlLlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIHRvIHVuYmluZCBmcm9tLlxuICAgICAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbiAgICB1bmJpbmQoKSB7IH1cbn1cbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBvYnNlcnZlcyB0aGUgdXBkYXRlcyBhIHByb3BlcnR5IHdpdGggYSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gcHJvcGVydHlOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbiB0aGUgcmVmZXJlbmNlIHRvLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVmKHByb3BlcnR5TmFtZSkge1xuICAgIHJldHVybiBuZXcgQXR0YWNoZWRCZWhhdmlvckhUTUxEaXJlY3RpdmUoXCJmYXN0LXJlZlwiLCBSZWZCZWhhdmlvciwgcHJvcGVydHlOYW1lKTtcbn1cbiIsImltcG9ydCB7IGh0bWwsIHJlZiB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBBIG1peGluIGNsYXNzIGltcGxlbWVudGluZyBzdGFydCBhbmQgZW5kIGVsZW1lbnRzLlxuICogVGhlc2UgYXJlIGdlbmVyYWxseSB1c2VkIHRvIGRlY29yYXRlIHRleHQgZWxlbWVudHMgd2l0aCBpY29ucyBvciBvdGhlciB2aXN1YWwgaW5kaWNhdG9ycy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXJ0RW5kIHtcbiAgICBoYW5kbGVTdGFydENvbnRlbnRDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc3RhcnRDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZShcInN0YXJ0XCIsIHRoaXMuc3RhcnQuYXNzaWduZWROb2RlcygpLmxlbmd0aCA+IDApO1xuICAgIH1cbiAgICBoYW5kbGVFbmRDb250ZW50Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLmVuZENvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKFwiZW5kXCIsIHRoaXMuZW5kLmFzc2lnbmVkTm9kZXMoKS5sZW5ndGggPiAwKTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIGVuZCBlbGVtZW50LlxuICogRm9yIHVzZSB3aXRoIHtAbGluayBTdGFydEVuZH1cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBlbmRTbG90VGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHNwYW5cbiAgICAgICAgcGFydD1cImVuZFwiXG4gICAgICAgICR7cmVmKFwiZW5kQ29udGFpbmVyXCIpfVxuICAgICAgICBjbGFzcz0ke3ggPT4gKGRlZmluaXRpb24uZW5kID8gXCJlbmRcIiA6IHZvaWQgMCl9XG4gICAgPlxuICAgICAgICA8c2xvdCBuYW1lPVwiZW5kXCIgJHtyZWYoXCJlbmRcIil9IEBzbG90Y2hhbmdlPVwiJHt4ID0+IHguaGFuZGxlRW5kQ29udGVudENoYW5nZSgpfVwiPlxuICAgICAgICAgICAgJHtkZWZpbml0aW9uLmVuZCB8fCBcIlwifVxuICAgICAgICA8L3Nsb3Q+XG4gICAgPC9zcGFuPlxuYDtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUgc3RhcnQgZWxlbWVudC5cbiAqIEZvciB1c2Ugd2l0aCB7QGxpbmsgU3RhcnRFbmR9XG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3RhcnRTbG90VGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHNwYW5cbiAgICAgICAgcGFydD1cInN0YXJ0XCJcbiAgICAgICAgJHtyZWYoXCJzdGFydENvbnRhaW5lclwiKX1cbiAgICAgICAgY2xhc3M9XCIke3ggPT4gKGRlZmluaXRpb24uc3RhcnQgPyBcInN0YXJ0XCIgOiB2b2lkIDApfVwiXG4gICAgPlxuICAgICAgICA8c2xvdFxuICAgICAgICAgICAgbmFtZT1cInN0YXJ0XCJcbiAgICAgICAgICAgICR7cmVmKFwic3RhcnRcIil9XG4gICAgICAgICAgICBAc2xvdGNoYW5nZT1cIiR7eCA9PiB4LmhhbmRsZVN0YXJ0Q29udGVudENoYW5nZSgpfVwiXG4gICAgICAgID5cbiAgICAgICAgICAgICR7ZGVmaW5pdGlvbi5zdGFydCB8fCBcIlwifVxuICAgICAgICA8L3Nsb3Q+XG4gICAgPC9zcGFuPlxuYDtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUgZW5kIGVsZW1lbnQuXG4gKiBGb3IgdXNlIHdpdGgge0BsaW5rIFN0YXJ0RW5kfVxuICpcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIC0gdXNlIGVuZFNsb3RUZW1wbGF0ZVxuICovXG5leHBvcnQgY29uc3QgZW5kVGVtcGxhdGUgPSBodG1sIGBcbiAgICA8c3BhbiBwYXJ0PVwiZW5kXCIgJHtyZWYoXCJlbmRDb250YWluZXJcIil9PlxuICAgICAgICA8c2xvdFxuICAgICAgICAgICAgbmFtZT1cImVuZFwiXG4gICAgICAgICAgICAke3JlZihcImVuZFwiKX1cbiAgICAgICAgICAgIEBzbG90Y2hhbmdlPVwiJHt4ID0+IHguaGFuZGxlRW5kQ29udGVudENoYW5nZSgpfVwiXG4gICAgICAgID48L3Nsb3Q+XG4gICAgPC9zcGFuPlxuYDtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUgc3RhcnQgZWxlbWVudC5cbiAqIEZvciB1c2Ugd2l0aCB7QGxpbmsgU3RhcnRFbmR9XG4gKlxuICogQHB1YmxpY1xuICogQGRlcHJlY2F0ZWQgLSB1c2Ugc3RhcnRTbG90VGVtcGxhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IHN0YXJ0VGVtcGxhdGUgPSBodG1sIGBcbiAgICA8c3BhbiBwYXJ0PVwic3RhcnRcIiAke3JlZihcInN0YXJ0Q29udGFpbmVyXCIpfT5cbiAgICAgICAgPHNsb3RcbiAgICAgICAgICAgIG5hbWU9XCJzdGFydFwiXG4gICAgICAgICAgICAke3JlZihcInN0YXJ0XCIpfVxuICAgICAgICAgICAgQHNsb3RjaGFuZ2U9XCIke3ggPT4geC5oYW5kbGVTdGFydENvbnRlbnRDaGFuZ2UoKX1cIlxuICAgICAgICA+PC9zbG90PlxuICAgIDwvc3Bhbj5cbmA7XG4iLCIvKipcbiAqIEFwcGx5IG1peGlucyB0byBhIGNvbnN0cnVjdG9yLlxuICogU291cmNlZCBmcm9tIHtAbGluayBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9taXhpbnMuaHRtbCB8IFR5cGVTY3JpcHQgRG9jdW1lbnRhdGlvbiB9LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlNaXhpbnMoZGVyaXZlZEN0b3IsIC4uLmJhc2VDdG9ycykge1xuICAgIGJhc2VDdG9ycy5mb3JFYWNoKGJhc2VDdG9yID0+IHtcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYmFzZUN0b3IucHJvdG90eXBlKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXJpdmVkQ3Rvci5wcm90b3R5cGUsIG5hbWUsIFxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uICovXG4gICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlQ3Rvci5wcm90b3R5cGUsIG5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChiYXNlQ3Rvci5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IGRlcml2ZWRDdG9yLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgICAgICBkZXJpdmVkQ3Rvci5hdHRyaWJ1dGVzID0gZXhpc3RpbmcuY29uY2F0KGJhc2VDdG9yLmF0dHJpYnV0ZXMpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCIvKipcbiAqIEtleSBDb2RlIHZhbHVlc1xuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIGluZGl2aWR1YWwgc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCB2YXIgS2V5Q29kZXM7XG4oZnVuY3Rpb24gKEtleUNvZGVzKSB7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJhbHRcIl0gPSAxOF0gPSBcImFsdFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiYXJyb3dEb3duXCJdID0gNDBdID0gXCJhcnJvd0Rvd25cIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImFycm93TGVmdFwiXSA9IDM3XSA9IFwiYXJyb3dMZWZ0XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJhcnJvd1JpZ2h0XCJdID0gMzldID0gXCJhcnJvd1JpZ2h0XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJhcnJvd1VwXCJdID0gMzhdID0gXCJhcnJvd1VwXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJiYWNrXCJdID0gOF0gPSBcImJhY2tcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImJhY2tTbGFzaFwiXSA9IDIyMF0gPSBcImJhY2tTbGFzaFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiYnJlYWtcIl0gPSAxOV0gPSBcImJyZWFrXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJjYXBzTG9ja1wiXSA9IDIwXSA9IFwiY2Fwc0xvY2tcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImNsb3NlQnJhY2tldFwiXSA9IDIyMV0gPSBcImNsb3NlQnJhY2tldFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiY29sb25cIl0gPSAxODZdID0gXCJjb2xvblwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiY29sb24yXCJdID0gNTldID0gXCJjb2xvbjJcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImNvbW1hXCJdID0gMTg4XSA9IFwiY29tbWFcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImN0cmxcIl0gPSAxN10gPSBcImN0cmxcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImRlbGV0ZVwiXSA9IDQ2XSA9IFwiZGVsZXRlXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJlbmRcIl0gPSAzNV0gPSBcImVuZFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZW50ZXJcIl0gPSAxM10gPSBcImVudGVyXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJlcXVhbHNcIl0gPSAxODddID0gXCJlcXVhbHNcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImVxdWFsczJcIl0gPSA2MV0gPSBcImVxdWFsczJcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImVxdWFsczNcIl0gPSAxMDddID0gXCJlcXVhbHMzXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJlc2NhcGVcIl0gPSAyN10gPSBcImVzY2FwZVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZm9yd2FyZFNsYXNoXCJdID0gMTkxXSA9IFwiZm9yd2FyZFNsYXNoXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJmdW5jdGlvbjFcIl0gPSAxMTJdID0gXCJmdW5jdGlvbjFcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImZ1bmN0aW9uMTBcIl0gPSAxMjFdID0gXCJmdW5jdGlvbjEwXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJmdW5jdGlvbjExXCJdID0gMTIyXSA9IFwiZnVuY3Rpb24xMVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZnVuY3Rpb24xMlwiXSA9IDEyM10gPSBcImZ1bmN0aW9uMTJcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImZ1bmN0aW9uMlwiXSA9IDExM10gPSBcImZ1bmN0aW9uMlwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZnVuY3Rpb24zXCJdID0gMTE0XSA9IFwiZnVuY3Rpb24zXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJmdW5jdGlvbjRcIl0gPSAxMTVdID0gXCJmdW5jdGlvbjRcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImZ1bmN0aW9uNVwiXSA9IDExNl0gPSBcImZ1bmN0aW9uNVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZnVuY3Rpb242XCJdID0gMTE3XSA9IFwiZnVuY3Rpb242XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJmdW5jdGlvbjdcIl0gPSAxMThdID0gXCJmdW5jdGlvbjdcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcImZ1bmN0aW9uOFwiXSA9IDExOV0gPSBcImZ1bmN0aW9uOFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wiZnVuY3Rpb245XCJdID0gMTIwXSA9IFwiZnVuY3Rpb245XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJob21lXCJdID0gMzZdID0gXCJob21lXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJpbnNlcnRcIl0gPSA0NV0gPSBcImluc2VydFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibWVudVwiXSA9IDkzXSA9IFwibWVudVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibWludXNcIl0gPSAxODldID0gXCJtaW51c1wiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibWludXMyXCJdID0gMTA5XSA9IFwibWludXMyXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJudW1Mb2NrXCJdID0gMTQ0XSA9IFwibnVtTG9ja1wiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkMFwiXSA9IDk2XSA9IFwibnVtUGFkMFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkMVwiXSA9IDk3XSA9IFwibnVtUGFkMVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkMlwiXSA9IDk4XSA9IFwibnVtUGFkMlwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkM1wiXSA9IDk5XSA9IFwibnVtUGFkM1wiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkNFwiXSA9IDEwMF0gPSBcIm51bVBhZDRcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIm51bVBhZDVcIl0gPSAxMDFdID0gXCJudW1QYWQ1XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJudW1QYWQ2XCJdID0gMTAyXSA9IFwibnVtUGFkNlwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkN1wiXSA9IDEwM10gPSBcIm51bVBhZDdcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIm51bVBhZDhcIl0gPSAxMDRdID0gXCJudW1QYWQ4XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJudW1QYWQ5XCJdID0gMTA1XSA9IFwibnVtUGFkOVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wibnVtUGFkRGl2aWRlXCJdID0gMTExXSA9IFwibnVtUGFkRGl2aWRlXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJudW1QYWREb3RcIl0gPSAxMTBdID0gXCJudW1QYWREb3RcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIm51bVBhZE1pbnVzXCJdID0gMTA5XSA9IFwibnVtUGFkTWludXNcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIm51bVBhZE11bHRpcGx5XCJdID0gMTA2XSA9IFwibnVtUGFkTXVsdGlwbHlcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIm51bVBhZFBsdXNcIl0gPSAxMDddID0gXCJudW1QYWRQbHVzXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJvcGVuQnJhY2tldFwiXSA9IDIxOV0gPSBcIm9wZW5CcmFja2V0XCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJwYWdlRG93blwiXSA9IDM0XSA9IFwicGFnZURvd25cIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcInBhZ2VVcFwiXSA9IDMzXSA9IFwicGFnZVVwXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJwZXJpb2RcIl0gPSAxOTBdID0gXCJwZXJpb2RcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcInByaW50XCJdID0gNDRdID0gXCJwcmludFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wicXVvdGVcIl0gPSAyMjJdID0gXCJxdW90ZVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wic2Nyb2xsTG9ja1wiXSA9IDE0NV0gPSBcInNjcm9sbExvY2tcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcInNoaWZ0XCJdID0gMTZdID0gXCJzaGlmdFwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wic3BhY2VcIl0gPSAzMl0gPSBcInNwYWNlXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJ0YWJcIl0gPSA5XSA9IFwidGFiXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJ0aWxkZVwiXSA9IDE5Ml0gPSBcInRpbGRlXCI7XG4gICAgS2V5Q29kZXNbS2V5Q29kZXNbXCJ3aW5kb3dzTGVmdFwiXSA9IDkxXSA9IFwid2luZG93c0xlZnRcIjtcbiAgICBLZXlDb2Rlc1tLZXlDb2Rlc1tcIndpbmRvd3NPcGVyYVwiXSA9IDIxOV0gPSBcIndpbmRvd3NPcGVyYVwiO1xuICAgIEtleUNvZGVzW0tleUNvZGVzW1wid2luZG93c1JpZ2h0XCJdID0gOTJdID0gXCJ3aW5kb3dzUmlnaHRcIjtcbn0pKEtleUNvZGVzIHx8IChLZXlDb2RlcyA9IHt9KSk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVBbHQgPSAxODtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUFycm93RG93biA9IDQwO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlQXJyb3dMZWZ0ID0gMzc7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVBcnJvd1JpZ2h0ID0gMzk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVBcnJvd1VwID0gMzg7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVCYWNrID0gODtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUJhY2tTbGFzaCA9IDIyMDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUJyZWFrID0gMTk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVDYXBzTG9jayA9IDIwO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlQ2xvc2VCcmFja2V0ID0gMjIxO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlQ29sb24gPSAxODY7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVDb2xvbjIgPSA1OTsgLy8gT3BlcmEgYW5kIEZpcmVmb3hcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUNvbW1hID0gMTg4O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlQ3RybCA9IDE3O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlRGVsZXRlID0gNDY7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVFbmQgPSAzNTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUVudGVyID0gMTM7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVFcXVhbHMgPSAxODc7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVFcXVhbHMyID0gNjE7IC8vIE9wZXJhXG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVFcXVhbHMzID0gMTA3OyAvLyBGaXJlZm94XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVFc2NhcGUgPSAyNztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZvcndhcmRTbGFzaCA9IDE5MTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uMSA9IDExMjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uMTAgPSAxMjE7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVGdW5jdGlvbjExID0gMTIyO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlRnVuY3Rpb24xMiA9IDEyMztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uMiA9IDExMztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uMyA9IDExNDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uNCA9IDExNTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uNSA9IDExNjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uNiA9IDExNztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uNyA9IDExODtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uOCA9IDExOTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUZ1bmN0aW9uOSA9IDEyMDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUhvbWUgPSAzNjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZUluc2VydCA9IDQ1O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTWVudSA9IDkzO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTWludXMgPSAxODk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVNaW51czIgPSAxMDk7IC8vIE9wZXJhIGFuZCBGaXJlZm94XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVOdW1Mb2NrID0gMTQ0O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkMCA9IDk2O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkMSA9IDk3O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkMiA9IDk4O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkMyA9IDk5O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkNCA9IDEwMDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZU51bVBhZDUgPSAxMDE7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVOdW1QYWQ2ID0gMTAyO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkNyA9IDEwMztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZU51bVBhZDggPSAxMDQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVOdW1QYWQ5ID0gMTA1O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkRGl2aWRlID0gMTExO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkRG90ID0gMTEwO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlTnVtUGFkTWludXMgPSAxMDk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVOdW1QYWRNdWx0aXBseSA9IDEwNjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZU51bVBhZFBsdXMgPSAxMDc7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVPcGVuQnJhY2tldCA9IDIxOTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVBhZ2VEb3duID0gMzQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVQYWdlVXAgPSAzMztcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVBlcmlvZCA9IDE5MDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVByaW50ID0gNDQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVRdW90ZSA9IDIyMjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVNjcm9sbExvY2sgPSAxNDU7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVTaGlmdCA9IDE2O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCAtIEtleUNvZGVzIGFyZSBkZXByZWNhdGVkLCB1c2Ugc3RyaW5nIGtleSBleHBvcnRzXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlDb2RlU3BhY2UgPSAzMjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVRhYiA9IDk7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVUaWxkZSA9IDE5Mjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgLSBLZXlDb2RlcyBhcmUgZGVwcmVjYXRlZCwgdXNlIHN0cmluZyBrZXkgZXhwb3J0c1xuICovXG5leHBvcnQgY29uc3Qga2V5Q29kZVdpbmRvd3NMZWZ0ID0gOTE7XG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVXaW5kb3dzT3BlcmEgPSAyMTk7IC8vIE9wZXJhXG4vKipcbiAqIEBkZXByZWNhdGVkIC0gS2V5Q29kZXMgYXJlIGRlcHJlY2F0ZWQsIHVzZSBzdHJpbmcga2V5IGV4cG9ydHNcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUNvZGVXaW5kb3dzUmlnaHQgPSA5Mjtcbi8qKlxuICogU3RyaW5nIHZhbHVlcyBmb3IgdXNlIHdpdGggS2V5Ym9hcmRFdmVudC5rZXlcbiAqL1xuZXhwb3J0IGNvbnN0IGtleUFycm93RG93biA9IFwiQXJyb3dEb3duXCI7XG5leHBvcnQgY29uc3Qga2V5QXJyb3dMZWZ0ID0gXCJBcnJvd0xlZnRcIjtcbmV4cG9ydCBjb25zdCBrZXlBcnJvd1JpZ2h0ID0gXCJBcnJvd1JpZ2h0XCI7XG5leHBvcnQgY29uc3Qga2V5QXJyb3dVcCA9IFwiQXJyb3dVcFwiO1xuZXhwb3J0IGNvbnN0IGtleUVudGVyID0gXCJFbnRlclwiO1xuZXhwb3J0IGNvbnN0IGtleUVzY2FwZSA9IFwiRXNjYXBlXCI7XG5leHBvcnQgY29uc3Qga2V5SG9tZSA9IFwiSG9tZVwiO1xuZXhwb3J0IGNvbnN0IGtleUVuZCA9IFwiRW5kXCI7XG5leHBvcnQgY29uc3Qga2V5RnVuY3Rpb24yID0gXCJGMlwiO1xuZXhwb3J0IGNvbnN0IGtleVBhZ2VEb3duID0gXCJQYWdlRG93blwiO1xuZXhwb3J0IGNvbnN0IGtleVBhZ2VVcCA9IFwiUGFnZVVwXCI7XG5leHBvcnQgY29uc3Qga2V5U3BhY2UgPSBcIiBcIjtcbmV4cG9ydCBjb25zdCBrZXlUYWIgPSBcIlRhYlwiO1xuZXhwb3J0IGNvbnN0IGtleUJhY2tzcGFjZSA9IFwiQmFja3NwYWNlXCI7XG5leHBvcnQgY29uc3Qga2V5RGVsZXRlID0gXCJEZWxldGVcIjtcbmV4cG9ydCBjb25zdCBBcnJvd0tleXMgPSB7XG4gICAgQXJyb3dEb3duOiBrZXlBcnJvd0Rvd24sXG4gICAgQXJyb3dMZWZ0OiBrZXlBcnJvd0xlZnQsXG4gICAgQXJyb3dSaWdodDoga2V5QXJyb3dSaWdodCxcbiAgICBBcnJvd1VwOiBrZXlBcnJvd1VwLFxufTtcbiIsImltcG9ydCB7IGF0dHIsIGJvb2xlYW5Db252ZXJ0ZXIsIERPTSwgZW1wdHlBcnJheSwgb2JzZXJ2YWJsZSwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGtleUVudGVyIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzXCI7XG5jb25zdCBwcm94eVNsb3ROYW1lID0gXCJmb3JtLWFzc29jaWF0ZWQtcHJveHlcIjtcbmNvbnN0IEVsZW1lbnRJbnRlcm5hbHNLZXkgPSBcIkVsZW1lbnRJbnRlcm5hbHNcIjtcbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBzdXBwb3J0c0VsZW1lbnRJbnRlcm5hbHMgPSBFbGVtZW50SW50ZXJuYWxzS2V5IGluIHdpbmRvdyAmJlxuICAgIFwic2V0Rm9ybVZhbHVlXCIgaW4gd2luZG93W0VsZW1lbnRJbnRlcm5hbHNLZXldLnByb3RvdHlwZTtcbmNvbnN0IEludGVybmFsc01hcCA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEJhc2UgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBDdXN0b20gRWxlbWVudCBGb3JtIEFzc29jaWF0aW9uLlxuICpcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gRm9ybUFzc29jaWF0ZWQoQmFzZUN0b3IpIHtcbiAgICBjb25zdCBDID0gY2xhc3MgZXh0ZW5kcyBCYXNlQ3RvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmFjayB3aGV0aGVyIHRoZSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkIGZyb20gdGhlIGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIGVsZW1lbnQncyBkaXNhYmxlZCBzdGF0ZS4gQSBkaXNhYmxlZCBlbGVtZW50IHdpbGwgbm90IGJlIGluY2x1ZGVkIGR1cmluZyBmb3JtIHN1Ym1pc3Npb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiBkaXNhYmxlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZXNlIGFyZSBldmVudHMgdGhhdCBhcmUgc3RpbGwgZmlyZWQgYnkgdGhlIHByb3h5XG4gICAgICAgICAgICAgKiBlbGVtZW50IGJhc2VkIG9uIHVzZXIgLyBwcm9ncmFtbWF0aWMgaW50ZXJhY3Rpb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhlIHByb3h5IGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudCB0b1xuICAgICAgICAgICAgICogdGhlIGFwcCBhdXRob3IsIHNvIGJsb2NrIHRoZXNlIGV2ZW50cyBmcm9tIGVtaXR0aW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnByb3h5RXZlbnRzVG9CbG9jayA9IFtcImNoYW5nZVwiLCBcImNsaWNrXCJdO1xuICAgICAgICAgICAgdGhpcy5wcm94eUluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudEludGVybmFscykge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gZWxlbWVudEludGVybmFscyBpcyBub3Qgc3VwcG9ydGVkLCBmb3JtUmVzZXRDYWxsYmFjayBpc1xuICAgICAgICAgICAgICAgIC8vIGJvdW5kIHRvIGFuIGV2ZW50IGxpc3RlbmVyLCBzbyBlbnN1cmUgdGhlIGhhbmRsZXIncyBgdGhpc2BcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0IGlzIGNvcnJlY3QuXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtUmVzZXRDYWxsYmFjayA9IHRoaXMuZm9ybVJlc2V0Q2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTXVzdCBldmFsdWF0ZSB0byB0cnVlIHRvIGVuYWJsZSBlbGVtZW50SW50ZXJuYWxzLlxuICAgICAgICAgKiBGZWF0dXJlIGRldGVjdHMgQVBJIHN1cHBvcnQgYW5kIHJlc29sdmUgcmVzcGVjdGl2ZWx5XG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGdldCBmb3JtQXNzb2NpYXRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBwb3J0c0VsZW1lbnRJbnRlcm5hbHM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHZhbGlkaXR5IHN0YXRlIG9mIHRoZSBlbGVtZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEBhbHBoYVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0IHZhbGlkaXR5KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudEludGVybmFsc1xuICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50SW50ZXJuYWxzLnZhbGlkaXR5XG4gICAgICAgICAgICAgICAgOiB0aGlzLnByb3h5LnZhbGlkaXR5O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRyaWV2ZSBhIHJlZmVyZW5jZSB0byB0aGUgYXNzb2NpYXRlZCBmb3JtLlxuICAgICAgICAgKiBSZXR1cm5zIG51bGwgaWYgbm90IGFzc29jaWF0ZWQgdG8gYW55IGZvcm0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBhbHBoYVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0IGZvcm0oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SW50ZXJuYWxzID8gdGhpcy5lbGVtZW50SW50ZXJuYWxzLmZvcm0gOiB0aGlzLnByb3h5LmZvcm07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHJpZXZlIHRoZSBsb2NhbGl6ZWQgdmFsaWRhdGlvbiBtZXNzYWdlLFxuICAgICAgICAgKiBvciBjdXN0b20gdmFsaWRhdGlvbiBtZXNzYWdlIGlmIHNldC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGFscGhhXG4gICAgICAgICAqL1xuICAgICAgICBnZXQgdmFsaWRhdGlvbk1lc3NhZ2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SW50ZXJuYWxzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmVsZW1lbnRJbnRlcm5hbHMudmFsaWRhdGlvbk1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IHRoaXMucHJveHkudmFsaWRhdGlvbk1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgd2lsbCBiZSB2YWxpZGF0ZWQgd2hlbiB0aGVcbiAgICAgICAgICogZm9ybSBpcyBzdWJtaXR0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGdldCB3aWxsVmFsaWRhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SW50ZXJuYWxzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmVsZW1lbnRJbnRlcm5hbHMud2lsbFZhbGlkYXRlXG4gICAgICAgICAgICAgICAgOiB0aGlzLnByb3h5LndpbGxWYWxpZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gYWxsIGFzc29jaWF0ZWQgbGFiZWwgZWxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIGdldCBsYWJlbHMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50SW50ZXJuYWxzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRJbnRlcm5hbHMubGFiZWxzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5Lm93bmVyRG9jdW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gTGFiZWxzIGFzc29jaWF0ZWQgYnkgd3JhcHBpbmcgdGhlIGVsZW1lbnQ6IDxsYWJlbD48Y3VzdG9tLWVsZW1lbnQ+PC9jdXN0b20tZWxlbWVudD48L2xhYmVsPlxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudExhYmVscyA9IHRoaXMucHJveHkubGFiZWxzO1xuICAgICAgICAgICAgICAgIC8vIExhYmVscyBhc3NvY2lhdGVkIHVzaW5nIHRoZSBgZm9yYCBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JMYWJlbHMgPSBBcnJheS5mcm9tKHRoaXMucHJveHkuZ2V0Um9vdE5vZGUoKS5xdWVyeVNlbGVjdG9yQWxsKGBbZm9yPScke3RoaXMuaWR9J11gKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gcGFyZW50TGFiZWxzXG4gICAgICAgICAgICAgICAgICAgID8gZm9yTGFiZWxzLmNvbmNhdChBcnJheS5mcm9tKHBhcmVudExhYmVscykpXG4gICAgICAgICAgICAgICAgICAgIDogZm9yTGFiZWxzO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKGxhYmVscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSW52b2tlZCB3aGVuIHRoZSBgdmFsdWVgIHByb3BlcnR5IGNoYW5nZXNcbiAgICAgICAgICogQHBhcmFtIHByZXZpb3VzIC0gdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgICAqIEBwYXJhbSBuZXh0IC0gdGhlIG5ldyB2YWx1ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBJZiBlbGVtZW50cyBleHRlbmRpbmcgYEZvcm1Bc3NvY2lhdGVkYCBpbXBsZW1lbnQgYSBgdmFsdWVDaGFuZ2VkYCBtZXRob2RcbiAgICAgICAgICogVGhleSBtdXN0IGJlIHN1cmUgdG8gaW52b2tlIGBzdXBlci52YWx1ZUNoYW5nZWQocHJldmlvdXMsIG5leHQpYCB0byBlbnN1cmVcbiAgICAgICAgICogcHJvcGVyIGZ1bmN0aW9uaW5nIG9mIGBGb3JtQXNzb2NpYXRlZGBcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlQ2hhbmdlZChwcmV2aW91cywgbmV4dCkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9ybVZhbHVlKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRWYWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludm9rZWQgd2hlbiB0aGUgYGluaXRpYWxWYWx1ZWAgcHJvcGVydHkgY2hhbmdlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcHJldmlvdXMgLSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV3IHZhbHVlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGVsZW1lbnRzIGV4dGVuZGluZyBgRm9ybUFzc29jaWF0ZWRgIGltcGxlbWVudCBhIGBpbml0aWFsVmFsdWVDaGFuZ2VkYCBtZXRob2RcbiAgICAgICAgICogVGhleSBtdXN0IGJlIHN1cmUgdG8gaW52b2tlIGBzdXBlci5pbml0aWFsVmFsdWVDaGFuZ2VkKHByZXZpb3VzLCBuZXh0KWAgdG8gZW5zdXJlXG4gICAgICAgICAqIHByb3BlciBmdW5jdGlvbmluZyBvZiBgRm9ybUFzc29jaWF0ZWRgXG4gICAgICAgICAqL1xuICAgICAgICBpbml0aWFsVmFsdWVDaGFuZ2VkKHByZXZpb3VzLCBuZXh0KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgY2xlYW4gYW5kIHRoZSBjb21wb25lbnQgaXMgY29ubmVjdGVkIHRvIHRoZSBET01cbiAgICAgICAgICAgIC8vIHRoZW4gc2V0IHZhbHVlIGVxdWFsIHRvIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSW52b2tlZCB3aGVuIHRoZSBgZGlzYWJsZWRgIHByb3BlcnR5IGNoYW5nZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHByZXZpb3VzIC0gdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgICAqIEBwYXJhbSBuZXh0IC0gdGhlIG5ldyB2YWx1ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBJZiBlbGVtZW50cyBleHRlbmRpbmcgYEZvcm1Bc3NvY2lhdGVkYCBpbXBsZW1lbnQgYSBgZGlzYWJsZWRDaGFuZ2VkYCBtZXRob2RcbiAgICAgICAgICogVGhleSBtdXN0IGJlIHN1cmUgdG8gaW52b2tlIGBzdXBlci5kaXNhYmxlZENoYW5nZWQocHJldmlvdXMsIG5leHQpYCB0byBlbnN1cmVcbiAgICAgICAgICogcHJvcGVyIGZ1bmN0aW9uaW5nIG9mIGBGb3JtQXNzb2NpYXRlZGBcbiAgICAgICAgICovXG4gICAgICAgIGRpc2FibGVkQ2hhbmdlZChwcmV2aW91cywgbmV4dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLnF1ZXVlVXBkYXRlKCgpID0+IHRoaXMuY2xhc3NMaXN0LnRvZ2dsZShcImRpc2FibGVkXCIsIHRoaXMuZGlzYWJsZWQpKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSW52b2tlZCB3aGVuIHRoZSBgbmFtZWAgcHJvcGVydHkgY2hhbmdlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcHJldmlvdXMgLSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV3IHZhbHVlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGVsZW1lbnRzIGV4dGVuZGluZyBgRm9ybUFzc29jaWF0ZWRgIGltcGxlbWVudCBhIGBuYW1lQ2hhbmdlZGAgbWV0aG9kXG4gICAgICAgICAqIFRoZXkgbXVzdCBiZSBzdXJlIHRvIGludm9rZSBgc3VwZXIubmFtZUNoYW5nZWQocHJldmlvdXMsIG5leHQpYCB0byBlbnN1cmVcbiAgICAgICAgICogcHJvcGVyIGZ1bmN0aW9uaW5nIG9mIGBGb3JtQXNzb2NpYXRlZGBcbiAgICAgICAgICovXG4gICAgICAgIG5hbWVDaGFuZ2VkKHByZXZpb3VzLCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGByZXF1aXJlZGAgcHJvcGVydHkgY2hhbmdlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcHJldmlvdXMgLSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV3IHZhbHVlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGVsZW1lbnRzIGV4dGVuZGluZyBgRm9ybUFzc29jaWF0ZWRgIGltcGxlbWVudCBhIGByZXF1aXJlZENoYW5nZWRgIG1ldGhvZFxuICAgICAgICAgKiBUaGV5IG11c3QgYmUgc3VyZSB0byBpbnZva2UgYHN1cGVyLnJlcXVpcmVkQ2hhbmdlZChwcmV2aW91cywgbmV4dClgIHRvIGVuc3VyZVxuICAgICAgICAgKiBwcm9wZXIgZnVuY3Rpb25pbmcgb2YgYEZvcm1Bc3NvY2lhdGVkYFxuICAgICAgICAgKi9cbiAgICAgICAgcmVxdWlyZWRDaGFuZ2VkKHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnJlcXVpcmVkID0gdGhpcy5yZXF1aXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB0aGlzLmNsYXNzTGlzdC50b2dnbGUoXCJyZXF1aXJlZFwiLCB0aGlzLnJlcXVpcmVkKSk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBlbGVtZW50IGludGVybmFscyBvYmplY3QuIFdpbGwgb25seSBleGlzdFxuICAgICAgICAgKiBpbiBicm93c2VycyBzdXBwb3J0aW5nIHRoZSBhdHRhY2hJbnRlcm5hbHMgQVBJXG4gICAgICAgICAqL1xuICAgICAgICBnZXQgZWxlbWVudEludGVybmFscygpIHtcbiAgICAgICAgICAgIGlmICghc3VwcG9ydHNFbGVtZW50SW50ZXJuYWxzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaW50ZXJuYWxzID0gSW50ZXJuYWxzTWFwLmdldCh0aGlzKTtcbiAgICAgICAgICAgIGlmICghaW50ZXJuYWxzKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxzID0gdGhpcy5hdHRhY2hJbnRlcm5hbHMoKTtcbiAgICAgICAgICAgICAgICBJbnRlcm5hbHNNYXAuc2V0KHRoaXMsIGludGVybmFscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIHRoaXMuX2tleXByZXNzSGFuZGxlcik7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudEludGVybmFscykge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoUHJveHkoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRcIiwgdGhpcy5mb3JtUmVzZXRDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eUV2ZW50c1RvQmxvY2suZm9yRWFjaChuYW1lID0+IHRoaXMucHJveHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCB0aGlzLnN0b3BQcm9wYWdhdGlvbikpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnRJbnRlcm5hbHMgJiYgdGhpcy5mb3JtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLCB0aGlzLmZvcm1SZXNldENhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIHRoZSBjdXJyZW50IHZhbGlkaXR5IG9mIHRoZSBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgY2hlY2tWYWxpZGl0eSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRJbnRlcm5hbHNcbiAgICAgICAgICAgICAgICA/IHRoaXMuZWxlbWVudEludGVybmFscy5jaGVja1ZhbGlkaXR5KClcbiAgICAgICAgICAgICAgICA6IHRoaXMucHJveHkuY2hlY2tWYWxpZGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIGN1cnJlbnQgdmFsaWRpdHkgb2YgdGhlIGVsZW1lbnQuXG4gICAgICAgICAqIElmIGZhbHNlLCBmaXJlcyBhbiBpbnZhbGlkIGV2ZW50IGF0IHRoZSBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmVwb3J0VmFsaWRpdHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SW50ZXJuYWxzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmVsZW1lbnRJbnRlcm5hbHMucmVwb3J0VmFsaWRpdHkoKVxuICAgICAgICAgICAgICAgIDogdGhpcy5wcm94eS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHZhbGlkaXR5IG9mIHRoZSBjb250cm9sLiBJbiBjYXNlcyB3aGVuIHRoZSBlbGVtZW50SW50ZXJuYWxzIG9iamVjdCBpcyBub3RcbiAgICAgICAgICogYXZhaWxhYmxlIChhbmQgdGhlIHByb3h5IGVsZW1lbnQgaXMgdXNlZCB0byByZXBvcnQgdmFsaWRpdHkpLCB0aGlzIGZ1bmN0aW9uIHdpbGxcbiAgICAgICAgICogZG8gbm90aGluZyB1bmxlc3MgYSBtZXNzYWdlIGlzIHByb3ZpZGVkLCBhdCB3aGljaCBwb2ludCB0aGUgc2V0Q3VzdG9tVmFsaWRpdHkgbWV0aG9kXG4gICAgICAgICAqIG9mIHRoZSBwcm94eSBlbGVtZW50IHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBwcm92aWRlZCBtZXNzYWdlLlxuICAgICAgICAgKiBAcGFyYW0gZmxhZ3MgLSBWYWxpZGl0eSBmbGFnc1xuICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIE9wdGlvbmFsIG1lc3NhZ2UgdG8gc3VwcGx5XG4gICAgICAgICAqIEBwYXJhbSBhbmNob3IgLSBPcHRpb25hbCBlbGVtZW50IHVzZWQgYnkgVUEgdG8gZGlzcGxheSBhbiBpbnRlcmFjdGl2ZSB2YWxpZGF0aW9uIFVJXG4gICAgICAgICAqL1xuICAgICAgICBzZXRWYWxpZGl0eShmbGFncywgbWVzc2FnZSwgYW5jaG9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50SW50ZXJuYWxzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SW50ZXJuYWxzLnNldFZhbGlkaXR5KGZsYWdzLCBtZXNzYWdlLCBhbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnNldEN1c3RvbVZhbGlkaXR5KG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnZva2VkIHdoZW4gYSBjb25uZWN0ZWQgY29tcG9uZW50J3MgZm9ybSBvciBmaWVsZHNldCBoYXMgaXRzIGRpc2FibGVkXG4gICAgICAgICAqIHN0YXRlIGNoYW5nZWQuXG4gICAgICAgICAqIEBwYXJhbSBkaXNhYmxlZCAtIHRoZSBkaXNhYmxlZCB2YWx1ZSBvZiB0aGUgZm9ybSAvIGZpZWxkc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmb3JtRGlzYWJsZWRDYWxsYmFjayhkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1SZXNldENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGFjaCB0aGUgcHJveHkgZWxlbWVudCB0byB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBhdHRhY2hQcm94eSgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm94eUluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eUluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5RXZlbnRzVG9CbG9jay5mb3JFYWNoKG5hbWUgPT4gdGhpcy5wcm94eS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIHRoaXMuc3RvcFByb3BhZ2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHR5cGljYWxseSBtYXBwZWQgdG8gdGhlIHByb3h5IGR1cmluZ1xuICAgICAgICAgICAgICAgIC8vIHByb3BlcnR5IGNoYW5nZSBjYWxsYmFja3MsIGJ1dCBkdXJpbmcgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAgICAvLyBvbiB0aGUgaW5pdGlhbCBjYWxsIG9mIHRoZSBjYWxsYmFjaywgdGhlIHByb3h5IGlzXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgdW5kZWZpbmVkLiBXZSBzaG91bGQgZmluZCBhIGJldHRlciB3YXkgdG8gYWRkcmVzcyB0aGlzLlxuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkucmVxdWlyZWQgPSB0aGlzLnJlcXVpcmVkO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5uYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkudmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnNldEF0dHJpYnV0ZShcInNsb3RcIiwgcHJveHlTbG90TmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eVNsb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2xvdFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5U2xvdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIHByb3h5U2xvdE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gdGhpcy5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXBwZW5kQ2hpbGQodGhpcy5wcm94eVNsb3QpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnByb3h5KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0YWNoIHRoZSBwcm94eSBlbGVtZW50IGZyb20gdGhlIERPTVxuICAgICAgICAgKi9cbiAgICAgICAgZGV0YWNoUHJveHkoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMucHJveHkpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQodGhpcy5wcm94eVNsb3QpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiB0aGUgY3VzdG9tIGVsZW1lbnQuIEJ5IGRlZmF1bHQgdGhpcyB1c2VzIHRoZSBwcm94eSBlbGVtZW50IHRvIGRldGVybWluZVxuICAgICAgICAgKiB2YWxpZGl0eSwgYnV0IHRoaXMgY2FuIGJlIGV4dGVuZGVkIG9yIHJlcGxhY2VkIGluIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWxpZGl0eSh0aGlzLnByb3h5LnZhbGlkaXR5LCB0aGlzLnByb3h5LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgdmFsdWUgKGFuZCBvcHRpb25hbCBzdGF0ZSkgd2l0aCB0aGUgcGFyZW50IGZvcm0uXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAgICAgICogQHBhcmFtIHN0YXRlIC0gVGhlIHN0YXRlIG9iamVjdCBwcm92aWRlZCB0byBkdXJpbmcgc2Vzc2lvbiByZXN0b3JlcyBhbmQgd2hlbiBhdXRvZmlsbGluZy5cbiAgICAgICAgICovXG4gICAgICAgIHNldEZvcm1WYWx1ZSh2YWx1ZSwgc3RhdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRJbnRlcm5hbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJbnRlcm5hbHMuc2V0Rm9ybVZhbHVlKHZhbHVlLCBzdGF0ZSB8fCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX2tleXByZXNzSGFuZGxlcihlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlFbnRlcjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9ybSBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW1wbGljaXQgc3VibWlzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEJ1dHRvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiW3R5cGU9c3VibWl0XVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRCdXR0b24gPT09IG51bGwgfHwgZGVmYXVsdEJ1dHRvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIHRvIHN0b3AgcHJvcGFnYXRpb24gb2YgcHJveHkgZWxlbWVudCBldmVudHNcbiAgICAgICAgICogQHBhcmFtIGUgLSBFdmVudCBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbihlKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBhdHRyKHsgbW9kZTogXCJib29sZWFuXCIgfSkoQy5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIik7XG4gICAgYXR0cih7IG1vZGU6IFwiZnJvbVZpZXdcIiwgYXR0cmlidXRlOiBcInZhbHVlXCIgfSkoQy5wcm90b3R5cGUsIFwiaW5pdGlhbFZhbHVlXCIpO1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiY3VycmVudC12YWx1ZVwiIH0pKEMucHJvdG90eXBlLCBcImN1cnJlbnRWYWx1ZVwiKTtcbiAgICBhdHRyKEMucHJvdG90eXBlLCBcIm5hbWVcIik7XG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pKEMucHJvdG90eXBlLCBcInJlcXVpcmVkXCIpO1xuICAgIG9ic2VydmFibGUoQy5wcm90b3R5cGUsIFwidmFsdWVcIik7XG4gICAgcmV0dXJuIEM7XG59XG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gQ2hlY2thYmxlRm9ybUFzc29jaWF0ZWQoQmFzZUN0b3IpIHtcbiAgICBjbGFzcyBDIGV4dGVuZHMgRm9ybUFzc29jaWF0ZWQoQmFzZUN0b3IpIHtcbiAgICB9XG4gICAgY2xhc3MgRCBleHRlbmRzIEMge1xuICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJhY2tzIHdoZXRoZXIgdGhlIFwiY2hlY2tlZFwiIHByb3BlcnR5IGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBwcm92aWRlIGNvbnNpc3RlbnQgYmVoYXZpb3Igd2l0aFxuICAgICAgICAgICAgICogbm9ybWFsIGlucHV0IGNoZWNrYm94ZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5kaXJ0eUNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvdmlkZXMgdGhlIGRlZmF1bHQgY2hlY2tlZG5lc3Mgb2YgdGhlIGlucHV0IGVsZW1lbnRcbiAgICAgICAgICAgICAqIFBhc3NlZCBkb3duIHRvIHByb3h5XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiBjaGVja2VkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZEF0dHJpYnV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgY2hlY2tlZCBzdGF0ZSBvZiB0aGUgY29udHJvbC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gUmUtaW5pdGlhbGl6ZSBkaXJ0eUNoZWNrZWQgYmVjYXVzZSBpbml0aWFsaXphdGlvbiBvZiBvdGhlciB2YWx1ZXNcbiAgICAgICAgICAgIC8vIGNhdXNlcyBpdCB0byBiZWNvbWUgdHJ1ZVxuICAgICAgICAgICAgdGhpcy5kaXJ0eUNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja2VkQXR0cmlidXRlQ2hhbmdlZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdENoZWNrZWQgPSB0aGlzLmNoZWNrZWRBdHRyaWJ1dGU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgZGVmYXVsdENoZWNrZWRDaGFuZ2VkKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRpcnR5Q2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgdGhpcy5jaGVja2VkIHdpbGwgY2F1c2UgdXMgdG8gZW50ZXIgYSBkaXJ0eSBzdGF0ZSxcbiAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgYXJlIGNsZWFuIHdoZW4gZGVmYXVsdENoZWNrZWQgaXMgY2hhbmdlZCwgd2Ugd2FudCB0byBzdGF5XG4gICAgICAgICAgICAgICAgLy8gaW4gYSBjbGVhbiBzdGF0ZSwgc28gcmVzZXQgdGhpcy5kaXJ0eUNoZWNrZWRcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmRlZmF1bHRDaGVja2VkO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlDaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tlZENoYW5nZWQocHJldiwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRpcnR5Q2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlDaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudENoZWNrZWQgPSB0aGlzLmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRDaGVja2VkQ2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmN1cnJlbnRDaGVja2VkO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUZvcm0oKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY2hlY2tlZCA/IHRoaXMudmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5zZXRGb3JtVmFsdWUodmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm0oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtUmVzZXRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHN1cGVyLmZvcm1SZXNldENhbGxiYWNrKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAhIXRoaXMuY2hlY2tlZEF0dHJpYnV0ZTtcbiAgICAgICAgICAgIHRoaXMuZGlydHlDaGVja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJjaGVja2VkXCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pKEQucHJvdG90eXBlLCBcImNoZWNrZWRBdHRyaWJ1dGVcIik7XG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJjdXJyZW50LWNoZWNrZWRcIiwgY29udmVydGVyOiBib29sZWFuQ29udmVydGVyIH0pKEQucHJvdG90eXBlLCBcImN1cnJlbnRDaGVja2VkXCIpO1xuICAgIG9ic2VydmFibGUoRC5wcm90b3R5cGUsIFwiZGVmYXVsdENoZWNrZWRcIik7XG4gICAgb2JzZXJ2YWJsZShELnByb3RvdHlwZSwgXCJjaGVja2VkXCIpO1xuICAgIHJldHVybiBEO1xufVxuIiwiaW1wb3J0IHsgRm9ybUFzc29jaWF0ZWQgfSBmcm9tIFwiLi4vZm9ybS1hc3NvY2lhdGVkL2Zvcm0tYXNzb2NpYXRlZC5qc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuY2xhc3MgX0J1dHRvbiBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbi8qKlxuICogQSBmb3JtLWFzc29jaWF0ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoQnV0dG9uOmNsYXNzKX0gY29tcG9uZW50LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgRm9ybUFzc29jaWF0ZWRCdXR0b24gZXh0ZW5kcyBGb3JtQXNzb2NpYXRlZChfQnV0dG9uKSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJveHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgb2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMsIFN0YXJ0RW5kLCB9IGZyb20gXCIuLi9wYXR0ZXJucy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYXBwbHlNaXhpbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FwcGx5LW1peGlucy5qc1wiO1xuaW1wb3J0IHsgRm9ybUFzc29jaWF0ZWRCdXR0b24gfSBmcm9tIFwiLi9idXR0b24uZm9ybS1hc3NvY2lhdGVkLmpzXCI7XG4vKipcbiAqIEEgQnV0dG9uIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKiBCYXNlZCBsYXJnZWx5IG9uIHRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2J1dHRvbiB8IDxidXR0b24+IGVsZW1lbnQgfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBGb3JtQXNzb2NpYXRlZEJ1dHRvbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmV2ZW50IGV2ZW50cyB0byBwcm9wYWdhdGUgaWYgZGlzYWJsZWQgYW5kIGhhcyBubyBzbG90dGVkIGNvbnRlbnQgd3JhcHBlZCBpbiBIVE1MIGVsZW1lbnRzXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVDbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCAmJiAoKF9hID0gdGhpcy5kZWZhdWx0U2xvdHRlZENvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpIDw9IDEpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3VibWl0cyB0aGUgcGFyZW50IGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGFuZGxlU3VibWlzc2lvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXR0YWNoZWQgPSB0aGlzLnByb3h5LmlzQ29ubmVjdGVkO1xuICAgICAgICAgICAgaWYgKCFhdHRhY2hlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoUHJveHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEJyb3dzZXIgc3VwcG9ydCBmb3IgcmVxdWVzdFN1Ym1pdCBpcyBub3QgY29tcHJlaGVuc2l2ZVxuICAgICAgICAgICAgLy8gc28gY2xpY2sgdGhlIHByb3h5IGlmIGl0IGlzbid0IHN1cHBvcnRlZFxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuZm9ybS5yZXF1ZXN0U3VibWl0ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICA/IHRoaXMuZm9ybS5yZXF1ZXN0U3VibWl0KHRoaXMucHJveHkpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnByb3h5LmNsaWNrKCk7XG4gICAgICAgICAgICBpZiAoIWF0dGFjaGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hQcm94eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzZXRzIHRoZSBwYXJlbnQgZm9ybVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVGb3JtUmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmZvcm0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNldCgpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogT3ZlcnJpZGVzIHRoZSBmb2N1cyBjYWxsIGZvciB3aGVyZSBkZWxlZ2F0ZXNGb2N1cyBpcyB1bnN1cHBvcnRlZC5cbiAgICAgICAgICogVGhpcyBjaGVjayB3b3JrcyBmb3IgQ2hyb21lLCBFZGdlIENocm9taXVtLCBGaXJlRm94LCBhbmQgU2FmYXJpXG4gICAgICAgICAqIFJlbGV2YW50IFBSIG9uIHRoZSBGaXJlZm94IGJyb3dzZXI6IGh0dHBzOi8vcGhhYnJpY2F0b3Iuc2VydmljZXMubW96aWxsYS5jb20vRDEyMzg1OFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVVbnN1cHBvcnRlZERlbGVnYXRlc0ZvY3VzID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIGRlbGVnYXRlc0ZvY3VzIGlzIHN1cHBvcnRlZFxuICAgICAgICAgICAgaWYgKHdpbmRvdy5TaGFkb3dSb290ICYmXG4gICAgICAgICAgICAgICAgIXdpbmRvdy5TaGFkb3dSb290LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcImRlbGVnYXRlc0ZvY3VzXCIpICYmICgoX2EgPSB0aGlzLiRmYXN0Q29udHJvbGxlci5kZWZpbml0aW9uLnNoYWRvd09wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWxlZ2F0ZXNGb2N1cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2wuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmb3JtYWN0aW9uQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LmZvcm1BY3Rpb24gPSB0aGlzLmZvcm1hY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybWVuY3R5cGVDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuZm9ybUVuY3R5cGUgPSB0aGlzLmZvcm1lbmN0eXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcm1tZXRob2RDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuZm9ybU1ldGhvZCA9IHRoaXMuZm9ybW1ldGhvZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3Jtbm92YWxpZGF0ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5mb3JtTm9WYWxpZGF0ZSA9IHRoaXMuZm9ybW5vdmFsaWRhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybXRhcmdldENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5mb3JtVGFyZ2V0ID0gdGhpcy5mb3JtdGFyZ2V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHR5cGVDaGFuZ2VkKHByZXZpb3VzLCBuZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS50eXBlID0gdGhpcy50eXBlO1xuICAgICAgICB9XG4gICAgICAgIG5leHQgPT09IFwic3VibWl0XCIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVTdWJtaXNzaW9uKTtcbiAgICAgICAgcHJldmlvdXMgPT09IFwic3VibWl0XCIgJiYgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVTdWJtaXNzaW9uKTtcbiAgICAgICAgbmV4dCA9PT0gXCJyZXNldFwiICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlRm9ybVJlc2V0KTtcbiAgICAgICAgcHJldmlvdXMgPT09IFwicmVzZXRcIiAmJiB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUZvcm1SZXNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMucHJveHkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCB0aGlzLnR5cGUpO1xuICAgICAgICB0aGlzLmhhbmRsZVVuc3VwcG9ydGVkRGVsZWdhdGVzRm9jdXMoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBBcnJheS5mcm9tKChfYSA9IHRoaXMuY29udHJvbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNoaWxkcmVuKTtcbiAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKChzcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Bhbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oKF9hID0gdGhpcy5jb250cm9sKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4pO1xuICAgICAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKHNwYW4pID0+IHtcbiAgICAgICAgICAgICAgICBzcGFuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBCdXR0b24ucHJvdG90eXBlLCBcImF1dG9mb2N1c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJmb3JtXCIgfSlcbl0sIEJ1dHRvbi5wcm90b3R5cGUsIFwiZm9ybUlkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBCdXR0b24ucHJvdG90eXBlLCBcImZvcm1hY3Rpb25cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEJ1dHRvbi5wcm90b3R5cGUsIFwiZm9ybWVuY3R5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEJ1dHRvbi5wcm90b3R5cGUsIFwiZm9ybW1ldGhvZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBCdXR0b24ucHJvdG90eXBlLCBcImZvcm1ub3ZhbGlkYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBCdXR0b24ucHJvdG90eXBlLCBcImZvcm10YXJnZXRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEJ1dHRvbi5wcm90b3R5cGUsIFwidHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgQnV0dG9uLnByb3RvdHlwZSwgXCJkZWZhdWx0U2xvdHRlZENvbnRlbnRcIiwgdm9pZCAwKTtcbi8qKlxuICogSW5jbHVkZXMgQVJJQSBzdGF0ZXMgYW5kIHByb3BlcnRpZXMgcmVsYXRpbmcgdG8gdGhlIEFSSUEgYnV0dG9uIHJvbGVcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWxlZ2F0ZXNBUklBQnV0dG9uIHtcbn1cbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1leHBhbmRlZFwiIH0pXG5dLCBEZWxlZ2F0ZXNBUklBQnV0dG9uLnByb3RvdHlwZSwgXCJhcmlhRXhwYW5kZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1wcmVzc2VkXCIgfSlcbl0sIERlbGVnYXRlc0FSSUFCdXR0b24ucHJvdG90eXBlLCBcImFyaWFQcmVzc2VkXCIsIHZvaWQgMCk7XG5hcHBseU1peGlucyhEZWxlZ2F0ZXNBUklBQnV0dG9uLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcyk7XG5hcHBseU1peGlucyhCdXR0b24sIFN0YXJ0RW5kLCBEZWxlZ2F0ZXNBUklBQnV0dG9uKTtcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vb2JzZXJ2YXRpb24vb2JzZXJ2YWJsZS5qc1wiO1xuaW1wb3J0IHsgZW1wdHlBcnJheSB9IGZyb20gXCIuLi9wbGF0Zm9ybS5qc1wiO1xuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgYSBOb2RlIGFycmF5LCBzZWxlY3Rpbmcgb25seSBlbGVtZW50cy5cbiAqIEBwYXJhbSBzZWxlY3RvciAtIEFuIG9wdGlvbmFsIHNlbGVjdG9yIHRvIHJlc3RyaWN0IHRoZSBmaWx0ZXIgdG8uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50cyhzZWxlY3Rvcikge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiB2YWx1ZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbiAgICB9O1xufVxuLyoqXG4gKiBBIGJhc2UgY2xhc3MgZm9yIG5vZGUgb2JzZXJ2YXRpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVPYnNlcnZhdGlvbkJlaGF2aW9yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIE5vZGVPYnNlcnZhdGlvbkJlaGF2aW9yLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIGFzc2lnbiB0aGUgbm9kZXMgcHJvcGVydHkgb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2UgaW4gY29uZmlndXJpbmcgbm9kZSBvYnNlcnZhdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmluZCB0aGlzIGJlaGF2aW9yIHRvIHRoZSBzb3VyY2UuXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIFRoZSBzb3VyY2UgdG8gYmluZCB0by5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBleGVjdXRpb24gY29udGV4dCB0aGF0IHRoZSBiaW5kaW5nIGlzIG9wZXJhdGluZyB3aXRoaW4uXG4gICAgICovXG4gICAgYmluZChzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMub3B0aW9ucy5wcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5zaG91bGRVcGRhdGUgPSBPYnNlcnZhYmxlLmdldEFjY2Vzc29ycyhzb3VyY2UpLnNvbWUoKHgpID0+IHgubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldCh0aGlzLmNvbXB1dGVOb2RlcygpKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbmJpbmRzIHRoaXMgYmVoYXZpb3IgZnJvbSB0aGUgc291cmNlLlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIHRvIHVuYmluZCBmcm9tLlxuICAgICAqL1xuICAgIHVuYmluZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQoZW1wdHlBcnJheSk7XG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgaGFuZGxlRXZlbnQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KHRoaXMuY29tcHV0ZU5vZGVzKCkpO1xuICAgIH1cbiAgICBjb21wdXRlTm9kZXMoKSB7XG4gICAgICAgIGxldCBub2RlcyA9IHRoaXMuZ2V0Tm9kZXMoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXIgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIodGhpcy5vcHRpb25zLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICB1cGRhdGVUYXJnZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VbdGhpcy5vcHRpb25zLnByb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEF0dGFjaGVkQmVoYXZpb3JIVE1MRGlyZWN0aXZlIH0gZnJvbSBcIi4vaHRtbC1kaXJlY3RpdmUuanNcIjtcbmltcG9ydCB7IE5vZGVPYnNlcnZhdGlvbkJlaGF2aW9yIH0gZnJvbSBcIi4vbm9kZS1vYnNlcnZhdGlvbi5qc1wiO1xuLyoqXG4gKiBUaGUgcnVudGltZSBiZWhhdmlvciBmb3Igc2xvdHRlZCBub2RlIG9ic2VydmF0aW9uLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgU2xvdHRlZEJlaGF2aW9yIGV4dGVuZHMgTm9kZU9ic2VydmF0aW9uQmVoYXZpb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU2xvdHRlZEJlaGF2aW9yLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgc2xvdCBlbGVtZW50IHRhcmdldCB0byBvYnNlcnZlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gdXNlIHdoZW4gb2JzZXJ2aW5nIHRoZSBzbG90LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCZWdpbnMgb2JzZXJ2YXRpb24gb2YgdGhlIG5vZGVzLlxuICAgICAqL1xuICAgIG9ic2VydmUoKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJzbG90Y2hhbmdlXCIsIHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyBvYnNlcnZhdGlvbiBvZiB0aGUgbm9kZXMuXG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNsb3RjaGFuZ2VcIiwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgbm9kZXMgdGhhdCBzaG91bGQgYmUgYXNzaWduZWQgdG8gdGhlIHRhcmdldC5cbiAgICAgKi9cbiAgICBnZXROb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0LmFzc2lnbmVkTm9kZXModGhpcy5vcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgb2JzZXJ2ZXMgdGhlIGBhc3NpZ25lZE5vZGVzKClgIG9mIGEgc2xvdCBhbmQgdXBkYXRlcyBhIHByb3BlcnR5XG4gKiB3aGVuZXZlciB0aGV5IGNoYW5nZS5cbiAqIEBwYXJhbSBwcm9wZXJ0eU9yT3B0aW9ucyAtIFRoZSBvcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIHNsb3R0ZWQgbm9kZSBvYnNlcnZhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsb3R0ZWQocHJvcGVydHlPck9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5T3JPcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHByb3BlcnR5T3JPcHRpb25zID0geyBwcm9wZXJ0eTogcHJvcGVydHlPck9wdGlvbnMgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBdHRhY2hlZEJlaGF2aW9ySFRNTERpcmVjdGl2ZShcImZhc3Qtc2xvdHRlZFwiLCBTbG90dGVkQmVoYXZpb3IsIHByb3BlcnR5T3JPcHRpb25zKTtcbn1cbiIsImltcG9ydCB7IGh0bWwsIHJlZiwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgZW5kU2xvdFRlbXBsYXRlLCBzdGFydFNsb3RUZW1wbGF0ZSB9IGZyb20gXCIuLi9wYXR0ZXJucy9zdGFydC1lbmQuanNcIjtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUge0BsaW5rIEBtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uIyhCdXR0b246Y2xhc3MpfSBjb21wb25lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBidXR0b25UZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwiY29udHJvbFwiXG4gICAgICAgIHBhcnQ9XCJjb250cm9sXCJcbiAgICAgICAgP2F1dG9mb2N1cz1cIiR7eCA9PiB4LmF1dG9mb2N1c31cIlxuICAgICAgICA/ZGlzYWJsZWQ9XCIke3ggPT4geC5kaXNhYmxlZH1cIlxuICAgICAgICBmb3JtPVwiJHt4ID0+IHguZm9ybUlkfVwiXG4gICAgICAgIGZvcm1hY3Rpb249XCIke3ggPT4geC5mb3JtYWN0aW9ufVwiXG4gICAgICAgIGZvcm1lbmN0eXBlPVwiJHt4ID0+IHguZm9ybWVuY3R5cGV9XCJcbiAgICAgICAgZm9ybW1ldGhvZD1cIiR7eCA9PiB4LmZvcm1tZXRob2R9XCJcbiAgICAgICAgZm9ybW5vdmFsaWRhdGU9XCIke3ggPT4geC5mb3Jtbm92YWxpZGF0ZX1cIlxuICAgICAgICBmb3JtdGFyZ2V0PVwiJHt4ID0+IHguZm9ybXRhcmdldH1cIlxuICAgICAgICBuYW1lPVwiJHt4ID0+IHgubmFtZX1cIlxuICAgICAgICB0eXBlPVwiJHt4ID0+IHgudHlwZX1cIlxuICAgICAgICB2YWx1ZT1cIiR7eCA9PiB4LnZhbHVlfVwiXG4gICAgICAgIGFyaWEtYXRvbWljPVwiJHt4ID0+IHguYXJpYUF0b21pY31cIlxuICAgICAgICBhcmlhLWJ1c3k9XCIke3ggPT4geC5hcmlhQnVzeX1cIlxuICAgICAgICBhcmlhLWNvbnRyb2xzPVwiJHt4ID0+IHguYXJpYUNvbnRyb2xzfVwiXG4gICAgICAgIGFyaWEtY3VycmVudD1cIiR7eCA9PiB4LmFyaWFDdXJyZW50fVwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCIke3ggPT4geC5hcmlhRGVzY3JpYmVkYnl9XCJcbiAgICAgICAgYXJpYS1kZXRhaWxzPVwiJHt4ID0+IHguYXJpYURldGFpbHN9XCJcbiAgICAgICAgYXJpYS1kaXNhYmxlZD1cIiR7eCA9PiB4LmFyaWFEaXNhYmxlZH1cIlxuICAgICAgICBhcmlhLWVycm9ybWVzc2FnZT1cIiR7eCA9PiB4LmFyaWFFcnJvcm1lc3NhZ2V9XCJcbiAgICAgICAgYXJpYS1leHBhbmRlZD1cIiR7eCA9PiB4LmFyaWFFeHBhbmRlZH1cIlxuICAgICAgICBhcmlhLWZsb3d0bz1cIiR7eCA9PiB4LmFyaWFGbG93dG99XCJcbiAgICAgICAgYXJpYS1oYXNwb3B1cD1cIiR7eCA9PiB4LmFyaWFIYXNwb3B1cH1cIlxuICAgICAgICBhcmlhLWhpZGRlbj1cIiR7eCA9PiB4LmFyaWFIaWRkZW59XCJcbiAgICAgICAgYXJpYS1pbnZhbGlkPVwiJHt4ID0+IHguYXJpYUludmFsaWR9XCJcbiAgICAgICAgYXJpYS1rZXlzaG9ydGN1dHM9XCIke3ggPT4geC5hcmlhS2V5c2hvcnRjdXRzfVwiXG4gICAgICAgIGFyaWEtbGFiZWw9XCIke3ggPT4geC5hcmlhTGFiZWx9XCJcbiAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiJHt4ID0+IHguYXJpYUxhYmVsbGVkYnl9XCJcbiAgICAgICAgYXJpYS1saXZlPVwiJHt4ID0+IHguYXJpYUxpdmV9XCJcbiAgICAgICAgYXJpYS1vd25zPVwiJHt4ID0+IHguYXJpYU93bnN9XCJcbiAgICAgICAgYXJpYS1wcmVzc2VkPVwiJHt4ID0+IHguYXJpYVByZXNzZWR9XCJcbiAgICAgICAgYXJpYS1yZWxldmFudD1cIiR7eCA9PiB4LmFyaWFSZWxldmFudH1cIlxuICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj1cIiR7eCA9PiB4LmFyaWFSb2xlZGVzY3JpcHRpb259XCJcbiAgICAgICAgJHtyZWYoXCJjb250cm9sXCIpfVxuICAgID5cbiAgICAgICAgJHtzdGFydFNsb3RUZW1wbGF0ZShjb250ZXh0LCBkZWZpbml0aW9uKX1cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJjb250ZW50XCIgcGFydD1cImNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxzbG90ICR7c2xvdHRlZChcImRlZmF1bHRTbG90dGVkQ29udGVudFwiKX0+PC9zbG90PlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICR7ZW5kU2xvdFRlbXBsYXRlKGNvbnRleHQsIGRlZmluaXRpb24pfVxuICAgIDwvYnV0dG9uPlxuYDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIHRoZSBET00gaXMgYXZhaWxhYmxlIHRvIGFjY2VzcyBhbmQgdXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5Vc2VET00oKSB7XG4gICAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbn1cbiIsImltcG9ydCB7IGNhblVzZURPTSB9IGZyb20gXCJleGVudi1lczZcIjtcbi8qKlxuICogQSB0ZXN0IHRoYXQgZW5zdXJlcyB0aGF0IGFsbCBhcmd1bWVudHMgYXJlIEhUTUwgRWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQoLi4uYXJncykge1xuICAgIHJldHVybiBhcmdzLmV2ZXJ5KChhcmcpID0+IGFyZyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbGwgZGlzcGxheWVkIGVsZW1lbnRzIGluc2lkZSBvZiBhIHJvb3Qgbm9kZSB0aGF0IG1hdGNoIGEgcHJvdmlkZWQgc2VsZWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3BsYXllZE5vZGVzKHJvb3ROb2RlLCBzZWxlY3Rvcikge1xuICAgIGlmICghcm9vdE5vZGUgfHwgIXNlbGVjdG9yIHx8ICFpc0hUTUxFbGVtZW50KHJvb3ROb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5vZGVzID0gQXJyYXkuZnJvbShyb290Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgLy8gb2Zmc2V0UGFyZW50IHdpbGwgYmUgbnVsbCBpZiB0aGUgZWxlbWVudCBpc24ndCBjdXJyZW50bHkgZGlzcGxheWVkLFxuICAgIC8vIHNvIHRoaXMgd2lsbCBhbGxvdyB1cyB0byBvcGVyYXRlIG9ubHkgb24gdmlzaWJsZSBub2Rlc1xuICAgIHJldHVybiBub2Rlcy5maWx0ZXIoKG5vZGUpID0+IG5vZGUub2Zmc2V0UGFyZW50ICE9PSBudWxsKTtcbn1cbi8qKlxuICogR2V0cyB0aGUgbnVtZXJpYyBrZXkgY29kZSBhc3NvY2lhdGVkIHdpdGggYSBrZXlib2FyZCBldmVudC4gVGhpcyBtZXRob2QgaXMgZm9yIHVzZSB3aXRoIERPTSBsZXZlbCAzIGV2ZW50c1xuICogdGhhdCBzdGlsbCB1c2UgdGhlIGRlcHJlY2F0ZWQga2V5Q29kZSBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQgPT09IG51bGwgPyBudWxsIDogZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZSB8fCBldmVudC5jaGFyQ29kZTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbm9uY2UgdXNlZCBpbiB0aGUgcGFnZSwgaWYgYW55LlxuICpcbiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9qc3Mvc3JjL0RvbVJlbmRlcmVyLmpzXG4gKi9cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogVGVzdCBpZiB0aGUgZG9jdW1lbnQgc3VwcG9ydHMgOmZvY3VzLXZpc2libGVcbiAqL1xubGV0IF9jYW5Vc2VGb2N1c1Zpc2libGU7XG5leHBvcnQgZnVuY3Rpb24gY2FuVXNlRm9jdXNWaXNpYmxlKCkge1xuICAgIGlmICh0eXBlb2YgX2NhblVzZUZvY3VzVmlzaWJsZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIF9jYW5Vc2VGb2N1c1Zpc2libGU7XG4gICAgfVxuICAgIGlmICghY2FuVXNlRE9NKCkpIHtcbiAgICAgICAgX2NhblVzZUZvY3VzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX2NhblVzZUZvY3VzVmlzaWJsZTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBkb2N1bWVudCBzdXBwb3J0cyB0aGUgZm9jdXMtdmlzaWJsZSBlbGVtZW50XG4gICAgY29uc3Qgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIC8vIElmIG5vbmNlcyBhcmUgcHJlc2VudCBvbiB0aGUgcGFnZSwgdXNlIGl0IHdoZW4gY3JlYXRpbmcgdGhlIHN0eWxlIGVsZW1lbnRcbiAgICAvLyB0byB0ZXN0IGZvY3VzLXZpc2libGUgc3VwcG9ydC5cbiAgICBjb25zdCBzdHlsZU5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAoc3R5bGVOb25jZSAhPT0gbnVsbCkge1xuICAgICAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgc3R5bGVOb25jZSk7XG4gICAgfVxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICB0cnkge1xuICAgICAgICBzdHlsZUVsZW1lbnQuc2hlZXQuaW5zZXJ0UnVsZShcImZvbzpmb2N1cy12aXNpYmxlIHtjb2xvcjppbmhlcml0fVwiLCAwKTtcbiAgICAgICAgX2NhblVzZUZvY3VzVmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIF9jYW5Vc2VGb2N1c1Zpc2libGUgPSBmYWxzZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIF9jYW5Vc2VGb2N1c1Zpc2libGU7XG59XG5sZXQgX2NhblVzZUNzc0dyaWQ7XG5leHBvcnQgZnVuY3Rpb24gY2FuVXNlQ3NzR3JpZCgpIHtcbiAgICBpZiAodHlwZW9mIF9jYW5Vc2VDc3NHcmlkID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICByZXR1cm4gX2NhblVzZUNzc0dyaWQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIF9jYW5Vc2VDc3NHcmlkID0gQ1NTLnN1cHBvcnRzKFwiZGlzcGxheVwiLCBcImdyaWRcIik7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICBfY2FuVXNlQ3NzR3JpZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gX2NhblVzZUNzc0dyaWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuVXNlRm9yY2VkQ29sb3JzKCkge1xuICAgIHJldHVybiAoY2FuVXNlRE9NKCkgJiZcbiAgICAgICAgKHdpbmRvdy5tYXRjaE1lZGlhKFwiKGZvcmNlZC1jb2xvcnM6IG5vbmUpXCIpLm1hdGNoZXMgfHxcbiAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSlcIikubWF0Y2hlcykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RG9jdW1lbnRDYWNoZSgpIHtcbiAgICBfY2FuVXNlQ3NzR3JpZCA9IHVuZGVmaW5lZDtcbiAgICBfY2FuVXNlRm9jdXNWaXNpYmxlID0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgJ2NhblVzZUZvcmNlZENvbG9ycycgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgY2FuVXNlZEZvcmNlZENvbG9ycyA9IGNhblVzZUZvcmNlZENvbG9ycztcbiIsImltcG9ydCB7IGNhblVzZUZvY3VzVmlzaWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuLyoqXG4gKiBUaGUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZm9jdXMgc2VsZWN0b3IgdG8gYmUgdXNlZC4gVmFsdWVcbiAqIHdpbGwgYmUgXCJmb2N1cy12aXNpYmxlXCIgd2hlbiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkb1xuICogaXMgc3VwcG9ydGVkIGFuZCBcImZvY3VzXCIgd2hlbiBpdCBpcyBub3QuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZm9jdXNWaXNpYmxlID0gY2FuVXNlRm9jdXNWaXNpYmxlKCkgPyBcImZvY3VzLXZpc2libGVcIiA6IFwiZm9jdXNcIjtcbiIsIi8qKlxuICogVGhlIENTUyB2YWx1ZSBmb3IgZGlzYWJsZWQgY3Vyc29ycy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ3Vyc29yID0gXCJub3QtYWxsb3dlZFwiO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBidXR0b25Cb3JkZXIsIGJ1dHRvbkljb25CYWNrZ3JvdW5kLCBidXR0b25JY29uQ29ybmVyUmFkaXVzLCBidXR0b25JY29uRm9jdXNCb3JkZXJPZmZzZXQsIGJ1dHRvbkljb25Ib3ZlckJhY2tncm91bmQsIGJ1dHRvbkljb25QYWRkaW5nLCBidXR0b25QYWRkaW5nSG9yaXpvbnRhbCwgYnV0dG9uUGFkZGluZ1ZlcnRpY2FsLCBidXR0b25QcmltYXJ5QmFja2dyb3VuZCwgYnV0dG9uUHJpbWFyeUZvcmVncm91bmQsIGJ1dHRvblByaW1hcnlIb3ZlckJhY2tncm91bmQsIGJ1dHRvblNlY29uZGFyeUJhY2tncm91bmQsIGJ1dHRvblNlY29uZGFyeUZvcmVncm91bmQsIGJ1dHRvblNlY29uZGFyeUhvdmVyQmFja2dyb3VuZCwgY29udHJhc3RBY3RpdmVCb3JkZXIsIGNvcm5lclJhZGl1cywgZGVzaWduVW5pdCwgZGlzYWJsZWRPcGFjaXR5LCBmb2N1c0JvcmRlciwgZm9udEZhbWlseSwgZm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUsIHR5cGVSYW1wQmFzZUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG4vKipcbiAqIERldmVsb3BlciBub3RlOlxuICpcbiAqIFRoZSBwcmV0dGllci1pZ25vcmUgY29tbWFuZCBpcyB1c2VkIG9uIHRoaXMgYmxvY2sgb2YgY29kZSBiZWNhdXNlIHdoZW4gcmVtb3ZlZCB0aGVcbiAqICcuY29udHJvbDoke2ZvY3VzVmlzaWJsZX0nIENTUyBzZWxlY3RvciB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcmVmb3JtYXR0ZWQgdG9cbiAqICcuY29udHJvbDogJHtmb2N1c1Zpc2libGV9JyAobm90ZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgY29sb24gYW5kIGRvbGxhciBzaWduKS5cbiAqXG4gKiBUaGlzIHJlc3VsdHMgaW4gbm9uLXZhbGlkIENTUyB0aGF0IHdpbGwgbm90IHJlbmRlciBhIGZvY3VzIG91dGxpbmUgb24gYmFzZSBidXR0b25zLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBwcmV0dGllciBjb21tYW5kIG11c3QgYmUgZGVjbGFyZWQgb24gdGhlIGVudGlyZSBjb2RlIGJsb2NrIGFuZCBub3RcbiAqIGRpcmVjdGx5IGFib3ZlIHRoZSBDU1Mgc2VsZWN0b3IgbGluZSBiZWNhdXNlIHRoZSBiZWxvdyBjb2RlIGJsb2NrIGlzIGEgdGVtcGxhdGUgbGl0ZXJhbFxuICogc3RyaW5nIHdoaWNoIHdpbGwgZW5kIHVwIGJlaW5nIHVzZWQgZGlyZWN0bHkgaW4gdGhlIGZpbmFsIGNvbXBvbmVudCBDU1MuXG4gKlxuICogVGh1cyBoYXZpbmcgJy8vIHByZXR0aWVyLWlnbm9yZScgZGlyZWN0bHkgaW4gdGhlIGZpbmFsIENTUyB3aWxsIGFsc28gYnJlYWsgdGhlIGNvbXBvbmVudFxuICogc3R5bGluZy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBCYXNlQnV0dG9uU3R5bGVzID0gY3NzIGBcblx0JHtkaXNwbGF5KCdpbmxpbmUtZmxleCcpfSA6aG9zdCB7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHRmb250LWZhbWlseTogJHtmb250RmFtaWx5fTtcblx0XHRmb250LXNpemU6ICR7dHlwZVJhbXBCYXNlRm9udFNpemV9O1xuXHRcdGxpbmUtaGVpZ2h0OiAke3R5cGVSYW1wQmFzZUxpbmVIZWlnaHR9O1xuXHRcdGNvbG9yOiAke2J1dHRvblByaW1hcnlGb3JlZ3JvdW5kfTtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvblByaW1hcnlCYWNrZ3JvdW5kfTtcblx0XHRib3JkZXItcmFkaXVzOiBjYWxjKCR7Y29ybmVyUmFkaXVzfSAqIDFweCk7XG5cdFx0ZmlsbDogY3VycmVudENvbG9yO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0fVxuXHQuY29udHJvbCB7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0aGVpZ2h0OiBpbmhlcml0O1xuXHRcdGZsZXgtZ3JvdzogMTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0cGFkZGluZzogJHtidXR0b25QYWRkaW5nVmVydGljYWx9ICR7YnV0dG9uUGFkZGluZ0hvcml6b250YWx9O1xuXHRcdHdoaXRlLXNwYWNlOiB3cmFwO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtidXR0b25Cb3JkZXJ9O1xuXHRcdGNvbG9yOiBpbmhlcml0O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0ZmlsbDogaW5oZXJpdDtcblx0XHRjdXJzb3I6IGluaGVyaXQ7XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cdFx0bWF4LXdpZHRoOiAzMDBweDtcblx0fVxuXHQ6aG9zdCg6aG92ZXIpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvblByaW1hcnlIb3ZlckJhY2tncm91bmR9O1xuXHR9XG5cdDpob3N0KDphY3RpdmUpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvblByaW1hcnlCYWNrZ3JvdW5kfTtcblx0fVxuXHQuY29udHJvbDoke2ZvY3VzVmlzaWJsZX0ge1xuXHRcdG91dGxpbmU6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMnB4KTtcblx0fVxuXHQuY29udHJvbDo6LW1vei1mb2N1cy1pbm5lciB7XG5cdFx0Ym9yZGVyOiAwO1xuXHR9XG5cdDpob3N0KFtkaXNhYmxlZF0pIHtcblx0XHRvcGFjaXR5OiAke2Rpc2FibGVkT3BhY2l0eX07XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25QcmltYXJ5QmFja2dyb3VuZH07XG5cdFx0Y3Vyc29yOiAke2Rpc2FibGVkQ3Vyc29yfTtcblx0fVxuXHQuY29udGVudCB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0fVxuXHQuc3RhcnQge1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdH1cblx0OjpzbG90dGVkKHN2ZyksXG5cdDo6c2xvdHRlZChzcGFuKSB7XG5cdFx0d2lkdGg6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDRweCk7XG5cdFx0aGVpZ2h0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA0cHgpO1xuXHR9XG5cdC5zdGFydCB7XG5cdFx0bWFyZ2luLWlubGluZS1lbmQ6IDhweDtcblx0fVxuYDtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFByaW1hcnlCdXR0b25TdHlsZXMgPSBjc3MgYFxuXHQ6aG9zdChbYXBwZWFyYW5jZT0ncHJpbWFyeSddKSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25QcmltYXJ5QmFja2dyb3VuZH07XG5cdFx0Y29sb3I6ICR7YnV0dG9uUHJpbWFyeUZvcmVncm91bmR9O1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdwcmltYXJ5J106aG92ZXIpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvblByaW1hcnlIb3ZlckJhY2tncm91bmR9O1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdwcmltYXJ5J106YWN0aXZlKSAuY29udHJvbDphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6ICR7YnV0dG9uUHJpbWFyeUJhY2tncm91bmR9O1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdwcmltYXJ5J10pIC5jb250cm9sOiR7Zm9jdXNWaXNpYmxlfSB7XG5cdFx0b3V0bGluZTogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtmb2N1c0JvcmRlcn07XG5cdFx0b3V0bGluZS1vZmZzZXQ6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAycHgpO1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdwcmltYXJ5J11bZGlzYWJsZWRdKSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25QcmltYXJ5QmFja2dyb3VuZH07XG5cdH1cbmA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBTZWNvbmRhcnlCdXR0b25TdHlsZXMgPSBjc3MgYFxuXHQ6aG9zdChbYXBwZWFyYW5jZT0nc2Vjb25kYXJ5J10pIHtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvblNlY29uZGFyeUJhY2tncm91bmR9O1xuXHRcdGNvbG9yOiAke2J1dHRvblNlY29uZGFyeUZvcmVncm91bmR9O1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdzZWNvbmRhcnknXTpob3Zlcikge1xuXHRcdGJhY2tncm91bmQ6ICR7YnV0dG9uU2Vjb25kYXJ5SG92ZXJCYWNrZ3JvdW5kfTtcblx0fVxuXHQ6aG9zdChbYXBwZWFyYW5jZT0nc2Vjb25kYXJ5J106YWN0aXZlKSAuY29udHJvbDphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6ICR7YnV0dG9uU2Vjb25kYXJ5QmFja2dyb3VuZH07XG5cdH1cblx0Omhvc3QoW2FwcGVhcmFuY2U9J3NlY29uZGFyeSddKSAuY29udHJvbDoke2ZvY3VzVmlzaWJsZX0ge1xuXHRcdG91dGxpbmU6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMnB4KTtcblx0fVxuXHQ6aG9zdChbYXBwZWFyYW5jZT0nc2Vjb25kYXJ5J11bZGlzYWJsZWRdKSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25TZWNvbmRhcnlCYWNrZ3JvdW5kfTtcblx0fVxuYDtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IEljb25CdXR0b25TdHlsZXMgPSBjc3MgYFxuXHQ6aG9zdChbYXBwZWFyYW5jZT0naWNvbiddKSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25JY29uQmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLXJhZGl1czogJHtidXR0b25JY29uQ29ybmVyUmFkaXVzfTtcblx0XHRjb2xvcjogJHtmb3JlZ3JvdW5kfTtcblx0fVxuXHQ6aG9zdChbYXBwZWFyYW5jZT0naWNvbiddOmhvdmVyKSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25JY29uSG92ZXJCYWNrZ3JvdW5kfTtcblx0XHRvdXRsaW5lOiAxcHggZG90dGVkICR7Y29udHJhc3RBY3RpdmVCb3JkZXJ9O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xuXHR9XG5cdDpob3N0KFthcHBlYXJhbmNlPSdpY29uJ10pIC5jb250cm9sIHtcblx0XHRwYWRkaW5nOiAke2J1dHRvbkljb25QYWRkaW5nfTtcblx0XHRib3JkZXI6IG5vbmU7XG5cdH1cblx0Omhvc3QoW2FwcGVhcmFuY2U9J2ljb24nXTphY3RpdmUpIC5jb250cm9sOmFjdGl2ZSB7XG5cdFx0YmFja2dyb3VuZDogJHtidXR0b25JY29uSG92ZXJCYWNrZ3JvdW5kfTtcblx0fVxuXHQ6aG9zdChbYXBwZWFyYW5jZT0naWNvbiddKSAuY29udHJvbDoke2ZvY3VzVmlzaWJsZX0ge1xuXHRcdG91dGxpbmU6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiAke2J1dHRvbkljb25Gb2N1c0JvcmRlck9mZnNldH07XG5cdH1cblx0Omhvc3QoW2FwcGVhcmFuY2U9J2ljb24nXVtkaXNhYmxlZF0pIHtcblx0XHRiYWNrZ3JvdW5kOiAke2J1dHRvbkljb25CYWNrZ3JvdW5kfTtcblx0fVxuYDtcbmV4cG9ydCBjb25zdCBidXR0b25TdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtCYXNlQnV0dG9uU3R5bGVzfVxuXHQke1ByaW1hcnlCdXR0b25TdHlsZXN9XG5cdCR7U2Vjb25kYXJ5QnV0dG9uU3R5bGVzfVxuXHQke0ljb25CdXR0b25TdHlsZXN9XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhdHRyIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQnO1xuaW1wb3J0IHsgQnV0dG9uIGFzIEZvdW5kYXRpb25CdXR0b24sIGJ1dHRvblRlbXBsYXRlIGFzIHRlbXBsYXRlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJ1dHRvblN0eWxlcyBhcyBzdHlsZXMgfSBmcm9tICcuL2J1dHRvbi5zdHlsZXMnO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIGJ1dHRvbiBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBGb3VuZGF0aW9uQnV0dG9uIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIElmIHRoZSBhcHBlYXJhbmNlIHByb3BlcnR5IGhhcyBub3QgYmVlbiBzZXQsIHNldCBpdCB0byB0aGVcbiAgICAgICAgLy8gdmFsdWUgb2YgdGhlIGFwcGVhcmFuY2UgYXR0cmlidXRlLlxuICAgICAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSkge1xuICAgICAgICAgICAgY29uc3QgYXBwZWFyYW5jZVZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FwcGVhcmFuY2UnKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZWFyYW5jZSA9IGFwcGVhcmFuY2VWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiBhbiBhdHRyaWJ1dGUgb2YgdGhlXG4gICAgICogZWxlbWVudCBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJOYW1lIC0gVGhlIGF0dHJpYnV0ZSB0aGF0IHdhcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIG9sZFZhbCAtIFRoZSBvbGQgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAgICAqIEBwYXJhbSBuZXdWYWwgLSBUaGUgbmV3IHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsLCBuZXdWYWwpIHtcbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlbiBhbiBpY29uIG9ubHkgYnV0dG9uIGlzIGNyZWF0ZWQgYWRkIGEgZGVmYXVsdCBBUklBXG4gICAgICAgIC8vIGxhYmVsIHRvIHRoZSBidXR0b24gc2luY2UgdGhlcmUgaXMgbm8gbG9uZ2VyIGJ1dHRvbiB0ZXh0IHRvIHVzZVxuICAgICAgICAvLyBhcyB0aGUgbGFiZWxcbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnYXBwZWFyYW5jZScgJiYgbmV3VmFsID09PSAnaWNvbicpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgc2V0IHRoZSBBUklBIGxhYmVsIHRvIHRoZSBkZWZhdWx0IHRleHQgaWYgYW4gYXJpYS1sYWJlbCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0IG9uIHRoZSBidXR0b25cbiAgICAgICAgICAgIGNvbnN0IGFyaWFMYWJlbFZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcbiAgICAgICAgICAgIGlmICghYXJpYUxhYmVsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyaWFMYWJlbCA9ICdJY29uIEJ1dHRvbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlbiB0aGUgYXJpYS1sYWJlbCBhdHRyaWJ1dGUgaGFzIGJlZW4gZGVmaW5lZCBvbiB0aGVcbiAgICAgICAgLy8gPHZzY29kZS1idXR0b24+LCB0aGlzIHdpbGwgcHJvZ3JhbW1hdGljYWxseSBwcm9wb2dhdGUgdGhlIHZhbHVlIHRvXG4gICAgICAgIC8vIHRoZSA8YnV0dG9uPiBIVE1MIGVsZW1lbnQgdGhhdCBsaXZlcyBpbiB0aGUgU2hhZG93IERPTVxuICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdhcmlhLWxhYmVsJykge1xuICAgICAgICAgICAgdGhpcy5hcmlhTGFiZWwgPSBuZXdWYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gbmV3VmFsICE9PSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgQnV0dG9uLnByb3RvdHlwZSwgXCJhcHBlYXJhbmNlXCIsIHZvaWQgMCk7XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgYnV0dG9uIGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtYnV0dG9uPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVCdXR0b24gPSBCdXR0b24uY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICdidXR0b24nLFxuICAgIHRlbXBsYXRlLFxuICAgIHN0eWxlcyxcbiAgICBzaGFkb3dPcHRpb25zOiB7XG4gICAgICAgIGRlbGVnYXRlc0ZvY3VzOiB0cnVlLFxuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IENoZWNrYWJsZUZvcm1Bc3NvY2lhdGVkIH0gZnJvbSBcIi4uL2Zvcm0tYXNzb2NpYXRlZC9mb3JtLWFzc29jaWF0ZWQuanNcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbmNsYXNzIF9DaGVja2JveCBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbi8qKlxuICogQSBmb3JtLWFzc29jaWF0ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoQ2hlY2tib3g6Y2xhc3MpfSBjb21wb25lbnQuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3JtQXNzb2NpYXRlZENoZWNrYm94IGV4dGVuZHMgQ2hlY2thYmxlRm9ybUFzc29jaWF0ZWQoX0NoZWNrYm94KSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJveHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgb2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsga2V5U3BhY2UgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXNcIjtcbmltcG9ydCB7IEZvcm1Bc3NvY2lhdGVkQ2hlY2tib3ggfSBmcm9tIFwiLi9jaGVja2JveC5mb3JtLWFzc29jaWF0ZWQuanNcIjtcbi8qKlxuICogQSBDaGVja2JveCBDdXN0b20gSFRNTCBFbGVtZW50LlxuICogSW1wbGVtZW50cyB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2NoZWNrYm94IHwgQVJJQSBjaGVja2JveCB9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIENoZWNrYm94IGV4dGVuZHMgRm9ybUFzc29jaWF0ZWRDaGVja2JveCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZWxlbWVudCdzIHZhbHVlIHRvIGJlIGluY2x1ZGVkIGluIGZvcm0gc3VibWlzc2lvbiB3aGVuIGNoZWNrZWQuXG4gICAgICAgICAqIERlZmF1bHQgdG8gXCJvblwiIHRvIHJlYWNoIHBhcml0eSB3aXRoIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXVxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gXCJvblwiO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluZGV0ZXJtaW5hdGUgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleXByZXNzSGFuZGxlciA9IChlKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlTcGFjZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xpY2tIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiAhdGhpcy5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJveHkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xuICAgIH1cbiAgICByZWFkT25seUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5yZWFkT25seSA9IHRoaXMucmVhZE9ubHk7XG4gICAgICAgIH1cbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcInJlYWRvbmx5XCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBDaGVja2JveC5wcm90b3R5cGUsIFwicmVhZE9ubHlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIENoZWNrYm94LnByb3RvdHlwZSwgXCJkZWZhdWx0U2xvdHRlZE5vZGVzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBDaGVja2JveC5wcm90b3R5cGUsIFwiaW5kZXRlcm1pbmF0ZVwiLCB2b2lkIDApO1xuIiwiaW1wb3J0IHsgaHRtbCwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jKENoZWNrYm94OmNsYXNzKX0gY29tcG9uZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgY2hlY2tib3hUZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGVcbiAgICAgICAgcm9sZT1cImNoZWNrYm94XCJcbiAgICAgICAgYXJpYS1jaGVja2VkPVwiJHt4ID0+IHguY2hlY2tlZH1cIlxuICAgICAgICBhcmlhLXJlcXVpcmVkPVwiJHt4ID0+IHgucmVxdWlyZWR9XCJcbiAgICAgICAgYXJpYS1kaXNhYmxlZD1cIiR7eCA9PiB4LmRpc2FibGVkfVwiXG4gICAgICAgIGFyaWEtcmVhZG9ubHk9XCIke3ggPT4geC5yZWFkT25seX1cIlxuICAgICAgICB0YWJpbmRleD1cIiR7eCA9PiAoeC5kaXNhYmxlZCA/IG51bGwgOiAwKX1cIlxuICAgICAgICBAa2V5cHJlc3M9XCIkeyh4LCBjKSA9PiB4LmtleXByZXNzSGFuZGxlcihjLmV2ZW50KX1cIlxuICAgICAgICBAY2xpY2s9XCIkeyh4LCBjKSA9PiB4LmNsaWNrSGFuZGxlcihjLmV2ZW50KX1cIlxuICAgICAgICBjbGFzcz1cIiR7eCA9PiAoeC5yZWFkT25seSA/IFwicmVhZG9ubHlcIiA6IFwiXCIpfSAke3ggPT4geC5jaGVja2VkID8gXCJjaGVja2VkXCIgOiBcIlwifSAke3ggPT4gKHguaW5kZXRlcm1pbmF0ZSA/IFwiaW5kZXRlcm1pbmF0ZVwiIDogXCJcIil9XCJcbiAgICA+XG4gICAgICAgIDxkaXYgcGFydD1cImNvbnRyb2xcIiBjbGFzcz1cImNvbnRyb2xcIj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjaGVja2VkLWluZGljYXRvclwiPlxuICAgICAgICAgICAgICAgICR7ZGVmaW5pdGlvbi5jaGVja2VkSW5kaWNhdG9yIHx8IFwiXCJ9XG4gICAgICAgICAgICA8L3Nsb3Q+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiaW5kZXRlcm1pbmF0ZS1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAke2RlZmluaXRpb24uaW5kZXRlcm1pbmF0ZUluZGljYXRvciB8fCBcIlwifVxuICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBwYXJ0PVwibGFiZWxcIlxuICAgICAgICAgICAgY2xhc3M9XCIke3ggPT4geC5kZWZhdWx0U2xvdHRlZE5vZGVzICYmIHguZGVmYXVsdFNsb3R0ZWROb2Rlcy5sZW5ndGhcbiAgICA/IFwibGFiZWxcIlxuICAgIDogXCJsYWJlbCBsYWJlbF9faGlkZGVuXCJ9XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPHNsb3QgJHtzbG90dGVkKFwiZGVmYXVsdFNsb3R0ZWROb2Rlc1wiKX0+PC9zbG90PlxuICAgICAgICA8L2xhYmVsPlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjaGVja2JveEJhY2tncm91bmQsIGNoZWNrYm94Qm9yZGVyLCBjaGVja2JveENvcm5lclJhZGl1cywgZGVzaWduVW5pdCwgZGlzYWJsZWRPcGFjaXR5LCBmb2N1c0JvcmRlciwgZm9udEZhbWlseSwgZm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUsIHR5cGVSYW1wQmFzZUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgY2hlY2tib3hTdHlsZXMgPSAoY29udGV4dCwgZGVmaW50aWlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdpbmxpbmUtZmxleCcpfSA6aG9zdCB7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdG1hcmdpbjogY2FsYygke2Rlc2lnblVuaXR9ICogMXB4KSAwO1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcEJhc2VGb250U2l6ZX07XG5cdFx0bGluZS1oZWlnaHQ6ICR7dHlwZVJhbXBCYXNlTGluZUhlaWdodH07XG5cdH1cblx0LmNvbnRyb2wge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR3aWR0aDogY2FsYygke2Rlc2lnblVuaXR9ICogNHB4ICsgMnB4KTtcblx0XHRoZWlnaHQ6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDRweCArIDJweCk7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXItcmFkaXVzOiBjYWxjKCR7Y2hlY2tib3hDb3JuZXJSYWRpdXN9ICogMXB4KTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Y2hlY2tib3hCb3JkZXJ9O1xuXHRcdGJhY2tncm91bmQ6ICR7Y2hlY2tib3hCYWNrZ3JvdW5kfTtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0fVxuXHQubGFiZWwge1xuXHRcdGZvbnQtZmFtaWx5OiAke2ZvbnRGYW1pbHl9O1xuXHRcdGNvbG9yOiAke2ZvcmVncm91bmR9O1xuXHRcdHBhZGRpbmctaW5saW5lLXN0YXJ0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHggKyAycHgpO1xuXHRcdG1hcmdpbi1pbmxpbmUtZW5kOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHggKyAycHgpO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0fVxuXHQubGFiZWxfX2hpZGRlbiB7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0XHR2aXNpYmlsaXR5OiBoaWRkZW47XG5cdH1cblx0LmNoZWNrZWQtaW5kaWNhdG9yIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0ZmlsbDogJHtmb3JlZ3JvdW5kfTtcblx0XHRvcGFjaXR5OiAwO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHR9XG5cdC5pbmRldGVybWluYXRlLWluZGljYXRvciB7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJhY2tncm91bmQ6ICR7Zm9yZWdyb3VuZH07XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHRvcDogNTAlO1xuXHRcdGxlZnQ6IDUwJTtcblx0XHR3aWR0aDogNTAlO1xuXHRcdGhlaWdodDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXHRcdG9wYWNpdHk6IDA7XG5cdH1cblx0Omhvc3QoOmVuYWJsZWQpIC5jb250cm9sOmhvdmVyIHtcblx0XHRiYWNrZ3JvdW5kOiAke2NoZWNrYm94QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2NoZWNrYm94Qm9yZGVyfTtcblx0fVxuXHQ6aG9zdCg6ZW5hYmxlZCkgLmNvbnRyb2w6YWN0aXZlIHtcblx0XHRiYWNrZ3JvdW5kOiAke2NoZWNrYm94QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2ZvY3VzQm9yZGVyfTtcblx0fVxuXHQ6aG9zdCg6JHtmb2N1c1Zpc2libGV9KSAuY29udHJvbCB7XG5cdFx0Ym9yZGVyOiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMXB4KSBzb2xpZCAke2ZvY3VzQm9yZGVyfTtcblx0fVxuXHQ6aG9zdCguZGlzYWJsZWQpIC5sYWJlbCxcblx0Omhvc3QoLnJlYWRvbmx5KSAubGFiZWwsXG5cdDpob3N0KC5yZWFkb25seSkgLmNvbnRyb2wsXG5cdDpob3N0KC5kaXNhYmxlZCkgLmNvbnRyb2wge1xuXHRcdGN1cnNvcjogJHtkaXNhYmxlZEN1cnNvcn07XG5cdH1cblx0Omhvc3QoLmNoZWNrZWQ6bm90KC5pbmRldGVybWluYXRlKSkgLmNoZWNrZWQtaW5kaWNhdG9yLFxuXHQ6aG9zdCguaW5kZXRlcm1pbmF0ZSkgLmluZGV0ZXJtaW5hdGUtaW5kaWNhdG9yIHtcblx0XHRvcGFjaXR5OiAxO1xuXHR9XG5cdDpob3N0KC5kaXNhYmxlZCkge1xuXHRcdG9wYWNpdHk6ICR7ZGlzYWJsZWRPcGFjaXR5fTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgQ2hlY2tib3ggYXMgRm91bmRhdGlvbkNoZWNrYm94LCBjaGVja2JveFRlbXBsYXRlIGFzIHRlbXBsYXRlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNoZWNrYm94U3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vY2hlY2tib3guc3R5bGVzJztcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBjaGVja2JveCBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGVja2JveCBleHRlbmRzIEZvdW5kYXRpb25DaGVja2JveCB7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IGxpZmVjeWNsZSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbnNlcnRlZFxuICAgICAqIGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aGlzLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBsYWJlbCBpZiB0aGVyZSBpcyBubyB0ZXh0IGNvbnRlbnRcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0NoZWNrYm94Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgY2hlY2tib3ggY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1jaGVja2JveD5gXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdnNDb2RlQ2hlY2tib3ggPSBDaGVja2JveC5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ2NoZWNrYm94JyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG4gICAgY2hlY2tlZEluZGljYXRvcjogYFxuXHRcdDxzdmcgXG5cdFx0XHRwYXJ0PVwiY2hlY2tlZC1pbmRpY2F0b3JcIlxuXHRcdFx0Y2xhc3M9XCJjaGVja2VkLWluZGljYXRvclwiXG5cdFx0XHR3aWR0aD1cIjE2XCIgXG5cdFx0XHRoZWlnaHQ9XCIxNlwiIFxuXHRcdFx0dmlld0JveD1cIjAgMCAxNiAxNlwiIFxuXHRcdFx0eG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIFxuXHRcdFx0ZmlsbD1cImN1cnJlbnRDb2xvclwiXG5cdFx0PlxuXHRcdFx0PHBhdGggXG5cdFx0XHRcdGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBcblx0XHRcdFx0Y2xpcC1ydWxlPVwiZXZlbm9kZFwiIFxuXHRcdFx0XHRkPVwiTTE0LjQzMSAzLjMyM2wtOC40NyAxMC0uNzktLjAzNi0zLjM1LTQuNzcuODE4LS41NzQgMi45NzggNC4yNCA4LjA1MS05LjUwNi43NjQuNjQ2elwiXG5cdFx0XHQvPlxuXHRcdDwvc3ZnPlxuXHRgLFxuICAgIGluZGV0ZXJtaW5hdGVJbmRpY2F0b3I6IGBcblx0XHQ8ZGl2IHBhcnQ9XCJpbmRldGVybWluYXRlLWluZGljYXRvclwiIGNsYXNzPVwiaW5kZXRlcm1pbmF0ZS1pbmRpY2F0b3JcIj48L2Rpdj5cblx0YCxcbn0pO1xuIiwiaW1wb3J0IHsgZW1wdHlBcnJheSB9IGZyb20gXCIuLi9wbGF0Zm9ybS5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1NwbGljZShpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgICAgYWRkZWRDb3VudDogYWRkZWRDb3VudCxcbiAgICB9O1xufVxuY29uc3QgRURJVF9MRUFWRSA9IDA7XG5jb25zdCBFRElUX1VQREFURSA9IDE7XG5jb25zdCBFRElUX0FERCA9IDI7XG5jb25zdCBFRElUX0RFTEVURSA9IDM7XG4vLyBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzICpiYXNlZCogb24gdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBMZXZlbnNodGVpblxuLy8gXCJlZGl0XCIgZGlzdGFuY2UuIFRoZSBvbmUgY2hhbmdlIGlzIHRoYXQgXCJ1cGRhdGVzXCIgYXJlIHRyZWF0ZWQgYXMgdHdvXG4vLyBlZGl0cyAtIG5vdCBvbmUuIFdpdGggQXJyYXkgc3BsaWNlcywgYW4gdXBkYXRlIGlzIHJlYWxseSBhIGRlbGV0ZVxuLy8gZm9sbG93ZWQgYnkgYW4gYWRkLiBCeSByZXRhaW5pbmcgdGhpcywgd2Ugb3B0aW1pemUgZm9yIFwia2VlcGluZ1wiIHRoZVxuLy8gbWF4aW11bSBhcnJheSBpdGVtcyBpbiB0aGUgb3JpZ2luYWwgYXJyYXkuIEZvciBleGFtcGxlOlxuLy9cbi8vICAgJ3h4eHgxMjMnIC0+ICcxMjN5eXl5J1xuLy9cbi8vIFdpdGggMS1lZGl0IHVwZGF0ZXMsIHRoZSBzaG9ydGVzdCBwYXRoIHdvdWxkIGJlIGp1c3QgdG8gdXBkYXRlIGFsbCBzZXZlblxuLy8gY2hhcmFjdGVycy4gV2l0aCAyLWVkaXQgdXBkYXRlcywgd2UgZGVsZXRlIDQsIGxlYXZlIDMsIGFuZCBhZGQgNC4gVGhpc1xuLy8gbGVhdmVzIHRoZSBzdWJzdHJpbmcgJzEyMycgaW50YWN0LlxuZnVuY3Rpb24gY2FsY0VkaXREaXN0YW5jZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpIHtcbiAgICAvLyBcIkRlbGV0aW9uXCIgY29sdW1uc1xuICAgIGNvbnN0IHJvd0NvdW50ID0gb2xkRW5kIC0gb2xkU3RhcnQgKyAxO1xuICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gICAgY29uc3QgZGlzdGFuY2VzID0gbmV3IEFycmF5KHJvd0NvdW50KTtcbiAgICBsZXQgbm9ydGg7XG4gICAgbGV0IHdlc3Q7XG4gICAgLy8gXCJBZGRpdGlvblwiIHJvd3MuIEluaXRpYWxpemUgbnVsbCBjb2x1bW4uXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgKytpKSB7XG4gICAgICAgIGRpc3RhbmNlc1tpXSA9IG5ldyBBcnJheShjb2x1bW5Db3VudCk7XG4gICAgICAgIGRpc3RhbmNlc1tpXVswXSA9IGk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgbnVsbCByb3dcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbkNvdW50OyArK2opIHtcbiAgICAgICAgZGlzdGFuY2VzWzBdW2pdID0gajtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb3dDb3VudDsgKytpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgY29sdW1uQ291bnQ7ICsraikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRbY3VycmVudFN0YXJ0ICsgaiAtIDFdID09PSBvbGRbb2xkU3RhcnQgKyBpIC0gMV0pIHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZXNbaV1bal0gPSBkaXN0YW5jZXNbaSAtIDFdW2ogLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vcnRoID0gZGlzdGFuY2VzW2kgLSAxXVtqXSArIDE7XG4gICAgICAgICAgICAgICAgd2VzdCA9IGRpc3RhbmNlc1tpXVtqIC0gMV0gKyAxO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlc1tpXVtqXSA9IG5vcnRoIDwgd2VzdCA/IG5vcnRoIDogd2VzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlzdGFuY2VzO1xufVxuLy8gVGhpcyBzdGFydHMgYXQgdGhlIGZpbmFsIHdlaWdodCwgYW5kIHdhbGtzIFwiYmFja3dhcmRcIiBieSBmaW5kaW5nXG4vLyB0aGUgbWluaW11bSBwcmV2aW91cyB3ZWlnaHQgcmVjdXJzaXZlbHkgdW50aWwgdGhlIG9yaWdpbiBvZiB0aGUgd2VpZ2h0XG4vLyBtYXRyaXguXG5mdW5jdGlvbiBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoZGlzdGFuY2VzKSB7XG4gICAgbGV0IGkgPSBkaXN0YW5jZXMubGVuZ3RoIC0gMTtcbiAgICBsZXQgaiA9IGRpc3RhbmNlc1swXS5sZW5ndGggLSAxO1xuICAgIGxldCBjdXJyZW50ID0gZGlzdGFuY2VzW2ldW2pdO1xuICAgIGNvbnN0IGVkaXRzID0gW107XG4gICAgd2hpbGUgKGkgPiAwIHx8IGogPiAwKSB7XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vcnRoV2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1baiAtIDFdO1xuICAgICAgICBjb25zdCB3ZXN0ID0gZGlzdGFuY2VzW2kgLSAxXVtqXTtcbiAgICAgICAgY29uc3Qgbm9ydGggPSBkaXN0YW5jZXNbaV1baiAtIDFdO1xuICAgICAgICBsZXQgbWluO1xuICAgICAgICBpZiAod2VzdCA8IG5vcnRoKSB7XG4gICAgICAgICAgICBtaW4gPSB3ZXN0IDwgbm9ydGhXZXN0ID8gd2VzdCA6IG5vcnRoV2VzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1pbiA9IG5vcnRoIDwgbm9ydGhXZXN0ID8gbm9ydGggOiBub3J0aFdlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbm9ydGhXZXN0KSB7XG4gICAgICAgICAgICBpZiAobm9ydGhXZXN0ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgZWRpdHMucHVzaChFRElUX0xFQVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVkaXRzLnB1c2goRURJVF9VUERBVEUpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBub3J0aFdlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWluID09PSB3ZXN0KSB7XG4gICAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfREVMRVRFKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSB3ZXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWRpdHMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBlZGl0cztcbn1cbmZ1bmN0aW9uIHNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIHNlYXJjaExlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRbaV0gIT09IG9sZFtpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlYXJjaExlbmd0aDtcbn1cbmZ1bmN0aW9uIHNoYXJlZFN1ZmZpeChjdXJyZW50LCBvbGQsIHNlYXJjaExlbmd0aCkge1xuICAgIGxldCBpbmRleDEgPSBjdXJyZW50Lmxlbmd0aDtcbiAgICBsZXQgaW5kZXgyID0gb2xkLmxlbmd0aDtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHdoaWxlIChjb3VudCA8IHNlYXJjaExlbmd0aCAmJiBjdXJyZW50Wy0taW5kZXgxXSA9PT0gb2xkWy0taW5kZXgyXSkge1xuICAgICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG59XG5mdW5jdGlvbiBpbnRlcnNlY3Qoc3RhcnQxLCBlbmQxLCBzdGFydDIsIGVuZDIpIHtcbiAgICAvLyBEaXNqb2ludFxuICAgIGlmIChlbmQxIDwgc3RhcnQyIHx8IGVuZDIgPCBzdGFydDEpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvLyBBZGphY2VudFxuICAgIGlmIChlbmQxID09PSBzdGFydDIgfHwgZW5kMiA9PT0gc3RhcnQxKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLyBOb24temVybyBpbnRlcnNlY3QsIHNwYW4xIGZpcnN0XG4gICAgaWYgKHN0YXJ0MSA8IHN0YXJ0Mikge1xuICAgICAgICBpZiAoZW5kMSA8IGVuZDIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmQxIC0gc3RhcnQyOyAvLyBPdmVybGFwXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZDIgLSBzdGFydDI7IC8vIENvbnRhaW5lZFxuICAgIH1cbiAgICAvLyBOb24temVybyBpbnRlcnNlY3QsIHNwYW4yIGZpcnN0XG4gICAgaWYgKGVuZDIgPCBlbmQxKSB7XG4gICAgICAgIHJldHVybiBlbmQyIC0gc3RhcnQxOyAvLyBPdmVybGFwXG4gICAgfVxuICAgIHJldHVybiBlbmQxIC0gc3RhcnQxOyAvLyBDb250YWluZWRcbn1cbi8qKlxuICogU3BsaWNlIFByb2plY3Rpb24gZnVuY3Rpb25zOlxuICpcbiAqIEEgc3BsaWNlIG1hcCBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGhvdyBhIHByZXZpb3VzIGFycmF5IG9mIGl0ZW1zXG4gKiB3YXMgdHJhbnNmb3JtZWQgaW50byBhIG5ldyBhcnJheSBvZiBpdGVtcy4gQ29uY2VwdHVhbGx5IGl0IGlzIGEgbGlzdCBvZlxuICogdHVwbGVzIG9mXG4gKlxuICogICA8aW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQ+XG4gKlxuICogd2hpY2ggYXJlIGtlcHQgaW4gYXNjZW5kaW5nIGluZGV4IG9yZGVyIG9mLiBUaGUgdHVwbGUgcmVwcmVzZW50cyB0aGF0IGF0XG4gKiB0aGUgfGluZGV4fCwgfHJlbW92ZWR8IHNlcXVlbmNlIG9mIGl0ZW1zIHdlcmUgcmVtb3ZlZCwgYW5kIGNvdW50aW5nIGZvcndhcmRcbiAqIGZyb20gfGluZGV4fCwgfGFkZGVkQ291bnR8IGl0ZW1zIHdlcmUgYWRkZWQuXG4gKi9cbi8qKlxuICogQGludGVybmFsXG4gKiBAcmVtYXJrc1xuICogTGFja2luZyBpbmRpdmlkdWFsIHNwbGljZSBtdXRhdGlvbiBpbmZvcm1hdGlvbiwgdGhlIG1pbmltYWwgc2V0IG9mXG4gKiBzcGxpY2VzIGNhbiBiZSBzeW50aGVzaXplZCBnaXZlbiB0aGUgcHJldmlvdXMgc3RhdGUgYW5kIGZpbmFsIHN0YXRlIG9mIGFuXG4gKiBhcnJheS4gVGhlIGJhc2ljIGFwcHJvYWNoIGlzIHRvIGNhbGN1bGF0ZSB0aGUgZWRpdCBkaXN0YW5jZSBtYXRyaXggYW5kXG4gKiBjaG9vc2UgdGhlIHNob3J0ZXN0IHBhdGggdGhyb3VnaCBpdC5cbiAqXG4gKiBDb21wbGV4aXR5OiBPKGwgKiBwKVxuICogICBsOiBUaGUgbGVuZ3RoIG9mIHRoZSBjdXJyZW50IGFycmF5XG4gKiAgIHA6IFRoZSBsZW5ndGggb2YgdGhlIG9sZCBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY1NwbGljZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpIHtcbiAgICBsZXQgcHJlZml4Q291bnQgPSAwO1xuICAgIGxldCBzdWZmaXhDb3VudCA9IDA7XG4gICAgY29uc3QgbWluTGVuZ3RoID0gTWF0aC5taW4oY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCwgb2xkRW5kIC0gb2xkU3RhcnQpO1xuICAgIGlmIChjdXJyZW50U3RhcnQgPT09IDAgJiYgb2xkU3RhcnQgPT09IDApIHtcbiAgICAgICAgcHJlZml4Q291bnQgPSBzaGFyZWRQcmVmaXgoY3VycmVudCwgb2xkLCBtaW5MZW5ndGgpO1xuICAgIH1cbiAgICBpZiAoY3VycmVudEVuZCA9PT0gY3VycmVudC5sZW5ndGggJiYgb2xkRW5kID09PSBvbGQubGVuZ3RoKSB7XG4gICAgICAgIHN1ZmZpeENvdW50ID0gc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoIC0gcHJlZml4Q291bnQpO1xuICAgIH1cbiAgICBjdXJyZW50U3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gICAgb2xkU3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gICAgY3VycmVudEVuZCAtPSBzdWZmaXhDb3VudDtcbiAgICBvbGRFbmQgLT0gc3VmZml4Q291bnQ7XG4gICAgaWYgKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQgPT09IDAgJiYgb2xkRW5kIC0gb2xkU3RhcnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5QXJyYXk7XG4gICAgfVxuICAgIGlmIChjdXJyZW50U3RhcnQgPT09IGN1cnJlbnRFbmQpIHtcbiAgICAgICAgY29uc3Qgc3BsaWNlID0gbmV3U3BsaWNlKGN1cnJlbnRTdGFydCwgW10sIDApO1xuICAgICAgICB3aGlsZSAob2xkU3RhcnQgPCBvbGRFbmQpIHtcbiAgICAgICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZFN0YXJ0KytdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3NwbGljZV07XG4gICAgfVxuICAgIGVsc2UgaWYgKG9sZFN0YXJ0ID09PSBvbGRFbmQpIHtcbiAgICAgICAgcmV0dXJuIFtuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCldO1xuICAgIH1cbiAgICBjb25zdCBvcHMgPSBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoY2FsY0VkaXREaXN0YW5jZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpKTtcbiAgICBjb25zdCBzcGxpY2VzID0gW107XG4gICAgbGV0IHNwbGljZSA9IHZvaWQgMDtcbiAgICBsZXQgaW5kZXggPSBjdXJyZW50U3RhcnQ7XG4gICAgbGV0IG9sZEluZGV4ID0gb2xkU3RhcnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3dpdGNoIChvcHNbaV0pIHtcbiAgICAgICAgICAgIGNhc2UgRURJVF9MRUFWRTpcbiAgICAgICAgICAgICAgICBpZiAoc3BsaWNlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgICAgICAgICAgICAgICAgIHNwbGljZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFRElUX1VQREFURTpcbiAgICAgICAgICAgICAgICBpZiAoc3BsaWNlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRJbmRleF0pO1xuICAgICAgICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVESVRfQUREOlxuICAgICAgICAgICAgICAgIGlmIChzcGxpY2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3BsaWNlLmFkZGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFRElUX0RFTEVURTpcbiAgICAgICAgICAgICAgICBpZiAoc3BsaWNlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3BsaWNlICE9PSB2b2lkIDApIHtcbiAgICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgfVxuICAgIHJldHVybiBzcGxpY2VzO1xufVxuY29uc3QgJHB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcbmZ1bmN0aW9uIG1lcmdlU3BsaWNlKHNwbGljZXMsIGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KSB7XG4gICAgY29uc3Qgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KTtcbiAgICBsZXQgaW5zZXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgaW5zZXJ0aW9uT2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHNwbGljZXNbaV07XG4gICAgICAgIGN1cnJlbnQuaW5kZXggKz0gaW5zZXJ0aW9uT2Zmc2V0O1xuICAgICAgICBpZiAoaW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludGVyc2VjdENvdW50ID0gaW50ZXJzZWN0KHNwbGljZS5pbmRleCwgc3BsaWNlLmluZGV4ICsgc3BsaWNlLnJlbW92ZWQubGVuZ3RoLCBjdXJyZW50LmluZGV4LCBjdXJyZW50LmluZGV4ICsgY3VycmVudC5hZGRlZENvdW50KTtcbiAgICAgICAgaWYgKGludGVyc2VjdENvdW50ID49IDApIHtcbiAgICAgICAgICAgIC8vIE1lcmdlIHRoZSB0d28gc3BsaWNlc1xuICAgICAgICAgICAgc3BsaWNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBpbnNlcnRpb25PZmZzZXQgLT0gY3VycmVudC5hZGRlZENvdW50IC0gY3VycmVudC5yZW1vdmVkLmxlbmd0aDtcbiAgICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50ICs9IGN1cnJlbnQuYWRkZWRDb3VudCAtIGludGVyc2VjdENvdW50O1xuICAgICAgICAgICAgY29uc3QgZGVsZXRlQ291bnQgPSBzcGxpY2UucmVtb3ZlZC5sZW5ndGggKyBjdXJyZW50LnJlbW92ZWQubGVuZ3RoIC0gaW50ZXJzZWN0Q291bnQ7XG4gICAgICAgICAgICBpZiAoIXNwbGljZS5hZGRlZENvdW50ICYmICFkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgICAgIC8vIG1lcmdlZCBzcGxpY2UgaXMgYSBub29wLiBkaXNjYXJkLlxuICAgICAgICAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UmVtb3ZlZCA9IGN1cnJlbnQucmVtb3ZlZDtcbiAgICAgICAgICAgICAgICBpZiAoc3BsaWNlLmluZGV4IDwgY3VycmVudC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzb21lIHByZWZpeCBvZiBzcGxpY2UucmVtb3ZlZCBpcyBwcmVwZW5kZWQgdG8gY3VycmVudC5yZW1vdmVkLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVwZW5kID0gc3BsaWNlLnJlbW92ZWQuc2xpY2UoMCwgY3VycmVudC5pbmRleCAtIHNwbGljZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICRwdXNoLmFwcGx5KHByZXBlbmQsIGN1cnJlbnRSZW1vdmVkKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlbW92ZWQgPSBwcmVwZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3BsaWNlLmluZGV4ICsgc3BsaWNlLnJlbW92ZWQubGVuZ3RoID5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5pbmRleCArIGN1cnJlbnQuYWRkZWRDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzb21lIHN1ZmZpeCBvZiBzcGxpY2UucmVtb3ZlZCBpcyBhcHBlbmRlZCB0byBjdXJyZW50LnJlbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFwcGVuZCA9IHNwbGljZS5yZW1vdmVkLnNsaWNlKGN1cnJlbnQuaW5kZXggKyBjdXJyZW50LmFkZGVkQ291bnQgLSBzcGxpY2UuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAkcHVzaC5hcHBseShjdXJyZW50UmVtb3ZlZCwgYXBwZW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3BsaWNlLnJlbW92ZWQgPSBjdXJyZW50UmVtb3ZlZDtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pbmRleCA8IHNwbGljZS5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpY2UuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcGxpY2UuaW5kZXggPCBjdXJyZW50LmluZGV4KSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgc3BsaWNlIGhlcmUuXG4gICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBzcGxpY2VzLnNwbGljZShpLCAwLCBzcGxpY2UpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc3BsaWNlLmFkZGVkQ291bnQgLSBzcGxpY2UucmVtb3ZlZC5sZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50LmluZGV4ICs9IG9mZnNldDtcbiAgICAgICAgICAgIGluc2VydGlvbk9mZnNldCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpbnNlcnRlZCkge1xuICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3BsaWNlcyhjaGFuZ2VSZWNvcmRzKSB7XG4gICAgY29uc3Qgc3BsaWNlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNoYW5nZVJlY29yZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBjb25zdCByZWNvcmQgPSBjaGFuZ2VSZWNvcmRzW2ldO1xuICAgICAgICBtZXJnZVNwbGljZShzcGxpY2VzLCByZWNvcmQuaW5kZXgsIHJlY29yZC5yZW1vdmVkLCByZWNvcmQuYWRkZWRDb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBzcGxpY2VzO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3RBcnJheVNwbGljZXMoYXJyYXksIGNoYW5nZVJlY29yZHMpIHtcbiAgICBsZXQgc3BsaWNlcyA9IFtdO1xuICAgIGNvbnN0IGluaXRpYWxTcGxpY2VzID0gY3JlYXRlSW5pdGlhbFNwbGljZXMoY2hhbmdlUmVjb3Jkcyk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaW5pdGlhbFNwbGljZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb25zdCBzcGxpY2UgPSBpbml0aWFsU3BsaWNlc1tpXTtcbiAgICAgICAgaWYgKHNwbGljZS5hZGRlZENvdW50ID09PSAxICYmIHNwbGljZS5yZW1vdmVkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHNwbGljZS5yZW1vdmVkWzBdICE9PSBhcnJheVtzcGxpY2UuaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzcGxpY2VzID0gc3BsaWNlcy5jb25jYXQoY2FsY1NwbGljZXMoYXJyYXksIHNwbGljZS5pbmRleCwgc3BsaWNlLmluZGV4ICsgc3BsaWNlLmFkZGVkQ291bnQsIHNwbGljZS5yZW1vdmVkLCAwLCBzcGxpY2UucmVtb3ZlZC5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNwbGljZXM7XG59XG4iLCJpbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG5pbXBvcnQgeyBjYWxjU3BsaWNlcywgbmV3U3BsaWNlLCBwcm9qZWN0QXJyYXlTcGxpY2VzIH0gZnJvbSBcIi4vYXJyYXktY2hhbmdlLXJlY29yZHMuanNcIjtcbmltcG9ydCB7IFN1YnNjcmliZXJTZXQgfSBmcm9tIFwiLi9ub3RpZmllci5qc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGUuanNcIjtcbmxldCBhcnJheU9ic2VydmF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gYWRqdXN0SW5kZXgoY2hhbmdlUmVjb3JkLCBhcnJheSkge1xuICAgIGxldCBpbmRleCA9IGNoYW5nZVJlY29yZC5pbmRleDtcbiAgICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPiBhcnJheUxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IGFycmF5TGVuZ3RoIC0gY2hhbmdlUmVjb3JkLmFkZGVkQ291bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9XG4gICAgICAgICAgICBhcnJheUxlbmd0aCArIGNoYW5nZVJlY29yZC5yZW1vdmVkLmxlbmd0aCArIGluZGV4IC0gY2hhbmdlUmVjb3JkLmFkZGVkQ291bnQ7XG4gICAgfVxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgIH1cbiAgICBjaGFuZ2VSZWNvcmQuaW5kZXggPSBpbmRleDtcbiAgICByZXR1cm4gY2hhbmdlUmVjb3JkO1xufVxuY2xhc3MgQXJyYXlPYnNlcnZlciBleHRlbmRzIFN1YnNjcmliZXJTZXQge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICBzdXBlcihzb3VyY2UpO1xuICAgICAgICB0aGlzLm9sZENvbGxlY3Rpb24gPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuc3BsaWNlcyA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5uZWVkc1F1ZXVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYWxsID0gdGhpcy5mbHVzaDtcbiAgICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShzb3VyY2UsIFwiJGZhc3RDb250cm9sbGVyXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRTcGxpY2Uoc3BsaWNlKSB7XG4gICAgICAgIGlmICh0aGlzLnNwbGljZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2VzID0gW3NwbGljZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5lZWRzUXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMubmVlZHNRdWV1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgRE9NLnF1ZXVlVXBkYXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc2V0KG9sZENvbGxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5vbGRDb2xsZWN0aW9uID0gb2xkQ29sbGVjdGlvbjtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNRdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy5uZWVkc1F1ZXVlID0gZmFsc2U7XG4gICAgICAgICAgICBET00ucXVldWVVcGRhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmx1c2goKSB7XG4gICAgICAgIGNvbnN0IHNwbGljZXMgPSB0aGlzLnNwbGljZXM7XG4gICAgICAgIGNvbnN0IG9sZENvbGxlY3Rpb24gPSB0aGlzLm9sZENvbGxlY3Rpb247XG4gICAgICAgIGlmIChzcGxpY2VzID09PSB2b2lkIDAgJiYgb2xkQ29sbGVjdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZWVkc1F1ZXVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcGxpY2VzID0gdm9pZCAwO1xuICAgICAgICB0aGlzLm9sZENvbGxlY3Rpb24gPSB2b2lkIDA7XG4gICAgICAgIGNvbnN0IGZpbmFsU3BsaWNlcyA9IG9sZENvbGxlY3Rpb24gPT09IHZvaWQgMFxuICAgICAgICAgICAgPyBwcm9qZWN0QXJyYXlTcGxpY2VzKHRoaXMuc291cmNlLCBzcGxpY2VzKVxuICAgICAgICAgICAgOiBjYWxjU3BsaWNlcyh0aGlzLnNvdXJjZSwgMCwgdGhpcy5zb3VyY2UubGVuZ3RoLCBvbGRDb2xsZWN0aW9uLCAwLCBvbGRDb2xsZWN0aW9uLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubm90aWZ5KGZpbmFsU3BsaWNlcyk7XG4gICAgfVxufVxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbi8qKlxuICogRW5hYmxlcyB0aGUgYXJyYXkgb2JzZXJ2YXRpb24gbWVjaGFuaXNtLlxuICogQHJlbWFya3NcbiAqIEFycmF5IG9ic2VydmF0aW9uIGlzIGVuYWJsZWQgYXV0b21hdGljYWxseSB3aGVuIHVzaW5nIHRoZVxuICoge0BsaW5rIFJlcGVhdERpcmVjdGl2ZX0sIHNvIGNhbGxpbmcgdGhpcyBBUEkgbWFudWFsbHkgaXNcbiAqIG5vdCB0eXBpY2FsbHkgbmVjZXNzYXJ5LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQXJyYXlPYnNlcnZhdGlvbigpIHtcbiAgICBpZiAoYXJyYXlPYnNlcnZhdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhcnJheU9ic2VydmF0aW9uRW5hYmxlZCA9IHRydWU7XG4gICAgT2JzZXJ2YWJsZS5zZXRBcnJheU9ic2VydmVyRmFjdG9yeSgoY29sbGVjdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2ZXIoY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgY29uc3QgcHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG4gICAgLy8gRG9uJ3QgcGF0Y2ggQXJyYXkgaWYgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXRjaGVkXG4gICAgLy8gYnkgYW5vdGhlciBjb3B5IG9mIGZhc3QtZWxlbWVudC5cbiAgICBpZiAocHJvdG8uJGZhc3RQYXRjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIFwiJGZhc3RQYXRjaFwiLCB7XG4gICAgICAgIHZhbHVlOiAxLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgICBjb25zdCBwb3AgPSBwcm90by5wb3A7XG4gICAgY29uc3QgcHVzaCA9IHByb3RvLnB1c2g7XG4gICAgY29uc3QgcmV2ZXJzZSA9IHByb3RvLnJldmVyc2U7XG4gICAgY29uc3Qgc2hpZnQgPSBwcm90by5zaGlmdDtcbiAgICBjb25zdCBzb3J0ID0gcHJvdG8uc29ydDtcbiAgICBjb25zdCBzcGxpY2UgPSBwcm90by5zcGxpY2U7XG4gICAgY29uc3QgdW5zaGlmdCA9IHByb3RvLnVuc2hpZnQ7XG4gICAgcHJvdG8ucG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBub3RFbXB0eSA9IHRoaXMubGVuZ3RoID4gMDtcbiAgICAgICAgY29uc3QgbWV0aG9kQ2FsbFJlc3VsdCA9IHBvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBvID0gdGhpcy4kZmFzdENvbnRyb2xsZXI7XG4gICAgICAgIGlmIChvICE9PSB2b2lkIDAgJiYgbm90RW1wdHkpIHtcbiAgICAgICAgICAgIG8uYWRkU3BsaWNlKG5ld1NwbGljZSh0aGlzLmxlbmd0aCwgW21ldGhvZENhbGxSZXN1bHRdLCAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcbiAgICBwcm90by5wdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBtZXRob2RDYWxsUmVzdWx0ID0gcHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBvID0gdGhpcy4kZmFzdENvbnRyb2xsZXI7XG4gICAgICAgIGlmIChvICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG8uYWRkU3BsaWNlKGFkanVzdEluZGV4KG5ld1NwbGljZSh0aGlzLmxlbmd0aCAtIGFyZ3VtZW50cy5sZW5ndGgsIFtdLCBhcmd1bWVudHMubGVuZ3RoKSwgdGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgIH07XG4gICAgcHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG9sZEFycmF5O1xuICAgICAgICBjb25zdCBvID0gdGhpcy4kZmFzdENvbnRyb2xsZXI7XG4gICAgICAgIGlmIChvICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG8uZmx1c2goKTtcbiAgICAgICAgICAgIG9sZEFycmF5ID0gdGhpcy5zbGljZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZENhbGxSZXN1bHQgPSByZXZlcnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChvICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG8ucmVzZXQob2xkQXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgIH07XG4gICAgcHJvdG8uc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IG5vdEVtcHR5ID0gdGhpcy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBtZXRob2RDYWxsUmVzdWx0ID0gc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc3QgbyA9IHRoaXMuJGZhc3RDb250cm9sbGVyO1xuICAgICAgICBpZiAobyAhPT0gdm9pZCAwICYmIG5vdEVtcHR5KSB7XG4gICAgICAgICAgICBvLmFkZFNwbGljZShuZXdTcGxpY2UoMCwgW21ldGhvZENhbGxSZXN1bHRdLCAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcbiAgICBwcm90by5zb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgb2xkQXJyYXk7XG4gICAgICAgIGNvbnN0IG8gPSB0aGlzLiRmYXN0Q29udHJvbGxlcjtcbiAgICAgICAgaWYgKG8gIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgby5mbHVzaCgpO1xuICAgICAgICAgICAgb2xkQXJyYXkgPSB0aGlzLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kQ2FsbFJlc3VsdCA9IHNvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKG8gIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgby5yZXNldChvbGRBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcbiAgICBwcm90by5zcGxpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZENhbGxSZXN1bHQgPSBzcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc3QgbyA9IHRoaXMuJGZhc3RDb250cm9sbGVyO1xuICAgICAgICBpZiAobyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBvLmFkZFNwbGljZShhZGp1c3RJbmRleChuZXdTcGxpY2UoK2FyZ3VtZW50c1swXSwgbWV0aG9kQ2FsbFJlc3VsdCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHMubGVuZ3RoIC0gMiA6IDApLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcbiAgICBwcm90by51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBtZXRob2RDYWxsUmVzdWx0ID0gdW5zaGlmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBvID0gdGhpcy4kZmFzdENvbnRyb2xsZXI7XG4gICAgICAgIGlmIChvICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG8uYWRkU3BsaWNlKGFkanVzdEluZGV4KG5ld1NwbGljZSgwLCBbXSwgYXJndW1lbnRzLmxlbmd0aCksIHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xufVxuLyogZXNsaW50LWVuYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4iLCJpbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vZG9tLmpzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB9IGZyb20gXCIuLi9vYnNlcnZhdGlvbi9vYnNlcnZhYmxlLmpzXCI7XG5pbXBvcnQgeyBlbmFibGVBcnJheU9ic2VydmF0aW9uIH0gZnJvbSBcIi4uL29ic2VydmF0aW9uL2FycmF5LW9ic2VydmVyLmpzXCI7XG5pbXBvcnQgeyBlbXB0eUFycmF5IH0gZnJvbSBcIi4uL3BsYXRmb3JtLmpzXCI7XG5pbXBvcnQgeyBIVE1MRGlyZWN0aXZlIH0gZnJvbSBcIi4vaHRtbC1kaXJlY3RpdmUuanNcIjtcbmltcG9ydCB7IEhUTUxWaWV3IH0gZnJvbSBcIi4vdmlldy5qc1wiO1xuY29uc3QgZGVmYXVsdFJlcGVhdE9wdGlvbnMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBwb3NpdGlvbmluZzogZmFsc2UsXG4gICAgcmVjeWNsZTogdHJ1ZSxcbn0pO1xuZnVuY3Rpb24gYmluZFdpdGhvdXRQb3NpdGlvbmluZyh2aWV3LCBpdGVtcywgaW5kZXgsIGNvbnRleHQpIHtcbiAgICB2aWV3LmJpbmQoaXRlbXNbaW5kZXhdLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGJpbmRXaXRoUG9zaXRpb25pbmcodmlldywgaXRlbXMsIGluZGV4LCBjb250ZXh0KSB7XG4gICAgY29uc3QgY2hpbGRDb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgICBjaGlsZENvbnRleHQuaW5kZXggPSBpbmRleDtcbiAgICBjaGlsZENvbnRleHQubGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuICAgIHZpZXcuYmluZChpdGVtc1tpbmRleF0sIGNoaWxkQ29udGV4dCk7XG59XG4vKipcbiAqIEEgYmVoYXZpb3IgdGhhdCByZW5kZXJzIGEgdGVtcGxhdGUgZm9yIGVhY2ggaXRlbSBpbiBhbiBhcnJheS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFJlcGVhdEJlaGF2aW9yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlcGVhdEJlaGF2aW9yLlxuICAgICAqIEBwYXJhbSBsb2NhdGlvbiAtIFRoZSBsb2NhdGlvbiBpbiB0aGUgRE9NIHRvIHJlbmRlciB0aGUgcmVwZWF0LlxuICAgICAqIEBwYXJhbSBpdGVtc0JpbmRpbmcgLSBUaGUgYXJyYXkgdG8gcmVuZGVyLlxuICAgICAqIEBwYXJhbSBpc0l0ZW1zQmluZGluZ1ZvbGF0aWxlIC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGl0ZW1zIGJpbmRpbmcgaGFzIHZvbGF0aWxlIGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVCaW5kaW5nIC0gVGhlIHRlbXBsYXRlIHRvIHJlbmRlciBmb3IgZWFjaCBpdGVtLlxuICAgICAqIEBwYXJhbSBpc1RlbXBsYXRlQmluZGluZ1ZvbGF0aWxlIC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRlbXBsYXRlIGJpbmRpbmcgaGFzIHZvbGF0aWxlIGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdXNlZCB0byB0dXJuIG9uIHNwZWNpYWwgcmVwZWF0IGZlYXR1cmVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2F0aW9uLCBpdGVtc0JpbmRpbmcsIGlzSXRlbXNCaW5kaW5nVm9sYXRpbGUsIHRlbXBsYXRlQmluZGluZywgaXNUZW1wbGF0ZUJpbmRpbmdWb2xhdGlsZSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIHRoaXMuaXRlbXNCaW5kaW5nID0gaXRlbXNCaW5kaW5nO1xuICAgICAgICB0aGlzLnRlbXBsYXRlQmluZGluZyA9IHRlbXBsYXRlQmluZGluZztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLnZpZXdzID0gW107XG4gICAgICAgIHRoaXMuaXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1zT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm9yaWdpbmFsQ29udGV4dCA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5jaGlsZENvbnRleHQgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuYmluZFZpZXcgPSBiaW5kV2l0aG91dFBvc2l0aW9uaW5nO1xuICAgICAgICB0aGlzLml0ZW1zQmluZGluZ09ic2VydmVyID0gT2JzZXJ2YWJsZS5iaW5kaW5nKGl0ZW1zQmluZGluZywgdGhpcywgaXNJdGVtc0JpbmRpbmdWb2xhdGlsZSk7XG4gICAgICAgIHRoaXMudGVtcGxhdGVCaW5kaW5nT2JzZXJ2ZXIgPSBPYnNlcnZhYmxlLmJpbmRpbmcodGVtcGxhdGVCaW5kaW5nLCB0aGlzLCBpc1RlbXBsYXRlQmluZGluZ1ZvbGF0aWxlKTtcbiAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb25pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFZpZXcgPSBiaW5kV2l0aFBvc2l0aW9uaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpbmQgdGhpcyBiZWhhdmlvciB0byB0aGUgc291cmNlLlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIHRvIGJpbmQgdG8uXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBUaGUgZXhlY3V0aW9uIGNvbnRleHQgdGhhdCB0aGUgYmluZGluZyBpcyBvcGVyYXRpbmcgd2l0aGluLlxuICAgICAqL1xuICAgIGJpbmQoc291cmNlLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLm9yaWdpbmFsQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY2hpbGRDb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgICAgICAgdGhpcy5jaGlsZENvbnRleHQucGFyZW50ID0gc291cmNlO1xuICAgICAgICB0aGlzLmNoaWxkQ29udGV4dC5wYXJlbnRDb250ZXh0ID0gdGhpcy5vcmlnaW5hbENvbnRleHQ7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zQmluZGluZ09ic2VydmVyLm9ic2VydmUoc291cmNlLCB0aGlzLm9yaWdpbmFsQ29udGV4dCk7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlQmluZGluZ09ic2VydmVyLm9ic2VydmUoc291cmNlLCB0aGlzLm9yaWdpbmFsQ29udGV4dCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZUl0ZW1zKHRydWUpO1xuICAgICAgICB0aGlzLnJlZnJlc2hBbGxWaWV3cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbmJpbmRzIHRoaXMgYmVoYXZpb3IgZnJvbSB0aGUgc291cmNlLlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgc291cmNlIHRvIHVuYmluZCBmcm9tLlxuICAgICAqL1xuICAgIHVuYmluZCgpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1zID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXNPYnNlcnZlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pdGVtc09ic2VydmVyLnVuc3Vic2NyaWJlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5iaW5kQWxsVmlld3MoKTtcbiAgICAgICAgdGhpcy5pdGVtc0JpbmRpbmdPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIHRoaXMudGVtcGxhdGVCaW5kaW5nT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgaGFuZGxlQ2hhbmdlKHNvdXJjZSwgYXJncykge1xuICAgICAgICBpZiAoc291cmNlID09PSB0aGlzLml0ZW1zQmluZGluZykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXNCaW5kaW5nT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnNvdXJjZSwgdGhpcy5vcmlnaW5hbENvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlSXRlbXMoKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEFsbFZpZXdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc291cmNlID09PSB0aGlzLnRlbXBsYXRlQmluZGluZykge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVCaW5kaW5nT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnNvdXJjZSwgdGhpcy5vcmlnaW5hbENvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoQWxsVmlld3ModHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXdzKGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9ic2VydmVJdGVtcyhmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGVtcHR5QXJyYXk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkT2JzZXJ2ZXIgPSB0aGlzLml0ZW1zT2JzZXJ2ZXI7XG4gICAgICAgIGNvbnN0IG5ld09ic2VydmVyID0gKHRoaXMuaXRlbXNPYnNlcnZlciA9IE9ic2VydmFibGUuZ2V0Tm90aWZpZXIodGhpcy5pdGVtcykpO1xuICAgICAgICBjb25zdCBoYXNOZXdPYnNlcnZlciA9IG9sZE9ic2VydmVyICE9PSBuZXdPYnNlcnZlcjtcbiAgICAgICAgaWYgKGhhc05ld09ic2VydmVyICYmIG9sZE9ic2VydmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvbGRPYnNlcnZlci51bnN1YnNjcmliZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzTmV3T2JzZXJ2ZXIgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIG5ld09ic2VydmVyLnN1YnNjcmliZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVWaWV3cyhzcGxpY2VzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkQ29udGV4dCA9IHRoaXMuY2hpbGRDb250ZXh0O1xuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgICAgIGNvbnN0IHRvdGFsUmVtb3ZlZCA9IFtdO1xuICAgICAgICBjb25zdCBiaW5kVmlldyA9IHRoaXMuYmluZFZpZXc7XG4gICAgICAgIGxldCByZW1vdmVEZWx0YSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHNwbGljZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc3BsaWNlID0gc3BsaWNlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWQgPSBzcGxpY2UucmVtb3ZlZDtcbiAgICAgICAgICAgIHRvdGFsUmVtb3ZlZC5wdXNoKC4uLnZpZXdzLnNwbGljZShzcGxpY2UuaW5kZXggKyByZW1vdmVEZWx0YSwgcmVtb3ZlZC5sZW5ndGgpKTtcbiAgICAgICAgICAgIHJlbW92ZURlbHRhIC09IHNwbGljZS5hZGRlZENvdW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzcGxpY2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwbGljZSA9IHNwbGljZXNbaV07XG4gICAgICAgICAgICBsZXQgYWRkSW5kZXggPSBzcGxpY2UuaW5kZXg7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBhZGRJbmRleCArIHNwbGljZS5hZGRlZENvdW50O1xuICAgICAgICAgICAgZm9yICg7IGFkZEluZGV4IDwgZW5kOyArK2FkZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmVpZ2hib3IgPSB2aWV3c1thZGRJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBuZWlnaGJvciA/IG5laWdoYm9yLmZpcnN0Q2hpbGQgOiB0aGlzLmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLm9wdGlvbnMucmVjeWNsZSAmJiB0b3RhbFJlbW92ZWQubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IHRvdGFsUmVtb3ZlZC5zaGlmdCgpXG4gICAgICAgICAgICAgICAgICAgIDogdGVtcGxhdGUuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgdmlld3Muc3BsaWNlKGFkZEluZGV4LCAwLCB2aWV3KTtcbiAgICAgICAgICAgICAgICBiaW5kVmlldyh2aWV3LCBpdGVtcywgYWRkSW5kZXgsIGNoaWxkQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgdmlldy5pbnNlcnRCZWZvcmUobG9jYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRvdGFsUmVtb3ZlZC5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICB0b3RhbFJlbW92ZWRbaV0uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucG9zaXRpb25pbmcpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZpZXdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q29udGV4dCA9IHZpZXdzW2ldLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbnRleHQubGVuZ3RoID0gaWk7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbnRleHQuaW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlZnJlc2hBbGxWaWV3cyh0ZW1wbGF0ZUNoYW5nZWQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGNoaWxkQ29udGV4dCA9IHRoaXMuY2hpbGRDb250ZXh0O1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5sb2NhdGlvbjtcbiAgICAgICAgY29uc3QgYmluZFZpZXcgPSB0aGlzLmJpbmRWaWV3O1xuICAgICAgICBsZXQgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGxldCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgICAgIGxldCB2aWV3c0xlbmd0aCA9IHZpZXdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGl0ZW1zTGVuZ3RoID09PSAwIHx8IHRlbXBsYXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgLy8gYWxsIHZpZXdzIG5lZWQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgSFRNTFZpZXcuZGlzcG9zZUNvbnRpZ3VvdXNCYXRjaCh2aWV3cyk7XG4gICAgICAgICAgICB2aWV3c0xlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpZXdzTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBhbGwgdmlld3MgbmVlZCB0byBiZSBjcmVhdGVkXG4gICAgICAgICAgICB0aGlzLnZpZXdzID0gdmlld3MgPSBuZXcgQXJyYXkoaXRlbXNMZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc0xlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHRlbXBsYXRlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGJpbmRWaWV3KHZpZXcsIGl0ZW1zLCBpLCBjaGlsZENvbnRleHQpO1xuICAgICAgICAgICAgICAgIHZpZXdzW2ldID0gdmlldztcbiAgICAgICAgICAgICAgICB2aWV3Lmluc2VydEJlZm9yZShsb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBhdHRlbXB0IHRvIHJldXNlIGV4aXN0aW5nIHZpZXdzIHdpdGggbmV3IGRhdGFcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgaXRlbXNMZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChpIDwgdmlld3NMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBiaW5kVmlldyh2aWV3LCBpdGVtcywgaSwgY2hpbGRDb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0ZW1wbGF0ZS5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYmluZFZpZXcodmlldywgaXRlbXMsIGksIGNoaWxkQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdzLnB1c2godmlldyk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuaW5zZXJ0QmVmb3JlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkID0gdmlld3Muc3BsaWNlKGksIHZpZXdzTGVuZ3RoIC0gaSk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpdGVtc0xlbmd0aCA9IHJlbW92ZWQubGVuZ3RoOyBpIDwgaXRlbXNMZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZWRbaV0uZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHVuYmluZEFsbFZpZXdzKCkge1xuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZpZXdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHZpZXdzW2ldLnVuYmluZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGNvbmZpZ3VyZXMgbGlzdCByZW5kZXJpbmcuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXBlYXREaXJlY3RpdmUgZXh0ZW5kcyBIVE1MRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlcGVhdERpcmVjdGl2ZS5cbiAgICAgKiBAcGFyYW0gaXRlbXNCaW5kaW5nIC0gVGhlIGJpbmRpbmcgdGhhdCBwcm92aWRlcyB0aGUgYXJyYXkgdG8gcmVuZGVyLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZUJpbmRpbmcgLSBUaGUgdGVtcGxhdGUgYmluZGluZyB1c2VkIHRvIG9idGFpbiBhIHRlbXBsYXRlIHRvIHJlbmRlciBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdXNlZCB0byB0dXJuIG9uIHNwZWNpYWwgcmVwZWF0IGZlYXR1cmVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGl0ZW1zQmluZGluZywgdGVtcGxhdGVCaW5kaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbXNCaW5kaW5nID0gaXRlbXNCaW5kaW5nO1xuICAgICAgICB0aGlzLnRlbXBsYXRlQmluZGluZyA9IHRlbXBsYXRlQmluZGluZztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFjZWhvbGRlciBzdHJpbmcgYmFzZWQgb24gdGhlIGRpcmVjdGl2ZSdzIGluZGV4IHdpdGhpbiB0aGUgdGVtcGxhdGUuXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZGlyZWN0aXZlIHdpdGhpbiB0aGUgdGVtcGxhdGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyID0gRE9NLmNyZWF0ZUJsb2NrUGxhY2Vob2xkZXI7XG4gICAgICAgIGVuYWJsZUFycmF5T2JzZXJ2YXRpb24oKTtcbiAgICAgICAgdGhpcy5pc0l0ZW1zQmluZGluZ1ZvbGF0aWxlID0gT2JzZXJ2YWJsZS5pc1ZvbGF0aWxlQmluZGluZyhpdGVtc0JpbmRpbmcpO1xuICAgICAgICB0aGlzLmlzVGVtcGxhdGVCaW5kaW5nVm9sYXRpbGUgPSBPYnNlcnZhYmxlLmlzVm9sYXRpbGVCaW5kaW5nKHRlbXBsYXRlQmluZGluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiZWhhdmlvciBmb3IgdGhlIHByb3ZpZGVkIHRhcmdldCBub2RlLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgbm9kZSBpbnN0YW5jZSB0byBjcmVhdGUgdGhlIGJlaGF2aW9yIGZvci5cbiAgICAgKi9cbiAgICBjcmVhdGVCZWhhdmlvcih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBlYXRCZWhhdmlvcih0YXJnZXQsIHRoaXMuaXRlbXNCaW5kaW5nLCB0aGlzLmlzSXRlbXNCaW5kaW5nVm9sYXRpbGUsIHRoaXMudGVtcGxhdGVCaW5kaW5nLCB0aGlzLmlzVGVtcGxhdGVCaW5kaW5nVm9sYXRpbGUsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGVuYWJsZXMgbGlzdCByZW5kZXJpbmcuXG4gKiBAcGFyYW0gaXRlbXNCaW5kaW5nIC0gVGhlIGFycmF5IHRvIHJlbmRlci5cbiAqIEBwYXJhbSB0ZW1wbGF0ZU9yVGVtcGxhdGVCaW5kaW5nIC0gVGhlIHRlbXBsYXRlIG9yIGEgdGVtcGxhdGUgYmluZGluZyB1c2VkIG9idGFpbiBhIHRlbXBsYXRlXG4gKiB0byByZW5kZXIgZm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdXNlZCB0byB0dXJuIG9uIHNwZWNpYWwgcmVwZWF0IGZlYXR1cmVzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0KGl0ZW1zQmluZGluZywgdGVtcGxhdGVPclRlbXBsYXRlQmluZGluZywgb3B0aW9ucyA9IGRlZmF1bHRSZXBlYXRPcHRpb25zKSB7XG4gICAgY29uc3QgdGVtcGxhdGVCaW5kaW5nID0gdHlwZW9mIHRlbXBsYXRlT3JUZW1wbGF0ZUJpbmRpbmcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IHRlbXBsYXRlT3JUZW1wbGF0ZUJpbmRpbmdcbiAgICAgICAgOiAoKSA9PiB0ZW1wbGF0ZU9yVGVtcGxhdGVCaW5kaW5nO1xuICAgIHJldHVybiBuZXcgUmVwZWF0RGlyZWN0aXZlKGl0ZW1zQmluZGluZywgdGVtcGxhdGVCaW5kaW5nLCBvcHRpb25zKTtcbn1cbiIsIi8qKlxuICogVGhpcyBzZXQgb2YgZXhwb3J0ZWQgc3RyaW5ncyByZWZlcmVuY2UgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzXG4gKiBhbmQgc2hvdWxkIGluY2x1ZGUgYWxsIG5vbi1kZXByZWNhdGVkIGFuZCBub24tZXhwZXJpbWVudGFsIFN0YW5kYXJkIGV2ZW50c1xuICovXG5leHBvcnQgY29uc3QgZXZlbnRBYm9ydCA9IFwiYWJvcnRcIjtcbmV4cG9ydCBjb25zdCBldmVudEFmdGVyUHJpbnQgPSBcImFmdGVycHJpbnRcIjtcbmV4cG9ydCBjb25zdCBldmVudEFuaW1hdGlvbkNhbmNlbCA9IFwiYW5pbWF0aW9uY2FuY2VsXCI7XG5leHBvcnQgY29uc3QgZXZlbnRBbmltYXRpb25FbmQgPSBcImFuaW1hdGlvbmVuZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50QW5pbWF0aW9uSXRlcmF0aW9uID0gXCJhbmltYXRpb25pdGVyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBldmVudEFuaW1hdGlvblN0YXJ0ID0gXCJhbmltYXRpb25zdGFydFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50QXBwSW5zdGFsbGVkID0gXCJhcHBpbnN0YWxsZWRcIjtcbmV4cG9ydCBjb25zdCBldmVudEJlZm9yZVByaW50ID0gXCJiZWZvcmVwcmludFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50QmVmb3JlVW5sb2FkID0gXCJiZWZvcmV1bmxvYWRcIjtcbmV4cG9ydCBjb25zdCBldmVudEJlZ2luRXZlbnQgPSBcImJlZ2luRXZlbnRcIjtcbmV4cG9ydCBjb25zdCBldmVudEJsb2NrZWQgPSBcImJsb2NrZWRcIjtcbmV4cG9ydCBjb25zdCBldmVudEJsdXIgPSBcImJsdXJcIjtcbmV4cG9ydCBjb25zdCBldmVudENhblBsYXkgPSBcImNhbnBsYXlcIjtcbmV4cG9ydCBjb25zdCBldmVudENhblBsYXlUaHJvdWdoID0gXCJjYW5wbGF5dGhyb3VnaFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Q2hhbmdlID0gXCJjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudENoYXJnaW5nQ2hhbmdlID0gXCJjaGFyZ2luZ2NoYW5nZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Q2hhcmdpbmdUaW1lQ2hhbmdlID0gXCJjaGFyZ2luZ3RpbWVjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudENsaWNrID0gXCJjbGlja1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Q2xvc2UgPSBcImNsb3NlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRDb21wbGV0ZSA9IFwiY29tcGxldGVcIjtcbmV4cG9ydCBjb25zdCBldmVudENvbXBvc2l0aW9uRW5kID0gXCJjb21wb3NpdGlvbmVuZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Q29tcG9zaXRpb25TdGFydCA9IFwiY29tcG9zaXRpb25zdGFydFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Q29tcG9zaXRpb25VcGRhdGUgPSBcImNvbXBvc2l0aW9udXBkYXRlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRDb250ZXh0TWVudSA9IFwiY29udGV4dG1lbnVcIjtcbmV4cG9ydCBjb25zdCBldmVudENvcHkgPSBcImNvcHlcIjtcbmV4cG9ydCBjb25zdCBldmVudEN1dCA9IFwiY3V0XCI7XG5leHBvcnQgY29uc3QgZXZlbnREYmxDbGljayA9IFwiZGJsY2xpY2tcIjtcbmV4cG9ydCBjb25zdCBldmVudERldmljZUNoYW5nZSA9IFwiZGV2aWNlY2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnREZXZpY2VNb3Rpb24gPSBcImRldmljZW1vdGlvblwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50RGV2aWNlT3JpZW50YXRpb24gPSBcImRldmljZW9yaWVudGF0aW9uXCI7XG5leHBvcnQgY29uc3QgZXZlbnREaXNjaGFyZ2luZ1RpbWVDaGFuZ2UgPSBcImRpc2NoYXJnaW5ndGltZWNoYW5nZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50RHJhZyA9IFwiZHJhZ1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50RHJhZ0VuZCA9IFwiZHJhZ2VuZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50RHJhZ0VudGVyID0gXCJkcmFnZW50ZXJcIjtcbmV4cG9ydCBjb25zdCBldmVudERyYWdMZWF2ZSA9IFwiZHJhZ2xlYXZlXCI7XG5leHBvcnQgY29uc3QgZXZlbnREcmFnT3ZlciA9IFwiZHJhZ292ZXJcIjtcbmV4cG9ydCBjb25zdCBldmVudERyYWdTdGFydCA9IFwiZHJhZ3N0YXJ0XCI7XG5leHBvcnQgY29uc3QgZXZlbnREcm9wID0gXCJkcm9wXCI7XG5leHBvcnQgY29uc3QgZXZlbnREdXJhdGlvbkNoYW5nZSA9IFwiZHVyYXRpb25jaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudEVtcHRpZWQgPSBcImVtcHRpZWRcIjtcbmV4cG9ydCBjb25zdCBldmVudEVuZGVkID0gXCJlbmRlZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50RW5kRXZlbnQgPSBcImVuZGV2ZW50XCI7XG5leHBvcnQgY29uc3QgZXZlbnRFcnJvciA9IFwiZXJyb3JcIjtcbmV4cG9ydCBjb25zdCBldmVudEZvY3VzID0gXCJmb2N1c1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Rm9jdXNJbiA9IFwiZm9jdXNpblwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Rm9jdXNPdXQgPSBcImZvY3Vzb3V0XCI7XG5leHBvcnQgY29uc3QgZXZlbnRGdWxsU2NyZWVuQ2hhbmdlID0gXCJmdWxsc2NyZWVuY2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRGdWxsU2NyZWVuRXJyb3IgPSBcImZ1bGxzY3JlZW5lcnJvclwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50R2FtZVBhZENvbm5lY3RlZCA9IFwiZ2FtZXBhZGNvbm5lY3RlZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50R2FtZVBhZERpc2Nvbm5lY3RlZCA9IFwiZ2FtZXBhZGRpc2Nvbm5lY3RlZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50R290UG9pbnRlckNhcHR1cmUgPSBcImdvdHBvaW50ZXJjYXB0dXJlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRIYXNoQ2hhbmdlID0gXCJoYXNoY2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRMb3N0UG9pbnRlckNhcHR1cmUgPSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50SW5wdXQgPSBcImlucHV0XCI7XG5leHBvcnQgY29uc3QgZXZlbnRJbnZhbGlkID0gXCJpbnZhbGlkXCI7XG5leHBvcnQgY29uc3QgZXZlbnRLZXlEb3duID0gXCJrZXlkb3duXCI7XG5leHBvcnQgY29uc3QgZXZlbnRLZXlVcCA9IFwia2V5dXBcIjtcbmV4cG9ydCBjb25zdCBldmVudExldmVsQ2hhbmdlID0gXCJsZXZlbGNoYW5nZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TG9hZCA9IFwibG9hZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TG9hZGVkRGF0YSA9IFwibG9hZGVkZGF0YVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TG9hZGVkTWV0YURhdGEgPSBcImxvYWRlZG1ldGFkYXRhXCI7XG5leHBvcnQgY29uc3QgZXZlbnRMb2FkRW5kID0gXCJsb2FkZW5kXCI7XG5leHBvcnQgY29uc3QgZXZlbnRMb2FkU3RhcnQgPSBcImxvYWRzdGFydFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TWVzc2FnZSA9IFwibWVzc2FnZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TWVzc2FnZUVycm9yID0gXCJtZXNzYWdlZXJyb3JcIjtcbmV4cG9ydCBjb25zdCBldmVudE1vdXNlRG93biA9IFwibW91c2Vkb3duXCI7XG5leHBvcnQgY29uc3QgZXZlbnRNb3VzZUVudGVyID0gXCJtb3VzZWVudGVyXCI7XG5leHBvcnQgY29uc3QgZXZlbnRNb3VzZUxlYXZlID0gXCJtb3VzZWxlYXZlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRNb3VzZU1vdmUgPSBcIm1vdXNlbW92ZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TW91c2VPdXQgPSBcIm1vdXNlb3V0XCI7XG5leHBvcnQgY29uc3QgZXZlbnRNb3VzZU92ZXIgPSBcIm1vdXNlb3ZlclwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50TW91c2VVcCA9IFwibW91c2V1cFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50Tm90aWZpY2F0aW9uQ2xpY2sgPSBcIm5vdGlmaWNhdGlvbmNsaWNrXCI7XG5leHBvcnQgY29uc3QgZXZlbnRPZmZsaW5lID0gXCJvZmZsaW5lXCI7XG5leHBvcnQgY29uc3QgZXZlbnRPbmxpbmUgPSBcIm9ubGluZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50T3BlbiA9IFwib3BlblwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50T3JpZW50YXRpb25DaGFuZ2UgPSBcIm9yaWVudGF0aW9uY2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRQYWdlSGlkZSA9IFwicGFnZWhpZGVcIjtcbmV4cG9ydCBjb25zdCBldmVudFBhZ2VTaG93ID0gXCJwYWdlc2hvd1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UGFzdGUgPSBcInBhc3RlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRQYXVzZSA9IFwicGF1c2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFBvaW50ZXJDYW5jZWwgPSBcInBvaW50ZXJjYW5jZWxcIjtcbmV4cG9ydCBjb25zdCBldmVudFBvaW50ZXJEb3duID0gXCJwb2ludGVyZG93blwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UG9pbnRlckVudGVyID0gXCJwb2ludGVyZW50ZXJcIjtcbmV4cG9ydCBjb25zdCBldmVudFBvaW50ZXJMZWF2ZSA9IFwicG9pbnRlcmxlYXZlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRQb2ludGVyTG9ja0NoYW5nZSA9IFwicG9pbnRlcmxvY2tjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFBvaW50ZXJMb2NrRXJyb3IgPSBcInBvaW50ZXJsb2NrZXJyb3JcIjtcbmV4cG9ydCBjb25zdCBldmVudFBvaW50ZXJNb3ZlID0gXCJwb2ludGVybW92ZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UG9pbnRlck91dCA9IFwicG9pbnRlcm91dFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UG9pbnRlck92ZXIgPSBcInBvaW50ZXJvdmVyXCI7XG5leHBvcnQgY29uc3QgZXZlbnRQb2ludGVyVXAgPSBcInBvaW50ZXJ1cFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UGxheSA9IFwicGxheVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UGxheWluZyA9IFwicGxheWluZ1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UG9wU3RhdGUgPSBcInBvcHN0YXRlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRQcm9ncmVzcyA9IFwicHJvZ3Jlc3NcIjtcbmV4cG9ydCBjb25zdCBldmVudFB1c2ggPSBcInB1c2hcIjtcbmV4cG9ydCBjb25zdCBldmVudFB1c2hTdWJzY3JpcHRpb25DaGFuZ2UgPSBcInB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFJhdGVDaGFuZ2UgPSBcInJhdGVjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFJlYWR5U3RhdGVDaGFuZ2UgPSBcInJlYWR5c3RhdGVjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFJlcGVhdEV2ZW50ID0gXCJyZXBlYXRldmVudFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UmVzZXQgPSBcInJlc2V0XCI7XG5leHBvcnQgY29uc3QgZXZlbnRSZXNpemUgPSBcInJlc2l6ZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50UmVzb3VyY2VUaW1pbmdCdWZmZXJGdWxsID0gXCJyZXNvdXJjZXRpbWluZ2J1ZmZlcmZ1bGxcIjtcbmV4cG9ydCBjb25zdCBldmVudFNjcm9sbCA9IFwic2Nyb2xsXCI7XG5leHBvcnQgY29uc3QgZXZlbnRTZWVrZWQgPSBcInNlZWtlZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U2Vla2luZyA9IFwic2Vla2luZ1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U2VsZWN0ID0gXCJzZWxlY3RcIjtcbmV4cG9ydCBjb25zdCBldmVudFNob3cgPSBcInNob3dcIjtcbmV4cG9ydCBjb25zdCBldmVudFNsb3RDaGFuZ2UgPSBcInNsb3RjaGFuZ2VcIjtcbmV4cG9ydCBjb25zdCBldmVudFN0YWxsZWQgPSBcInN0YWxsZWRcIjtcbmV4cG9ydCBjb25zdCBldmVudFN0YXJ0ID0gXCJzdGFydFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U3RvcmFnZSA9IFwic3RvcmFnZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U3VibWl0ID0gXCJzdWJtaXRcIjtcbmV4cG9ydCBjb25zdCBldmVudFN1Y2Nlc3MgPSBcInN1Y2Nlc3NcIjtcbmV4cG9ydCBjb25zdCBldmVudFN1c3BlbmQgPSBcInN1c3BlbmRcIjtcbmV4cG9ydCBjb25zdCBldmVudFNWR0Fib3J0ID0gXCJTVkdBYm9ydFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U1ZHRXJyb3IgPSBcIlNWR0Vycm9yXCI7XG5leHBvcnQgY29uc3QgZXZlbnRTVkdMb2FkID0gXCJTVkdMb2FkXCI7XG5leHBvcnQgY29uc3QgZXZlbnRTVkdSZXNpemUgPSBcIlNWR1Jlc2l6ZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50U1ZHU2Nyb2xsID0gXCJTVkdTY3JvbGxcIjtcbmV4cG9ydCBjb25zdCBldmVudFNWR1VubG9hZCA9IFwiU1ZHVW5sb2FkXCI7XG5leHBvcnQgY29uc3QgZXZlbnRTVkdab29tID0gXCJTVkdab29tXCI7XG5leHBvcnQgY29uc3QgZXZlbnRUaW1lT3V0ID0gXCJ0aW1lb3V0XCI7XG5leHBvcnQgY29uc3QgZXZlbnRUaW1lVXBkYXRlID0gXCJ0aW1ldXBkYXRlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRUb3VjaENhbmNlbCA9IFwidG91Y2hjYW5jZWxcIjtcbmV4cG9ydCBjb25zdCBldmVudFRvdWNoRW5kID0gXCJ0b3VjaGVuZFwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50VG91Y2hNb3ZlID0gXCJ0b3VjaG1vdmVcIjtcbmV4cG9ydCBjb25zdCBldmVudFRvdWNoU3RhcnQgPSBcInRvdWNoc3RhcnRcIjtcbmV4cG9ydCBjb25zdCBldmVudFRyYW5zaXRpb25FbmQgPSBcInRyYW5zaXRpb25lbmRcIjtcbmV4cG9ydCBjb25zdCBldmVudFVubG9hZCA9IFwidW5sb2FkXCI7XG5leHBvcnQgY29uc3QgZXZlbnRVcGdyYWRlTmVlZGVkID0gXCJ1cGdyYWRlbmVlZGVkXCI7XG5leHBvcnQgY29uc3QgZXZlbnRVc2VyUHJveGltaXR5ID0gXCJ1c2VycHJveGltaXR5XCI7XG5leHBvcnQgY29uc3QgZXZlbnRWZXJzaW9uQ2hhbmdlID0gXCJ2ZXJzaW9uY2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRWaXNpYmlsaXR5Q2hhbmdlID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG5leHBvcnQgY29uc3QgZXZlbnRWb2x1bWVDaGFuZ2UgPSBcInZvbHVtZWNoYW5nZVwiO1xuZXhwb3J0IGNvbnN0IGV2ZW50V2FpdGluZyA9IFwid2FpdGluZ1wiO1xuZXhwb3J0IGNvbnN0IGV2ZW50V2hlZWwgPSBcIndoZWVsXCI7XG4iLCIvKipcbiAqIEVudW1lcmF0ZXMgYXV0byBnZW5lcmF0ZWQgaGVhZGVyIG9wdGlvbnNcbiAqIGRlZmF1bHQgb3B0aW9uIGdlbmVyYXRlcyBhIG5vbi1zdGlja3kgaGVhZGVyIHJvd1xuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBHZW5lcmF0ZUhlYWRlck9wdGlvbnM7XG4oZnVuY3Rpb24gKEdlbmVyYXRlSGVhZGVyT3B0aW9ucykge1xuICAgIEdlbmVyYXRlSGVhZGVyT3B0aW9uc1tcIm5vbmVcIl0gPSBcIm5vbmVcIjtcbiAgICBHZW5lcmF0ZUhlYWRlck9wdGlvbnNbXCJkZWZhdWx0XCJdID0gXCJkZWZhdWx0XCI7XG4gICAgR2VuZXJhdGVIZWFkZXJPcHRpb25zW1wic3RpY2t5XCJdID0gXCJzdGlja3lcIjtcbn0pKEdlbmVyYXRlSGVhZGVyT3B0aW9ucyB8fCAoR2VuZXJhdGVIZWFkZXJPcHRpb25zID0ge30pKTtcbi8qKlxuICogRW51bWVyYXRlcyBwb3NzaWJsZSBjZWxsIHR5cGVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBEYXRhR3JpZENlbGxUeXBlcztcbihmdW5jdGlvbiAoRGF0YUdyaWRDZWxsVHlwZXMpIHtcbiAgICBEYXRhR3JpZENlbGxUeXBlc1tcImRlZmF1bHRcIl0gPSBcImRlZmF1bHRcIjtcbiAgICBEYXRhR3JpZENlbGxUeXBlc1tcImNvbHVtbkhlYWRlclwiXSA9IFwiY29sdW1uaGVhZGVyXCI7XG4gICAgRGF0YUdyaWRDZWxsVHlwZXNbXCJyb3dIZWFkZXJcIl0gPSBcInJvd2hlYWRlclwiO1xufSkoRGF0YUdyaWRDZWxsVHlwZXMgfHwgKERhdGFHcmlkQ2VsbFR5cGVzID0ge30pKTtcbi8qKlxuICogRW51bWVyYXRlcyBwb3NzaWJsZSByb3cgdHlwZXNcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgRGF0YUdyaWRSb3dUeXBlcztcbihmdW5jdGlvbiAoRGF0YUdyaWRSb3dUeXBlcykge1xuICAgIERhdGFHcmlkUm93VHlwZXNbXCJkZWZhdWx0XCJdID0gXCJkZWZhdWx0XCI7XG4gICAgRGF0YUdyaWRSb3dUeXBlc1tcImhlYWRlclwiXSA9IFwiaGVhZGVyXCI7XG4gICAgRGF0YUdyaWRSb3dUeXBlc1tcInN0aWNreUhlYWRlclwiXSA9IFwic3RpY2t5LWhlYWRlclwiO1xufSkoRGF0YUdyaWRSb3dUeXBlcyB8fCAoRGF0YUdyaWRSb3dUeXBlcyA9IHt9KSk7XG4iLCJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhdHRyLCBET00sIG9ic2VydmFibGUsIFJlcGVhdERpcmVjdGl2ZSwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGV2ZW50Rm9jdXMsIGV2ZW50Rm9jdXNPdXQsIGV2ZW50S2V5RG93biwga2V5QXJyb3dEb3duLCBrZXlBcnJvd1VwLCBrZXlFbmQsIGtleUhvbWUsIGtleVBhZ2VEb3duLCBrZXlQYWdlVXAsIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBGb3VuZGF0aW9uRWxlbWVudCB9IGZyb20gXCIuLi9mb3VuZGF0aW9uLWVsZW1lbnQvZm91bmRhdGlvbi1lbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBEYXRhR3JpZFJvd1R5cGVzLCBHZW5lcmF0ZUhlYWRlck9wdGlvbnMgfSBmcm9tIFwiLi9kYXRhLWdyaWQub3B0aW9ucy5qc1wiO1xuZXhwb3J0IHsgRGF0YUdyaWRSb3dUeXBlcywgR2VuZXJhdGVIZWFkZXJPcHRpb25zIH07XG4vKipcbiAqIEEgRGF0YSBHcmlkIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGF0YUdyaWQgZXh0ZW5kcyBGb3VuZGF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRydWUgdGhlIGNvbXBvbmVudCB3aWxsIG5vdCBhZGQgaXRzZWxmIHRvIHRoZSB0YWIgcXVldWUuXG4gICAgICAgICAqIERlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogSFRNTCBBdHRyaWJ1dGU6IG5vLXRhYmJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9UYWJiaW5nID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgV2hldGhlciB0aGUgZ3JpZCBzaG91bGQgYXV0b21hdGljYWxseSBnZW5lcmF0ZSBhIGhlYWRlciByb3cgYW5kIGl0cyB0eXBlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogSFRNTCBBdHRyaWJ1dGU6IGdlbmVyYXRlLWhlYWRlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZW5lcmF0ZUhlYWRlciA9IEdlbmVyYXRlSGVhZGVyT3B0aW9ucy5kZWZhdWx0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRhdGEgYmVpbmcgZGlzcGxheWVkIGluIHRoZSBncmlkXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm93c0RhdGEgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2x1bW4gZGVmaW5pdGlvbnMgb2YgdGhlIGdyaWRcbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9ucyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5kZXggb2YgdGhlIHJvdyB0aGF0IHdpbGwgcmVjZWl2ZSBmb2N1cyB0aGUgbmV4dCB0aW1lIHRoZVxuICAgICAgICAgKiBncmlkIGlzIGZvY3VzZWQuIFRoaXMgdmFsdWUgY2hhbmdlcyBhcyBmb2N1cyBtb3ZlcyB0byBkaWZmZXJlbnRcbiAgICAgICAgICogcm93cyB3aXRoaW4gdGhlIGdyaWQuICBDaGFuZ2luZyB0aGlzIHZhbHVlIHdoZW4gZm9jdXMgaXMgYWxyZWFkeVxuICAgICAgICAgKiB3aXRoaW4gdGhlIGdyaWQgbW92ZXMgZm9jdXMgdG8gdGhlIHNwZWNpZmllZCByb3cuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZm9jdXNSb3dJbmRleCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbHVtbiB0aGF0IHdpbGwgcmVjZWl2ZSBmb2N1cyB0aGUgbmV4dCB0aW1lIHRoZVxuICAgICAgICAgKiBncmlkIGlzIGZvY3VzZWQuIFRoaXMgdmFsdWUgY2hhbmdlcyBhcyBmb2N1cyBtb3ZlcyB0byBkaWZmZXJlbnQgcm93c1xuICAgICAgICAgKiB3aXRoaW4gdGhlIGdyaWQuICBDaGFuZ2luZyB0aGlzIHZhbHVlIHdoZW4gZm9jdXMgaXMgYWxyZWFkeSB3aXRoaW5cbiAgICAgICAgICogdGhlIGdyaWQgbW92ZXMgZm9jdXMgdG8gdGhlIHNwZWNpZmllZCBjb2x1bW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZm9jdXNDb2x1bW5JbmRleCA9IDA7XG4gICAgICAgIHRoaXMucm93c1BsYWNlaG9sZGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmlzVXBkYXRpbmdGb2N1cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlbmRpbmdGb2N1c1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvd2luZGV4VXBkYXRlUXVldWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29sdW1uRGVmaW5pdGlvbnNTdGFsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVkR3JpZFRlbXBsYXRlQ29sdW1ucyA9IFwiXCI7XG4gICAgICAgIHRoaXMuZm9jdXNPbkNlbGwgPSAocm93SW5kZXgsIGNvbHVtbkluZGV4LCBzY3JvbGxJbnRvVmlldykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucm93RWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1Jvd0luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzQ29sdW1uSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZvY3VzUm93SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0aGlzLnJvd0VsZW1lbnRzLmxlbmd0aCAtIDEsIHJvd0luZGV4KSk7XG4gICAgICAgICAgICBjb25zdCBmb2N1c1JvdyA9IHRoaXMucm93RWxlbWVudHNbZm9jdXNSb3dJbmRleF07XG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGZvY3VzUm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPVwiY2VsbFwiXSwgW3JvbGU9XCJncmlkY2VsbFwiXSwgW3JvbGU9XCJjb2x1bW5oZWFkZXJcIl0sIFtyb2xlPVwicm93aGVhZGVyXCJdJyk7XG4gICAgICAgICAgICBjb25zdCBmb2N1c0NvbHVtbkluZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oY2VsbHMubGVuZ3RoIC0gMSwgY29sdW1uSW5kZXgpKTtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzVGFyZ2V0ID0gY2VsbHNbZm9jdXNDb2x1bW5JbmRleF07XG4gICAgICAgICAgICBpZiAoc2Nyb2xsSW50b1ZpZXcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEhlaWdodCAhPT0gdGhpcy5jbGllbnRIZWlnaHQgJiZcbiAgICAgICAgICAgICAgICAoKGZvY3VzUm93SW5kZXggPCB0aGlzLmZvY3VzUm93SW5kZXggJiYgdGhpcy5zY3JvbGxUb3AgPiAwKSB8fFxuICAgICAgICAgICAgICAgICAgICAoZm9jdXNSb3dJbmRleCA+IHRoaXMuZm9jdXNSb3dJbmRleCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPCB0aGlzLnNjcm9sbEhlaWdodCAtIHRoaXMuY2xpZW50SGVpZ2h0KSkpIHtcbiAgICAgICAgICAgICAgICBmb2N1c1RhcmdldC5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiBcImNlbnRlclwiLCBpbmxpbmU6IFwiY2VudGVyXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb2N1c1RhcmdldC5mb2N1cygpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQ2hpbGRMaXN0Q2hhbmdlID0gKG11dGF0aW9ucywgXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbiAgICAgICAgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbnMgJiYgbXV0YXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5ld05vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlLm5vZGVUeXBlID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpID09PSBcInJvd1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5jb2x1bW5EZWZpbml0aW9ucyA9IHRoaXMuY29sdW1uRGVmaW5pdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWVSb3dJbmRleFVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnF1ZXVlUm93SW5kZXhVcGRhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucm93aW5kZXhVcGRhdGVRdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvd2luZGV4VXBkYXRlUXVldWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBET00ucXVldWVVcGRhdGUodGhpcy51cGRhdGVSb3dJbmRleGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVSb3dJbmRleGVzID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0dyaWRUZW1wbGF0ZUNvbHVtbnMgPSB0aGlzLmdyaWRUZW1wbGF0ZUNvbHVtbnM7XG4gICAgICAgICAgICBpZiAobmV3R3JpZFRlbXBsYXRlQ29sdW1ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGdlbmVyYXRlIGNvbHVtbnMgYmFzZWQgb24gbWFudWFsIHJvd3NcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZW5lcmF0ZWRHcmlkVGVtcGxhdGVDb2x1bW5zID09PSBcIlwiICYmIHRoaXMucm93RWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFJvdyA9IHRoaXMucm93RWxlbWVudHNbMF07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVkR3JpZFRlbXBsYXRlQ29sdW1ucyA9IG5ldyBBcnJheShmaXJzdFJvdy5jZWxsRWxlbWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbGwoXCIxZnJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3R3JpZFRlbXBsYXRlQ29sdW1ucyA9IHRoaXMuZ2VuZXJhdGVkR3JpZFRlbXBsYXRlQ29sdW1ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucm93RWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzUm93ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB0aGlzUm93LnJvd0luZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpc1Jvdy5ncmlkVGVtcGxhdGVDb2x1bW5zID0gbmV3R3JpZFRlbXBsYXRlQ29sdW1ucztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5EZWZpbml0aW9uc1N0YWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNSb3cuY29sdW1uRGVmaW5pdGlvbnMgPSB0aGlzLmNvbHVtbkRlZmluaXRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yb3dpbmRleFVwZGF0ZVF1ZXVlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9uc1N0YWxlID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBnZW5lcmF0ZXMgYSBncmlkVGVtcGxhdGVDb2x1bW5zIGJhc2VkIG9uIGNvbHVtbmRhdGEgYXJyYXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2VuZXJhdGVUZW1wbGF0ZUNvbHVtbnMoY29sdW1uRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlQ29sdW1ucyA9IFwiXCI7XG4gICAgICAgIGNvbHVtbkRlZmluaXRpb25zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgdGVtcGxhdGVDb2x1bW5zID0gYCR7dGVtcGxhdGVDb2x1bW5zfSR7dGVtcGxhdGVDb2x1bW5zID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7XCIxZnJcIn1gO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlQ29sdW1ucztcbiAgICB9XG4gICAgbm9UYWJiaW5nQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub1RhYmJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsIFwiLTFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsIHRoaXMuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcyA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICA/IFwiLTFcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZW5lcmF0ZUhlYWRlckNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVHZW5lcmF0ZWRIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJvd0luZGV4ZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByb3dzRGF0YUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbkRlZmluaXRpb25zID09PSBudWxsICYmIHRoaXMucm93c0RhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9ucyA9IERhdGFHcmlkLmdlbmVyYXRlQ29sdW1ucyh0aGlzLnJvd3NEYXRhWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlR2VuZXJhdGVkSGVhZGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29sdW1uRGVmaW5pdGlvbnNDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5jb2x1bW5EZWZpbml0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRHcmlkVGVtcGxhdGVDb2x1bW5zID0gXCJcIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdlbmVyYXRlZEdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBEYXRhR3JpZC5nZW5lcmF0ZVRlbXBsYXRlQ29sdW1ucyh0aGlzLmNvbHVtbkRlZmluaXRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkRlZmluaXRpb25zU3RhbGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5xdWV1ZVJvd0luZGV4VXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVkSGVhZGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIuaGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZSA9IHRoaXMuaGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb2N1c1Jvd0luZGV4Q2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlRm9jdXNVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb2N1c0NvbHVtbkluZGV4Q2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlRm9jdXNVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgaWYgKHRoaXMucm93SXRlbVRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucm93SXRlbVRlbXBsYXRlID0gdGhpcy5kZWZhdWx0Um93SXRlbVRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm93c1BsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnJvd3NQbGFjZWhvbGRlcik7XG4gICAgICAgIHRoaXMudG9nZ2xlR2VuZXJhdGVkSGVhZGVyKCk7XG4gICAgICAgIHRoaXMucm93c1JlcGVhdEJlaGF2aW9yID0gbmV3IFJlcGVhdERpcmVjdGl2ZSh4ID0+IHgucm93c0RhdGEsIHggPT4geC5yb3dJdGVtVGVtcGxhdGUsIHsgcG9zaXRpb25pbmc6IHRydWUgfSkuY3JlYXRlQmVoYXZpb3IodGhpcy5yb3dzUGxhY2Vob2xkZXIpO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqL1xuICAgICAgICB0aGlzLiRmYXN0Q29udHJvbGxlci5hZGRCZWhhdmlvcnMoW3RoaXMucm93c1JlcGVhdEJlaGF2aW9yXSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInJvdy1mb2N1c2VkXCIsIHRoaXMuaGFuZGxlUm93Rm9jdXMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRGb2N1cywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudEtleURvd24sIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudEZvY3VzT3V0LCB0aGlzLmhhbmRsZUZvY3VzT3V0KTtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMub25DaGlsZExpc3RDaGFuZ2UpO1xuICAgICAgICAvLyBvbmx5IG9ic2VydmUgaWYgbm9kZXMgYXJlIGFkZGVkIG9yIHJlbW92ZWRcbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMsIHsgY2hpbGRMaXN0OiB0cnVlIH0pO1xuICAgICAgICBpZiAodGhpcy5ub1RhYmJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcbiAgICAgICAgfVxuICAgICAgICBET00ucXVldWVVcGRhdGUodGhpcy5xdWV1ZVJvd0luZGV4VXBkYXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJvdy1mb2N1c2VkXCIsIHRoaXMuaGFuZGxlUm93Rm9jdXMpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRGb2N1cywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudEtleURvd24sIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudEZvY3VzT3V0LCB0aGlzLmhhbmRsZUZvY3VzT3V0KTtcbiAgICAgICAgLy8gZGlzY29ubmVjdCBvYnNlcnZlclxuICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5yb3dzUGxhY2Vob2xkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmdlbmVyYXRlZEhlYWRlciA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGhhbmRsZVJvd0ZvY3VzKGUpIHtcbiAgICAgICAgdGhpcy5pc1VwZGF0aW5nRm9jdXMgPSB0cnVlO1xuICAgICAgICBjb25zdCBmb2N1c1JvdyA9IGUudGFyZ2V0O1xuICAgICAgICB0aGlzLmZvY3VzUm93SW5kZXggPSB0aGlzLnJvd0VsZW1lbnRzLmluZGV4T2YoZm9jdXNSb3cpO1xuICAgICAgICB0aGlzLmZvY3VzQ29sdW1uSW5kZXggPSBmb2N1c1Jvdy5mb2N1c0NvbHVtbkluZGV4O1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsIFwiLTFcIik7XG4gICAgICAgIHRoaXMuaXNVcGRhdGluZ0ZvY3VzID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGhhbmRsZUZvY3VzKGUpIHtcbiAgICAgICAgdGhpcy5mb2N1c09uQ2VsbCh0aGlzLmZvY3VzUm93SW5kZXgsIHRoaXMuZm9jdXNDb2x1bW5JbmRleCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGhhbmRsZUZvY3VzT3V0KGUpIHtcbiAgICAgICAgaWYgKGUucmVsYXRlZFRhcmdldCA9PT0gbnVsbCB8fCAhdGhpcy5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsIHRoaXMubm9UYWJiaW5nID8gXCItMVwiIDogXCIwXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGhhbmRsZUtleWRvd24oZSkge1xuICAgICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld0ZvY3VzUm93SW5kZXg7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gdGhpcy5yb3dFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCBjdXJyZW50R3JpZEJvdHRvbSA9IHRoaXMub2Zmc2V0SGVpZ2h0ICsgdGhpcy5zY3JvbGxUb3A7XG4gICAgICAgIGNvbnN0IGxhc3RSb3cgPSB0aGlzLnJvd0VsZW1lbnRzW21heEluZGV4XTtcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSBrZXlBcnJvd1VwOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAvLyBmb2N1cyB1cCBvbmUgcm93XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c09uQ2VsbCh0aGlzLmZvY3VzUm93SW5kZXggLSAxLCB0aGlzLmZvY3VzQ29sdW1uSW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBrZXlBcnJvd0Rvd246XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIC8vIGZvY3VzIGRvd24gb25lIHJvd1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNPbkNlbGwodGhpcy5mb2N1c1Jvd0luZGV4ICsgMSwgdGhpcy5mb2N1c0NvbHVtbkluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Uga2V5UGFnZVVwOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3dFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c09uQ2VsbCgwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c1Jvd0luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNPbkNlbGwoMCwgdGhpcy5mb2N1c0NvbHVtbkluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3Rm9jdXNSb3dJbmRleCA9IHRoaXMuZm9jdXNSb3dJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgZm9yIChuZXdGb2N1c1Jvd0luZGV4OyBuZXdGb2N1c1Jvd0luZGV4ID49IDA7IG5ld0ZvY3VzUm93SW5kZXgtLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzUm93ID0gdGhpcy5yb3dFbGVtZW50c1tuZXdGb2N1c1Jvd0luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNSb3cub2Zmc2V0VG9wIDwgdGhpcy5zY3JvbGxUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUm93Lm9mZnNldFRvcCArIHRoaXNSb3cuY2xpZW50SGVpZ2h0IC0gdGhpcy5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzT25DZWxsKG5ld0ZvY3VzUm93SW5kZXgsIHRoaXMuZm9jdXNDb2x1bW5JbmRleCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBrZXlQYWdlRG93bjpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm93RWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNPbkNlbGwoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZm9jdXMgZG93biBvbmUgXCJwYWdlXCJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c1Jvd0luZGV4ID49IG1heEluZGV4IHx8XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSb3cub2Zmc2V0VG9wICsgbGFzdFJvdy5vZmZzZXRIZWlnaHQgPD0gY3VycmVudEdyaWRCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c09uQ2VsbChtYXhJbmRleCwgdGhpcy5mb2N1c0NvbHVtbkluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3Rm9jdXNSb3dJbmRleCA9IHRoaXMuZm9jdXNSb3dJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgZm9yIChuZXdGb2N1c1Jvd0luZGV4OyBuZXdGb2N1c1Jvd0luZGV4IDw9IG1heEluZGV4OyBuZXdGb2N1c1Jvd0luZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc1JvdyA9IHRoaXMucm93RWxlbWVudHNbbmV3Rm9jdXNSb3dJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUm93Lm9mZnNldFRvcCArIHRoaXNSb3cub2Zmc2V0SGVpZ2h0ID4gY3VycmVudEdyaWRCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGlja3lIZWFkZXJPZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVIZWFkZXIgPT09IEdlbmVyYXRlSGVhZGVyT3B0aW9ucy5zdGlja3kgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlZEhlYWRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0aWNreUhlYWRlck9mZnNldCA9IHRoaXMuZ2VuZXJhdGVkSGVhZGVyLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wID0gdGhpc1Jvdy5vZmZzZXRUb3AgLSBzdGlja3lIZWFkZXJPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzT25DZWxsKG5ld0ZvY3VzUm93SW5kZXgsIHRoaXMuZm9jdXNDb2x1bW5JbmRleCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBrZXlIb21lOlxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBmb2N1cyBmaXJzdCBjZWxsIG9mIGZpcnN0IHJvd1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzT25DZWxsKDAsIDAsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Uga2V5RW5kOlxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgdGhpcy5jb2x1bW5EZWZpbml0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvY3VzIGxhc3QgY2VsbCBvZiBsYXN0IHJvd1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzT25DZWxsKHRoaXMucm93RWxlbWVudHMubGVuZ3RoIC0gMSwgdGhpcy5jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGggLSAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWVGb2N1c1VwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVcGRhdGluZ0ZvY3VzICYmXG4gICAgICAgICAgICAodGhpcy5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB8fCB0aGlzID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdGb2N1c1VwZGF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0ZvY3VzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB0aGlzLnVwZGF0ZUZvY3VzKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUZvY3VzKCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdGb2N1c1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvY3VzT25DZWxsKHRoaXMuZm9jdXNSb3dJbmRleCwgdGhpcy5mb2N1c0NvbHVtbkluZGV4LCB0cnVlKTtcbiAgICB9XG4gICAgdG9nZ2xlR2VuZXJhdGVkSGVhZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5nZW5lcmF0ZWRIZWFkZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5nZW5lcmF0ZWRIZWFkZXIpO1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdlbmVyYXRlSGVhZGVyICE9PSBHZW5lcmF0ZUhlYWRlck9wdGlvbnMubm9uZSAmJlxuICAgICAgICAgICAgdGhpcy5yb3dzRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRIZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnJvd0VsZW1lbnRUYWcpO1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIgPSBnZW5lcmF0ZWRIZWFkZXJFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIuY29sdW1uRGVmaW5pdGlvbnMgPSB0aGlzLmNvbHVtbkRlZmluaXRpb25zO1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZWRIZWFkZXIuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHRoaXMuZ3JpZFRlbXBsYXRlQ29sdW1ucztcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVkSGVhZGVyLnJvd1R5cGUgPVxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVIZWFkZXIgPT09IEdlbmVyYXRlSGVhZGVyT3B0aW9ucy5zdGlja3lcbiAgICAgICAgICAgICAgICAgICAgPyBEYXRhR3JpZFJvd1R5cGVzLnN0aWNreUhlYWRlclxuICAgICAgICAgICAgICAgICAgICA6IERhdGFHcmlkUm93VHlwZXMuaGVhZGVyO1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlyc3RDaGlsZCAhPT0gbnVsbCB8fCB0aGlzLnJvd3NQbGFjZWhvbGRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKGdlbmVyYXRlZEhlYWRlckVsZW1lbnQsIHRoaXMuZmlyc3RDaGlsZCAhPT0gbnVsbCA/IHRoaXMuZmlyc3RDaGlsZCA6IHRoaXMucm93c1BsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogIGdlbmVyYXRlcyBhIGJhc2ljIGNvbHVtbiBkZWZpbml0aW9uIGJ5IGV4YW1pbmluZyBzYW1wbGUgcm93IGRhdGFcbiAqL1xuRGF0YUdyaWQuZ2VuZXJhdGVDb2x1bW5zID0gKHJvdykgPT4ge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyb3cpLm1hcCgocHJvcGVydHksIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2x1bW5EYXRhS2V5OiBwcm9wZXJ0eSxcbiAgICAgICAgICAgIGdyaWRDb2x1bW46IGAke2luZGV4fWAsXG4gICAgICAgIH07XG4gICAgfSk7XG59O1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJuby10YWJiaW5nXCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBEYXRhR3JpZC5wcm90b3R5cGUsIFwibm9UYWJiaW5nXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImdlbmVyYXRlLWhlYWRlclwiIH0pXG5dLCBEYXRhR3JpZC5wcm90b3R5cGUsIFwiZ2VuZXJhdGVIZWFkZXJcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCIgfSlcbl0sIERhdGFHcmlkLnByb3RvdHlwZSwgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZC5wcm90b3R5cGUsIFwicm93c0RhdGFcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkLnByb3RvdHlwZSwgXCJjb2x1bW5EZWZpbml0aW9uc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWQucHJvdG90eXBlLCBcInJvd0l0ZW1UZW1wbGF0ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWQucHJvdG90eXBlLCBcImNlbGxJdGVtVGVtcGxhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkLnByb3RvdHlwZSwgXCJoZWFkZXJDZWxsSXRlbVRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZC5wcm90b3R5cGUsIFwiZm9jdXNSb3dJbmRleFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWQucHJvdG90eXBlLCBcImZvY3VzQ29sdW1uSW5kZXhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkLnByb3RvdHlwZSwgXCJkZWZhdWx0Um93SXRlbVRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZC5wcm90b3R5cGUsIFwicm93RWxlbWVudFRhZ1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWQucHJvdG90eXBlLCBcInJvd0VsZW1lbnRzXCIsIHZvaWQgMCk7XG4iLCJpbXBvcnQgeyBBdHRhY2hlZEJlaGF2aW9ySFRNTERpcmVjdGl2ZSB9IGZyb20gXCIuL2h0bWwtZGlyZWN0aXZlLmpzXCI7XG5pbXBvcnQgeyBOb2RlT2JzZXJ2YXRpb25CZWhhdmlvciB9IGZyb20gXCIuL25vZGUtb2JzZXJ2YXRpb24uanNcIjtcbi8qKlxuICogVGhlIHJ1bnRpbWUgYmVoYXZpb3IgZm9yIGNoaWxkIG5vZGUgb2JzZXJ2YXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGlsZHJlbkJlaGF2aW9yIGV4dGVuZHMgTm9kZU9ic2VydmF0aW9uQmVoYXZpb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ2hpbGRyZW5CZWhhdmlvci5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGVsZW1lbnQgdGFyZ2V0IHRvIG9ic2VydmUgY2hpbGRyZW4gb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBvYnNlcnZpbmcgdGhlIGVsZW1lbnQgY2hpbGRyZW4uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHRhcmdldCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICBvcHRpb25zLmNoaWxkTGlzdCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJlZ2lucyBvYnNlcnZhdGlvbiBvZiB0aGUgbm9kZXMuXG4gICAgICovXG4gICAgb2JzZXJ2ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmhhbmRsZUV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnRhcmdldCwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgb2JzZXJ2YXRpb24gb2YgdGhlIG5vZGVzLlxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG5vZGVzIHRoYXQgc2hvdWxkIGJlIGFzc2lnbmVkIHRvIHRoZSB0YXJnZXQuXG4gICAgICovXG4gICAgZ2V0Tm9kZXMoKSB7XG4gICAgICAgIGlmIChcInN1YnRyZWVcIiBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5vcHRpb25zLnNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy50YXJnZXQuY2hpbGROb2Rlcyk7XG4gICAgfVxufVxuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IG9ic2VydmVzIHRoZSBgY2hpbGROb2Rlc2Agb2YgYW4gZWxlbWVudCBhbmQgdXBkYXRlcyBhIHByb3BlcnR5XG4gKiB3aGVuZXZlciB0aGV5IGNoYW5nZS5cbiAqIEBwYXJhbSBwcm9wZXJ0eU9yT3B0aW9ucyAtIFRoZSBvcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIGNoaWxkIG5vZGUgb2JzZXJ2YXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZHJlbihwcm9wZXJ0eU9yT3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHlPck9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcHJvcGVydHlPck9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wZXJ0eTogcHJvcGVydHlPck9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXR0YWNoZWRCZWhhdmlvckhUTUxEaXJlY3RpdmUoXCJmYXN0LWNoaWxkcmVuXCIsIENoaWxkcmVuQmVoYXZpb3IsIHByb3BlcnR5T3JPcHRpb25zKTtcbn1cbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIG9ic2VydmFibGUsIFJlcGVhdERpcmVjdGl2ZSwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGV2ZW50Rm9jdXNPdXQsIGV2ZW50S2V5RG93biwga2V5QXJyb3dMZWZ0LCBrZXlBcnJvd1JpZ2h0LCBrZXlFbmQsIGtleUhvbWUsIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBGb3VuZGF0aW9uRWxlbWVudCB9IGZyb20gXCIuLi9mb3VuZGF0aW9uLWVsZW1lbnQvZm91bmRhdGlvbi1lbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBEYXRhR3JpZFJvd1R5cGVzIH0gZnJvbSBcIi4vZGF0YS1ncmlkLm9wdGlvbnMuanNcIjtcbi8qKlxuICogQSBEYXRhIEdyaWQgUm93IEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGF0YUdyaWRSb3cgZXh0ZW5kcyBGb3VuZGF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiByb3dcbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogcm93LXR5cGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm93VHlwZSA9IERhdGFHcmlkUm93VHlwZXMuZGVmYXVsdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYXNlIGRhdGEgZm9yIHRoaXMgcm93XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm93RGF0YSA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29sdW1uIGRlZmluaXRpb25zIG9mIHRoZSByb3dcbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9ucyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGZvY3VzIGlzIG9uL2luIGEgY2VsbCB3aXRoaW4gdGhpcyByb3cuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0FjdGl2ZVJvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNlbGxzUmVwZWF0QmVoYXZpb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmNlbGxzUGxhY2Vob2xkZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZvY3VzQ29sdW1uSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnJlZm9jdXNPbkxvYWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVSb3dTdHlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHRoaXMuZ3JpZFRlbXBsYXRlQ29sdW1ucztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ3JpZFRlbXBsYXRlQ29sdW1uc0NoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSb3dTdHlsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJvd1R5cGVDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSXRlbVRlbXBsYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcm93RGF0YUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvd0RhdGEgIT09IG51bGwgJiYgdGhpcy5pc0FjdGl2ZVJvdykge1xuICAgICAgICAgICAgdGhpcy5yZWZvY3VzT25Mb2FkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjZWxsSXRlbVRlbXBsYXRlQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJdGVtVGVtcGxhdGUoKTtcbiAgICB9XG4gICAgaGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZUNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSXRlbVRlbXBsYXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICAvLyBub3RlIHRoYXQgcm93IGVsZW1lbnRzIGNhbiBiZSByZXVzZWQgd2l0aCBhIGRpZmZlcmVudCBkYXRhIG9iamVjdFxuICAgICAgICAvLyBhcyB0aGUgcGFyZW50IGdyaWQncyByZXBlYXQgYmVoYXZpb3IgcmVhY3RzIHRvIGNoYW5nZXMgaW4gdGhlIGRhdGEgc2V0LlxuICAgICAgICBpZiAodGhpcy5jZWxsc1JlcGVhdEJlaGF2aW9yID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNlbGxzUGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmNlbGxzUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVJdGVtVGVtcGxhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuY2VsbHNSZXBlYXRCZWhhdmlvciA9IG5ldyBSZXBlYXREaXJlY3RpdmUoeCA9PiB4LmNvbHVtbkRlZmluaXRpb25zLCB4ID0+IHguYWN0aXZlQ2VsbEl0ZW1UZW1wbGF0ZSwgeyBwb3NpdGlvbmluZzogdHJ1ZSB9KS5jcmVhdGVCZWhhdmlvcih0aGlzLmNlbGxzUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbiAgICAgICAgICAgIHRoaXMuJGZhc3RDb250cm9sbGVyLmFkZEJlaGF2aW9ycyhbdGhpcy5jZWxsc1JlcGVhdEJlaGF2aW9yXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2VsbC1mb2N1c2VkXCIsIHRoaXMuaGFuZGxlQ2VsbEZvY3VzKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50Rm9jdXNPdXQsIHRoaXMuaGFuZGxlRm9jdXNvdXQpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRLZXlEb3duLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLnVwZGF0ZVJvd1N0eWxlKCk7XG4gICAgICAgIGlmICh0aGlzLnJlZm9jdXNPbkxvYWQpIHtcbiAgICAgICAgICAgIC8vIGlmIGZvY3VzIHdhcyBvbiB0aGUgcm93IHdoZW4gZGF0YSBjaGFuZ2VkIHRyeSB0byByZWZvY3VzIG9uIHNhbWUgY2VsbFxuICAgICAgICAgICAgdGhpcy5yZWZvY3VzT25Mb2FkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5jZWxsRWxlbWVudHMubGVuZ3RoID4gdGhpcy5mb2N1c0NvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsRWxlbWVudHNbdGhpcy5mb2N1c0NvbHVtbkluZGV4XS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjZWxsLWZvY3VzZWRcIiwgdGhpcy5oYW5kbGVDZWxsRm9jdXMpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRGb2N1c091dCwgdGhpcy5oYW5kbGVGb2N1c291dCk7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudEtleURvd24sIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgfVxuICAgIGhhbmRsZUZvY3Vzb3V0KGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZVJvdyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5mb2N1c0NvbHVtbkluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDZWxsRm9jdXMoZSkge1xuICAgICAgICB0aGlzLmlzQWN0aXZlUm93ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mb2N1c0NvbHVtbkluZGV4ID0gdGhpcy5jZWxsRWxlbWVudHMuaW5kZXhPZihlLnRhcmdldCk7XG4gICAgICAgIHRoaXMuJGVtaXQoXCJyb3ctZm9jdXNlZFwiLCB0aGlzKTtcbiAgICB9XG4gICAgaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3Rm9jdXNDb2x1bW5JbmRleCA9IDA7XG4gICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgIGNhc2Uga2V5QXJyb3dMZWZ0OlxuICAgICAgICAgICAgICAgIC8vIGZvY3VzIGxlZnQgb25lIGNlbGxcbiAgICAgICAgICAgICAgICBuZXdGb2N1c0NvbHVtbkluZGV4ID0gTWF0aC5tYXgoMCwgdGhpcy5mb2N1c0NvbHVtbkluZGV4IC0gMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsRWxlbWVudHNbbmV3Rm9jdXNDb2x1bW5JbmRleF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGtleUFycm93UmlnaHQ6XG4gICAgICAgICAgICAgICAgLy8gZm9jdXMgcmlnaHQgb25lIGNlbGxcbiAgICAgICAgICAgICAgICBuZXdGb2N1c0NvbHVtbkluZGV4ID0gTWF0aC5taW4odGhpcy5jZWxsRWxlbWVudHMubGVuZ3RoIC0gMSwgdGhpcy5mb2N1c0NvbHVtbkluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsRWxlbWVudHNbbmV3Rm9jdXNDb2x1bW5JbmRleF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGtleUhvbWU6XG4gICAgICAgICAgICAgICAgaWYgKCFlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWxsRWxlbWVudHNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Uga2V5RW5kOlxuICAgICAgICAgICAgICAgIGlmICghZS5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvY3VzIGxhc3QgY2VsbCBvZiB0aGUgcm93XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2VsbEVsZW1lbnRzW3RoaXMuY2VsbEVsZW1lbnRzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSXRlbVRlbXBsYXRlKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZUNlbGxJdGVtVGVtcGxhdGUgPVxuICAgICAgICAgICAgdGhpcy5yb3dUeXBlID09PSBEYXRhR3JpZFJvd1R5cGVzLmRlZmF1bHQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxJdGVtVGVtcGxhdGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gdGhpcy5jZWxsSXRlbVRlbXBsYXRlXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJvd1R5cGUgPT09IERhdGFHcmlkUm93VHlwZXMuZGVmYXVsdCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxJdGVtVGVtcGxhdGUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZGVmYXVsdENlbGxJdGVtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhlYWRlckNlbGxJdGVtVGVtcGxhdGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmhlYWRlckNlbGxJdGVtVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5kZWZhdWx0SGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImdyaWQtdGVtcGxhdGUtY29sdW1uc1wiIH0pXG5dLCBEYXRhR3JpZFJvdy5wcm90b3R5cGUsIFwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJyb3ctdHlwZVwiIH0pXG5dLCBEYXRhR3JpZFJvdy5wcm90b3R5cGUsIFwicm93VHlwZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWRSb3cucHJvdG90eXBlLCBcInJvd0RhdGFcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkUm93LnByb3RvdHlwZSwgXCJjb2x1bW5EZWZpbml0aW9uc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWRSb3cucHJvdG90eXBlLCBcImNlbGxJdGVtVGVtcGxhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkUm93LnByb3RvdHlwZSwgXCJoZWFkZXJDZWxsSXRlbVRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZFJvdy5wcm90b3R5cGUsIFwicm93SW5kZXhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkUm93LnByb3RvdHlwZSwgXCJpc0FjdGl2ZVJvd1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWRSb3cucHJvdG90eXBlLCBcImFjdGl2ZUNlbGxJdGVtVGVtcGxhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIERhdGFHcmlkUm93LnByb3RvdHlwZSwgXCJkZWZhdWx0Q2VsbEl0ZW1UZW1wbGF0ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWRSb3cucHJvdG90eXBlLCBcImRlZmF1bHRIZWFkZXJDZWxsSXRlbVRlbXBsYXRlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZFJvdy5wcm90b3R5cGUsIFwiY2VsbEVsZW1lbnRzXCIsIHZvaWQgMCk7XG4iLCJpbXBvcnQgeyBjaGlsZHJlbiwgZWxlbWVudHMsIGh0bWwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IERhdGFHcmlkUm93IH0gZnJvbSBcIi4vZGF0YS1ncmlkLXJvdy5qc1wiO1xuZnVuY3Rpb24gY3JlYXRlUm93SXRlbVRlbXBsYXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCByb3dUYWcgPSBjb250ZXh0LnRhZ0ZvcihEYXRhR3JpZFJvdyk7XG4gICAgcmV0dXJuIGh0bWwgYFxuICAgIDwke3Jvd1RhZ31cbiAgICAgICAgOnJvd0RhdGE9XCIke3ggPT4geH1cIlxuICAgICAgICA6Y2VsbEl0ZW1UZW1wbGF0ZT1cIiR7KHgsIGMpID0+IGMucGFyZW50LmNlbGxJdGVtVGVtcGxhdGV9XCJcbiAgICAgICAgOmhlYWRlckNlbGxJdGVtVGVtcGxhdGU9XCIkeyh4LCBjKSA9PiBjLnBhcmVudC5oZWFkZXJDZWxsSXRlbVRlbXBsYXRlfVwiXG4gICAgPjwvJHtyb3dUYWd9PlxuYDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jRGF0YUdyaWR9IGNvbXBvbmVudCB1c2luZ1xuICogdGhlIHByb3ZpZGVkIHByZWZpeC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhR3JpZFRlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCByb3dJdGVtVGVtcGxhdGUgPSBjcmVhdGVSb3dJdGVtVGVtcGxhdGUoY29udGV4dCk7XG4gICAgY29uc3Qgcm93VGFnID0gY29udGV4dC50YWdGb3IoRGF0YUdyaWRSb3cpO1xuICAgIHJldHVybiBodG1sIGBcbiAgICAgICAgPHRlbXBsYXRlXG4gICAgICAgICAgICByb2xlPVwiZ3JpZFwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgOnJvd0VsZW1lbnRUYWc9XCIkeygpID0+IHJvd1RhZ31cIlxuICAgICAgICAgICAgOmRlZmF1bHRSb3dJdGVtVGVtcGxhdGU9XCIke3Jvd0l0ZW1UZW1wbGF0ZX1cIlxuICAgICAgICAgICAgJHtjaGlsZHJlbih7XG4gICAgICAgIHByb3BlcnR5OiBcInJvd0VsZW1lbnRzXCIsXG4gICAgICAgIGZpbHRlcjogZWxlbWVudHMoXCJbcm9sZT1yb3ddXCIpLFxuICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgYDtcbn07XG4iLCJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhdHRyLCBodG1sLCBvYnNlcnZhYmxlIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyBldmVudEZvY3VzSW4sIGV2ZW50Rm9jdXNPdXQsIGV2ZW50S2V5RG93biwga2V5RW50ZXIsIGtleUVzY2FwZSwga2V5RnVuY3Rpb24yLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgRGF0YUdyaWRDZWxsVHlwZXMgfSBmcm9tIFwiLi9kYXRhLWdyaWQub3B0aW9ucy5qc1wiO1xuZXhwb3J0IHsgRGF0YUdyaWRDZWxsVHlwZXMgfTtcbmNvbnN0IGRlZmF1bHRDZWxsQ29udGVudHNUZW1wbGF0ZSA9IGh0bWwgYFxuICAgIDx0ZW1wbGF0ZT5cbiAgICAgICAgJHt4ID0+IHgucm93RGF0YSA9PT0gbnVsbCB8fFxuICAgIHguY29sdW1uRGVmaW5pdGlvbiA9PT0gbnVsbCB8fFxuICAgIHguY29sdW1uRGVmaW5pdGlvbi5jb2x1bW5EYXRhS2V5ID09PSBudWxsXG4gICAgPyBudWxsXG4gICAgOiB4LnJvd0RhdGFbeC5jb2x1bW5EZWZpbml0aW9uLmNvbHVtbkRhdGFLZXldfVxuICAgIDwvdGVtcGxhdGU+XG5gO1xuY29uc3QgZGVmYXVsdEhlYWRlckNlbGxDb250ZW50c1RlbXBsYXRlID0gaHRtbCBgXG4gICAgPHRlbXBsYXRlPlxuICAgICAgICAke3ggPT4geC5jb2x1bW5EZWZpbml0aW9uID09PSBudWxsXG4gICAgPyBudWxsXG4gICAgOiB4LmNvbHVtbkRlZmluaXRpb24udGl0bGUgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHguY29sdW1uRGVmaW5pdGlvbi5jb2x1bW5EYXRhS2V5XG4gICAgICAgIDogeC5jb2x1bW5EZWZpbml0aW9uLnRpdGxlfVxuICAgIDwvdGVtcGxhdGU+XG5gO1xuLyoqXG4gKiBBIERhdGEgR3JpZCBDZWxsIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGF0YUdyaWRDZWxsIGV4dGVuZHMgRm91bmRhdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgY2VsbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiBjZWxsLXR5cGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2VsbFR5cGUgPSBEYXRhR3JpZENlbGxUeXBlcy5kZWZhdWx0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGJhc2UgZGF0YSBmb3IgdGhlIHBhcmVudCByb3dcbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yb3dEYXRhID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBiYXNlIGRhdGEgZm9yIHRoZSBjb2x1bW5cbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZUNlbGwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXN0b21DZWxsVmlldyA9IG51bGw7XG4gICAgICAgIHRoaXMudXBkYXRlQ2VsbFN0eWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5ncmlkQ29sdW1uID0gdGhpcy5ncmlkQ29sdW1uO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjZWxsVHlwZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDZWxsVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdyaWRDb2x1bW5DaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2VsbFN0eWxlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29sdW1uRGVmaW5pdGlvbkNoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDZWxsVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudEZvY3VzSW4sIHRoaXMuaGFuZGxlRm9jdXNpbik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudEZvY3VzT3V0LCB0aGlzLmhhbmRsZUZvY3Vzb3V0KTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50S2V5RG93biwgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgICAgdGhpcy5zdHlsZS5ncmlkQ29sdW1uID0gYCR7KChfYSA9IHRoaXMuY29sdW1uRGVmaW5pdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdyaWRDb2x1bW4pID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiB0aGlzLmNvbHVtbkRlZmluaXRpb24uZ3JpZENvbHVtbn1gO1xuICAgICAgICB0aGlzLnVwZGF0ZUNlbGxWaWV3KCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2VsbFN0eWxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRGb2N1c0luLCB0aGlzLmhhbmRsZUZvY3VzaW4pO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRGb2N1c091dCwgdGhpcy5oYW5kbGVGb2N1c291dCk7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudEtleURvd24sIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdENlbGxWaWV3KCk7XG4gICAgfVxuICAgIGhhbmRsZUZvY3VzaW4oZSkge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZUNlbGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQWN0aXZlQ2VsbCA9IHRydWU7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jZWxsVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBEYXRhR3JpZENlbGxUeXBlcy5jb2x1bW5IZWFkZXI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uRGVmaW5pdGlvbiAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbkRlZmluaXRpb24uaGVhZGVyQ2VsbEludGVybmFsRm9jdXNRdWV1ZSAhPT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5jb2x1bW5EZWZpbml0aW9uLmhlYWRlckNlbGxGb2N1c1RhcmdldENhbGxiYWNrID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgZm9jdXMgdG8gdGhlIGZvY3VzIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2N1c1RhcmdldCA9IHRoaXMuY29sdW1uRGVmaW5pdGlvbi5oZWFkZXJDZWxsRm9jdXNUYXJnZXRDYWxsYmFjayh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzVGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c1RhcmdldC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5EZWZpbml0aW9uICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uRGVmaW5pdGlvbi5jZWxsSW50ZXJuYWxGb2N1c1F1ZXVlICE9PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmNvbHVtbkRlZmluaXRpb24uY2VsbEZvY3VzVGFyZ2V0Q2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGZvY3VzIHRvIHRoZSBmb2N1cyB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNUYXJnZXQgPSB0aGlzLmNvbHVtbkRlZmluaXRpb24uY2VsbEZvY3VzVGFyZ2V0Q2FsbGJhY2sodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c1RhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNUYXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRlbWl0KFwiY2VsbC1mb2N1c2VkXCIsIHRoaXMpO1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c291dChlKSB7XG4gICAgICAgIGlmICh0aGlzICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICF0aGlzLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlQ2VsbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUtleWRvd24oZSkge1xuICAgICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkRlZmluaXRpb24gPT09IG51bGwgfHxcbiAgICAgICAgICAgICh0aGlzLmNlbGxUeXBlID09PSBEYXRhR3JpZENlbGxUeXBlcy5kZWZhdWx0ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9uLmNlbGxJbnRlcm5hbEZvY3VzUXVldWUgIT09IHRydWUpIHx8XG4gICAgICAgICAgICAodGhpcy5jZWxsVHlwZSA9PT0gRGF0YUdyaWRDZWxsVHlwZXMuY29sdW1uSGVhZGVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5EZWZpbml0aW9uLmhlYWRlckNlbGxJbnRlcm5hbEZvY3VzUXVldWUgIT09IHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSBrZXlFbnRlcjpcbiAgICAgICAgICAgIGNhc2Uga2V5RnVuY3Rpb24yOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY2VsbFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhR3JpZENlbGxUeXBlcy5jb2x1bW5IZWFkZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5EZWZpbml0aW9uLmhlYWRlckNlbGxGb2N1c1RhcmdldENhbGxiYWNrICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzVGFyZ2V0ID0gdGhpcy5jb2x1bW5EZWZpbml0aW9uLmhlYWRlckNlbGxGb2N1c1RhcmdldENhbGxiYWNrKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c1RhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c1RhcmdldC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbkRlZmluaXRpb24uY2VsbEZvY3VzVGFyZ2V0Q2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzVGFyZ2V0ID0gdGhpcy5jb2x1bW5EZWZpbml0aW9uLmNlbGxGb2N1c1RhcmdldENhbGxiYWNrKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c1RhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c1RhcmdldC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGtleUVzY2FwZTpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVDZWxsVmlldygpIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0Q2VsbFZpZXcoKTtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uRGVmaW5pdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5jZWxsVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBEYXRhR3JpZENlbGxUeXBlcy5jb2x1bW5IZWFkZXI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uRGVmaW5pdGlvbi5oZWFkZXJDZWxsVGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbUNlbGxWaWV3ID0gdGhpcy5jb2x1bW5EZWZpbml0aW9uLmhlYWRlckNlbGxUZW1wbGF0ZS5yZW5kZXIodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbUNlbGxWaWV3ID0gZGVmYXVsdEhlYWRlckNlbGxDb250ZW50c1RlbXBsYXRlLnJlbmRlcih0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIGNhc2UgRGF0YUdyaWRDZWxsVHlwZXMucm93SGVhZGVyOlxuICAgICAgICAgICAgY2FzZSBEYXRhR3JpZENlbGxUeXBlcy5kZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbkRlZmluaXRpb24uY2VsbFRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXN0b21DZWxsVmlldyA9IHRoaXMuY29sdW1uRGVmaW5pdGlvbi5jZWxsVGVtcGxhdGUucmVuZGVyKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXN0b21DZWxsVmlldyA9IGRlZmF1bHRDZWxsQ29udGVudHNUZW1wbGF0ZS5yZW5kZXIodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RDZWxsVmlldygpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tQ2VsbFZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tQ2VsbFZpZXcuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21DZWxsVmlldyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImNlbGwtdHlwZVwiIH0pXG5dLCBEYXRhR3JpZENlbGwucHJvdG90eXBlLCBcImNlbGxUeXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcImdyaWQtY29sdW1uXCIgfSlcbl0sIERhdGFHcmlkQ2VsbC5wcm90b3R5cGUsIFwiZ3JpZENvbHVtblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGF0YUdyaWRDZWxsLnByb3RvdHlwZSwgXCJyb3dEYXRhXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEYXRhR3JpZENlbGwucHJvdG90eXBlLCBcImNvbHVtbkRlZmluaXRpb25cIiwgdm9pZCAwKTtcbiIsImltcG9ydCB7IGNoaWxkcmVuLCBlbGVtZW50cywgaHRtbCwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgRGF0YUdyaWRDZWxsIH0gZnJvbSBcIi4vZGF0YS1ncmlkLWNlbGwuanNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUNlbGxJdGVtVGVtcGxhdGUoY29udGV4dCkge1xuICAgIGNvbnN0IGNlbGxUYWcgPSBjb250ZXh0LnRhZ0ZvcihEYXRhR3JpZENlbGwpO1xuICAgIHJldHVybiBodG1sIGBcbiAgICA8JHtjZWxsVGFnfVxuICAgICAgICBjZWxsLXR5cGU9XCIke3ggPT4gKHguaXNSb3dIZWFkZXIgPyBcInJvd2hlYWRlclwiIDogdW5kZWZpbmVkKX1cIlxuICAgICAgICBncmlkLWNvbHVtbj1cIiR7KHgsIGMpID0+IGMuaW5kZXggKyAxfVwiXG4gICAgICAgIDpyb3dEYXRhPVwiJHsoeCwgYykgPT4gYy5wYXJlbnQucm93RGF0YX1cIlxuICAgICAgICA6Y29sdW1uRGVmaW5pdGlvbj1cIiR7eCA9PiB4fVwiXG4gICAgPjwvJHtjZWxsVGFnfT5cbmA7XG59XG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJDZWxsSXRlbVRlbXBsYXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCBjZWxsVGFnID0gY29udGV4dC50YWdGb3IoRGF0YUdyaWRDZWxsKTtcbiAgICByZXR1cm4gaHRtbCBgXG4gICAgPCR7Y2VsbFRhZ31cbiAgICAgICAgY2VsbC10eXBlPVwiY29sdW1uaGVhZGVyXCJcbiAgICAgICAgZ3JpZC1jb2x1bW49XCIkeyh4LCBjKSA9PiBjLmluZGV4ICsgMX1cIlxuICAgICAgICA6Y29sdW1uRGVmaW5pdGlvbj1cIiR7eCA9PiB4fVwiXG4gICAgPjwvJHtjZWxsVGFnfT5cbmA7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHRlbXBsYXRlIGZvciB0aGUge0BsaW5rIEBtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uI0RhdGFHcmlkUm93fSBjb21wb25lbnQgdXNpbmdcbiAqIHRoZSBwcm92aWRlZCBwcmVmaXguXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZGF0YUdyaWRSb3dUZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgY2VsbEl0ZW1UZW1wbGF0ZSA9IGNyZWF0ZUNlbGxJdGVtVGVtcGxhdGUoY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVyQ2VsbEl0ZW1UZW1wbGF0ZSA9IGNyZWF0ZUhlYWRlckNlbGxJdGVtVGVtcGxhdGUoY29udGV4dCk7XG4gICAgcmV0dXJuIGh0bWwgYFxuICAgICAgICA8dGVtcGxhdGVcbiAgICAgICAgICAgIHJvbGU9XCJyb3dcIlxuICAgICAgICAgICAgY2xhc3M9XCIke3ggPT4gKHgucm93VHlwZSAhPT0gXCJkZWZhdWx0XCIgPyB4LnJvd1R5cGUgOiBcIlwiKX1cIlxuICAgICAgICAgICAgOmRlZmF1bHRDZWxsSXRlbVRlbXBsYXRlPVwiJHtjZWxsSXRlbVRlbXBsYXRlfVwiXG4gICAgICAgICAgICA6ZGVmYXVsdEhlYWRlckNlbGxJdGVtVGVtcGxhdGU9XCIke2hlYWRlckNlbGxJdGVtVGVtcGxhdGV9XCJcbiAgICAgICAgICAgICR7Y2hpbGRyZW4oe1xuICAgICAgICBwcm9wZXJ0eTogXCJjZWxsRWxlbWVudHNcIixcbiAgICAgICAgZmlsdGVyOiBlbGVtZW50cygnW3JvbGU9XCJjZWxsXCJdLFtyb2xlPVwiZ3JpZGNlbGxcIl0sW3JvbGU9XCJjb2x1bW5oZWFkZXJcIl0sW3JvbGU9XCJyb3doZWFkZXJcIl0nKSxcbiAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPHNsb3QgJHtzbG90dGVkKFwic2xvdHRlZENlbGxFbGVtZW50c1wiKX0+PC9zbG90PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgIGA7XG59O1xuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiNEYXRhR3JpZENlbGx9IGNvbXBvbmVudCB1c2luZ1xuICogdGhlIHByb3ZpZGVkIHByZWZpeC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFHcmlkQ2VsbFRlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IHtcbiAgICByZXR1cm4gaHRtbCBgXG4gICAgICAgIDx0ZW1wbGF0ZVxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICByb2xlPVwiJHt4ID0+ICF4LmNlbGxUeXBlIHx8IHguY2VsbFR5cGUgPT09IFwiZGVmYXVsdFwiID8gXCJncmlkY2VsbFwiIDogeC5jZWxsVHlwZX1cIlxuICAgICAgICAgICAgY2xhc3M9XCJcbiAgICAgICAgICAgICR7eCA9PiB4LmNlbGxUeXBlID09PSBcImNvbHVtbmhlYWRlclwiXG4gICAgICAgID8gXCJjb2x1bW4taGVhZGVyXCJcbiAgICAgICAgOiB4LmNlbGxUeXBlID09PSBcInJvd2hlYWRlclwiXG4gICAgICAgICAgICA/IFwicm93LWhlYWRlclwiXG4gICAgICAgICAgICA6IFwiXCJ9XG4gICAgICAgICAgICBcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgYDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50JztcbmV4cG9ydCBjb25zdCBkYXRhR3JpZFN0eWxlcyA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBjc3MgYFxuXHQ6aG9zdCB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQnO1xuaW1wb3J0IHsgYmFja2dyb3VuZCwgY29udHJhc3RBY3RpdmVCb3JkZXIsIGRlc2lnblVuaXQsIGxpc3RIb3ZlckJhY2tncm91bmQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgZGF0YUdyaWRSb3dTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0Omhvc3Qge1xuXHRcdGRpc3BsYXk6IGdyaWQ7XG5cdFx0cGFkZGluZzogY2FsYygoJHtkZXNpZ25Vbml0fSAvIDQpICogMXB4KSAwO1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdH1cblx0Omhvc3QoLmhlYWRlcikge1xuXHR9XG5cdDpob3N0KC5zdGlja3ktaGVhZGVyKSB7XG5cdFx0YmFja2dyb3VuZDogJHtiYWNrZ3JvdW5kfTtcblx0XHRwb3NpdGlvbjogc3RpY2t5O1xuXHRcdHRvcDogMDtcblx0fVxuXHQ6aG9zdCg6aG92ZXIpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2xpc3RIb3ZlckJhY2tncm91bmR9O1xuXHRcdG91dGxpbmU6IDFweCBkb3R0ZWQgJHtjb250cmFzdEFjdGl2ZUJvcmRlcn07XG5cdFx0b3V0bGluZS1vZmZzZXQ6IC0xcHg7XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50JztcbmltcG9ydCB7IGZvY3VzVmlzaWJsZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBib3JkZXJXaWR0aCwgY29ybmVyUmFkaXVzLCBkZXNpZ25Vbml0LCBmb2N1c0JvcmRlciwgZm9udEZhbWlseSwgZm9yZWdyb3VuZCwgbGlzdEFjdGl2ZVNlbGVjdGlvbkJhY2tncm91bmQsIGxpc3RBY3RpdmVTZWxlY3Rpb25Gb3JlZ3JvdW5kLCB0eXBlUmFtcEJhc2VGb250U2l6ZSwgdHlwZVJhbXBCYXNlTGluZUhlaWdodCwgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCBkYXRhR3JpZENlbGxTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0Omhvc3Qge1xuXHRcdHBhZGRpbmc6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgY2FsYygke2Rlc2lnblVuaXR9ICogM3B4KTtcblx0XHRjb2xvcjogJHtmb3JlZ3JvdW5kfTtcblx0XHRvcGFjaXR5OiAxO1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0fTtcblx0XHRmb250LXdlaWdodDogNDAwO1xuXHRcdGJvcmRlcjogc29saWQgY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogY2FsYygke2Nvcm5lclJhZGl1c30gKiAxcHgpO1xuXHRcdHdoaXRlLXNwYWNlOiB3cmFwO1xuXHRcdG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xuXHR9XG5cdDpob3N0KC5jb2x1bW4taGVhZGVyKSB7XG5cdFx0Zm9udC13ZWlnaHQ6IDYwMDtcblx0XHRvdmVyZmxvdy13cmFwOiBub3JtYWw7XG5cdH1cblx0Omhvc3QoOiR7Zm9jdXNWaXNpYmxlfSksXG5cdDpob3N0KDpmb2N1cyksXG5cdDpob3N0KDphY3RpdmUpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2xpc3RBY3RpdmVTZWxlY3Rpb25CYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IHNvbGlkIGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdGNvbG9yOiAke2xpc3RBY3RpdmVTZWxlY3Rpb25Gb3JlZ3JvdW5kfTtcblx0XHRvdXRsaW5lOiBub25lO1xuXHR9XG5cdDpob3N0KDoke2ZvY3VzVmlzaWJsZX0pIDo6c2xvdHRlZCgqKSxcblx0Omhvc3QoOmZvY3VzKSA6OnNsb3R0ZWQoKiksXG5cdDpob3N0KDphY3RpdmUpIDo6c2xvdHRlZCgqKSB7XG5cdFx0Y29sb3I6ICR7bGlzdEFjdGl2ZVNlbGVjdGlvbkZvcmVncm91bmR9ICFpbXBvcnRhbnQ7XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGRhdGFHcmlkQ2VsbFRlbXBsYXRlIGFzIGNlbGxUZW1wbGF0ZSwgRGF0YUdyaWRDZWxsVHlwZXMsIERhdGFHcmlkUm93VHlwZXMsIERhdGFHcmlkIGFzIEZvdW5kYXRpb25EYXRhR3JpZCwgRGF0YUdyaWRDZWxsIGFzIEZvdW5kYXRpb25EYXRhR3JpZENlbGwsIERhdGFHcmlkUm93IGFzIEZvdW5kYXRpb25EYXRhR3JpZFJvdywgR2VuZXJhdGVIZWFkZXJPcHRpb25zLCBkYXRhR3JpZFRlbXBsYXRlIGFzIGdyaWRUZW1wbGF0ZSwgZGF0YUdyaWRSb3dUZW1wbGF0ZSBhcyByb3dUZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBkYXRhR3JpZFN0eWxlcyBhcyBncmlkU3R5bGVzIH0gZnJvbSAnLi9kYXRhLWdyaWQuc3R5bGVzJztcbmltcG9ydCB7IGRhdGFHcmlkUm93U3R5bGVzIGFzIHJvd1N0eWxlcyB9IGZyb20gJy4vZGF0YS1ncmlkLXJvdy5zdHlsZXMnO1xuaW1wb3J0IHsgZGF0YUdyaWRDZWxsU3R5bGVzIGFzIGNlbGxTdHlsZXMgfSBmcm9tICcuL2RhdGEtZ3JpZC1jZWxsLnN0eWxlcyc7XG5leHBvcnQgeyBEYXRhR3JpZENlbGxUeXBlcywgRGF0YUdyaWRSb3dUeXBlcywgR2VuZXJhdGVIZWFkZXJPcHRpb25zIH07XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgZGF0YSBncmlkIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFHcmlkIGV4dGVuZHMgRm91bmRhdGlvbkRhdGFHcmlkIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIFNldHMgYSBkZWZhdWx0IEFSSUEgbGFiZWwgb24gdGhlIGRhdGEgZ3JpZCBvbmx5IGlmIGFuIGFyaWEtbGFiZWwgYXR0cmlidXRlXG4gICAgICAgIC8vIGRvZXMgbm90IGFscmVhZHkgZXhpc3RcbiAgICAgICAgY29uc3QgYXJpYUxhYmVsVmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpO1xuICAgICAgICBpZiAoIWFyaWFMYWJlbFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdEYXRhIEdyaWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBkYXRhIGdyaWQgY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1kYXRhLWdyaWQ+YFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHZzQ29kZURhdGFHcmlkID0gRGF0YUdyaWQuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICdkYXRhLWdyaWQnLFxuICAgIGJhc2VDbGFzczogRm91bmRhdGlvbkRhdGFHcmlkLFxuICAgIHRlbXBsYXRlOiBncmlkVGVtcGxhdGUsXG4gICAgc3R5bGVzOiBncmlkU3R5bGVzLFxufSk7XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgZGF0YSBncmlkIHJvdyBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhR3JpZFJvdyBleHRlbmRzIEZvdW5kYXRpb25EYXRhR3JpZFJvdyB7XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgZGF0YSBncmlkIHJvdyBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLWRhdGEtZ3JpZC1yb3c+YFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHZzQ29kZURhdGFHcmlkUm93ID0gRGF0YUdyaWRSb3cuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICdkYXRhLWdyaWQtcm93JyxcbiAgICBiYXNlQ2xhc3M6IEZvdW5kYXRpb25EYXRhR3JpZFJvdyxcbiAgICB0ZW1wbGF0ZTogcm93VGVtcGxhdGUsXG4gICAgc3R5bGVzOiByb3dTdHlsZXMsXG59KTtcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBkYXRhIGdyaWQgY2VsbCBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhR3JpZENlbGwgZXh0ZW5kcyBGb3VuZGF0aW9uRGF0YUdyaWRDZWxsIHtcbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBkYXRhIGdyaWQgY2VsbCBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLWRhdGEtZ3JpZC1jZWxsPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVEYXRhR3JpZENlbGwgPSBEYXRhR3JpZENlbGwuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICdkYXRhLWdyaWQtY2VsbCcsXG4gICAgYmFzZUNsYXNzOiBGb3VuZGF0aW9uRGF0YUdyaWRDZWxsLFxuICAgIHRlbXBsYXRlOiBjZWxsVGVtcGxhdGUsXG4gICAgc3R5bGVzOiBjZWxsU3R5bGVzLFxufSk7XG4iLCJleHBvcnQgdmFyIE9yaWVudGF0aW9uO1xuKGZ1bmN0aW9uIChPcmllbnRhdGlvbikge1xuICAgIE9yaWVudGF0aW9uW1wiaG9yaXpvbnRhbFwiXSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIE9yaWVudGF0aW9uW1widmVydGljYWxcIl0gPSBcInZlcnRpY2FsXCI7XG59KShPcmllbnRhdGlvbiB8fCAoT3JpZW50YXRpb24gPSB7fSkpO1xuIiwiLyoqXG4gKiBEaXZpZGVyIHJvbGVzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB2YXIgRGl2aWRlclJvbGU7XG4oZnVuY3Rpb24gKERpdmlkZXJSb2xlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGRpdmlkZXIgc2VtYW50aWNhbGx5IHNlcGFyYXRlcyBjb250ZW50XG4gICAgICovXG4gICAgRGl2aWRlclJvbGVbXCJzZXBhcmF0b3JcIl0gPSBcInNlcGFyYXRvclwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBkaXZpZGVyIGhhcyBubyBzZW1hbnRpYyB2YWx1ZSBhbmQgaXMgZm9yIHZpc3VhbCBwcmVzZW50YXRpb24gb25seS5cbiAgICAgKi9cbiAgICBEaXZpZGVyUm9sZVtcInByZXNlbnRhdGlvblwiXSA9IFwicHJlc2VudGF0aW9uXCI7XG59KShEaXZpZGVyUm9sZSB8fCAoRGl2aWRlclJvbGUgPSB7fSkpO1xuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXNcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbmltcG9ydCB7IERpdmlkZXJSb2xlIH0gZnJvbSBcIi4vZGl2aWRlci5vcHRpb25zLmpzXCI7XG5leHBvcnQgeyBEaXZpZGVyUm9sZSB9O1xuLyoqXG4gKiBBIERpdmlkZXIgQ3VzdG9tIEhUTUwgRWxlbWVudC5cbiAqIEltcGxlbWVudHMgdGhlIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNzZXBhcmF0b3IgfCBBUklBIHNlcGFyYXRvciB9IG9yIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNwcmVzZW50YXRpb24gfCBBUklBIHByZXNlbnRhdGlvbn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGl2aWRlciBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEBkZWZhdWx0VmFsdWUgLSB7QGxpbmsgRGl2aWRlclJvbGUuc2VwYXJhdG9yfVxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogcm9sZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yb2xlID0gRGl2aWRlclJvbGUuc2VwYXJhdG9yO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSBkaXZpZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiBvcmllbnRhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IE9yaWVudGF0aW9uLmhvcml6b250YWw7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgRGl2aWRlci5wcm90b3R5cGUsIFwicm9sZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgRGl2aWRlci5wcm90b3R5cGUsIFwib3JpZW50YXRpb25cIiwgdm9pZCAwKTtcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUge0BsaW5rIEBtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uI0RpdmlkZXJ9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRpdmlkZXJUZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGUgcm9sZT1cIiR7eCA9PiB4LnJvbGV9XCIgYXJpYS1vcmllbnRhdGlvbj1cIiR7eCA9PiB4Lm9yaWVudGF0aW9ufVwiPjwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNwbGF5LCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBkZXNpZ25Vbml0LCBkaXZpZGVyQmFja2dyb3VuZCB9IGZyb20gJy4uL2Rlc2lnbi10b2tlbnMnO1xuZXhwb3J0IGNvbnN0IGRpdmlkZXJTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdibG9jaycpfSA6aG9zdCB7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGJvcmRlci10b3A6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7ZGl2aWRlckJhY2tncm91bmR9O1xuXHRcdGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuXHRcdGhlaWdodDogMDtcblx0XHRtYXJnaW46IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgMDtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgRGl2aWRlclJvbGUsIERpdmlkZXIgYXMgRm91bmRhdGlvbkRpdmlkZXIsIGRpdmlkZXJUZW1wbGF0ZSBhcyB0ZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBkaXZpZGVyU3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vZGl2aWRlci5zdHlsZXMnO1xuZXhwb3J0IHsgRGl2aWRlclJvbGUgfTtcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBkaXZpZGVyIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIERpdmlkZXIgZXh0ZW5kcyBGb3VuZGF0aW9uRGl2aWRlciB7XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgZGl2aWRlciBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLWRpdmlkZXI+YFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHZzQ29kZURpdmlkZXIgPSBEaXZpZGVyLmNvbXBvc2Uoe1xuICAgIGJhc2VOYW1lOiAnZGl2aWRlcicsXG4gICAgdGVtcGxhdGUsXG4gICAgc3R5bGVzLFxufSk7XG4iLCJsZXQgdW5pcXVlSWRDb3VudGVyID0gMDtcbi8qKlxuICogR2VuZXJhdGVzIGEgdW5pcXVlIElEIGJhc2VkIG9uIGluY3JlbWVudGluZyBhIGNvdW50ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXggPSBcIlwiKSB7XG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke3VuaXF1ZUlkQ291bnRlcisrfWA7XG59XG4vKipcbiAqIEJ1aWxkcyBhIHN0cmluZyBmcm9tIGEgZm9ybWF0IHNwZWNpZmllciBhbmQgcmVwbGFjZW1lbnQgcGFyYW1ldGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChmb3JtYXRTcGVjaWZpZXIsIC4uLnBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gZm9ybWF0U3BlY2lmaWVyLnJlcGxhY2UoL3soXFxkKyl9L2csIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IHBhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzW2luZGV4XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIiAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbn1cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIG9uZSBzdHJpbmcgc3RhcnRzIHdpdGggYW5vdGhlclxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmdUb1NlYXJjaCwgc2VhcmNoRm9yLCBwb3NpdGlvbiA9IDApIHtcbiAgICBpZiAoIXN0cmluZ1RvU2VhcmNoIHx8ICFzZWFyY2hGb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nVG9TZWFyY2guc3Vic3RyKHBvc2l0aW9uLCBzZWFyY2hGb3IubGVuZ3RoKSA9PT0gc2VhcmNoRm9yO1xufVxuLyoqXG4gKiBNYXRjaGVzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIFJlZ0V4cCBpbiB0aGUgc3RyaW5nLiBPcGVyYXRlcyBzaW1pbGFybHkgdG8gdGhlXG4gKiBuYXRpdmUgYFN0cmluZy5tYXRjaEFsbGAsIHdoaWNoIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIG9uIGFsbCBzdXBwb3J0ZWRcbiAqIGJyb3dzZXJzLiBOb3RlIHRoYXQgdGhlIHJlZ2V4ICptdXN0KiBiZSBnbG9iYWwuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoQWxsKHJlLCBzdHIpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gW107XG4gICAgbGV0IG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKHN0cikpKSB7XG4gICAgICAgIG1hdGNoZXMucHVzaChtYXRjaFsxXSk7XG4gICAgfVxuICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHNwZWNpZmllZCBzdHJpbmcgaXMgdW5kZWZpbmVkLCBudWxsLCBlbXB0eSwgb3Igd2hpdGVzcGFjZS5cbiAqIFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgbnVsbCwgZW1wdHksIG9yIHdoaXRlc3BhY2UsIG90aGVyd2lzZSBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbE9yV2hpdGVTcGFjZSh2YWx1ZSkge1xuICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLnRyaW0oKTtcbn1cbmNvbnN0IHdvcmRSZSA9IC8oW0EtWl0rW2EtejAtOV0qfFtBLVpdKlthLXowLTldKykvZztcbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gUGFzY2FsIENhc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbENhc2UodmFsdWUpIHtcbiAgICByZXR1cm4gbWF0Y2hBbGwod29yZFJlLCB2YWx1ZSlcbiAgICAgICAgLm1hcCgod29yZCkgPT4gYCR7d29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3dvcmQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKX1gKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbi8qKlxuICogY29udmVydHMgYSBzdHJpbmcgZnJvbSBjYW1lbENhc2Ugb3IgcGFzY2FsQ2FzZSB0byBzcGluYWwtY2FzZVxuICogd2hpY2ggaXMgYW4gbG93ZXJjYXNlIGRhc2ggc2VwYXJhdGVkIG5hbWluZyBzdHlsZS5cbiAqXG4gKiBBbiBleGFtcGxlIG9mIHNwaW5hbCBjYXNlOiBmb28tYmFyLWJhdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BpbmFsQ2FzZSh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlV2l0aExvd2VyQ2FzZUZpcnN0TGV0dGVyID0gYCR7dmFsdWVcbiAgICAgICAgLmNoYXJBdCgwKVxuICAgICAgICAudG9Mb3dlckNhc2UoKX0ke3ZhbHVlLnNsaWNlKDEpfWA7XG4gICAgcmV0dXJuIHZhbHVlV2l0aExvd2VyQ2FzZUZpcnN0TGV0dGVyLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cDEpIHtcbiAgICAgICAgcmV0dXJuIGAtJHtncm91cDEudG9Mb3dlckNhc2UoKX1gO1xuICAgIH0pO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBhcnJheSB3aGVyZSBwcmVkaWNhdGUgaXMgdHJ1ZSwgYW5kIC0xIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gdGVzdFxuICogQHBhcmFtIHByZWRpY2F0ZSAtIGZpbmQgY2FsbHMgcHJlZGljYXRlIG9uY2UgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIGluIGRlc2NlbmRpbmcgb3JkZXIsIHVudGlsIGl0IGZpbmRzIG9uZSB3aGVyZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlLiBJZiBzdWNoIGFuIGVsZW1lbnQgaXMgZm91bmQsIGZpbmRMYXN0SW5kZXggaW1tZWRpYXRlbHkgcmV0dXJucyB0aGF0IGVsZW1lbnQgaW5kZXguIE90aGVyd2lzZSwgZmluZEluZGV4IHJldHVybnMgLTEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICBsZXQgayA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoay0tKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba10sIGssIGFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgb2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMgfSBmcm9tIFwiLi4vcGF0dGVybnMvYXJpYS1nbG9iYWwuanNcIjtcbmltcG9ydCB7IFN0YXJ0RW5kIH0gZnJvbSBcIi4uL3BhdHRlcm5zL3N0YXJ0LWVuZC5qc1wiO1xuaW1wb3J0IHsgYXBwbHlNaXhpbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FwcGx5LW1peGlucy5qc1wiO1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBlbGVtZW50IGlzIGEge0BsaW5rIChMaXN0Ym94T3B0aW9uOmNsYXNzKX1cbiAqXG4gKiBAcGFyYW0gZWxlbWVudCAtIHRoZSBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpc3Rib3hPcHRpb24oZWwpIHtcbiAgICByZXR1cm4gKGlzSFRNTEVsZW1lbnQoZWwpICYmXG4gICAgICAgIChlbC5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpID09PSBcIm9wdGlvblwiIHx8XG4gICAgICAgICAgICBlbCBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSk7XG59XG4vKipcbiAqIEFuIE9wdGlvbiBDdXN0b20gSFRNTCBFbGVtZW50LlxuICogSW1wbGVtZW50cyB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jb3B0aW9uIHwgQVJJQSBvcHRpb24gfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBMaXN0Ym94T3B0aW9uIGV4dGVuZHMgRm91bmRhdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRleHQsIHZhbHVlLCBkZWZhdWx0U2VsZWN0ZWQsIHNlbGVjdGVkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdFNlbGVjdGVkIHN0YXRlIG9mIHRoZSBvcHRpb24uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdFNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFja3Mgd2hldGhlciB0aGUgXCJzZWxlY3RlZFwiIHByb3BlcnR5IGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJ0eVNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY2hlY2tlZCBzdGF0ZSBvZiB0aGUgY29udHJvbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuZGVmYXVsdFNlbGVjdGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2sgd2hldGhlciB0aGUgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZCBmcm9tIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRTZWxlY3RlZCA9IGRlZmF1bHRTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3h5ID0gbmV3IE9wdGlvbihgJHt0aGlzLnRleHRDb250ZW50fWAsIHRoaXMuaW5pdGlhbFZhbHVlLCB0aGlzLmRlZmF1bHRTZWxlY3RlZCwgdGhpcy5zZWxlY3RlZCk7XG4gICAgICAgIHRoaXMucHJveHkuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBhcmlhQ2hlY2tlZCBwcm9wZXJ0eSB3aGVuIHRoZSBjaGVja2VkIHByb3BlcnR5IGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJldiAtIHRoZSBwcmV2aW91cyBjaGVja2VkIHZhbHVlXG4gICAgICogQHBhcmFtIG5leHQgLSB0aGUgY3VycmVudCBjaGVja2VkIHZhbHVlXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2hlY2tlZENoYW5nZWQocHJldiwgbmV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIG5leHQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aGlzLmFyaWFDaGVja2VkID0gbmV4dCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJpYUNoZWNrZWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRlZmF1bHRTZWxlY3RlZENoYW5nZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXJ0eVNlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5kZWZhdWx0U2VsZWN0ZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5zZWxlY3RlZCA9IHRoaXMuZGVmYXVsdFNlbGVjdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2FibGVkQ2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgIHRoaXMuYXJpYURpc2FibGVkID0gdGhpcy5kaXNhYmxlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LmRpc2FibGVkID0gdGhpcy5kaXNhYmxlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3RlZEF0dHJpYnV0ZUNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdFNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZEF0dHJpYnV0ZTtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MT3B0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5kZWZhdWx0U2VsZWN0ZWQgPSB0aGlzLmRlZmF1bHRTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3RlZENoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMuYXJpYVNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgICAgICBpZiAoIXRoaXMuZGlydHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0aWFsVmFsdWVDaGFuZ2VkKHByZXZpb3VzLCBuZXh0KSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBjbGVhbiBhbmQgdGhlIGNvbXBvbmVudCBpcyBjb25uZWN0ZWQgdG8gdGhlIERPTVxuICAgICAgICAvLyB0aGVuIHNldCB2YWx1ZSBlcXVhbCB0byB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgICAgICBpZiAoIXRoaXMuZGlydHlWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGxhYmVsKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy52YWx1ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy50ZXh0Q29udGVudCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICB9XG4gICAgZ2V0IHRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV4dCkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IG5leHQ7XG4gICAgICAgIHRoaXMuZGlydHlWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkudmFsdWUgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIE9ic2VydmFibGUubm90aWZ5KHRoaXMsIFwidmFsdWVcIik7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgT2JzZXJ2YWJsZS50cmFjayh0aGlzLCBcInZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5fdmFsdWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMudGV4dENvbnRlbnQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgfVxuICAgIGdldCBmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm94eSA/IHRoaXMucHJveHkuZm9ybSA6IG51bGw7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwiY2hlY2tlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwiZGVmYXVsdFNlbGVjdGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgbW9kZTogXCJib29sZWFuXCIgfSlcbl0sIExpc3Rib3hPcHRpb24ucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcInNlbGVjdGVkXCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBMaXN0Ym94T3B0aW9uLnByb3RvdHlwZSwgXCJzZWxlY3RlZEF0dHJpYnV0ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwic2VsZWN0ZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwidmFsdWVcIiwgbW9kZTogXCJmcm9tVmlld1wiIH0pXG5dLCBMaXN0Ym94T3B0aW9uLnByb3RvdHlwZSwgXCJpbml0aWFsVmFsdWVcIiwgdm9pZCAwKTtcbi8qKlxuICogU3RhdGVzIGFuZCBwcm9wZXJ0aWVzIHJlbGF0aW5nIHRvIHRoZSBBUklBIGBvcHRpb25gIHJvbGUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGVsZWdhdGVzQVJJQUxpc3Rib3hPcHRpb24ge1xufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGVsZWdhdGVzQVJJQUxpc3Rib3hPcHRpb24ucHJvdG90eXBlLCBcImFyaWFDaGVja2VkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwiYXJpYVBvc0luU2V0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwiYXJpYVNlbGVjdGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveE9wdGlvbi5wcm90b3R5cGUsIFwiYXJpYVNldFNpemVcIiwgdm9pZCAwKTtcbmFwcGx5TWl4aW5zKERlbGVnYXRlc0FSSUFMaXN0Ym94T3B0aW9uLCBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcyk7XG5hcHBseU1peGlucyhMaXN0Ym94T3B0aW9uLCBTdGFydEVuZCwgRGVsZWdhdGVzQVJJQUxpc3Rib3hPcHRpb24pO1xuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgb2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgZmluZExhc3RJbmRleCwga2V5QXJyb3dEb3duLCBrZXlBcnJvd1VwLCBrZXlFbmQsIGtleUVudGVyLCBrZXlFc2NhcGUsIGtleUhvbWUsIGtleVNwYWNlLCBrZXlUYWIsIHVuaXF1ZUlkLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNMaXN0Ym94T3B0aW9uIH0gZnJvbSBcIi4uL2xpc3Rib3gtb3B0aW9uL2xpc3Rib3gtb3B0aW9uLmpzXCI7XG5pbXBvcnQgeyBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcyB9IGZyb20gXCIuLi9wYXR0ZXJucy9hcmlhLWdsb2JhbC5qc1wiO1xuaW1wb3J0IHsgYXBwbHlNaXhpbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FwcGx5LW1peGlucy5qc1wiO1xuLyoqXG4gKiBBIExpc3Rib3ggQ3VzdG9tIEhUTUwgRWxlbWVudC5cbiAqIEltcGxlbWVudHMgdGhlIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNsaXN0Ym94IHwgQVJJQSBsaXN0Ym94IH0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgTGlzdGJveCBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbnRlcm5hbCB1bmZpbHRlcmVkIGxpc3Qgb2Ygc2VsZWN0YWJsZSBvcHRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgY29sbGVjdGlvbiBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RhbmRhcmQgYGNsaWNrYCBldmVudCBjcmVhdGVzIGEgYGZvY3VzYCBldmVudCBiZWZvcmUgZmlyaW5nLCBzbyBhXG4gICAgICAgICAqIGBtb3VzZWRvd25gIGV2ZW50IGlzIHVzZWQgdG8gc2tpcCB0aGF0IGluaXRpYWwgZm9jdXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG91bGRTa2lwRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IHR5cGVhaGVhZCBidWZmZXIgc3RyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZWFoZWFkQnVmZmVyID0gXCJcIjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsYWcgZm9yIHRoZSB0eXBlYWhlYWQgdGltZW91dCBleHBpcmF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZWFoZWFkRXhwaXJlZCA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGltZW91dCBJRCBmb3IgdGhlIHR5cGVhaGVhZCBoYW5kbGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHlwZWFoZWFkVGltZW91dCA9IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3Qgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGZpcnN0U2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc2VsZWN0ZWRPcHRpb25zWzBdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgb25lIG9yIG1vcmUgc2VsZWN0YWJsZSBvcHRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgaGFzU2VsZWN0YWJsZU9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5vcHRpb25zLmV2ZXJ5KG8gPT4gby5kaXNhYmxlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICBPYnNlcnZhYmxlLnRyYWNrKHRoaXMsIFwib3B0aW9uc1wiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfVxuICAgIHNldCBvcHRpb25zKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB2YWx1ZTtcbiAgICAgICAgT2JzZXJ2YWJsZS5ub3RpZnkodGhpcywgXCJvcHRpb25zXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGbGFnIGZvciB0aGUgdHlwZWFoZWFkIHRpbWVvdXQgZXhwaXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgTGlzdGJveC50eXBlYWhlYWRFeHBpcmVkYFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCB0eXBlQWhlYWRFeHBpcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlYWhlYWRFeHBpcmVkO1xuICAgIH1cbiAgICBzZXQgdHlwZUFoZWFkRXhwaXJlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnR5cGVhaGVhZEV4cGlyZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGNsaWNrIGV2ZW50cyBmb3IgbGlzdGJveCBvcHRpb25zLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY2xpY2tIYW5kbGVyKGUpIHtcbiAgICAgICAgY29uc3QgY2FwdHVyZWQgPSBlLnRhcmdldC5jbG9zZXN0KGBvcHRpb24sW3JvbGU9b3B0aW9uXWApO1xuICAgICAgICBpZiAoY2FwdHVyZWQgJiYgIWNhcHR1cmVkLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLm9wdGlvbnMuaW5kZXhPZihjYXB0dXJlZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgdGhlIHByb3ZpZGVkIG9wdGlvbiBpcyBmb2N1c2VkIGFuZCBzY3JvbGxlZCBpbnRvIHZpZXcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9uVG9Gb2N1cyAtIFRoZSBvcHRpb24gdG8gZm9jdXNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmb2N1c0FuZFNjcm9sbE9wdGlvbkludG9WaWV3KG9wdGlvblRvRm9jdXMgPSB0aGlzLmZpcnN0U2VsZWN0ZWRPcHRpb24pIHtcbiAgICAgICAgLy8gVG8gZW5zdXJlIHRoYXQgdGhlIGJyb3dzZXIgaGFuZGxlcyBib3RoIGBmb2N1cygpYCBhbmQgYHNjcm9sbEludG9WaWV3KClgLCB0aGVcbiAgICAgICAgLy8gdGltaW5nIGhlcmUgbmVlZHMgdG8gZ3VhcmFudGVlIHRoYXQgdGhleSBoYXBwZW4gb24gZGlmZmVyZW50IGZyYW1lcy4gU2luY2UgdGhpc1xuICAgICAgICAvLyBmdW5jdGlvbiBpcyB0eXBpY2FsbHkgY2FsbGVkIGZyb20gdGhlIGBvcGVuQ2hhbmdlZGAgb2JzZXJ2ZXIsIGBET00ucXVldWVVcGRhdGVgXG4gICAgICAgIC8vIGNhdXNlcyB0aGUgY2FsbHMgdG8gYmUgZ3JvdXBlZCBpbnRvIHRoZSBzYW1lIGZyYW1lLiBUbyBwcmV2ZW50IHRoaXMsXG4gICAgICAgIC8vIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGlzIHVzZWQgaW5zdGVhZCBvZiBgRE9NLnF1ZXVlVXBkYXRlYC5cbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgJiYgb3B0aW9uVG9Gb2N1cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uVG9Gb2N1cy5mb2N1cygpO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBvcHRpb25Ub0ZvY3VzLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6IFwibmVhcmVzdFwiIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBgZm9jdXNpbmAgYWN0aW9ucyBmb3IgdGhlIGNvbXBvbmVudC4gV2hlbiB0aGUgY29tcG9uZW50IHJlY2VpdmVzIGZvY3VzLFxuICAgICAqIHRoZSBsaXN0IG9mIHNlbGVjdGVkIG9wdGlvbnMgaXMgcmVmcmVzaGVkIGFuZCB0aGUgZmlyc3Qgc2VsZWN0ZWQgb3B0aW9uIGlzIHNjcm9sbGVkXG4gICAgICogaW50byB2aWV3LlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZm9jdXNpbkhhbmRsZXIoZSkge1xuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkU2tpcEZvY3VzICYmIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRPcHRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzQW5kU2Nyb2xsT3B0aW9uSW50b1ZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3VsZFNraXBGb2N1cyA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvcHRpb25zIHdoaWNoIG1hdGNoIHRoZSBjdXJyZW50IHR5cGVhaGVhZCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXRUeXBlYWhlYWRNYXRjaGVzKCkge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy50eXBlYWhlYWRCdWZmZXIucmVwbGFjZSgvWy4qK1xcLT9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYF4ke3BhdHRlcm59YCwgXCJnaVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maWx0ZXIoKG8pID0+IG8udGV4dC50cmltKCkubWF0Y2gocmUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgb3B0aW9uIHdoaWNoIGlzIHNlbGVjdGFibGUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2IC0gdGhlIHByZXZpb3VzIHNlbGVjdGVkIGluZGV4XG4gICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV4dCBpbmRleCB0byBzZWxlY3RcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldFNlbGVjdGFibGVJbmRleChwcmV2ID0gdGhpcy5zZWxlY3RlZEluZGV4LCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHByZXYgPiBuZXh0ID8gLTEgOiBwcmV2IDwgbmV4dCA/IDEgOiAwO1xuICAgICAgICBjb25zdCBwb3RlbnRpYWxEaXJlY3Rpb24gPSBwcmV2ICsgZGlyZWN0aW9uO1xuICAgICAgICBsZXQgbmV4dFNlbGVjdGFibGVPcHRpb24gPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAtMToge1xuICAgICAgICAgICAgICAgIG5leHRTZWxlY3RhYmxlT3B0aW9uID0gdGhpcy5vcHRpb25zLnJlZHVjZVJpZ2h0KChuZXh0U2VsZWN0YWJsZU9wdGlvbiwgdGhpc09wdGlvbiwgaW5kZXgpID0+ICFuZXh0U2VsZWN0YWJsZU9wdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpc09wdGlvbi5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICBpbmRleCA8IHBvdGVudGlhbERpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICA/IHRoaXNPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgOiBuZXh0U2VsZWN0YWJsZU9wdGlvbiwgbmV4dFNlbGVjdGFibGVPcHRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICAgICAgbmV4dFNlbGVjdGFibGVPcHRpb24gPSB0aGlzLm9wdGlvbnMucmVkdWNlKChuZXh0U2VsZWN0YWJsZU9wdGlvbiwgdGhpc09wdGlvbiwgaW5kZXgpID0+ICFuZXh0U2VsZWN0YWJsZU9wdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpc09wdGlvbi5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICBpbmRleCA+IHBvdGVudGlhbERpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICA/IHRoaXNPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgOiBuZXh0U2VsZWN0YWJsZU9wdGlvbiwgbmV4dFNlbGVjdGFibGVPcHRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaW5kZXhPZihuZXh0U2VsZWN0YWJsZU9wdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZXh0ZXJuYWwgY2hhbmdlcyB0byBjaGlsZCBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIHRoZSBzb3VyY2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIHRoZSBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgaGFuZGxlQ2hhbmdlKHNvdXJjZSwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIHN3aXRjaCAocHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjoge1xuICAgICAgICAgICAgICAgIGlmIChMaXN0Ym94LnNsb3R0ZWRPcHRpb25GaWx0ZXIoc291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLm9wdGlvbnMuaW5kZXhPZihzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkT3B0aW9ucygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGZvY3VzIHRvIGFuIG9wdGlvbiB3aG9zZSBsYWJlbCBtYXRjaGVzIGNoYXJhY3RlcnMgdHlwZWQgYnkgdGhlIHVzZXIuXG4gICAgICogQ29uc2VjdXRpdmUga2V5c3Ryb2tlcyBhcmUgYmF0Y2hlZCBpbnRvIGEgYnVmZmVyIG9mIHNlYXJjaCB0ZXh0IHVzZWRcbiAgICAgKiB0byBtYXRjaCBhZ2FpbnN0IHRoZSBzZXQgb2Ygb3B0aW9ucy4gIElmIGBUWVBFX0FIRUFEX1RJTUVPVVRfTVNgIHBhc3Nlc1xuICAgICAqIGJldHdlZW4gY29uc2VjdXRpdmUga2V5c3Ryb2tlcywgdGhlIHNlYXJjaCByZXN0YXJ0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUga2V5IHRvIGJlIGV2YWx1YXRlZFxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgaGFuZGxlVHlwZUFoZWFkKGtleSkge1xuICAgICAgICBpZiAodGhpcy50eXBlYWhlYWRUaW1lb3V0KSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudHlwZWFoZWFkVGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eXBlYWhlYWRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gKHRoaXMudHlwZWFoZWFkRXhwaXJlZCA9IHRydWUpLCBMaXN0Ym94LlRZUEVfQUhFQURfVElNRU9VVF9NUyk7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHlwZWFoZWFkQnVmZmVyID0gYCR7dGhpcy50eXBlYWhlYWRFeHBpcmVkID8gXCJcIiA6IHRoaXMudHlwZWFoZWFkQnVmZmVyfSR7a2V5fWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYGtleWRvd25gIGFjdGlvbnMgZm9yIGxpc3Rib3ggbmF2aWdhdGlvbiBhbmQgdHlwZWFoZWFkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAga2V5ZG93bkhhbmRsZXIoZSkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG91bGRTa2lwRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qga2V5ID0gZS5rZXk7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAvLyBTZWxlY3QgdGhlIGZpcnN0IGF2YWlsYWJsZSBvcHRpb25cbiAgICAgICAgICAgIGNhc2Uga2V5SG9tZToge1xuICAgICAgICAgICAgICAgIGlmICghZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Rmlyc3RPcHRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZWxlY3QgdGhlIG5leHQgc2VsZWN0YWJsZSBvcHRpb25cbiAgICAgICAgICAgIGNhc2Uga2V5QXJyb3dEb3duOiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROZXh0T3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSBwcmV2aW91cyBzZWxlY3RhYmxlIG9wdGlvblxuICAgICAgICAgICAgY2FzZSBrZXlBcnJvd1VwOiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RQcmV2aW91c09wdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlbGVjdCB0aGUgbGFzdCBhdmFpbGFibGUgb3B0aW9uXG4gICAgICAgICAgICBjYXNlIGtleUVuZDoge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdExhc3RPcHRpb24oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2Uga2V5VGFiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c0FuZFNjcm9sbE9wdGlvbkludG9WaWV3KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGtleUVudGVyOlxuICAgICAgICAgICAgY2FzZSBrZXlFc2NhcGU6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2Uga2V5U3BhY2U6IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlYWhlYWRFeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlbmQga2V5IHRvIFR5cGVhaGVhZCBoYW5kbGVyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVUeXBlQWhlYWQoYCR7a2V5fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50cyBgZm9jdXNpbmAgZXZlbnRzIGZyb20gZmlyaW5nIGJlZm9yZSBgY2xpY2tgIGV2ZW50cyB3aGVuIHRoZVxuICAgICAqIGVsZW1lbnQgaXMgdW5mb2N1c2VkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91c2Vkb3duSGFuZGxlcihlKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkU2tpcEZvY3VzID0gIXRoaXMuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTd2l0Y2hlcyBiZXR3ZWVuIHNpbmdsZS1zZWxlY3Rpb24gYW5kIG11bHRpLXNlbGVjdGlvbiBtb2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByZXYgLSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlXG4gICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV4dCB2YWx1ZSBvZiB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG11bHRpcGxlQ2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgIHRoaXMuYXJpYU11bHRpU2VsZWN0YWJsZSA9IG5leHQgPyBcInRydWVcIiA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgbGlzdCBvZiBzZWxlY3RlZCBvcHRpb25zIHdoZW4gdGhlIGBzZWxlY3RlZEluZGV4YCBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByZXYgLSB0aGUgcHJldmlvdXMgc2VsZWN0ZWQgaW5kZXggdmFsdWVcbiAgICAgKiBAcGFyYW0gbmV4dCAtIHRoZSBjdXJyZW50IHNlbGVjdGVkIGluZGV4IHZhbHVlXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZWxlY3RlZEluZGV4Q2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1NlbGVjdGFibGVPcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKChfYSA9IHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkSW5kZXhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzYWJsZWQpICYmIHR5cGVvZiBwcmV2ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RhYmxlSW5kZXggPSB0aGlzLmdldFNlbGVjdGFibGVJbmRleChwcmV2LCBuZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld05leHQgPSBzZWxlY3RhYmxlSW5kZXggPiAtMSA/IHNlbGVjdGFibGVJbmRleCA6IHByZXY7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBuZXdOZXh0O1xuICAgICAgICAgICAgaWYgKG5leHQgPT09IG5ld05leHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2VkKG5leHQsIG5ld05leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRPcHRpb25zKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHNlbGVjdGVkbmVzcyBvZiBlYWNoIG9wdGlvbiB3aGVuIHRoZSBsaXN0IG9mIHNlbGVjdGVkIG9wdGlvbnMgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2IC0gdGhlIHByZXZpb3VzIGxpc3Qgb2Ygc2VsZWN0ZWQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSBuZXh0IC0gdGhlIGN1cnJlbnQgbGlzdCBvZiBzZWxlY3RlZCBvcHRpb25zXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZWxlY3RlZE9wdGlvbnNDaGFuZ2VkKHByZXYsIG5leHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZE5leHQgPSBuZXh0LmZpbHRlcihMaXN0Ym94LnNsb3R0ZWRPcHRpb25GaWx0ZXIpO1xuICAgICAgICAoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKG8gPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZpZXIgPSBPYnNlcnZhYmxlLmdldE5vdGlmaWVyKG8pO1xuICAgICAgICAgICAgbm90aWZpZXIudW5zdWJzY3JpYmUodGhpcywgXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIG8uc2VsZWN0ZWQgPSBmaWx0ZXJlZE5leHQuaW5jbHVkZXMobyk7XG4gICAgICAgICAgICBub3RpZmllci5zdWJzY3JpYmUodGhpcywgXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGZvY3VzIHRvIHRoZSBmaXJzdCBzZWxlY3RhYmxlIG9wdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RGaXJzdE9wdGlvbigpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maW5kSW5kZXgobyA9PiAhby5kaXNhYmxlZCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IC0xO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGZvY3VzIHRvIHRoZSBsYXN0IHNlbGVjdGFibGUgb3B0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2VsZWN0TGFzdE9wdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBmaW5kTGFzdEluZGV4KHRoaXMub3B0aW9ucywgbyA9PiAhby5kaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTW92ZXMgZm9jdXMgdG8gdGhlIG5leHQgc2VsZWN0YWJsZSBvcHRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZWxlY3ROZXh0T3B0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5zZWxlY3RlZEluZGV4IDwgdGhpcy5vcHRpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGZvY3VzIHRvIHRoZSBwcmV2aW91cyBzZWxlY3RhYmxlIG9wdGlvbi5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHNlbGVjdFByZXZpb3VzT3B0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5zZWxlY3RlZEluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4IC0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzZWxlY3RlZCBpbmRleCB0byBtYXRjaCB0aGUgZmlyc3Qgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2V0RGVmYXVsdFNlbGVjdGVkT3B0aW9uKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maW5kSW5kZXgoZWwgPT4gZWwuZGVmYXVsdFNlbGVjdGVkKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYW4gb3B0aW9uIGFzIHNlbGVjdGVkIGFuZCBnaXZlcyBpdCBmb2N1cy5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZE9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IFt0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZEluZGV4XV07XG4gICAgICAgICAgICB0aGlzLmFyaWFBY3RpdmVEZXNjZW5kYW50ID0gKF9jID0gKF9iID0gdGhpcy5maXJzdFNlbGVjdGVkT3B0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZvY3VzQW5kU2Nyb2xsT3B0aW9uSW50b1ZpZXcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBsaXN0IG9mIG9wdGlvbnMgYW5kIHJlc2V0cyB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdoZW4gdGhlIHNsb3R0ZWQgb3B0aW9uIGNvbnRlbnQgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2IC0gdGhlIHByZXZpb3VzIGxpc3Qgb2Ygc2xvdHRlZCBvcHRpb25zXG4gICAgICogQHBhcmFtIG5leHQgLSB0aGUgY3VycmVudCBsaXN0IG9mIHNsb3R0ZWQgb3B0aW9uc1xuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2xvdHRlZE9wdGlvbnNDaGFuZ2VkKHByZXYsIG5leHQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gbmV4dC5yZWR1Y2UoKG9wdGlvbnMsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpc0xpc3Rib3hPcHRpb24oaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBjb25zdCBzZXRTaXplID0gYCR7dGhpcy5vcHRpb25zLmxlbmd0aH1gO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFvcHRpb24uaWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb24uaWQgPSB1bmlxdWVJZChcIm9wdGlvbi1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb24uYXJpYVBvc0luU2V0ID0gYCR7aW5kZXggKyAxfWA7XG4gICAgICAgICAgICBvcHRpb24uYXJpYVNldFNpemUgPSBzZXRTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkT3B0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0U2VsZWN0ZWRPcHRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBmaWx0ZXJlZCBsaXN0IG9mIG9wdGlvbnMgd2hlbiB0aGUgdHlwZWFoZWFkIGJ1ZmZlciBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByZXYgLSB0aGUgcHJldmlvdXMgdHlwZWFoZWFkIGJ1ZmZlciB2YWx1ZVxuICAgICAqIEBwYXJhbSBuZXh0IC0gdGhlIGN1cnJlbnQgdHlwZWFoZWFkIGJ1ZmZlciB2YWx1ZVxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdHlwZWFoZWFkQnVmZmVyQ2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgdHlwZWFoZWFkTWF0Y2hlcyA9IHRoaXMuZ2V0VHlwZWFoZWFkTWF0Y2hlcygpO1xuICAgICAgICAgICAgaWYgKHR5cGVhaGVhZE1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IHRoaXMub3B0aW9ucy5pbmRleE9mKHR5cGVhaGVhZE1hdGNoZXNbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnR5cGVhaGVhZEV4cGlyZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQSBzdGF0aWMgZmlsdGVyIHRvIGluY2x1ZGUgb25seSBzZWxlY3RhYmxlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIG4gLSBlbGVtZW50IHRvIGZpbHRlclxuICogQHB1YmxpY1xuICovXG5MaXN0Ym94LnNsb3R0ZWRPcHRpb25GaWx0ZXIgPSAobikgPT4gaXNMaXN0Ym94T3B0aW9uKG4pICYmICFuLmRpc2FibGVkICYmICFuLmhpZGRlbjtcbi8qKlxuICogVHlwZWFoZWFkIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5MaXN0Ym94LlRZUEVfQUhFQURfVElNRU9VVF9NUyA9IDEwMDA7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgbW9kZTogXCJib29sZWFuXCIgfSlcbl0sIExpc3Rib3gucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgbW9kZTogXCJib29sZWFuXCIgfSlcbl0sIExpc3Rib3gucHJvdG90eXBlLCBcIm11bHRpcGxlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBMaXN0Ym94LnByb3RvdHlwZSwgXCJzZWxlY3RlZEluZGV4XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBMaXN0Ym94LnByb3RvdHlwZSwgXCJzZWxlY3RlZE9wdGlvbnNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIExpc3Rib3gucHJvdG90eXBlLCBcInNsb3R0ZWRPcHRpb25zXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBMaXN0Ym94LnByb3RvdHlwZSwgXCJ0eXBlYWhlYWRCdWZmZXJcIiwgdm9pZCAwKTtcbi8qKlxuICogSW5jbHVkZXMgQVJJQSBzdGF0ZXMgYW5kIHByb3BlcnRpZXMgcmVsYXRpbmcgdG8gdGhlIEFSSUEgbGlzdGJveCByb2xlXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGVsZWdhdGVzQVJJQUxpc3Rib3gge1xufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGVsZWdhdGVzQVJJQUxpc3Rib3gucHJvdG90eXBlLCBcImFyaWFBY3RpdmVEZXNjZW5kYW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveC5wcm90b3R5cGUsIFwiYXJpYURpc2FibGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveC5wcm90b3R5cGUsIFwiYXJpYUV4cGFuZGVkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBEZWxlZ2F0ZXNBUklBTGlzdGJveC5wcm90b3R5cGUsIFwiYXJpYU11bHRpU2VsZWN0YWJsZVwiLCB2b2lkIDApO1xuYXBwbHlNaXhpbnMoRGVsZWdhdGVzQVJJQUxpc3Rib3gsIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzKTtcbmFwcGx5TWl4aW5zKExpc3Rib3gsIERlbGVnYXRlc0FSSUFMaXN0Ym94KTtcbiIsImltcG9ydCB7IExpc3Rib3ggfSBmcm9tIFwiLi4vbGlzdGJveC9saXN0Ym94LmpzXCI7XG5pbXBvcnQgeyBGb3JtQXNzb2NpYXRlZCB9IGZyb20gXCIuLi9mb3JtLWFzc29jaWF0ZWQvZm9ybS1hc3NvY2lhdGVkLmpzXCI7XG5jbGFzcyBfU2VsZWN0IGV4dGVuZHMgTGlzdGJveCB7XG59XG4vKipcbiAqIEEgZm9ybS1hc3NvY2lhdGVkIGJhc2UgY2xhc3MgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jKFNlbGVjdDpjbGFzcyl9IGNvbXBvbmVudC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEZvcm1Bc3NvY2lhdGVkU2VsZWN0IGV4dGVuZHMgRm9ybUFzc29jaWF0ZWQoX1NlbGVjdCkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnByb3h5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIFBvc2l0aW9uaW5nIGRpcmVjdGlvbnMgZm9yIHRoZSBsaXN0Ym94IHdoZW4gYSBzZWxlY3QgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBTZWxlY3RQb3NpdGlvbjtcbihmdW5jdGlvbiAoU2VsZWN0UG9zaXRpb24pIHtcbiAgICBTZWxlY3RQb3NpdGlvbltcImFib3ZlXCJdID0gXCJhYm92ZVwiO1xuICAgIFNlbGVjdFBvc2l0aW9uW1wiYmVsb3dcIl0gPSBcImJlbG93XCI7XG59KShTZWxlY3RQb3NpdGlvbiB8fCAoU2VsZWN0UG9zaXRpb24gPSB7fSkpO1xuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgRE9NLCBPYnNlcnZhYmxlLCBvYnNlcnZhYmxlIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuaW1wb3J0IHsgRGVsZWdhdGVzQVJJQUxpc3Rib3gsIExpc3Rib3ggfSBmcm9tIFwiLi4vbGlzdGJveC9saXN0Ym94LmpzXCI7XG5pbXBvcnQgeyBTdGFydEVuZCB9IGZyb20gXCIuLi9wYXR0ZXJucy9zdGFydC1lbmQuanNcIjtcbmltcG9ydCB7IGFwcGx5TWl4aW5zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcHBseS1taXhpbnMuanNcIjtcbmltcG9ydCB7IEZvcm1Bc3NvY2lhdGVkU2VsZWN0IH0gZnJvbSBcIi4vc2VsZWN0LmZvcm0tYXNzb2NpYXRlZC5qc1wiO1xuaW1wb3J0IHsgU2VsZWN0UG9zaXRpb24gfSBmcm9tIFwiLi9zZWxlY3Qub3B0aW9ucy5qc1wiO1xuLyoqXG4gKiBBIFNlbGVjdCBDdXN0b20gSFRNTCBFbGVtZW50LlxuICogSW1wbGVtZW50cyB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3NlbGVjdCB8IEFSSUEgc2VsZWN0IH0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0IGV4dGVuZHMgRm9ybUFzc29jaWF0ZWRTZWxlY3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9wZW4gYXR0cmlidXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiBvcGVuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgcG9zaXRpb24gYXR0cmlidXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZm9yY2VkUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhvbGRzIHRoZSBjdXJyZW50IHN0YXRlIGZvciB0aGUgY2FsY3VsYXRlZCBwb3NpdGlvbiBvZiB0aGUgbGlzdGJveC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFNlbGVjdFBvc2l0aW9uLmJlbG93O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIGludGVybmFsIGxpc3Rib3ggZWxlbWVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpc3Rib3hJZCA9IHVuaXF1ZUlkKFwibGlzdGJveC1cIik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWF4IGhlaWdodCBmb3IgdGhlIGxpc3Rib3ggd2hlbiBvcGVuZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZhbHVlIGRpc3BsYXllZCBvbiB0aGUgYnV0dG9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3BsYXlWYWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIG9wZW5DaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmFyaWFDb250cm9scyA9IHRoaXMubGlzdGJveElkO1xuICAgICAgICAgICAgdGhpcy5hcmlhRXhwYW5kZWQgPSBcInRydWVcIjtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25pbmcoKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNBbmRTY3JvbGxPcHRpb25JbnRvVmlldygpO1xuICAgICAgICAgICAgdGhpcy5pbmRleFdoZW5PcGVuZWQgPSB0aGlzLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICAvLyBmb2N1cyBpcyBkaXJlY3RlZCB0byB0aGUgZWxlbWVudCB3aGVuIGBvcGVuYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHlcbiAgICAgICAgICAgIERPTS5xdWV1ZVVwZGF0ZSgoKSA9PiB0aGlzLmZvY3VzKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJpYUNvbnRyb2xzID0gXCJcIjtcbiAgICAgICAgdGhpcy5hcmlhRXhwYW5kZWQgPSBcImZhbHNlXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIE9ic2VydmFibGUudHJhY2sodGhpcywgXCJ2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV4dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHByZXYgPSBgJHt0aGlzLl92YWx1ZX1gO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gdGhpcy5vcHRpb25zLmZpbmRJbmRleChlbCA9PiBlbC52YWx1ZSA9PT0gbmV4dCk7XG4gICAgICAgICAgICBjb25zdCBwcmV2U2VsZWN0ZWRPcHRpb24gPSB0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRTZWxlY3RlZE9wdGlvbiA9IHRoaXMub3B0aW9uc1tzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZTZWxlY3RlZFZhbHVlID0gcHJldlNlbGVjdGVkT3B0aW9uXG4gICAgICAgICAgICAgICAgPyBwcmV2U2VsZWN0ZWRPcHRpb24udmFsdWVcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBuZXh0U2VsZWN0ZWRWYWx1ZSA9IG5leHRTZWxlY3RlZE9wdGlvblxuICAgICAgICAgICAgICAgID8gbmV4dFNlbGVjdGVkT3B0aW9uLnZhbHVlXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT09IC0xIHx8IHByZXZTZWxlY3RlZFZhbHVlICE9PSBuZXh0U2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG5leHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5maXJzdFNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IHRoaXMuZmlyc3RTZWxlY3RlZE9wdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBuZXh0O1xuICAgICAgICAgICAgc3VwZXIudmFsdWVDaGFuZ2VkKHByZXYsIG5leHQpO1xuICAgICAgICAgICAgT2JzZXJ2YWJsZS5ub3RpZnkodGhpcywgXCJ2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVWYWx1ZShzaG91bGRFbWl0KSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZmlyc3RTZWxlY3RlZE9wdGlvbiA/IHRoaXMuZmlyc3RTZWxlY3RlZE9wdGlvbi52YWx1ZSA6IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlWYWx1ZSA9IHRoaXMuZmlyc3RTZWxlY3RlZE9wdGlvblxuICAgICAgICAgICAgICAgID8gdGhpcy5maXJzdFNlbGVjdGVkT3B0aW9uLnRleHRDb250ZW50IHx8IHRoaXMuZmlyc3RTZWxlY3RlZE9wdGlvbi52YWx1ZVxuICAgICAgICAgICAgICAgIDogdGhpcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkRW1pdCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdChcImlucHV0XCIpO1xuICAgICAgICAgICAgdGhpcy4kZW1pdChcImNoYW5nZVwiLCB0aGlzLCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb21wb3NlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcHJveHkgdmFsdWUgd2hlbiB0aGUgc2VsZWN0ZWQgaW5kZXggY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2IC0gdGhlIHByZXZpb3VzIHNlbGVjdGVkIGluZGV4XG4gICAgICogQHBhcmFtIG5leHQgLSB0aGUgbmV4dCBzZWxlY3RlZCBpbmRleFxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2VsZWN0ZWRJbmRleENoYW5nZWQocHJldiwgbmV4dCkge1xuICAgICAgICBzdXBlci5zZWxlY3RlZEluZGV4Q2hhbmdlZChwcmV2LCBuZXh0KTtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgIH1cbiAgICBwb3NpdGlvbkNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb25BdHRyaWJ1dGUgPSB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLnNldFBvc2l0aW9uaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBhbmQgYXBwbHkgbGlzdGJveCBwb3NpdGlvbmluZyBiYXNlZCBvbiBhdmFpbGFibGUgdmlld3BvcnQgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2UgLSBkaXJlY3Rpb24gdG8gZm9yY2UgdGhlIGxpc3Rib3ggdG8gZGlzcGxheVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXRQb3NpdGlvbmluZygpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEJveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBjb25zdCBhdmFpbGFibGVCb3R0b20gPSB2aWV3cG9ydEhlaWdodCAtIGN1cnJlbnRCb3guYm90dG9tO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5mb3JjZWRQb3NpdGlvblxuICAgICAgICAgICAgPyB0aGlzLnBvc2l0aW9uQXR0cmlidXRlXG4gICAgICAgICAgICA6IGN1cnJlbnRCb3gudG9wID4gYXZhaWxhYmxlQm90dG9tXG4gICAgICAgICAgICAgICAgPyBTZWxlY3RQb3NpdGlvbi5hYm92ZVxuICAgICAgICAgICAgICAgIDogU2VsZWN0UG9zaXRpb24uYmVsb3c7XG4gICAgICAgIHRoaXMucG9zaXRpb25BdHRyaWJ1dGUgPSB0aGlzLmZvcmNlZFBvc2l0aW9uXG4gICAgICAgICAgICA/IHRoaXMucG9zaXRpb25BdHRyaWJ1dGVcbiAgICAgICAgICAgIDogdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPVxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9PT0gU2VsZWN0UG9zaXRpb24uYWJvdmUgPyB+fmN1cnJlbnRCb3gudG9wIDogfn5hdmFpbGFibGVCb3R0b207XG4gICAgfVxuICAgIG1heEhlaWdodENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3Rib3gpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGJveC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tbWF4LWhlaWdodFwiLCBgJHt0aGlzLm1heEhlaWdodH1weGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN5bmNocm9uaXplIHRoZSBgYXJpYS1kaXNhYmxlZGAgcHJvcGVydHkgd2hlbiB0aGUgYGRpc2FibGVkYCBwcm9wZXJ0eSBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByZXYgLSBUaGUgcHJldmlvdXMgZGlzYWJsZWQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbmV4dCAtIFRoZSBuZXh0IGRpc2FibGVkIHZhbHVlXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBkaXNhYmxlZENoYW5nZWQocHJldiwgbmV4dCkge1xuICAgICAgICBpZiAoc3VwZXIuZGlzYWJsZWRDaGFuZ2VkKSB7XG4gICAgICAgICAgICBzdXBlci5kaXNhYmxlZENoYW5nZWQocHJldiwgbmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcmlhRGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBlbGVtZW50IHRvIGl0cyBmaXJzdCBzZWxlY3RhYmxlIG9wdGlvbiB3aGVuIGl0cyBwYXJlbnQgZm9ybSBpcyByZXNldC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZvcm1SZXNldENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnNldFByb3h5T3B0aW9ucygpO1xuICAgICAgICAvLyBDYWxsIHRoZSBiYXNlIGNsYXNzJ3MgaW1wbGVtZW50YXRpb24gc2V0RGVmYXVsdFNlbGVjdGVkT3B0aW9uIGluc3RlYWQgb2YgdGhlIHNlbGVjdCdzXG4gICAgICAgIC8vIG92ZXJyaWRlLCBpbiBvcmRlciB0byByZXNldCB0aGUgc2VsZWN0ZWRJbmRleCB3aXRob3V0IHVzaW5nIHRoZSB2YWx1ZSBwcm9wZXJ0eS5cbiAgICAgICAgc3VwZXIuc2V0RGVmYXVsdFNlbGVjdGVkT3B0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBvcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBsaXN0Ym94IHdoZW4gdGhlIHNlbGVjdCBpcyBjbGlja2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgLSB0aGUgbW91c2UgZXZlbnRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjbGlja0hhbmRsZXIoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nIGlmIHRoZSBzZWxlY3QgaXMgZGlzYWJsZWRcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcGVuKSB7XG4gICAgICAgICAgICBjb25zdCBjYXB0dXJlZCA9IGUudGFyZ2V0LmNsb3Nlc3QoYG9wdGlvbixbcm9sZT1vcHRpb25dYCk7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZWQgJiYgY2FwdHVyZWQuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuY2xpY2tIYW5kbGVyKGUpO1xuICAgICAgICB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuO1xuICAgICAgICBpZiAoIXRoaXMub3BlbiAmJiB0aGlzLmluZGV4V2hlbk9wZW5lZCAhPT0gdGhpcy5zZWxlY3RlZEluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgZm9jdXMgc3RhdGUgd2hlbiB0aGUgZWxlbWVudCBvciBpdHMgY2hpbGRyZW4gbG9zZSBmb2N1cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIC0gVGhlIGZvY3VzIGV2ZW50XG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZm9jdXNvdXRIYW5kbGVyKGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMub3Blbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9jdXNUYXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQ7XG4gICAgICAgIGlmICh0aGlzLmlzU2FtZU5vZGUoZm9jdXNUYXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoZm9jdXNUYXJnZXQpKSkge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleFdoZW5PcGVuZWQgIT09IHRoaXMuc2VsZWN0ZWRJbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3luY2hyb25pemUgdGhlIGZvcm0tYXNzb2NpYXRlZCBwcm94eSBhbmQgdXBkYXRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBvZiB0aGUgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2IC0gdGhlIHByZXZpb3VzIGNvbGxlY3Rpb24gb2Ygc2xvdHRlZCBvcHRpb24gZWxlbWVudHNcbiAgICAgKiBAcGFyYW0gbmV4dCAtIHRoZSBuZXh0IGNvbGxlY3Rpb24gb2Ygc2xvdHRlZCBvcHRpb24gZWxlbWVudHNcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHNsb3R0ZWRPcHRpb25zQ2hhbmdlZChwcmV2LCBuZXh0KSB7XG4gICAgICAgIHN1cGVyLnNsb3R0ZWRPcHRpb25zQ2hhbmdlZChwcmV2LCBuZXh0KTtcbiAgICAgICAgdGhpcy5zZXRQcm94eU9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgIH1cbiAgICBzZXREZWZhdWx0U2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IChfYSA9IHRoaXMub3B0aW9ucykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKS5maWx0ZXIoTGlzdGJveC5zbG90dGVkT3B0aW9uRmlsdGVyKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maW5kSW5kZXgoZWwgPT4gZWwuaGFzQXR0cmlidXRlKFwic2VsZWN0ZWRcIikgfHwgZWwuc2VsZWN0ZWQgfHwgZWwudmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgYW5kIGZpbGwgdGhlIHByb3h5IHRvIG1hdGNoIHRoZSBjb21wb25lbnQncyBvcHRpb25zLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2V0UHJveHlPcHRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50ICYmIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5vcHRpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3h5T3B0aW9uID0gb3B0aW9uLnByb3h5IHx8XG4gICAgICAgICAgICAgICAgICAgIChvcHRpb24gaW5zdGFuY2VvZiBIVE1MT3B0aW9uRWxlbWVudCA/IG9wdGlvbi5jbG9uZU5vZGUoKSA6IG51bGwpO1xuICAgICAgICAgICAgICAgIGlmIChwcm94eU9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3h5LmFwcGVuZENoaWxkKHByb3h5T3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGUga2V5Ym9hcmQgaW50ZXJhY3Rpb24gZm9yIHRoZSBzZWxlY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAtIHRoZSBrZXlib2FyZCBldmVudFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGtleWRvd25IYW5kbGVyKGUpIHtcbiAgICAgICAgc3VwZXIua2V5ZG93bkhhbmRsZXIoZSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGUua2V5IHx8IGUua2V5LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiIFwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZWFoZWFkRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9ICF0aGlzLm9wZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkVudGVyXCI6IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gIXRoaXMub3BlbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJFc2NhcGVcIjoge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiVGFiXCI6IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3Blbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcGVuICYmIHRoaXMuaW5kZXhXaGVuT3BlbmVkICE9PSB0aGlzLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWUodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmluZGV4V2hlbk9wZW5lZCA9IHRoaXMuc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuZm9yY2VkUG9zaXRpb24gPSAhIXRoaXMucG9zaXRpb25BdHRyaWJ1dGU7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJvcGVuXCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBTZWxlY3QucHJvdG90eXBlLCBcIm9wZW5cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwicG9zaXRpb25cIiB9KVxuXSwgU2VsZWN0LnByb3RvdHlwZSwgXCJwb3NpdGlvbkF0dHJpYnV0ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgU2VsZWN0LnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgU2VsZWN0LnByb3RvdHlwZSwgXCJtYXhIZWlnaHRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIFNlbGVjdC5wcm90b3R5cGUsIFwiZGlzcGxheVZhbHVlXCIsIHZvaWQgMCk7XG4vKipcbiAqIEluY2x1ZGVzIEFSSUEgc3RhdGVzIGFuZCBwcm9wZXJ0aWVzIHJlbGF0aW5nIHRvIHRoZSBBUklBIHNlbGVjdCByb2xlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIERlbGVnYXRlc0FSSUFTZWxlY3Qge1xufVxuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgRGVsZWdhdGVzQVJJQVNlbGVjdC5wcm90b3R5cGUsIFwiYXJpYUNvbnRyb2xzXCIsIHZvaWQgMCk7XG5hcHBseU1peGlucyhEZWxlZ2F0ZXNBUklBU2VsZWN0LCBEZWxlZ2F0ZXNBUklBTGlzdGJveCk7XG5hcHBseU1peGlucyhTZWxlY3QsIFN0YXJ0RW5kLCBEZWxlZ2F0ZXNBUklBU2VsZWN0KTtcbiIsImltcG9ydCB7IGh0bWwsIHJlZiwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgTGlzdGJveCB9IGZyb20gXCIuLi9saXN0Ym94L2xpc3Rib3guanNcIjtcbmltcG9ydCB7IGVuZFNsb3RUZW1wbGF0ZSwgc3RhcnRTbG90VGVtcGxhdGUgfSBmcm9tIFwiLi4vcGF0dGVybnMvc3RhcnQtZW5kLmpzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoU2VsZWN0OmNsYXNzKX0gY29tcG9uZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc2VsZWN0VGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHRlbXBsYXRlXG4gICAgICAgIGNsYXNzPVwiJHt4ID0+ICh4Lm9wZW4gPyBcIm9wZW5cIiA6IFwiXCIpfSAke3ggPT4geC5kaXNhYmxlZCA/IFwiZGlzYWJsZWRcIiA6IFwiXCJ9ICR7eCA9PiB4LnBvc2l0aW9ufVwiXG4gICAgICAgIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cIiR7eCA9PiB4LmFyaWFBY3RpdmVEZXNjZW5kYW50fVwiXG4gICAgICAgIGFyaWEtY29udHJvbHM9XCIke3ggPT4geC5hcmlhQ29udHJvbHN9XCJcbiAgICAgICAgYXJpYS1kaXNhYmxlZD1cIiR7eCA9PiB4LmFyaWFEaXNhYmxlZH1cIlxuICAgICAgICBhcmlhLWV4cGFuZGVkPVwiJHt4ID0+IHguYXJpYUV4cGFuZGVkfVwiXG4gICAgICAgIGFyaWEtaGFzcG9wdXA9XCJsaXN0Ym94XCJcbiAgICAgICAgP29wZW49XCIke3ggPT4geC5vcGVufVwiXG4gICAgICAgIHJvbGU9XCJjb21ib2JveFwiXG4gICAgICAgIHRhYmluZGV4PVwiJHt4ID0+ICgheC5kaXNhYmxlZCA/IFwiMFwiIDogbnVsbCl9XCJcbiAgICAgICAgQGNsaWNrPVwiJHsoeCwgYykgPT4geC5jbGlja0hhbmRsZXIoYy5ldmVudCl9XCJcbiAgICAgICAgQGZvY3Vzb3V0PVwiJHsoeCwgYykgPT4geC5mb2N1c291dEhhbmRsZXIoYy5ldmVudCl9XCJcbiAgICAgICAgQGtleWRvd249XCIkeyh4LCBjKSA9PiB4LmtleWRvd25IYW5kbGVyKGMuZXZlbnQpfVwiXG4gICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiIHBhcnQ9XCJjb250cm9sXCIgP2Rpc2FibGVkPVwiJHt4ID0+IHguZGlzYWJsZWR9XCI+XG4gICAgICAgICAgICAke3N0YXJ0U2xvdFRlbXBsYXRlKGNvbnRleHQsIGRlZmluaXRpb24pfVxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJ1dHRvbi1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0ZWQtdmFsdWVcIiBwYXJ0PVwic2VsZWN0ZWQtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cInNlbGVjdGVkLXZhbHVlXCI+JHt4ID0+IHguZGlzcGxheVZhbHVlfTwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwiaW5kaWNhdG9yXCIgcGFydD1cImluZGljYXRvclwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAke2RlZmluaXRpb24uaW5kaWNhdG9yIHx8IFwiXCJ9XG4gICAgICAgICAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgICR7ZW5kU2xvdFRlbXBsYXRlKGNvbnRleHQsIGRlZmluaXRpb24pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJsaXN0Ym94XCJcbiAgICAgICAgICAgIGlkPVwiJHt4ID0+IHgubGlzdGJveElkfVwiXG4gICAgICAgICAgICBwYXJ0PVwibGlzdGJveFwiXG4gICAgICAgICAgICByb2xlPVwibGlzdGJveFwiXG4gICAgICAgICAgICA/ZGlzYWJsZWQ9XCIke3ggPT4geC5kaXNhYmxlZH1cIlxuICAgICAgICAgICAgP2hpZGRlbj1cIiR7eCA9PiAheC5vcGVufVwiXG4gICAgICAgICAgICAke3JlZihcImxpc3Rib3hcIil9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxzbG90XG4gICAgICAgICAgICAgICAgJHtzbG90dGVkKHtcbiAgICBmaWx0ZXI6IExpc3Rib3guc2xvdHRlZE9wdGlvbkZpbHRlcixcbiAgICBmbGF0dGVuOiB0cnVlLFxuICAgIHByb3BlcnR5OiBcInNsb3R0ZWRPcHRpb25zXCIsXG59KX1cbiAgICAgICAgICAgID48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjb3JuZXJSYWRpdXMsIGRlc2lnblVuaXQsIGRpc2FibGVkT3BhY2l0eSwgZHJvcGRvd25CYWNrZ3JvdW5kLCBkcm9wZG93bkJvcmRlciwgZHJvcGRvd25MaXN0TWF4SGVpZ2h0LCBmb2N1c0JvcmRlciwgZm9udEZhbWlseSwgZm9yZWdyb3VuZCwgaW5wdXRIZWlnaHQsIGlucHV0TWluV2lkdGgsIGxpc3RBY3RpdmVTZWxlY3Rpb25CYWNrZ3JvdW5kLCBsaXN0QWN0aXZlU2VsZWN0aW9uRm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUsIHR5cGVSYW1wQmFzZUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgZHJvcGRvd25TdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdpbmxpbmUtZmxleCcpfSA6aG9zdCB7XG5cdFx0YmFja2dyb3VuZDogJHtkcm9wZG93bkJhY2tncm91bmR9O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Y29udGFpbjogY29udGVudHM7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0aGVpZ2h0OiBjYWxjKCR7aW5wdXRIZWlnaHR9ICogMXB4KTtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdFx0bWluLXdpZHRoOiAke2lucHV0TWluV2lkdGh9O1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0dmVydGljYWwtYWxpZ246IHRvcDtcblx0fVxuXHQuY29udHJvbCB7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtkcm9wZG93bkJvcmRlcn07XG5cdFx0Ym9yZGVyLXJhZGl1czogY2FsYygke2Nvcm5lclJhZGl1c30gKiAxcHgpO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcEJhc2VGb250U2l6ZX07XG5cdFx0bGluZS1oZWlnaHQ6ICR7dHlwZVJhbXBCYXNlTGluZUhlaWdodH07XG5cdFx0bWluLWhlaWdodDogMTAwJTtcblx0XHRwYWRkaW5nOiAycHggNnB4IDJweCA4cHg7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cblx0Lmxpc3Rib3gge1xuXHRcdGJhY2tncm91bmQ6ICR7ZHJvcGRvd25CYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdGJvcmRlci1yYWRpdXM6IGNhbGMoJHtjb3JuZXJSYWRpdXN9ICogMXB4KTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0bGVmdDogMDtcblx0XHRtYXgtaGVpZ2h0OiAke2Ryb3Bkb3duTGlzdE1heEhlaWdodH07XG5cdFx0cGFkZGluZzogMCAwIGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgMDtcblx0XHRvdmVyZmxvdy15OiBhdXRvO1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHR6LWluZGV4OiAxO1xuXHR9XG5cdC5saXN0Ym94W2hpZGRlbl0ge1xuXHRcdGRpc3BsYXk6IG5vbmU7XG5cdH1cblx0Omhvc3QoOiR7Zm9jdXNWaXNpYmxlfSkgLmNvbnRyb2wge1xuXHRcdGJvcmRlci1jb2xvcjogJHtmb2N1c0JvcmRlcn07XG5cdH1cblx0Omhvc3QoOm5vdChbZGlzYWJsZWRdKTpob3Zlcikge1xuXHRcdGJhY2tncm91bmQ6ICR7ZHJvcGRvd25CYWNrZ3JvdW5kfTtcblx0XHRib3JkZXItY29sb3I6ICR7ZHJvcGRvd25Cb3JkZXJ9O1xuXHR9XG5cdDpob3N0KDoke2ZvY3VzVmlzaWJsZX0pIDo6c2xvdHRlZChbYXJpYS1zZWxlY3RlZD1cInRydWVcIl1bcm9sZT1cIm9wdGlvblwiXTpub3QoW2Rpc2FibGVkXSkpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2xpc3RBY3RpdmVTZWxlY3Rpb25CYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHRcdGNvbG9yOiAke2xpc3RBY3RpdmVTZWxlY3Rpb25Gb3JlZ3JvdW5kfTtcblx0fVxuXHQ6aG9zdChbZGlzYWJsZWRdKSB7XG5cdFx0Y3Vyc29yOiAke2Rpc2FibGVkQ3Vyc29yfTtcblx0XHRvcGFjaXR5OiAke2Rpc2FibGVkT3BhY2l0eX07XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXSkgLmNvbnRyb2wge1xuXHRcdGN1cnNvcjogJHtkaXNhYmxlZEN1cnNvcn07XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXTpob3Zlcikge1xuXHRcdGJhY2tncm91bmQ6ICR7ZHJvcGRvd25CYWNrZ3JvdW5kfTtcblx0XHRjb2xvcjogJHtmb3JlZ3JvdW5kfTtcblx0XHRmaWxsOiBjdXJyZW50Y29sb3I7XG5cdH1cblx0Omhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLmNvbnRyb2w6YWN0aXZlIHtcblx0XHRib3JkZXItY29sb3I6ICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KDplbXB0eSkgLmxpc3Rib3gge1xuXHRcdGRpc3BsYXk6IG5vbmU7XG5cdH1cblx0Omhvc3QoW29wZW5dKSAuY29udHJvbCB7XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2ZvY3VzQm9yZGVyfTtcblx0fVxuXHQ6aG9zdChbb3Blbl1bcG9zaXRpb249J2Fib3ZlJ10pIC5saXN0Ym94LFxuXHQ6aG9zdChbb3Blbl1bcG9zaXRpb249J2JlbG93J10pIC5jb250cm9sIHtcblx0XHRib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xuXHRcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xuXHR9XG5cdDpob3N0KFtvcGVuXVtwb3NpdGlvbj0nYWJvdmUnXSkgLmNvbnRyb2wsXG5cdDpob3N0KFtvcGVuXVtwb3NpdGlvbj0nYmVsb3cnXSkgLmxpc3Rib3gge1xuXHRcdGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XG5cdFx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XG5cdH1cblx0Omhvc3QoW29wZW5dW3Bvc2l0aW9uPSdhYm92ZSddKSAubGlzdGJveCB7XG5cdFx0Ym90dG9tOiBjYWxjKCR7aW5wdXRIZWlnaHR9ICogMXB4KTtcblx0fVxuXHQ6aG9zdChbb3Blbl1bcG9zaXRpb249J2JlbG93J10pIC5saXN0Ym94IHtcblx0XHR0b3A6IGNhbGMoJHtpbnB1dEhlaWdodH0gKiAxcHgpO1xuXHR9XG5cdC5zZWxlY3RlZC12YWx1ZSB7XG5cdFx0ZmxleDogMSAxIGF1dG87XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHR0ZXh0LWFsaWduOiBzdGFydDtcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHR9XG5cdC5pbmRpY2F0b3Ige1xuXHRcdGZsZXg6IDAgMCBhdXRvO1xuXHRcdG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDFlbTtcblx0fVxuXHRzbG90W25hbWU9J2xpc3Rib3gnXSB7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuXHQ6aG9zdChbb3Blbl0pIHNsb3RbbmFtZT0nbGlzdGJveCddIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0fVxuXHQuZW5kIHtcblx0XHRtYXJnaW4taW5saW5lLXN0YXJ0OiBhdXRvO1xuXHR9XG5cdC5zdGFydCxcblx0LmVuZCxcblx0LmluZGljYXRvcixcblx0LnNlbGVjdC1pbmRpY2F0b3IsXG5cdDo6c2xvdHRlZChzdmcpLFxuXHQ6OnNsb3R0ZWQoc3Bhbikge1xuXHRcdGZpbGw6IGN1cnJlbnRjb2xvcjtcblx0XHRoZWlnaHQ6IDFlbTtcblx0XHRtaW4taGVpZ2h0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA0cHgpO1xuXHRcdG1pbi13aWR0aDogY2FsYygke2Rlc2lnblVuaXR9ICogNHB4KTtcblx0XHR3aWR0aDogMWVtO1xuXHR9XG5cdDo6c2xvdHRlZChbcm9sZT0nb3B0aW9uJ10pLFxuXHQ6OnNsb3R0ZWQob3B0aW9uKSB7XG5cdFx0ZmxleDogMCAwIGF1dG87XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IFNlbGVjdFBvc2l0aW9uIGFzIERyb3Bkb3duUG9zaXRpb24sIFNlbGVjdCBhcyBGb3VuZGF0aW9uU2VsZWN0LCBzZWxlY3RUZW1wbGF0ZSBhcyB0ZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBkcm9wZG93blN0eWxlcyBhcyBzdHlsZXMgfSBmcm9tICcuL2Ryb3Bkb3duLnN0eWxlcyc7XG5leHBvcnQgeyBEcm9wZG93blBvc2l0aW9uIH07XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgZHJvcGRvd24gY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRHJvcGRvd24gZXh0ZW5kcyBGb3VuZGF0aW9uU2VsZWN0IHtcbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBsaW5rIGRyb3Bkb3duIHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1kcm9wZG93bj5gXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdnNDb2RlRHJvcGRvd24gPSBEcm9wZG93bi5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ2Ryb3Bkb3duJyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG4gICAgaW5kaWNhdG9yOiBgXG5cdFx0PHN2ZyBcblx0XHRcdGNsYXNzPVwic2VsZWN0LWluZGljYXRvclwiXG5cdFx0XHRwYXJ0PVwic2VsZWN0LWluZGljYXRvclwiXG5cdFx0XHR3aWR0aD1cIjE2XCIgXG5cdFx0XHRoZWlnaHQ9XCIxNlwiIFxuXHRcdFx0dmlld0JveD1cIjAgMCAxNiAxNlwiIFxuXHRcdFx0eG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIFxuXHRcdFx0ZmlsbD1cImN1cnJlbnRDb2xvclwiXG5cdFx0PlxuXHRcdFx0PHBhdGggXG5cdFx0XHRcdGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBcblx0XHRcdFx0Y2xpcC1ydWxlPVwiZXZlbm9kZFwiIFxuXHRcdFx0XHRkPVwiTTcuOTc2IDEwLjA3Mmw0LjM1Ny00LjM1Ny42Mi42MThMOC4yODQgMTFoLS42MThMMyA2LjMzM2wuNjE5LS42MTggNC4zNTcgNC4zNTd6XCJcblx0XHRcdC8+XG5cdFx0PC9zdmc+XG5cdGAsXG59KTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIG9ic2VydmFibGUgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50LCB9IGZyb20gXCIuLi9mb3VuZGF0aW9uLWVsZW1lbnQvZm91bmRhdGlvbi1lbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBBUklBR2xvYmFsU3RhdGVzQW5kUHJvcGVydGllcywgU3RhcnRFbmQsIH0gZnJvbSBcIi4uL3BhdHRlcm5zL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBhcHBseU1peGlucyB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXBwbHktbWl4aW5zLmpzXCI7XG4vKipcbiAqIEFuIEFuY2hvciBDdXN0b20gSFRNTCBFbGVtZW50LlxuICogQmFzZWQgbGFyZ2VseSBvbiB0aGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hIHwgPGE+IGVsZW1lbnQgfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmNob3IgZXh0ZW5kcyBGb3VuZGF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZXMgdGhlIGZvY3VzIGNhbGwgZm9yIHdoZXJlIGRlbGVnYXRlc0ZvY3VzIGlzIHVuc3VwcG9ydGVkLlxuICAgICAgICAgKiBUaGlzIGNoZWNrIHdvcmtzIGZvciBDaHJvbWUsIEVkZ2UgQ2hyb21pdW0sIEZpcmVGb3gsIGFuZCBTYWZhcmlcbiAgICAgICAgICogUmVsZXZhbnQgUFIgb24gdGhlIEZpcmVmb3ggYnJvd3NlcjogaHR0cHM6Ly9waGFicmljYXRvci5zZXJ2aWNlcy5tb3ppbGxhLmNvbS9EMTIzODU4XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhbmRsZVVuc3VwcG9ydGVkRGVsZWdhdGVzRm9jdXMgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgZGVsZWdhdGVzRm9jdXMgaXMgc3VwcG9ydGVkXG4gICAgICAgICAgICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiZcbiAgICAgICAgICAgICAgICAhd2luZG93LlNoYWRvd1Jvb3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwiZGVsZWdhdGVzRm9jdXNcIikgJiYgKChfYSA9IHRoaXMuJGZhc3RDb250cm9sbGVyLmRlZmluaXRpb24uc2hhZG93T3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGVnYXRlc0ZvY3VzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLmhhbmRsZVVuc3VwcG9ydGVkRGVsZWdhdGVzRm9jdXMoKTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBBbmNob3IucHJvdG90eXBlLCBcImRvd25sb2FkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBBbmNob3IucHJvdG90eXBlLCBcImhyZWZcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEFuY2hvci5wcm90b3R5cGUsIFwiaHJlZmxhbmdcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEFuY2hvci5wcm90b3R5cGUsIFwicGluZ1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgQW5jaG9yLnByb3RvdHlwZSwgXCJyZWZlcnJlcnBvbGljeVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgQW5jaG9yLnByb3RvdHlwZSwgXCJyZWxcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIEFuY2hvci5wcm90b3R5cGUsIFwidGFyZ2V0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBBbmNob3IucHJvdG90eXBlLCBcInR5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIEFuY2hvci5wcm90b3R5cGUsIFwiZGVmYXVsdFNsb3R0ZWRDb250ZW50XCIsIHZvaWQgMCk7XG4vKipcbiAqIEluY2x1ZGVzIEFSSUEgc3RhdGVzIGFuZCBwcm9wZXJ0aWVzIHJlbGF0aW5nIHRvIHRoZSBBUklBIGxpbmsgcm9sZVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIERlbGVnYXRlc0FSSUFMaW5rIHtcbn1cbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBhdHRyaWJ1dGU6IFwiYXJpYS1leHBhbmRlZFwiIH0pXG5dLCBEZWxlZ2F0ZXNBUklBTGluay5wcm90b3R5cGUsIFwiYXJpYUV4cGFuZGVkXCIsIHZvaWQgMCk7XG5hcHBseU1peGlucyhEZWxlZ2F0ZXNBUklBTGluaywgQVJJQUdsb2JhbFN0YXRlc0FuZFByb3BlcnRpZXMpO1xuYXBwbHlNaXhpbnMoQW5jaG9yLCBTdGFydEVuZCwgRGVsZWdhdGVzQVJJQUxpbmspO1xuIiwiaW1wb3J0IHsgaHRtbCwgcmVmLCBzbG90dGVkIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyBlbmRTbG90VGVtcGxhdGUsIHN0YXJ0U2xvdFRlbXBsYXRlIH0gZnJvbSBcIi4uL3BhdHRlcm5zL3N0YXJ0LWVuZC5qc1wiO1xuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jKEFuY2hvcjpjbGFzcyl9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGFuY2hvclRlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGh0bWwgYFxuICAgIDxhXG4gICAgICAgIGNsYXNzPVwiY29udHJvbFwiXG4gICAgICAgIHBhcnQ9XCJjb250cm9sXCJcbiAgICAgICAgZG93bmxvYWQ9XCIke3ggPT4geC5kb3dubG9hZH1cIlxuICAgICAgICBocmVmPVwiJHt4ID0+IHguaHJlZn1cIlxuICAgICAgICBocmVmbGFuZz1cIiR7eCA9PiB4LmhyZWZsYW5nfVwiXG4gICAgICAgIHBpbmc9XCIke3ggPT4geC5waW5nfVwiXG4gICAgICAgIHJlZmVycmVycG9saWN5PVwiJHt4ID0+IHgucmVmZXJyZXJwb2xpY3l9XCJcbiAgICAgICAgcmVsPVwiJHt4ID0+IHgucmVsfVwiXG4gICAgICAgIHRhcmdldD1cIiR7eCA9PiB4LnRhcmdldH1cIlxuICAgICAgICB0eXBlPVwiJHt4ID0+IHgudHlwZX1cIlxuICAgICAgICBhcmlhLWF0b21pYz1cIiR7eCA9PiB4LmFyaWFBdG9taWN9XCJcbiAgICAgICAgYXJpYS1idXN5PVwiJHt4ID0+IHguYXJpYUJ1c3l9XCJcbiAgICAgICAgYXJpYS1jb250cm9scz1cIiR7eCA9PiB4LmFyaWFDb250cm9sc31cIlxuICAgICAgICBhcmlhLWN1cnJlbnQ9XCIke3ggPT4geC5hcmlhQ3VycmVudH1cIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiJHt4ID0+IHguYXJpYURlc2NyaWJlZGJ5fVwiXG4gICAgICAgIGFyaWEtZGV0YWlscz1cIiR7eCA9PiB4LmFyaWFEZXRhaWxzfVwiXG4gICAgICAgIGFyaWEtZGlzYWJsZWQ9XCIke3ggPT4geC5hcmlhRGlzYWJsZWR9XCJcbiAgICAgICAgYXJpYS1lcnJvcm1lc3NhZ2U9XCIke3ggPT4geC5hcmlhRXJyb3JtZXNzYWdlfVwiXG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9XCIke3ggPT4geC5hcmlhRXhwYW5kZWR9XCJcbiAgICAgICAgYXJpYS1mbG93dG89XCIke3ggPT4geC5hcmlhRmxvd3RvfVwiXG4gICAgICAgIGFyaWEtaGFzcG9wdXA9XCIke3ggPT4geC5hcmlhSGFzcG9wdXB9XCJcbiAgICAgICAgYXJpYS1oaWRkZW49XCIke3ggPT4geC5hcmlhSGlkZGVufVwiXG4gICAgICAgIGFyaWEtaW52YWxpZD1cIiR7eCA9PiB4LmFyaWFJbnZhbGlkfVwiXG4gICAgICAgIGFyaWEta2V5c2hvcnRjdXRzPVwiJHt4ID0+IHguYXJpYUtleXNob3J0Y3V0c31cIlxuICAgICAgICBhcmlhLWxhYmVsPVwiJHt4ID0+IHguYXJpYUxhYmVsfVwiXG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT1cIiR7eCA9PiB4LmFyaWFMYWJlbGxlZGJ5fVwiXG4gICAgICAgIGFyaWEtbGl2ZT1cIiR7eCA9PiB4LmFyaWFMaXZlfVwiXG4gICAgICAgIGFyaWEtb3ducz1cIiR7eCA9PiB4LmFyaWFPd25zfVwiXG4gICAgICAgIGFyaWEtcmVsZXZhbnQ9XCIke3ggPT4geC5hcmlhUmVsZXZhbnR9XCJcbiAgICAgICAgYXJpYS1yb2xlZGVzY3JpcHRpb249XCIke3ggPT4geC5hcmlhUm9sZWRlc2NyaXB0aW9ufVwiXG4gICAgICAgICR7cmVmKFwiY29udHJvbFwiKX1cbiAgICA+XG4gICAgICAgICR7c3RhcnRTbG90VGVtcGxhdGUoY29udGV4dCwgZGVmaW5pdGlvbil9XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiY29udGVudFwiIHBhcnQ9XCJjb250ZW50XCI+XG4gICAgICAgICAgICA8c2xvdCAke3Nsb3R0ZWQoXCJkZWZhdWx0U2xvdHRlZENvbnRlbnRcIil9Pjwvc2xvdD5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICAke2VuZFNsb3RUZW1wbGF0ZShjb250ZXh0LCBkZWZpbml0aW9uKX1cbiAgICA8L2E+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNwbGF5LCBmb2N1c1Zpc2libGUsIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuaW1wb3J0IHsgYm9yZGVyV2lkdGgsIGNvcm5lclJhZGl1cywgZm9jdXNCb3JkZXIsIGZvbnRGYW1pbHksIGxpbmtBY3RpdmVGb3JlZ3JvdW5kLCBsaW5rRm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUsIHR5cGVSYW1wQmFzZUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgbGlua1N0eWxlcyA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBjc3MgYFxuXHQke2Rpc3BsYXkoJ2lubGluZS1mbGV4Jyl9IDpob3N0IHtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGNvbG9yOiAke2xpbmtGb3JlZ3JvdW5kfTtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0ZmlsbDogY3VycmVudGNvbG9yO1xuXHRcdGZvbnQtZmFtaWx5OiAke2ZvbnRGYW1pbHl9O1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcEJhc2VGb250U2l6ZX07XG5cdFx0bGluZS1oZWlnaHQ6ICR7dHlwZVJhbXBCYXNlTGluZUhlaWdodH07XG5cdFx0b3V0bGluZTogbm9uZTtcblx0fVxuXHQuY29udHJvbCB7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyOiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMXB4KSBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiBjYWxjKCR7Y29ybmVyUmFkaXVzfSAqIDFweCk7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0XHRjdXJzb3I6IGluaGVyaXQ7XG5cdFx0ZmlsbDogaW5oZXJpdDtcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRoZWlnaHQ6IGluaGVyaXQ7XG5cdFx0cGFkZGluZzogMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHR9XG5cdC5jb250cm9sOjotbW96LWZvY3VzLWlubmVyIHtcblx0XHRib3JkZXI6IDA7XG5cdH1cblx0Omhvc3QoOmhvdmVyKSB7XG5cdFx0Y29sb3I6ICR7bGlua0FjdGl2ZUZvcmVncm91bmR9O1xuXHR9XG5cdDpob3N0KDpob3ZlcikgLmNvbnRlbnQge1xuXHRcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuXHR9XG5cdDpob3N0KDphY3RpdmUpIHtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRjb2xvcjogJHtsaW5rQWN0aXZlRm9yZWdyb3VuZH07XG5cdH1cblx0Omhvc3QoOiR7Zm9jdXNWaXNpYmxlfSkgLmNvbnRyb2wge1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtmb2N1c0JvcmRlcn07XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEFuY2hvciBhcyBGb3VuZGF0aW9uQW5jaG9yLCBhbmNob3JUZW1wbGF0ZSBhcyB0ZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBsaW5rU3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vbGluay5zdHlsZXMnO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIGxpbmsgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgTGluayBleHRlbmRzIEZvdW5kYXRpb25BbmNob3Ige1xufVxuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIGxpbmsgY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1saW5rPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVMaW5rID0gTGluay5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ2xpbmsnLFxuICAgIHRlbXBsYXRlLFxuICAgIHN0eWxlcyxcbiAgICBzaGFkb3dPcHRpb25zOiB7XG4gICAgICAgIGRlbGVnYXRlc0ZvY3VzOiB0cnVlLFxuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGVuZFNsb3RUZW1wbGF0ZSwgc3RhcnRTbG90VGVtcGxhdGUgfSBmcm9tIFwiLi4vcGF0dGVybnMvc3RhcnQtZW5kLmpzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoTGlzdGJveE9wdGlvbjpjbGFzcyl9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGxpc3Rib3hPcHRpb25UZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGVcbiAgICAgICAgYXJpYS1jaGVja2VkPVwiJHt4ID0+IHguYXJpYUNoZWNrZWR9XCJcbiAgICAgICAgYXJpYS1kaXNhYmxlZD1cIiR7eCA9PiB4LmFyaWFEaXNhYmxlZH1cIlxuICAgICAgICBhcmlhLXBvc2luc2V0PVwiJHt4ID0+IHguYXJpYVBvc0luU2V0fVwiXG4gICAgICAgIGFyaWEtc2VsZWN0ZWQ9XCIke3ggPT4geC5hcmlhU2VsZWN0ZWR9XCJcbiAgICAgICAgYXJpYS1zZXRzaXplPVwiJHt4ID0+IHguYXJpYVNldFNpemV9XCJcbiAgICAgICAgY2xhc3M9XCIke3ggPT4gW3guY2hlY2tlZCAmJiBcImNoZWNrZWRcIiwgeC5zZWxlY3RlZCAmJiBcInNlbGVjdGVkXCIsIHguZGlzYWJsZWQgJiYgXCJkaXNhYmxlZFwiXVxuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAuam9pbihcIiBcIil9XCJcbiAgICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgPlxuICAgICAgICAke3N0YXJ0U2xvdFRlbXBsYXRlKGNvbnRleHQsIGRlZmluaXRpb24pfVxuICAgICAgICA8c3BhbiBjbGFzcz1cImNvbnRlbnRcIiBwYXJ0PVwiY29udGVudFwiPlxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICR7ZW5kU2xvdFRlbXBsYXRlKGNvbnRleHQsIGRlZmluaXRpb24pfVxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjb3JuZXJSYWRpdXMsIGRlc2lnblVuaXQsIGRpc2FibGVkT3BhY2l0eSwgZm9jdXNCb3JkZXIsIGZvcmVncm91bmQsIGxpc3RBY3RpdmVTZWxlY3Rpb25CYWNrZ3JvdW5kLCBsaXN0QWN0aXZlU2VsZWN0aW9uRm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUsIHR5cGVSYW1wQmFzZUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3Qgb3B0aW9uU3R5bGVzID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGNzcyBgXG5cdCR7ZGlzcGxheSgnaW5saW5lLWZsZXgnKX0gOmhvc3Qge1xuXHRcdGZvbnQtZmFtaWx5OiB2YXIoLS1ib2R5LWZvbnQpO1xuXHRcdGJvcmRlci1yYWRpdXM6ICR7Y29ybmVyUmFkaXVzfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdGZpbGw6IGN1cnJlbnRjb2xvcjtcblx0XHRmb250LXNpemU6ICR7dHlwZVJhbXBCYXNlRm9udFNpemV9O1xuXHRcdGxpbmUtaGVpZ2h0OiAke3R5cGVSYW1wQmFzZUxpbmVIZWlnaHR9O1xuXHRcdG1hcmdpbjogMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0cGFkZGluZzogMCBjYWxjKCgke2Rlc2lnblVuaXR9IC8gMikgKiAxcHgpXG5cdFx0XHRjYWxjKCgke2Rlc2lnblVuaXR9IC8gNCkgKiAxcHgpO1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cblx0Omhvc3QoOiR7Zm9jdXNWaXNpYmxlfSkge1xuXHRcdGJvcmRlci1jb2xvcjogJHtmb2N1c0JvcmRlcn07XG5cdFx0YmFja2dyb3VuZDogJHtsaXN0QWN0aXZlU2VsZWN0aW9uQmFja2dyb3VuZH07XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdH1cblx0Omhvc3QoW2FyaWEtc2VsZWN0ZWQ9J3RydWUnXSkge1xuXHRcdGJhY2tncm91bmQ6ICR7bGlzdEFjdGl2ZVNlbGVjdGlvbkJhY2tncm91bmR9O1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtmb2N1c0JvcmRlcn07XG5cdFx0Y29sb3I6ICR7bGlzdEFjdGl2ZVNlbGVjdGlvbkZvcmVncm91bmR9O1xuXHR9XG5cdDpob3N0KDphY3RpdmUpIHtcblx0XHRiYWNrZ3JvdW5kOiAke2xpc3RBY3RpdmVTZWxlY3Rpb25CYWNrZ3JvdW5kfTtcblx0XHRjb2xvcjogJHtsaXN0QWN0aXZlU2VsZWN0aW9uRm9yZWdyb3VuZH07XG5cdH1cblx0Omhvc3QoOm5vdChbYXJpYS1zZWxlY3RlZD0ndHJ1ZSddKTpob3Zlcikge1xuXHRcdGJhY2tncm91bmQ6ICR7bGlzdEFjdGl2ZVNlbGVjdGlvbkJhY2tncm91bmR9O1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtmb2N1c0JvcmRlcn07XG5cdFx0Y29sb3I6ICR7bGlzdEFjdGl2ZVNlbGVjdGlvbkZvcmVncm91bmR9O1xuXHR9XG5cdDpob3N0KDpub3QoW2FyaWEtc2VsZWN0ZWQ9J3RydWUnXSk6YWN0aXZlKSB7XG5cdFx0YmFja2dyb3VuZDogJHtsaXN0QWN0aXZlU2VsZWN0aW9uQmFja2dyb3VuZH07XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXSkge1xuXHRcdGN1cnNvcjogJHtkaXNhYmxlZEN1cnNvcn07XG5cdFx0b3BhY2l0eTogJHtkaXNhYmxlZE9wYWNpdHl9O1xuXHR9XG5cdDpob3N0KFtkaXNhYmxlZF06aG92ZXIpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuXHR9XG5cdC5jb250ZW50IHtcblx0XHRncmlkLWNvbHVtbi1zdGFydDogMjtcblx0XHRqdXN0aWZ5LXNlbGY6IHN0YXJ0O1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IExpc3Rib3hPcHRpb24gYXMgRm91bmRhdGlvbkxpc3Rib3hPcHRpb24sIGxpc3Rib3hPcHRpb25UZW1wbGF0ZSBhcyB0ZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBvcHRpb25TdHlsZXMgYXMgc3R5bGVzIH0gZnJvbSAnLi9vcHRpb24uc3R5bGVzJztcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBvcHRpb24gY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT3B0aW9uIGV4dGVuZHMgRm91bmRhdGlvbkxpc3Rib3hPcHRpb24ge1xuICAgIC8qKlxuICAgICAqIENvbXBvbmVudCBsaWZlY3ljbGUgbWV0aG9kIHRoYXQgcnVucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5zZXJ0ZWRcbiAgICAgKiBpbnRvIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy50ZXh0Q29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byB0aGUgbGFiZWwgaWYgdGhlcmUgaXMgbm8gdGV4dCBjb250ZW50XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdPcHRpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBvcHRpb24gY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1vcHRpb24+YFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHZzQ29kZU9wdGlvbiA9IE9wdGlvbi5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ29wdGlvbicsXG4gICAgdGVtcGxhdGUsXG4gICAgc3R5bGVzLFxufSk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIGtlZXBzIGEgZ2l2ZW4gdmFsdWUgd2l0aGluIHRoZSBib3VuZHMgb2YgYSBtaW4gYW5kIG1heCB2YWx1ZS4gSWYgdGhlIHZhbHVlXG4gKiBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4LCB0aGUgbWluaW11bSB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLiBJZiB0aGUgdmFsdWUgaXMgc21hbGxlciB0aGFuIHRoZSBtaW5pbXVtLFxuICogdGhlIG1heGltdW0gd2lsbCBiZSByZXR1cm5lZC4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgaXMgcmV0dXJuZWQgdW4tY2hhbmdlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBJbkJvdW5kcyhtaW4sIG1heCwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYSB2YWx1ZSBpcyBiZXR3ZWVuIGEgbWluIGFuZCBtYXggdmFsdWUuIElmIHZhbHVlIGlzIGxvd2VyIHRoYW4gbWluLCBtaW4gd2lsbCBiZSByZXR1cm5lZC5cbiAqIElmIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBtYXgsIG1heCB3aWxsIGJlIHJldHVybmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGltaXQobWluLCBtYXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgbnVtYmVyIHZhbHVlIGlzIHdpdGhpbiBhIHNwZWNpZmllZCByYW5nZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEBwYXJhbSBtaW4gLSB0aGUgcmFuZ2Ugc3RhcnRcbiAqIEBwYXJhbSBtYXggLSB0aGUgcmFuZ2UgZW5kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpblJhbmdlKHZhbHVlLCBtaW4sIG1heCA9IDApIHtcbiAgICBbbWluLCBtYXhdID0gW21pbiwgbWF4XS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgcmV0dXJuIG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8IG1heDtcbn1cbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIG9ic2VydmFibGUgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGtleUFycm93RG93biwga2V5QXJyb3dMZWZ0LCBrZXlBcnJvd1JpZ2h0LCBrZXlBcnJvd1VwLCBrZXlFbmQsIGtleUhvbWUsIHdyYXBJbkJvdW5kcywgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXNcIjtcbmltcG9ydCB7IFN0YXJ0RW5kIH0gZnJvbSBcIi4uL3BhdHRlcm5zL3N0YXJ0LWVuZC5qc1wiO1xuaW1wb3J0IHsgYXBwbHlNaXhpbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FwcGx5LW1peGlucy5qc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQsIH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbi8qKlxuICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jKFRhYnM6Y2xhc3MpfSBjb21wb25lbnRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHZhciBUYWJzT3JpZW50YXRpb247XG4oZnVuY3Rpb24gKFRhYnNPcmllbnRhdGlvbikge1xuICAgIFRhYnNPcmllbnRhdGlvbltcInZlcnRpY2FsXCJdID0gXCJ2ZXJ0aWNhbFwiO1xuICAgIFRhYnNPcmllbnRhdGlvbltcImhvcml6b250YWxcIl0gPSBcImhvcml6b250YWxcIjtcbn0pKFRhYnNPcmllbnRhdGlvbiB8fCAoVGFic09yaWVudGF0aW9uID0ge30pKTtcbi8qKlxuICogQSBUYWJzIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKiBJbXBsZW1lbnRzIHRoZSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdGFibGlzdCB8IEFSSUEgdGFibGlzdCB9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFRhYnMgZXh0ZW5kcyBGb3VuZGF0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3JpZW50YXRpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogb3JpZW50YXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBUYWJzT3JpZW50YXRpb24uaG9yaXpvbnRhbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIHNob3cgdGhlIGFjdGl2ZSBpbmRpY2F0b3JcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogYWN0aXZlaW5kaWNhdG9yXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFjdGl2ZWluZGljYXRvciA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd0FjdGl2ZUluZGljYXRvciA9IHRydWU7XG4gICAgICAgIHRoaXMucHJldkFjdGl2ZVRhYkluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5hY3RpdmVUYWJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMudGlja2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJjaGFuZ2VcIiwgdGhpcy5hY3RpdmV0YWIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzRGlzYWJsZWRFbGVtZW50ID0gKGVsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiKSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXNGb2N1c2FibGVFbGVtZW50ID0gKGVsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNEaXNhYmxlZEVsZW1lbnQoZWwpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFRhYnMgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBncmlkSG9yaXpvbnRhbFByb3BlcnR5ID0gXCJncmlkQ29sdW1uXCI7XG4gICAgICAgICAgICBjb25zdCBncmlkVmVydGljYWxQcm9wZXJ0eSA9IFwiZ3JpZFJvd1wiO1xuICAgICAgICAgICAgY29uc3QgZ3JpZFByb3BlcnR5ID0gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgID8gZ3JpZEhvcml6b250YWxQcm9wZXJ0eVxuICAgICAgICAgICAgICAgIDogZ3JpZFZlcnRpY2FsUHJvcGVydHk7XG4gICAgICAgICAgICB0aGlzLnRhYklkcyA9IHRoaXMuZ2V0VGFiSWRzKCk7XG4gICAgICAgICAgICB0aGlzLnRhYnBhbmVsSWRzID0gdGhpcy5nZXRUYWJQYW5lbElkcygpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWJJbmRleCA9IHRoaXMuZ2V0QWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd0FjdGl2ZUluZGljYXRvciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50YWJzLmZvckVhY2goKHRhYiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGFiLnNsb3QgPT09IFwidGFiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmVUYWIgPSB0aGlzLmFjdGl2ZVRhYkluZGV4ID09PSBpbmRleCAmJiB0aGlzLmlzRm9jdXNhYmxlRWxlbWVudCh0YWIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVpbmRpY2F0b3IgJiYgdGhpcy5pc0ZvY3VzYWJsZUVsZW1lbnQodGFiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93QWN0aXZlSW5kaWNhdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJJZCA9IHRoaXMudGFiSWRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFicGFuZWxJZCA9IHRoaXMudGFicGFuZWxJZHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB0YWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgdHlwZW9mIHRhYklkICE9PSBcInN0cmluZ1wiID8gYHRhYi0ke2luZGV4ICsgMX1gIDogdGFiSWQpO1xuICAgICAgICAgICAgICAgICAgICB0YWIuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCBpc0FjdGl2ZVRhYiA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGFiLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIiwgdHlwZW9mIHRhYnBhbmVsSWQgIT09IFwic3RyaW5nXCIgPyBgcGFuZWwtJHtpbmRleCArIDF9YCA6IHRhYnBhbmVsSWQpO1xuICAgICAgICAgICAgICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlVGFiQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVUYWJLZXlEb3duKTtcbiAgICAgICAgICAgICAgICAgICAgdGFiLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIGlzQWN0aXZlVGFiID8gXCIwXCIgOiBcIi0xXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmVUYWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZldGFiID0gdGFiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBpc24ndCBlbXB0aWVkIG91dCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgbmV4dCBzZXQgd2lsbCBtb3JwaCBpbnRvIGEgZ3JpZC1hcmVhIHN0eWxlIHNldHRpbmcgdGhhdCBpcyBub3Qgd2hhdCB3ZSB3YW50XG4gICAgICAgICAgICAgICAgdGFiLnN0eWxlW2dyaWRIb3Jpem9udGFsUHJvcGVydHldID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0YWIuc3R5bGVbZ3JpZFZlcnRpY2FsUHJvcGVydHldID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0YWIuc3R5bGVbZ3JpZFByb3BlcnR5XSA9IGAke2luZGV4ICsgMX1gO1xuICAgICAgICAgICAgICAgICF0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgID8gdGFiLmNsYXNzTGlzdC5hZGQoXCJ2ZXJ0aWNhbFwiKVxuICAgICAgICAgICAgICAgICAgICA6IHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwidmVydGljYWxcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRUYWJQYW5lbHMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhYklkcyA9IHRoaXMuZ2V0VGFiSWRzKCk7XG4gICAgICAgICAgICB0aGlzLnRhYnBhbmVsSWRzID0gdGhpcy5nZXRUYWJQYW5lbElkcygpO1xuICAgICAgICAgICAgdGhpcy50YWJwYW5lbHMuZm9yRWFjaCgodGFicGFuZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFiSWQgPSB0aGlzLnRhYklkc1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFicGFuZWxJZCA9IHRoaXMudGFicGFuZWxJZHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHRhYnBhbmVsLnNldEF0dHJpYnV0ZShcImlkXCIsIHR5cGVvZiB0YWJwYW5lbElkICE9PSBcInN0cmluZ1wiID8gYHBhbmVsLSR7aW5kZXggKyAxfWAgOiB0YWJwYW5lbElkKTtcbiAgICAgICAgICAgICAgICB0YWJwYW5lbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIiwgdHlwZW9mIHRhYklkICE9PSBcInN0cmluZ1wiID8gYHRhYi0ke2luZGV4ICsgMX1gIDogdGFiSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFiSW5kZXggIT09IGluZGV4XG4gICAgICAgICAgICAgICAgICAgID8gdGFicGFuZWwuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIDogdGFicGFuZWwucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVGFiQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGFiID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFRhYi5ub2RlVHlwZSA9PT0gMSAmJiB0aGlzLmlzRm9jdXNhYmxlRWxlbWVudChzZWxlY3RlZFRhYikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZBY3RpdmVUYWJJbmRleCA9IHRoaXMuYWN0aXZlVGFiSW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWJJbmRleCA9IHRoaXMudGFicy5pbmRleE9mKHNlbGVjdGVkVGFiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbXBvbmVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVRhYktleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBrZXlBcnJvd0xlZnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RCYWNrd2FyZChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBrZXlBcnJvd1JpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0Rm9yd2FyZChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGtleUFycm93VXA6XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RCYWNrd2FyZChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBrZXlBcnJvd0Rvd246XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RGb3J3YXJkKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlIb21lOlxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkanVzdCgtdGhpcy5hY3RpdmVUYWJJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Uga2V5RW5kOlxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkanVzdCh0aGlzLnRhYnMubGVuZ3RoIC0gdGhpcy5hY3RpdmVUYWJJbmRleCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGp1c3RGb3J3YXJkID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy50YWJzO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5hY3RpdmV0YWIgPyBncm91cC5pbmRleE9mKHRoaXMuYWN0aXZldGFiKSArIDEgOiAxO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBncm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBncm91cC5sZW5ndGggJiYgZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRm9jdXNhYmxlRWxlbWVudChncm91cFtpbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvVGFiQnlJbmRleChncm91cCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmV0YWIgJiYgaW5kZXggPT09IGdyb3VwLmluZGV4T2YodGhpcy5hY3RpdmV0YWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmRleCArIDEgPj0gZ3JvdXAubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkanVzdEJhY2t3YXJkID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy50YWJzO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5hY3RpdmV0YWIgPyBncm91cC5pbmRleE9mKHRoaXMuYWN0aXZldGFiKSAtIDEgOiAwO1xuICAgICAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBncm91cC5sZW5ndGggLSAxIDogaW5kZXg7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPj0gMCAmJiBncm91cC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNGb2N1c2FibGVFbGVtZW50KGdyb3VwW2luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlVG9UYWJCeUluZGV4KGdyb3VwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmRleCAtIDEgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gZ3JvdXAubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4IC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1vdmVUb1RhYkJ5SW5kZXggPSAoZ3JvdXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YWIgPSBncm91cFtpbmRleF07XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZXRhYiA9IHRhYjtcbiAgICAgICAgICAgIHRoaXMucHJldkFjdGl2ZVRhYkluZGV4ID0gdGhpcy5hY3RpdmVUYWJJbmRleDtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFiSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHRhYi5mb2N1cygpO1xuICAgICAgICAgICAgdGhpcy5zZXRDb21wb25lbnQoKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgb3JpZW50YXRpb25DaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VGFicygpO1xuICAgICAgICAgICAgdGhpcy5zZXRUYWJQYW5lbHMoKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQWN0aXZlSW5kaWNhdG9yUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhY3RpdmVpZENoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCAmJlxuICAgICAgICAgICAgdGhpcy50YWJzLmxlbmd0aCA8PSB0aGlzLnRhYnBhbmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucHJldkFjdGl2ZVRhYkluZGV4ID0gdGhpcy50YWJzLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gb2xkVmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRUYWJzKCk7XG4gICAgICAgICAgICB0aGlzLnNldFRhYlBhbmVscygpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVBY3RpdmVJbmRpY2F0b3JQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRhYnNDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQgJiZcbiAgICAgICAgICAgIHRoaXMudGFicy5sZW5ndGggPD0gdGhpcy50YWJwYW5lbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRhYnMoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGFiUGFuZWxzKCk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUFjdGl2ZUluZGljYXRvclBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGFicGFuZWxzQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkICYmXG4gICAgICAgICAgICB0aGlzLnRhYnBhbmVscy5sZW5ndGggPD0gdGhpcy50YWJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRUYWJzKCk7XG4gICAgICAgICAgICB0aGlzLnNldFRhYlBhbmVscygpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVBY3RpdmVJbmRpY2F0b3JQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFjdGl2ZUluZGV4KCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuYWN0aXZlaWQ7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWJJZHMuaW5kZXhPZih0aGlzLmFjdGl2ZWlkKSA9PT0gLTFcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IHRoaXMudGFiSWRzLmluZGV4T2YodGhpcy5hY3RpdmVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUYWJJZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnMubWFwKCh0YWIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0YWIuZ2V0QXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUYWJQYW5lbElkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFicGFuZWxzLm1hcCgodGFiUGFuZWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0YWJQYW5lbC5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldENvbXBvbmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlVGFiSW5kZXggIT09IHRoaXMucHJldkFjdGl2ZVRhYkluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZWlkID0gdGhpcy50YWJJZHNbdGhpcy5hY3RpdmVUYWJJbmRleF07XG4gICAgICAgICAgICB0aGlzLmZvY3VzVGFiKCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IFRhYnNPcmllbnRhdGlvbi5ob3Jpem9udGFsO1xuICAgIH1cbiAgICBoYW5kbGVBY3RpdmVJbmRpY2F0b3JQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gSWdub3JlIGlmIHdlIGNsaWNrIHR3aWNlIG9uIHRoZSBzYW1lIHRhYlxuICAgICAgICBpZiAodGhpcy5zaG93QWN0aXZlSW5kaWNhdG9yICYmXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZWluZGljYXRvciAmJlxuICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWJJbmRleCAhPT0gdGhpcy5wcmV2QWN0aXZlVGFiSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpY2tpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGlja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlQWN0aXZlSW5kaWNhdG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYW5pbWF0ZUFjdGl2ZUluZGljYXRvcigpIHtcbiAgICAgICAgdGhpcy50aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgZ3JpZFByb3BlcnR5ID0gdGhpcy5pc0hvcml6b250YWwoKSA/IFwiZ3JpZENvbHVtblwiIDogXCJncmlkUm93XCI7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZVByb3BlcnR5ID0gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgPyBcInRyYW5zbGF0ZVhcIlxuICAgICAgICAgICAgOiBcInRyYW5zbGF0ZVlcIjtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcGVydHkgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gXCJvZmZzZXRMZWZ0XCIgOiBcIm9mZnNldFRvcFwiO1xuICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5hY3RpdmVJbmRpY2F0b3JSZWZbb2Zmc2V0UHJvcGVydHldO1xuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvclJlZi5zdHlsZVtncmlkUHJvcGVydHldID0gYCR7dGhpcy5hY3RpdmVUYWJJbmRleCArIDF9YDtcbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYWN0aXZlSW5kaWNhdG9yUmVmW29mZnNldFByb3BlcnR5XTtcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRpY2F0b3JSZWYuc3R5bGVbZ3JpZFByb3BlcnR5XSA9IGAke3RoaXMucHJldkFjdGl2ZVRhYkluZGV4ICsgMX1gO1xuICAgICAgICBjb25zdCBkaWYgPSBuZXh0IC0gcHJldjtcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRpY2F0b3JSZWYuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNsYXRlUHJvcGVydHl9KCR7ZGlmfXB4KWA7XG4gICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9yUmVmLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVJbmRpY2F0b3JUcmFuc2l0aW9uXCIpO1xuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvclJlZi5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9yUmVmLnN0eWxlW2dyaWRQcm9wZXJ0eV0gPSBgJHt0aGlzLmFjdGl2ZVRhYkluZGV4ICsgMX1gO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRpY2F0b3JSZWYuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNsYXRlUHJvcGVydHl9KDBweClgO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRpY2F0b3JSZWYuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZUluZGljYXRvclRyYW5zaXRpb25cIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgYWRqdXN0IG1ldGhvZCBmb3IgRkFTVFRhYnNcbiAgICAgKiBAcHVibGljXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgdGhlIGFjdGl2ZSBpbmRleCB0byBiZSBhZGp1c3RlZCBieSBudW1lcmljYWwgaW5jcmVtZW50c1xuICAgICAqL1xuICAgIGFkanVzdChhZGp1c3RtZW50KSB7XG4gICAgICAgIHRoaXMucHJldkFjdGl2ZVRhYkluZGV4ID0gdGhpcy5hY3RpdmVUYWJJbmRleDtcbiAgICAgICAgdGhpcy5hY3RpdmVUYWJJbmRleCA9IHdyYXBJbkJvdW5kcygwLCB0aGlzLnRhYnMubGVuZ3RoIC0gMSwgdGhpcy5hY3RpdmVUYWJJbmRleCArIGFkanVzdG1lbnQpO1xuICAgICAgICB0aGlzLnNldENvbXBvbmVudCgpO1xuICAgIH1cbiAgICBmb2N1c1RhYigpIHtcbiAgICAgICAgdGhpcy50YWJzW3RoaXMuYWN0aXZlVGFiSW5kZXhdLmZvY3VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLnRhYklkcyA9IHRoaXMuZ2V0VGFiSWRzKCk7XG4gICAgICAgIHRoaXMudGFicGFuZWxJZHMgPSB0aGlzLmdldFRhYlBhbmVsSWRzKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlVGFiSW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KCk7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgVGFicy5wcm90b3R5cGUsIFwib3JpZW50YXRpb25cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFRhYnMucHJvdG90eXBlLCBcImFjdGl2ZWlkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBUYWJzLnByb3RvdHlwZSwgXCJ0YWJzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBUYWJzLnByb3RvdHlwZSwgXCJ0YWJwYW5lbHNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgVGFicy5wcm90b3R5cGUsIFwiYWN0aXZlaW5kaWNhdG9yXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBUYWJzLnByb3RvdHlwZSwgXCJhY3RpdmVJbmRpY2F0b3JSZWZcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIFRhYnMucHJvdG90eXBlLCBcInNob3dBY3RpdmVJbmRpY2F0b3JcIiwgdm9pZCAwKTtcbmFwcGx5TWl4aW5zKFRhYnMsIFN0YXJ0RW5kKTtcbiIsIi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBlbmFibGVzIGJhc2ljIGNvbmRpdGlvbmFsIHJlbmRlcmluZyBpbiBhIHRlbXBsYXRlLlxuICogQHBhcmFtIGJpbmRpbmcgLSBUaGUgY29uZGl0aW9uIHRvIHRlc3QgZm9yIHJlbmRlcmluZy5cbiAqIEBwYXJhbSB0ZW1wbGF0ZU9yVGVtcGxhdGVCaW5kaW5nIC0gVGhlIHRlbXBsYXRlIG9yIGEgYmluZGluZyB0aGF0IGdldHNcbiAqIHRoZSB0ZW1wbGF0ZSB0byByZW5kZXIgd2hlbiB0aGUgY29uZGl0aW9uIGlzIHRydWUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGVuKGJpbmRpbmcsIHRlbXBsYXRlT3JUZW1wbGF0ZUJpbmRpbmcpIHtcbiAgICBjb25zdCBnZXRUZW1wbGF0ZSA9IHR5cGVvZiB0ZW1wbGF0ZU9yVGVtcGxhdGVCaW5kaW5nID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyB0ZW1wbGF0ZU9yVGVtcGxhdGVCaW5kaW5nXG4gICAgICAgIDogKCkgPT4gdGVtcGxhdGVPclRlbXBsYXRlQmluZGluZztcbiAgICByZXR1cm4gKHNvdXJjZSwgY29udGV4dCkgPT4gYmluZGluZyhzb3VyY2UsIGNvbnRleHQpID8gZ2V0VGVtcGxhdGUoc291cmNlLCBjb250ZXh0KSA6IG51bGw7XG59XG4iLCJpbXBvcnQgeyBodG1sLCByZWYsIHNsb3R0ZWQsIHdoZW4gfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IGVuZFNsb3RUZW1wbGF0ZSwgc3RhcnRTbG90VGVtcGxhdGUgfSBmcm9tIFwiLi4vcGF0dGVybnMvc3RhcnQtZW5kLmpzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGFiczpjbGFzcyl9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHRhYnNUZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGUgY2xhc3M9XCIke3ggPT4geC5vcmllbnRhdGlvbn1cIj5cbiAgICAgICAgJHtzdGFydFNsb3RUZW1wbGF0ZShjb250ZXh0LCBkZWZpbml0aW9uKX1cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxpc3RcIiBwYXJ0PVwidGFibGlzdFwiIHJvbGU9XCJ0YWJsaXN0XCI+XG4gICAgICAgICAgICA8c2xvdCBjbGFzcz1cInRhYlwiIG5hbWU9XCJ0YWJcIiBwYXJ0PVwidGFiXCIgJHtzbG90dGVkKFwidGFic1wiKX0+PC9zbG90PlxuXG4gICAgICAgICAgICAke3doZW4oeCA9PiB4LnNob3dBY3RpdmVJbmRpY2F0b3IsIGh0bWwgYFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAke3JlZihcImFjdGl2ZUluZGljYXRvclJlZlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYWN0aXZlSW5kaWNhdG9yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQ9XCJhY3RpdmVJbmRpY2F0b3JcIlxuICAgICAgICAgICAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgICAgICAgYCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke2VuZFNsb3RUZW1wbGF0ZShjb250ZXh0LCBkZWZpbml0aW9uKX1cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhYnBhbmVsXCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwidGFicGFuZWxcIiBwYXJ0PVwidGFicGFuZWxcIiAke3Nsb3R0ZWQoXCJ0YWJwYW5lbHNcIil9Pjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbmA7XG4iLCJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhdHRyIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5pbXBvcnQgeyBGb3VuZGF0aW9uRWxlbWVudCB9IGZyb20gXCIuLi9mb3VuZGF0aW9uLWVsZW1lbnQvZm91bmRhdGlvbi1lbGVtZW50LmpzXCI7XG4vKipcbiAqIEEgVGFiIENvbXBvbmVudCB0byBiZSB1c2VkIHdpdGgge0BsaW5rIEBtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uIyhUYWJzOmNsYXNzKX1cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFRhYiBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgVGFiLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jVGFifSBjb21wb25lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB0YWJUZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGUgc2xvdD1cInRhYlwiIHJvbGU9XCJ0YWJcIiBhcmlhLWRpc2FibGVkPVwiJHt4ID0+IHguZGlzYWJsZWR9XCI+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L3RlbXBsYXRlPlxuYDtcbiIsImltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbi8qKlxuICogQSBUYWJQYW5lbCBDb21wb25lbnQgdG8gYmUgdXNlZCB3aXRoIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGFiczpjbGFzcyl9XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUYWJQYW5lbCBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbi8qKlxuICogVGhlIHRlbXBsYXRlIGZvciB0aGUge0BsaW5rIEBtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uI1RhYlBhbmVsfSBjb21wb25lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB0YWJQYW5lbFRlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGh0bWwgYFxuICAgIDx0ZW1wbGF0ZSBzbG90PVwidGFicGFuZWxcIiByb2xlPVwidGFicGFuZWxcIj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNwbGF5LCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNvcm5lclJhZGl1cywgZGVzaWduVW5pdCwgZm9udEZhbWlseSwgZm9yZWdyb3VuZCwgcGFuZWxUYWJBY3RpdmVGb3JlZ3JvdW5kLCB0eXBlUmFtcEJhc2VGb250U2l6ZSwgdHlwZVJhbXBCYXNlTGluZUhlaWdodCwgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCBwYW5lbHNTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdncmlkJyl9IDpob3N0IHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGZvbnQtZmFtaWx5OiAke2ZvbnRGYW1pbHl9O1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcEJhc2VGb250U2l6ZX07XG5cdFx0bGluZS1oZWlnaHQ6ICR7dHlwZVJhbXBCYXNlTGluZUhlaWdodH07XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmciBhdXRvO1xuXHRcdGdyaWQtdGVtcGxhdGUtcm93czogYXV0byAxZnI7XG5cdFx0b3ZlcmZsb3cteDogYXV0bztcblx0fVxuXHQudGFibGlzdCB7XG5cdFx0ZGlzcGxheTogZ3JpZDtcblx0XHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcblx0XHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG87XG5cdFx0Y29sdW1uLWdhcDogY2FsYygke2Rlc2lnblVuaXR9ICogOHB4KTtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0d2lkdGg6IG1heC1jb250ZW50O1xuXHRcdGFsaWduLXNlbGY6IGVuZDtcblx0XHRwYWRkaW5nOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAxcHgpIGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgMDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHR9XG5cdC5zdGFydCxcblx0LmVuZCB7XG5cdFx0YWxpZ24tc2VsZjogY2VudGVyO1xuXHR9XG5cdC5hY3RpdmVJbmRpY2F0b3Ige1xuXHRcdGdyaWQtcm93OiAyO1xuXHRcdGdyaWQtY29sdW1uOiAxO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogY2FsYygoJHtkZXNpZ25Vbml0fSAvIDQpICogMXB4KTtcblx0XHRqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcblx0XHRiYWNrZ3JvdW5kOiAke3BhbmVsVGFiQWN0aXZlRm9yZWdyb3VuZH07XG5cdFx0bWFyZ2luOiAwO1xuXHRcdGJvcmRlci1yYWRpdXM6IGNhbGMoJHtjb3JuZXJSYWRpdXN9ICogMXB4KTtcblx0fVxuXHQuYWN0aXZlSW5kaWNhdG9yVHJhbnNpdGlvbiB7XG5cdFx0dHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMDFzIGxpbmVhcjtcblx0fVxuXHQudGFicGFuZWwge1xuXHRcdGdyaWQtcm93OiAyO1xuXHRcdGdyaWQtY29sdW1uLXN0YXJ0OiAxO1xuXHRcdGdyaWQtY29sdW1uLWVuZDogNDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50JztcbmltcG9ydCB7IGRpc3BsYXksIGZvY3VzVmlzaWJsZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBib3JkZXJXaWR0aCwgY29ybmVyUmFkaXVzLCBkZXNpZ25Vbml0LCBmb250RmFtaWx5LCBwYW5lbFRhYkFjdGl2ZUJvcmRlciwgcGFuZWxUYWJBY3RpdmVGb3JlZ3JvdW5kLCBwYW5lbFRhYkZvcmVncm91bmQsIHR5cGVSYW1wQmFzZUZvbnRTaXplLCB0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0LCB9IGZyb20gJy4uL2Rlc2lnbi10b2tlbnMnO1xuZXhwb3J0IGNvbnN0IHBhbmVsVGFiU3R5bGVzID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGNzcyBgXG5cdCR7ZGlzcGxheSgnaW5saW5lLWZsZXgnKX0gOmhvc3Qge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0fTtcblx0XHRoZWlnaHQ6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDdweCk7XG5cdFx0cGFkZGluZzogY2FsYygke2Rlc2lnblVuaXR9ICogMXB4KSAwO1xuXHRcdGNvbG9yOiAke3BhbmVsVGFiRm9yZWdyb3VuZH07XG5cdFx0ZmlsbDogY3VycmVudGNvbG9yO1xuXHRcdGJvcmRlci1yYWRpdXM6IGNhbGMoJHtjb3JuZXJSYWRpdXN9ICogMXB4KTtcblx0XHRib3JkZXI6IHNvbGlkIGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHRyYW5zcGFyZW50O1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0Z3JpZC1yb3c6IDE7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHR9XG5cdDpob3N0KDpob3Zlcikge1xuXHRcdGNvbG9yOiAke3BhbmVsVGFiQWN0aXZlRm9yZWdyb3VuZH07XG5cdFx0ZmlsbDogY3VycmVudGNvbG9yO1xuXHR9XG5cdDpob3N0KDphY3RpdmUpIHtcblx0XHRjb2xvcjogJHtwYW5lbFRhYkFjdGl2ZUZvcmVncm91bmR9O1xuXHRcdGZpbGw6IGN1cnJlbnRjb2xvcjtcblx0fVxuXHQ6aG9zdChbYXJpYS1zZWxlY3RlZD0ndHJ1ZSddKSB7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Y29sb3I6ICR7cGFuZWxUYWJBY3RpdmVGb3JlZ3JvdW5kfTtcblx0XHRmaWxsOiBjdXJyZW50Y29sb3I7XG5cdH1cblx0Omhvc3QoW2FyaWEtc2VsZWN0ZWQ9J3RydWUnXTpob3Zlcikge1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGNvbG9yOiAke3BhbmVsVGFiQWN0aXZlRm9yZWdyb3VuZH07XG5cdFx0ZmlsbDogY3VycmVudGNvbG9yO1xuXHR9XG5cdDpob3N0KFthcmlhLXNlbGVjdGVkPSd0cnVlJ106YWN0aXZlKSB7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Y29sb3I6ICR7cGFuZWxUYWJBY3RpdmVGb3JlZ3JvdW5kfTtcblx0XHRmaWxsOiBjdXJyZW50Y29sb3I7XG5cdH1cblx0Omhvc3QoOiR7Zm9jdXNWaXNpYmxlfSkge1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0Ym9yZGVyOiBzb2xpZCBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMXB4KSAke3BhbmVsVGFiQWN0aXZlQm9yZGVyfTtcblx0fVxuXHQ6aG9zdCg6Zm9jdXMpIHtcblx0XHRvdXRsaW5lOiBub25lO1xuXHR9XG5cdDo6c2xvdHRlZCh2c2NvZGUtYmFkZ2UpIHtcblx0XHRtYXJnaW4taW5saW5lLXN0YXJ0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHgpO1xuXHR9XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNwbGF5LCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBkZXNpZ25Vbml0LCB0eXBlUmFtcEJhc2VGb250U2l6ZSwgdHlwZVJhbXBCYXNlTGluZUhlaWdodCwgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCBwYW5lbFZpZXdTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdmbGV4Jyl9IDpob3N0IHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXI6IHNvbGlkIGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHRyYW5zcGFyZW50O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0fTtcblx0XHRwYWRkaW5nOiAxMHB4IGNhbGMoKCR7ZGVzaWduVW5pdH0gKyAyKSAqIDFweCk7XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IFRhYiBhcyBGb3VuZGF0aW9uVGFiLCBUYWJQYW5lbCBhcyBGb3VuZGF0aW9uVGFiUGFuZWwsIFRhYnMgYXMgRm91bmRhdGlvblRhYnMsIHRhYlBhbmVsVGVtcGxhdGUsIFRhYnNPcmllbnRhdGlvbiwgdGFic1RlbXBsYXRlLCB0YWJUZW1wbGF0ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBwYW5lbHNTdHlsZXMgfSBmcm9tICcuL3BhbmVscy5zdHlsZXMnO1xuaW1wb3J0IHsgcGFuZWxUYWJTdHlsZXMgfSBmcm9tICcuL3BhbmVsLXRhYi5zdHlsZXMnO1xuaW1wb3J0IHsgcGFuZWxWaWV3U3R5bGVzIH0gZnJvbSAnLi9wYW5lbC12aWV3LnN0eWxlcyc7XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcGFuZWxzIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBhbmVscyBleHRlbmRzIEZvdW5kYXRpb25UYWJzIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgdXNhZ2Ugb2YgdGhlIG9yaWVudGF0aW9uIGF0dHJpYnV0ZVxuICAgICAgICAvLyBpbmhlcml0ZWQgYnkgdGhlIEZBU1QgRm91bmRhdGlvbiBUYWJzIGNvbXBvbmVudCBzbyB0aGF0XG4gICAgICAgIC8vIFZTQ29kZVBhbmVscyBhcmUgYWx3YXlzIG9yaWVudGVkIGhvcml6b250YWxseVxuICAgICAgICBpZiAodGhpcy5vcmllbnRhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IFRhYnNPcmllbnRhdGlvbi5ob3Jpem9udGFsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldHMgYSBkZWZhdWx0IEFSSUEgbGFiZWwgb24gdGhlIHBhbmVscyBjb21wb25lbnQgb25seSBpZiBhblxuICAgICAgICAvLyBhcmlhLWxhYmVsIGF0dHJpYnV0ZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0XG4gICAgICAgIGNvbnN0IGFyaWFMYWJlbFZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcbiAgICAgICAgaWYgKCFhcmlhTGFiZWxWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnUGFuZWxzJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcGFuZWxzIGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtcGFuZWxzPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVQYW5lbHMgPSBQYW5lbHMuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICdwYW5lbHMnLFxuICAgIHRlbXBsYXRlOiB0YWJzVGVtcGxhdGUsXG4gICAgc3R5bGVzOiBwYW5lbHNTdHlsZXMsXG59KTtcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBwYW5lbCB0YWIgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGFuZWxUYWIgZXh0ZW5kcyBGb3VuZGF0aW9uVGFiIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgdXNhZ2Ugb2YgdGhlIGRpc2FibGVkIGF0dHJpYnV0ZVxuICAgICAgICAvLyBpbmhlcml0ZWQgYnkgdGhlIEZBU1QgRm91bmRhdGlvbiBUYWIgY29tcG9uZW50IHNvIHRoYXRcbiAgICAgICAgLy8gVlNDb2RlUGFuZWxUYWIgY2FuIG5ldmVyIGJlIGRpc2FibGVkXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy50ZXh0Q29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcGFuZWwgdGFiIGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtcGFuZWwtdGFiPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVQYW5lbFRhYiA9IFBhbmVsVGFiLmNvbXBvc2Uoe1xuICAgIGJhc2VOYW1lOiAncGFuZWwtdGFiJyxcbiAgICB0ZW1wbGF0ZTogdGFiVGVtcGxhdGUsXG4gICAgc3R5bGVzOiBwYW5lbFRhYlN0eWxlcyxcbn0pO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIHBhbmVsIHZpZXcgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGFuZWxWaWV3IGV4dGVuZHMgRm91bmRhdGlvblRhYlBhbmVsIHtcbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSBwYW5lbCB2aWV3IGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtcGFuZWwtdmlldz5gXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdnNDb2RlUGFuZWxWaWV3ID0gUGFuZWxWaWV3LmNvbXBvc2Uoe1xuICAgIGJhc2VOYW1lOiAncGFuZWwtdmlldycsXG4gICAgdGVtcGxhdGU6IHRhYlBhbmVsVGVtcGxhdGUsXG4gICAgc3R5bGVzOiBwYW5lbFZpZXdTdHlsZXMsXG59KTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIG51bGxhYmxlTnVtYmVyQ29udmVydGVyLCBvYnNlcnZhYmxlLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQsIH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbi8qKlxuICogQW4gUHJvZ3Jlc3MgSFRNTCBFbGVtZW50LlxuICogSW1wbGVtZW50cyB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3Byb2dyZXNzYmFyIHwgQVJJQSBwcm9ncmVzc2JhciB9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VQcm9ncmVzcyBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyBwcm9ncmVzcyBpbiAlXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wZXJjZW50Q29tcGxldGUgPSAwO1xuICAgIH1cbiAgICB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQZXJjZW50Q29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW5DaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy4kZmFzdENvbnRyb2xsZXIuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGVyY2VudENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWF4Q2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGZhc3RDb250cm9sbGVyLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBlcmNlbnRDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBlcmNlbnRDb21wbGV0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVQZXJjZW50Q29tcGxldGUoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHR5cGVvZiB0aGlzLm1pbiA9PT0gXCJudW1iZXJcIiA/IHRoaXMubWluIDogMDtcbiAgICAgICAgY29uc3QgbWF4ID0gdHlwZW9mIHRoaXMubWF4ID09PSBcIm51bWJlclwiID8gdGhpcy5tYXggOiAxMDA7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHRoaXMudmFsdWUgPT09IFwibnVtYmVyXCIgPyB0aGlzLnZhbHVlIDogMDtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgICAgIHRoaXMucGVyY2VudENvbXBsZXRlID1cbiAgICAgICAgICAgIHJhbmdlID09PSAwID8gMCA6IE1hdGguZnJvdW5kKCgodmFsdWUgLSBtaW4pIC8gcmFuZ2UpICogMTAwKTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgY29udmVydGVyOiBudWxsYWJsZU51bWJlckNvbnZlcnRlciB9KVxuXSwgQmFzZVByb2dyZXNzLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGNvbnZlcnRlcjogbnVsbGFibGVOdW1iZXJDb252ZXJ0ZXIgfSlcbl0sIEJhc2VQcm9ncmVzcy5wcm90b3R5cGUsIFwibWluXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgY29udmVydGVyOiBudWxsYWJsZU51bWJlckNvbnZlcnRlciB9KVxuXSwgQmFzZVByb2dyZXNzLnByb3RvdHlwZSwgXCJtYXhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgQmFzZVByb2dyZXNzLnByb3RvdHlwZSwgXCJwYXVzZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIEJhc2VQcm9ncmVzcy5wcm90b3R5cGUsIFwicGVyY2VudENvbXBsZXRlXCIsIHZvaWQgMCk7XG4iLCJpbXBvcnQgeyBodG1sLCB3aGVuIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC1lbGVtZW50XCI7XG5jb25zdCBwcm9ncmVzc1NlZ21lbnRzID0gNDQ7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiNCYXNlUHJvZ3Jlc3N9IGNvbXBvbmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2dyZXNzUmluZ1RlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGh0bWwgYFxuICAgIDx0ZW1wbGF0ZVxuICAgICAgICByb2xlPVwicHJvZ3Jlc3NiYXJcIlxuICAgICAgICBhcmlhLXZhbHVlbm93PVwiJHt4ID0+IHgudmFsdWV9XCJcbiAgICAgICAgYXJpYS12YWx1ZW1pbj1cIiR7eCA9PiB4Lm1pbn1cIlxuICAgICAgICBhcmlhLXZhbHVlbWF4PVwiJHt4ID0+IHgubWF4fVwiXG4gICAgICAgIGNsYXNzPVwiJHt4ID0+ICh4LnBhdXNlZCA/IFwicGF1c2VkXCIgOiBcIlwiKX1cIlxuICAgID5cbiAgICAgICAgJHt3aGVuKHggPT4gdHlwZW9mIHgudmFsdWUgPT09IFwibnVtYmVyXCIsIGh0bWwgYFxuICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJwcm9ncmVzc1wiXG4gICAgICAgICAgICAgICAgICAgIHBhcnQ9XCJwcm9ncmVzc1wiXG4gICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuICAgICAgICAgICAgICAgICAgICBzbG90PVwiZGV0ZXJtaW5hdGVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJiYWNrZ3JvdW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQ9XCJiYWNrZ3JvdW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN4PVwiOHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5PVwiOHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHI9XCI3cHhcIlxuICAgICAgICAgICAgICAgICAgICA+PC9jaXJjbGU+XG4gICAgICAgICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZGV0ZXJtaW5hdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydD1cImRldGVybWluYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwic3Ryb2tlLWRhc2hhcnJheTogJHt4ID0+IChwcm9ncmVzc1NlZ21lbnRzICogeC5wZXJjZW50Q29tcGxldGUpIC9cbiAgICAxMDB9cHggJHtwcm9ncmVzc1NlZ21lbnRzfXB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN4PVwiOHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5PVwiOHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHI9XCI3cHhcIlxuICAgICAgICAgICAgICAgICAgICA+PC9jaXJjbGU+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICBgKX1cbiAgICAgICAgJHt3aGVuKHggPT4gdHlwZW9mIHgudmFsdWUgIT09IFwibnVtYmVyXCIsIGh0bWwgYFxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJpbmRldGVybWluYXRlXCIgc2xvdD1cImluZGV0ZXJtaW5hdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtkZWZpbml0aW9uLmluZGV0ZXJtaW5hdGVJbmRpY2F0b3IgfHwgXCJcIn1cbiAgICAgICAgICAgICAgICA8L3Nsb3Q+XG4gICAgICAgICAgICBgKX1cbiAgICA8L3RlbXBsYXRlPlxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQnO1xuaW1wb3J0IHsgZGlzcGxheSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBkZXNpZ25Vbml0LCBwcm9ncmVzc0JhY2tncm91bmQgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCBwcm9ncmVzc1JpbmdTdHlsZXMgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gY3NzIGBcblx0JHtkaXNwbGF5KCdmbGV4Jyl9IDpob3N0IHtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0aGVpZ2h0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA3cHgpO1xuXHRcdHdpZHRoOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA3cHgpO1xuXHRcdG1hcmdpbjogMDtcblx0fVxuXHQucHJvZ3Jlc3Mge1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuXHQuYmFja2dyb3VuZCB7XG5cdFx0ZmlsbDogbm9uZTtcblx0XHRzdHJva2U6IHRyYW5zcGFyZW50O1xuXHRcdHN0cm9rZS13aWR0aDogY2FsYygke2Rlc2lnblVuaXR9IC8gMiAqIDFweCk7XG5cdH1cblx0LmluZGV0ZXJtaW5hdGUtaW5kaWNhdG9yLTEge1xuXHRcdGZpbGw6IG5vbmU7XG5cdFx0c3Ryb2tlOiAke3Byb2dyZXNzQmFja2dyb3VuZH07XG5cdFx0c3Ryb2tlLXdpZHRoOiBjYWxjKCR7ZGVzaWduVW5pdH0gLyAyICogMXB4KTtcblx0XHRzdHJva2UtbGluZWNhcDogc3F1YXJlO1xuXHRcdHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG5cdFx0dHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcblx0XHR0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcblx0XHRhbmltYXRpb246IHNwaW4taW5maW5pdGUgMnMgbGluZWFyIGluZmluaXRlO1xuXHR9XG5cdEBrZXlmcmFtZXMgc3Bpbi1pbmZpbml0ZSB7XG5cdFx0MCUge1xuXHRcdFx0c3Ryb2tlLWRhc2hhcnJheTogMC4wMXB4IDQzLjk3cHg7XG5cdFx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcblx0XHR9XG5cdFx0NTAlIHtcblx0XHRcdHN0cm9rZS1kYXNoYXJyYXk6IDIxLjk5cHggMjEuOTlweDtcblx0XHRcdHRyYW5zZm9ybTogcm90YXRlKDQ1MGRlZyk7XG5cdFx0fVxuXHRcdDEwMCUge1xuXHRcdFx0c3Ryb2tlLWRhc2hhcnJheTogMC4wMXB4IDQzLjk3cHg7XG5cdFx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgxMDgwZGVnKTtcblx0XHR9XG5cdH1cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEJhc2VQcm9ncmVzcywgcHJvZ3Jlc3NSaW5nVGVtcGxhdGUgYXMgdGVtcGxhdGUsIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuaW1wb3J0IHsgcHJvZ3Jlc3NSaW5nU3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vcHJvZ3Jlc3MtcmluZy5zdHlsZXMnO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIHByb2dyZXNzIHJpbmcgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NSaW5nIGV4dGVuZHMgQmFzZVByb2dyZXNzIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgdXNhZ2Ugb2YgdGhlIHBhdXNlZCBhdHRyaWJ1dGVcbiAgICAgICAgLy8gaW5oZXJpdGVkIGJ5IHRoZSBGQVNUIEZvdW5kYXRpb24gQmFzZVByb2dyZXNzIGNvbXBvbmVudFxuICAgICAgICAvLyBzbyB0aGF0IFZTQ29kZVByb2dyZXNzUmluZyBjYW4gbmV2ZXIgYmUgcGF1c2VkXG4gICAgICAgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWZpbmVzIGEgZGVmYXVsdCBhcmlhIGxhYmVsIHRoYXQgc2NyZWVuIHJlYWRlcnMgY2FuIGFjY2Vzc1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdMb2FkaW5nJyk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2FsZXJ0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBvbmVudCBsaWZlY3ljbGUgbWV0aG9kIHRoYXQgcnVucyB3aGVuIGFuIGF0dHJpYnV0ZSBvZiB0aGVcbiAgICAgKiBlbGVtZW50IGlzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0ck5hbWUgLSBUaGUgYXR0cmlidXRlIHRoYXQgd2FzIGNoYW5nZWRcbiAgICAgKiBAcGFyYW0gb2xkVmFsIC0gVGhlIG9sZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlXG4gICAgICogQHBhcmFtIG5ld1ZhbCAtIFRoZSBuZXcgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJOYW1lLCBvbGRWYWwsIG5ld1ZhbCkge1xuICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgdXNhZ2Ugb2YgdGhlIHZhbHVlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gaW5oZXJpdGVkIGJ5IHRoZSBGQVNUIEZvdW5kYXRpb24gQmFzZVByb2dyZXNzIGNvbXBvbmVudFxuICAgICAgICAgICAgLy8gc28gdGhhdCBWU0NvZGVQcm9ncmVzc1JpbmcgY2FuIG5ldmVyIHNldCB0byBiZSBhXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmF0ZSBzdGF0ZVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcHJvZ3Jlc3MgcmluZyBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLXByb2dyZXNzLXJpbmc+YFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHZzQ29kZVByb2dyZXNzUmluZyA9IFByb2dyZXNzUmluZy5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ3Byb2dyZXNzLXJpbmcnLFxuICAgIHRlbXBsYXRlLFxuICAgIHN0eWxlcyxcbiAgICBpbmRldGVybWluYXRlSW5kaWNhdG9yOiBgXG5cdFx0PHN2ZyBjbGFzcz1cInByb2dyZXNzXCIgcGFydD1cInByb2dyZXNzXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuXHRcdFx0PGNpcmNsZVxuXHRcdFx0XHRjbGFzcz1cImJhY2tncm91bmRcIlxuXHRcdFx0XHRwYXJ0PVwiYmFja2dyb3VuZFwiXG5cdFx0XHRcdGN4PVwiOHB4XCJcblx0XHRcdFx0Y3k9XCI4cHhcIlxuXHRcdFx0XHRyPVwiN3B4XCJcblx0XHRcdD48L2NpcmNsZT5cblx0XHRcdDxjaXJjbGVcblx0XHRcdFx0Y2xhc3M9XCJpbmRldGVybWluYXRlLWluZGljYXRvci0xXCJcblx0XHRcdFx0cGFydD1cImluZGV0ZXJtaW5hdGUtaW5kaWNhdG9yLTFcIlxuXHRcdFx0XHRjeD1cIjhweFwiXG5cdFx0XHRcdGN5PVwiOHB4XCJcblx0XHRcdFx0cj1cIjdweFwiXG5cdFx0XHQ+PC9jaXJjbGU+XG5cdFx0PC9zdmc+XG5cdGAsXG59KTtcbiIsImltcG9ydCB7IENoZWNrYWJsZUZvcm1Bc3NvY2lhdGVkIH0gZnJvbSBcIi4uL2Zvcm0tYXNzb2NpYXRlZC9mb3JtLWFzc29jaWF0ZWQuanNcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbmNsYXNzIF9SYWRpbyBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbi8qKlxuICogQSBmb3JtLWFzc29jaWF0ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoUmFkaW86Y2xhc3MpfSBjb21wb25lbnQuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3JtQXNzb2NpYXRlZFJhZGlvIGV4dGVuZHMgQ2hlY2thYmxlRm9ybUFzc29jaWF0ZWQoX1JhZGlvKSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJveHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXR0ciwgb2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsga2V5U3BhY2UgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXNcIjtcbmltcG9ydCB7IEZvcm1Bc3NvY2lhdGVkUmFkaW8gfSBmcm9tIFwiLi9yYWRpby5mb3JtLWFzc29jaWF0ZWQuanNcIjtcbi8qKlxuICogQSBSYWRpbyBDdXN0b20gSFRNTCBFbGVtZW50LlxuICogSW1wbGVtZW50cyB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3JhZGlvIHwgQVJJQSByYWRpbyB9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFJhZGlvIGV4dGVuZHMgRm9ybUFzc29jaWF0ZWRSYWRpbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZWxlbWVudCdzIHZhbHVlIHRvIGJlIGluY2x1ZGVkIGluIGZvcm0gc3VibWlzc2lvbiB3aGVuIGNoZWNrZWQuXG4gICAgICAgICAqIERlZmF1bHQgdG8gXCJvblwiIHRvIHJlYWNoIHBhcml0eSB3aXRoIGlucHV0W3R5cGU9XCJyYWRpb1wiXVxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gXCJvblwiO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleXByZXNzSGFuZGxlciA9IChlKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlTcGFjZTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWQgJiYgIXRoaXMucmVhZE9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJveHkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpO1xuICAgIH1cbiAgICByZWFkT25seUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5yZWFkT25seSA9IHRoaXMucmVhZE9ubHk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZGVmYXVsdENoZWNrZWRDaGFuZ2VkKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLiRmYXN0Q29udHJvbGxlci5pc0Nvbm5lY3RlZCAmJiAhdGhpcy5kaXJ0eUNoZWNrZWQpIHtcbiAgICAgICAgICAgIC8vIFNldHRpbmcgdGhpcy5jaGVja2VkIHdpbGwgY2F1c2UgdXMgdG8gZW50ZXIgYSBkaXJ0eSBzdGF0ZSxcbiAgICAgICAgICAgIC8vIGJ1dCBpZiB3ZSBhcmUgY2xlYW4gd2hlbiBkZWZhdWx0Q2hlY2tlZCBpcyBjaGFuZ2VkLCB3ZSB3YW50IHRvIHN0YXlcbiAgICAgICAgICAgIC8vIGluIGEgY2xlYW4gc3RhdGUsIHNvIHJlc2V0IHRoaXMuZGlydHlDaGVja2VkXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnNpZGVSYWRpb0dyb3VwKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAoX2EgPSB0aGlzLmRlZmF1bHRDaGVja2VkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5Q2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSkgIT09IFwicmFkaW9ncm91cFwiICYmXG4gICAgICAgICAgICB0aGlzLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVja2VkQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlydHlDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0dGluZyB0aGlzLmNoZWNrZWQgd2lsbCBjYXVzZSB1cyB0byBlbnRlciBhIGRpcnR5IHN0YXRlLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBpZiB3ZSBhcmUgY2xlYW4gd2hlbiBkZWZhdWx0Q2hlY2tlZCBpcyBjaGFuZ2VkLCB3ZSB3YW50IHRvIHN0YXlcbiAgICAgICAgICAgICAgICAvLyBpbiBhIGNsZWFuIHN0YXRlLCBzbyByZXNldCB0aGlzLmRpcnR5Q2hlY2tlZFxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0luc2lkZVJhZGlvR3JvdXAoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAoX2IgPSB0aGlzLmRlZmF1bHRDaGVja2VkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJ0eUNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNJbnNpZGVSYWRpb0dyb3VwKCkge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmNsb3Nlc3QoXCJbcm9sZT1yYWRpb2dyb3VwXVwiKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY2xpY2tIYW5kbGVyKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmICF0aGlzLnJlYWRPbmx5ICYmICF0aGlzLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcInJlYWRvbmx5XCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBSYWRpby5wcm90b3R5cGUsIFwicmVhZE9ubHlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIG9ic2VydmFibGVcbl0sIFJhZGlvLnByb3RvdHlwZSwgXCJuYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBSYWRpby5wcm90b3R5cGUsIFwiZGVmYXVsdFNsb3R0ZWROb2Rlc1wiLCB2b2lkIDApO1xuIiwiaW1wb3J0IHsgaHRtbCwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB7QGxpbmsgQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24jKFJhZGlvOmNsYXNzKX0gY29tcG9uZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgcmFkaW9UZW1wbGF0ZSA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBodG1sIGBcbiAgICA8dGVtcGxhdGVcbiAgICAgICAgcm9sZT1cInJhZGlvXCJcbiAgICAgICAgY2xhc3M9XCIke3ggPT4gKHguY2hlY2tlZCA/IFwiY2hlY2tlZFwiIDogXCJcIil9ICR7eCA9PiB4LnJlYWRPbmx5ID8gXCJyZWFkb25seVwiIDogXCJcIn1cIlxuICAgICAgICBhcmlhLWNoZWNrZWQ9XCIke3ggPT4geC5jaGVja2VkfVwiXG4gICAgICAgIGFyaWEtcmVxdWlyZWQ9XCIke3ggPT4geC5yZXF1aXJlZH1cIlxuICAgICAgICBhcmlhLWRpc2FibGVkPVwiJHt4ID0+IHguZGlzYWJsZWR9XCJcbiAgICAgICAgYXJpYS1yZWFkb25seT1cIiR7eCA9PiB4LnJlYWRPbmx5fVwiXG4gICAgICAgIEBrZXlwcmVzcz1cIiR7KHgsIGMpID0+IHgua2V5cHJlc3NIYW5kbGVyKGMuZXZlbnQpfVwiXG4gICAgICAgIEBjbGljaz1cIiR7KHgsIGMpID0+IHguY2xpY2tIYW5kbGVyKGMuZXZlbnQpfVwiXG4gICAgPlxuICAgICAgICA8ZGl2IHBhcnQ9XCJjb250cm9sXCIgY2xhc3M9XCJjb250cm9sXCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiY2hlY2tlZC1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAke2RlZmluaXRpb24uY2hlY2tlZEluZGljYXRvciB8fCBcIlwifVxuICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBwYXJ0PVwibGFiZWxcIlxuICAgICAgICAgICAgY2xhc3M9XCIke3ggPT4geC5kZWZhdWx0U2xvdHRlZE5vZGVzICYmIHguZGVmYXVsdFNsb3R0ZWROb2Rlcy5sZW5ndGhcbiAgICA/IFwibGFiZWxcIlxuICAgIDogXCJsYWJlbCBsYWJlbF9faGlkZGVuXCJ9XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPHNsb3QgJHtzbG90dGVkKFwiZGVmYXVsdFNsb3R0ZWROb2Rlc1wiKX0+PC9zbG90PlxuICAgICAgICA8L2xhYmVsPlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjaGVja2JveEJhY2tncm91bmQsIGNoZWNrYm94Qm9yZGVyLCBkZXNpZ25Vbml0LCBkaXNhYmxlZE9wYWNpdHksIGZvY3VzQm9yZGVyLCBmb250RmFtaWx5LCBmb3JlZ3JvdW5kLCB0eXBlUmFtcEJhc2VGb250U2l6ZSwgdHlwZVJhbXBCYXNlTGluZUhlaWdodCwgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCByYWRpb1N0eWxlcyA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBjc3MgYFxuXHQke2Rpc3BsYXkoJ2lubGluZS1mbGV4Jyl9IDpob3N0IHtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0fTtcblx0XHRtYXJnaW46IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHR0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0fVxuXHQuY29udHJvbCB7XG5cdFx0YmFja2dyb3VuZDogJHtjaGVja2JveEJhY2tncm91bmR9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDk5OXB4O1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtjaGVja2JveEJvcmRlcn07XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0aGVpZ2h0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA0cHgpO1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHdpZHRoOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA0cHgpO1xuXHR9XG5cdC5sYWJlbCB7XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdGZvbnQtZmFtaWx5OiAke2ZvbnRGYW1pbHl9O1xuXHRcdG1hcmdpbi1pbmxpbmUtZW5kOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHggKyAycHgpO1xuXHRcdHBhZGRpbmctaW5saW5lLXN0YXJ0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHggKyAycHgpO1xuXHR9XG5cdC5sYWJlbF9faGlkZGVuIHtcblx0XHRkaXNwbGF5OiBub25lO1xuXHRcdHZpc2liaWxpdHk6IGhpZGRlbjtcblx0fVxuXHQuY29udHJvbCxcblx0LmNoZWNrZWQtaW5kaWNhdG9yIHtcblx0XHRmbGV4LXNocmluazogMDtcblx0fVxuXHQuY2hlY2tlZC1pbmRpY2F0b3Ige1xuXHRcdGJhY2tncm91bmQ6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Ym9yZGVyLXJhZGl1czogOTk5cHg7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRcdGluc2V0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAxcHgpO1xuXHRcdG9wYWNpdHk6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHR9XG5cdDpob3N0KDpub3QoW2Rpc2FibGVkXSkpIC5jb250cm9sOmhvdmVyIHtcblx0XHRiYWNrZ3JvdW5kOiAke2NoZWNrYm94QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2NoZWNrYm94Qm9yZGVyfTtcblx0fVxuXHQ6aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAuY29udHJvbDphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6ICR7Y2hlY2tib3hCYWNrZ3JvdW5kfTtcblx0XHRib3JkZXItY29sb3I6ICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KDoke2ZvY3VzVmlzaWJsZX0pIC5jb250cm9sIHtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KFthcmlhLWNoZWNrZWQ9J3RydWUnXSkgLmNvbnRyb2wge1xuXHRcdGJhY2tncm91bmQ6ICR7Y2hlY2tib3hCYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Y2hlY2tib3hCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KFthcmlhLWNoZWNrZWQ9J3RydWUnXTpub3QoW2Rpc2FibGVkXSkpIC5jb250cm9sOmhvdmVyIHtcblx0XHRiYWNrZ3JvdW5kOiAke2NoZWNrYm94QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyOiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMXB4KSBzb2xpZCAke2NoZWNrYm94Qm9yZGVyfTtcblx0fVxuXHQ6aG9zdChbYXJpYS1jaGVja2VkPSd0cnVlJ106bm90KFtkaXNhYmxlZF0pKSAuY29udHJvbDphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6ICR7Y2hlY2tib3hCYWNrZ3JvdW5kfTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KFthcmlhLWNoZWNrZWQ9XCJ0cnVlXCJdOiR7Zm9jdXNWaXNpYmxlfTpub3QoW2Rpc2FibGVkXSkpIC5jb250cm9sIHtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KFtkaXNhYmxlZF0pIC5sYWJlbCxcblx0Omhvc3QoW3JlYWRvbmx5XSkgLmxhYmVsLFxuXHQ6aG9zdChbcmVhZG9ubHldKSAuY29udHJvbCxcblx0Omhvc3QoW2Rpc2FibGVkXSkgLmNvbnRyb2wge1xuXHRcdGN1cnNvcjogJHtkaXNhYmxlZEN1cnNvcn07XG5cdH1cblx0Omhvc3QoW2FyaWEtY2hlY2tlZD0ndHJ1ZSddKSAuY2hlY2tlZC1pbmRpY2F0b3Ige1xuXHRcdG9wYWNpdHk6IDE7XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXSkge1xuXHRcdG9wYWNpdHk6ICR7ZGlzYWJsZWRPcGFjaXR5fTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgUmFkaW8gYXMgRm91bmRhdGlvblJhZGlvLCByYWRpb1RlbXBsYXRlIGFzIHRlbXBsYXRlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IHJhZGlvU3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vcmFkaW8uc3R5bGVzJztcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSByYWRpbyBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBSYWRpbyBleHRlbmRzIEZvdW5kYXRpb25SYWRpbyB7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IGxpZmVjeWNsZSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbnNlcnRlZFxuICAgICAqIGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aGlzLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBsYWJlbCBpZiB0aGVyZSBpcyBubyB0ZXh0IGNvbnRlbnRcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1JhZGlvJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcmFkaW8gY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS1yYWRpbz5gXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdnNDb2RlUmFkaW8gPSBSYWRpby5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ3JhZGlvJyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG4gICAgY2hlY2tlZEluZGljYXRvcjogYFxuXHRcdDxkaXYgcGFydD1cImNoZWNrZWQtaW5kaWNhdG9yXCIgY2xhc3M9XCJjaGVja2VkLWluZGljYXRvclwiPjwvZGl2PlxuXHRgLFxufSk7XG4iLCIvKipcbiAqIEV4cG9zZSBsdHIgYW5kIHJ0bCBzdHJpbmdzXG4gKi9cbmV4cG9ydCB2YXIgRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChEaXJlY3Rpb24pIHtcbiAgICBEaXJlY3Rpb25bXCJsdHJcIl0gPSBcImx0clwiO1xuICAgIERpcmVjdGlvbltcInJ0bFwiXSA9IFwicnRsXCI7XG59KShEaXJlY3Rpb24gfHwgKERpcmVjdGlvbiA9IHt9KSk7XG4iLCJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXNcIjtcbi8qKlxuICogYSBtZXRob2QgdG8gZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGxvY2FsaXphdGlvbiBkaXJlY3Rpb24gb2YgdGhlIHZpZXdcbiAqIEBwYXJhbSByb290Tm9kZSAtIHRoZSBIVE1MRWxlbWVudCB0byBiZWdpbiB0aGUgcXVlcnkgZnJvbSwgdXN1YWxseSBcInRoaXNcIiB3aGVuIHVzZWQgaW4gYSBjb21wb25lbnQgY29udHJvbGxlclxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZ2V0RGlyZWN0aW9uID0gKHJvb3ROb2RlKSA9PiB7XG4gICAgY29uc3QgZGlyTm9kZSA9IHJvb3ROb2RlLmNsb3Nlc3QoXCJbZGlyXVwiKTtcbiAgICByZXR1cm4gZGlyTm9kZSAhPT0gbnVsbCAmJiBkaXJOb2RlLmRpciA9PT0gXCJydGxcIiA/IERpcmVjdGlvbi5ydGwgOiBEaXJlY3Rpb24ubHRyO1xufTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIG9ic2VydmFibGUgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEFycm93S2V5cywgRGlyZWN0aW9uLCBrZXlBcnJvd0Rvd24sIGtleUFycm93TGVmdCwga2V5QXJyb3dSaWdodCwga2V5QXJyb3dVcCwga2V5RW50ZXIsIE9yaWVudGF0aW9uLCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3Qtd2ViLXV0aWxpdGllc1wiO1xuaW1wb3J0IHsgZ2V0RGlyZWN0aW9uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kaXJlY3Rpb24uanNcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbi8qKlxuICogQW4gUmFkaW8gR3JvdXAgQ3VzdG9tIEhUTUwgRWxlbWVudC5cbiAqIEltcGxlbWVudHMgdGhlIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNyYWRpb2dyb3VwIHwgQVJJQSByYWRpb2dyb3VwIH0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cCBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBvcmllbnRhdGlvbiBvZiB0aGUgZ3JvdXBcbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogb3JpZW50YXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBPcmllbnRhdGlvbi5ob3Jpem9udGFsO1xuICAgICAgICB0aGlzLnJhZGlvQ2hhbmdlSGFuZGxlciA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkUmFkaW8gPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkUmFkaW8uY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9ucy5mb3JFYWNoKChyYWRpbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFkaW8gIT09IGNoYW5nZWRSYWRpbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5zaWRlRm91bmRhdGlvblRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJhZGlvID0gY2hhbmdlZFJhZGlvO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBjaGFuZ2VkUmFkaW8udmFsdWU7XG4gICAgICAgICAgICAgICAgY2hhbmdlZFJhZGlvLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpbyA9IGNoYW5nZWRSYWRpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubW92ZVRvUmFkaW9CeUluZGV4ID0gKGdyb3VwLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmFkaW8gPSBncm91cFtpbmRleF07XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnNpZGVUb29sYmFyKSB7XG4gICAgICAgICAgICAgICAgcmFkaW8uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpby5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZm9yRWFjaCgobmV4dFJhZGlvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJhZGlvICE9PSByYWRpbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGlvLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUmFkaW8gPSByYWRpbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpbyA9IHJhZGlvO1xuICAgICAgICAgICAgcmFkaW8uZm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb3ZlUmlnaHRPZmZHcm91cCA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMubmV4dEVsZW1lbnRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb3ZlTGVmdE9mZkdyb3VwID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mb2N1c091dEhhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnM7XG4gICAgICAgICAgICBjb25zdCByYWRpbyA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSByYWRpbyAhPT0gbnVsbCA/IGdyb3VwLmluZGV4T2YocmFkaW8pIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRJbmRleCA9IHRoaXMuZm9jdXNlZFJhZGlvXG4gICAgICAgICAgICAgICAgPyBncm91cC5pbmRleE9mKHRoaXMuZm9jdXNlZFJhZGlvKVxuICAgICAgICAgICAgICAgIDogLTE7XG4gICAgICAgICAgICBpZiAoKGZvY3VzZWRJbmRleCA9PT0gMCAmJiBpbmRleCA9PT0gZm9jdXNlZEluZGV4KSB8fFxuICAgICAgICAgICAgICAgIChmb2N1c2VkSW5kZXggPT09IGdyb3VwLmxlbmd0aCAtIDEgJiYgZm9jdXNlZEluZGV4ID09PSBpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRSYWRpbykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpbyA9IGdyb3VwWzBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmZvckVhY2goKG5leHRSYWRpbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRSYWRpbyAhPT0gdGhpcy5mb2N1c2VkUmFkaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UmFkaW8uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpbyA9IHRoaXMuc2VsZWN0ZWRSYWRpbztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5zaWRlRm91bmRhdGlvblRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5mb3JFYWNoKChuZXh0UmFkaW8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJhZGlvICE9PSB0aGlzLnNlbGVjdGVkUmFkaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJhZGlvLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiLTFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGlja0hhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmFkaW8gPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmIChyYWRpbykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5zbG90dGVkUmFkaW9CdXR0b25zO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpby5jaGVja2VkIHx8IGdyb3VwLmluZGV4T2YocmFkaW8pID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGlvLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJhZGlvID0gcmFkaW87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUmFkaW8gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpbyA9IHJhZGlvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3VsZE1vdmVPZmZHcm91cFRvVGhlUmlnaHQgPSAoaW5kZXgsIGdyb3VwLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gZ3JvdXAubGVuZ3RoICYmIHRoaXMuaXNJbnNpZGVUb29sYmFyICYmIGtleSA9PT0ga2V5QXJyb3dSaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zaG91bGRNb3ZlT2ZmR3JvdXBUb1RoZUxlZnQgPSAoZ3JvdXAsIGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZvY3VzZWRSYWRpbyA/IGdyb3VwLmluZGV4T2YodGhpcy5mb2N1c2VkUmFkaW8pIC0gMSA6IDA7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPCAwICYmIHRoaXMuaXNJbnNpZGVUb29sYmFyICYmIGtleSA9PT0ga2V5QXJyb3dMZWZ0O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNoZWNrRm9jdXNlZFJhZGlvID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNlZFJhZGlvICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuZm9jdXNlZFJhZGlvLnJlYWRPbmx5ICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuZm9jdXNlZFJhZGlvLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpby5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRSYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkUmFkaW8uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUmFkaW8gPSB0aGlzLmZvY3VzZWRSYWRpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb3ZlUmlnaHQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnM7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmZvY3VzZWRSYWRpbyA/IGdyb3VwLmluZGV4T2YodGhpcy5mb2N1c2VkUmFkaW8pICsgMSA6IDE7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRNb3ZlT2ZmR3JvdXBUb1RoZVJpZ2h0KGluZGV4LCBncm91cCwgZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlUmlnaHRPZmZHcm91cCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSBncm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBsb29waW5nIHRvIGdldCB0byBuZXh0IHJhZGlvIHRoYXQgaXMgbm90IGRpc2FibGVkICovXG4gICAgICAgICAgICAvKiBtYXRjaGluZyBuYXRpdmUgcmFkaW8vcmFkaW9ncm91cCB3aGljaCBkb2VzIG5vdCBzZWxlY3QgYW4gaXRlbSBpZiB0aGVyZSBpcyBvbmx5IDEgaW4gdGhlIGdyb3VwICovXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBncm91cC5sZW5ndGggJiYgZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBbaW5kZXhdLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvUmFkaW9CeUluZGV4KGdyb3VwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZvY3VzZWRSYWRpbyAmJiBpbmRleCA9PT0gZ3JvdXAuaW5kZXhPZih0aGlzLmZvY3VzZWRSYWRpbykpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ICsgMSA+PSBncm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnNpZGVUb29sYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubW92ZUxlZnQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnM7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmZvY3VzZWRSYWRpbyA/IGdyb3VwLmluZGV4T2YodGhpcy5mb2N1c2VkUmFkaW8pIC0gMSA6IDA7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IGdyb3VwLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZE1vdmVPZmZHcm91cFRvVGhlTGVmdChncm91cCwgZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlTGVmdE9mZkdyb3VwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogbG9vcGluZyB0byBnZXQgdG8gbmV4dCByYWRpbyB0aGF0IGlzIG5vdCBkaXNhYmxlZCAqL1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4ID49IDAgJiYgZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBbaW5kZXhdLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvUmFkaW9CeUluZGV4KGdyb3VwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZvY3VzZWRSYWRpbyAmJiBpbmRleCA9PT0gZ3JvdXAuaW5kZXhPZih0aGlzLmZvY3VzZWRSYWRpbykpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4IC0gMSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBncm91cC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBrZXlib2FyZCBoYW5kbGluZyBwZXIgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FyaWEtcHJhY3RpY2VzLyNmb3ItcmFkaW8tZ3JvdXBzLW5vdC1jb250YWluZWQtaW4tYS10b29sYmFyXG4gICAgICAgICAqIG5hdmlnYXRpb24gaXMgZGlmZmVyZW50IHdoZW4gdGhlcmUgaXMgYW4gYW5jZXN0b3Igd2l0aCByb2xlPSd0b29sYmFyJ1xuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMua2V5ZG93bkhhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gZS5rZXk7XG4gICAgICAgICAgICBpZiAoa2V5IGluIEFycm93S2V5cyAmJiB0aGlzLmlzSW5zaWRlRm91bmRhdGlvblRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlFbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRm9jdXNlZFJhZGlvKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGtleUFycm93UmlnaHQ6XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlBcnJvd0Rvd246IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBEaXJlY3Rpb24ubHRyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVSaWdodChlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUxlZnQoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2Uga2V5QXJyb3dMZWZ0OlxuICAgICAgICAgICAgICAgIGNhc2Uga2V5QXJyb3dVcDoge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5sdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUxlZnQoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVSaWdodChlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlYWRPbmx5Q2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5yZWFkT25seSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5yZWFkT25seSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2FibGVkQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5hbWVDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5zbG90dGVkUmFkaW9CdXR0b25zKSB7XG4gICAgICAgICAgICB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgICAgICAgICAgICByYWRpby5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9ucy5mb3JFYWNoKChyYWRpbykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYWRpby5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJhZGlvID0gcmFkaW87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kZW1pdChcImNoYW5nZVwiKTtcbiAgICB9XG4gICAgc2xvdHRlZFJhZGlvQnV0dG9uc0NoYW5nZWQob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMgJiYgdGhpcy5zbG90dGVkUmFkaW9CdXR0b25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBSYWRpb0J1dHRvbnMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgcGFyZW50VG9vbGJhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdCgnW3JvbGU9XCJ0b29sYmFyXCJdJyk7XG4gICAgfVxuICAgIGdldCBpc0luc2lkZVRvb2xiYXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLnBhcmVudFRvb2xiYXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlKTtcbiAgICB9XG4gICAgZ2V0IGlzSW5zaWRlRm91bmRhdGlvblRvb2xiYXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IHRoaXMucGFyZW50VG9vbGJhcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW1wiJGZhc3RDb250cm9sbGVyXCJdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKHRoaXMpO1xuICAgICAgICB0aGlzLnNldHVwUmFkaW9CdXR0b25zKCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICAgICAgICAgIHJhZGlvLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5yYWRpb0NoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0dXBSYWRpb0J1dHRvbnMoKSB7XG4gICAgICAgIGNvbnN0IGNoZWNrZWRSYWRpb3MgPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZmlsdGVyKChyYWRpbykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJhZGlvLmhhc0F0dHJpYnV0ZShcImNoZWNrZWRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBudW1iZXJPZkNoZWNrZWRSYWRpb3MgPSBjaGVja2VkUmFkaW9zID8gY2hlY2tlZFJhZGlvcy5sZW5ndGggOiAwO1xuICAgICAgICBpZiAobnVtYmVyT2ZDaGVja2VkUmFkaW9zID4gMSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdENoZWNrZWRSYWRpbyA9IGNoZWNrZWRSYWRpb3NbbnVtYmVyT2ZDaGVja2VkUmFkaW9zIC0gMV07XG4gICAgICAgICAgICBsYXN0Q2hlY2tlZFJhZGlvLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmb3VuZE1hdGNoaW5nVmFsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9ucy5mb3JFYWNoKChyYWRpbykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmFkaW8uc2V0QXR0cmlidXRlKFwibmFtZVwiLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByYWRpby5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHJhZGlvLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUgPT09IHJhZGlvLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJhZGlvID0gcmFkaW87XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkUmFkaW8gPSByYWRpbztcbiAgICAgICAgICAgICAgICByYWRpby5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgZm91bmRNYXRjaGluZ1ZhbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnNpZGVGb3VuZGF0aW9uVG9vbGJhcikge1xuICAgICAgICAgICAgICAgICAgICByYWRpby5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYWRpby5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMucmFkaW9DaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zbG90dGVkUmFkaW9CdXR0b25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWRSYWRpb3MgPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnMuZmlsdGVyKChyYWRpbykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByYWRpby5oYXNBdHRyaWJ1dGUoXCJjaGVja2VkXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBudW1iZXJPZkNoZWNrZWRSYWRpb3MgPSBjaGVja2VkUmFkaW9zICE9PSBudWxsID8gY2hlY2tlZFJhZGlvcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgaWYgKG51bWJlck9mQ2hlY2tlZFJhZGlvcyA+IDAgJiYgIWZvdW5kTWF0Y2hpbmdWYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hlY2tlZFJhZGlvID0gY2hlY2tlZFJhZGlvc1tudW1iZXJPZkNoZWNrZWRSYWRpb3MgLSAxXTtcbiAgICAgICAgICAgICAgICBsYXN0Q2hlY2tlZFJhZGlvLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZFJhZGlvID0gbGFzdENoZWNrZWRSYWRpbztcbiAgICAgICAgICAgICAgICBsYXN0Q2hlY2tlZFJhZGlvLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2xvdHRlZFJhZGlvQnV0dG9uc1swXS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkUmFkaW8gPSB0aGlzLnNsb3R0ZWRSYWRpb0J1dHRvbnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgYXR0cmlidXRlOiBcInJlYWRvbmx5XCIsIG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBSYWRpb0dyb3VwLnByb3RvdHlwZSwgXCJyZWFkT25seVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJkaXNhYmxlZFwiLCBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgUmFkaW9Hcm91cC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFJhZGlvR3JvdXAucHJvdG90eXBlLCBcIm5hbWVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFJhZGlvR3JvdXAucHJvdG90eXBlLCBcInZhbHVlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBSYWRpb0dyb3VwLnByb3RvdHlwZSwgXCJvcmllbnRhdGlvblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgUmFkaW9Hcm91cC5wcm90b3R5cGUsIFwiY2hpbGRJdGVtc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgUmFkaW9Hcm91cC5wcm90b3R5cGUsIFwic2xvdHRlZFJhZGlvQnV0dG9uc1wiLCB2b2lkIDApO1xuIiwiaW1wb3J0IHsgZWxlbWVudHMsIGh0bWwsIHNsb3R0ZWQgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSBcIkBtaWNyb3NvZnQvZmFzdC13ZWItdXRpbGl0aWVzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiNSYWRpb0dyb3VwfSBjb21wb25lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByYWRpb0dyb3VwVGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHRlbXBsYXRlXG4gICAgICAgIHJvbGU9XCJyYWRpb2dyb3VwXCJcbiAgICAgICAgYXJpYS1kaXNhYmxlZD1cIiR7eCA9PiB4LmRpc2FibGVkfVwiXG4gICAgICAgIGFyaWEtcmVhZG9ubHk9XCIke3ggPT4geC5yZWFkT25seX1cIlxuICAgICAgICBAY2xpY2s9XCIkeyh4LCBjKSA9PiB4LmNsaWNrSGFuZGxlcihjLmV2ZW50KX1cIlxuICAgICAgICBAa2V5ZG93bj1cIiR7KHgsIGMpID0+IHgua2V5ZG93bkhhbmRsZXIoYy5ldmVudCl9XCJcbiAgICAgICAgQGZvY3Vzb3V0PVwiJHsoeCwgYykgPT4geC5mb2N1c091dEhhbmRsZXIoYy5ldmVudCl9XCJcbiAgICA+XG4gICAgICAgIDxzbG90IG5hbWU9XCJsYWJlbFwiPjwvc2xvdD5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJwb3NpdGlvbmluZy1yZWdpb24gJHt4ID0+IHgub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLmhvcml6b250YWwgPyBcImhvcml6b250YWxcIiA6IFwidmVydGljYWxcIn1cIlxuICAgICAgICAgICAgcGFydD1cInBvc2l0aW9uaW5nLXJlZ2lvblwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxzbG90XG4gICAgICAgICAgICAgICAgJHtzbG90dGVkKHtcbiAgICBwcm9wZXJ0eTogXCJzbG90dGVkUmFkaW9CdXR0b25zXCIsXG4gICAgZmlsdGVyOiBlbGVtZW50cyhcIltyb2xlPXJhZGlvXVwiKSxcbn0pfVxuICAgICAgICAgICAgPjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbmA7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1lbGVtZW50JztcbmltcG9ydCB7IGRpc3BsYXksIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuaW1wb3J0IHsgZGVzaWduVW5pdCwgZm9yZWdyb3VuZCwgdHlwZVJhbXBCYXNlRm9udFNpemUgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCByYWRpb0dyb3VwU3R5bGVzID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGNzcyBgXG5cdCR7ZGlzcGxheSgnZmxleCcpfSA6aG9zdCB7XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0bWFyZ2luOiBjYWxjKCR7ZGVzaWduVW5pdH0gKiAxcHgpIDA7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0fVxuXHQucG9zaXRpb25pbmctcmVnaW9uIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtd3JhcDogd3JhcDtcblx0fVxuXHQ6aG9zdChbb3JpZW50YXRpb249J3ZlcnRpY2FsJ10pIC5wb3NpdGlvbmluZy1yZWdpb24ge1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdH1cblx0Omhvc3QoW29yaWVudGF0aW9uPSdob3Jpem9udGFsJ10pIC5wb3NpdGlvbmluZy1yZWdpb24ge1xuXHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdH1cblx0OjpzbG90dGVkKFtzbG90PSdsYWJlbCddKSB7XG5cdFx0Y29sb3I6ICR7Zm9yZWdyb3VuZH07XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRtYXJnaW46IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCkgMDtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgT3JpZW50YXRpb24gYXMgUmFkaW9Hcm91cE9yaWVudGF0aW9uIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LXdlYi11dGlsaXRpZXMnO1xuaW1wb3J0IHsgUmFkaW9Hcm91cCBhcyBGb3VuZGF0aW9uUmFkaW9Hcm91cCwgcmFkaW9Hcm91cFRlbXBsYXRlIGFzIHRlbXBsYXRlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IHJhZGlvR3JvdXBTdHlsZXMgYXMgc3R5bGVzIH0gZnJvbSAnLi9yYWRpby1ncm91cC5zdHlsZXMnO1xuZXhwb3J0IHsgUmFkaW9Hcm91cE9yaWVudGF0aW9uIH07XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgcmFkaW8gZ3JvdXAgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cCBleHRlbmRzIEZvdW5kYXRpb25SYWRpb0dyb3VwIHtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IHJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluc2VydGVkXG4gICAgICogaW50byB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIEdlbmVyYXRlcyBhIHVuaXF1ZSBpZCBmb3IgZWFjaCByYWRpbyBncm91cCBsYWJlbCBzbyB0aGF0IHRoZSBsYWJlbCBlbGVtZW50XG4gICAgICAgIC8vIHdpdGhpbiB0aGUgZ3JvdXAgY2FuIGJlIGNvcnJlY3RseSBhc3NvY2lhdGVkIHdpdGggdGhlIHJhZGlvIGdyb3VwLlxuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMucXVlcnlTZWxlY3RvcignbGFiZWwnKTtcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9ICdyYWRpby1ncm91cC0nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc2xpY2UoMik7XG4gICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSByYWRpbyBncm91cCBjb21wb25lbnQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBIVE1MIEVsZW1lbnQ6IGA8dnNjb2RlLXJhZGlvLWdyb3VwPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVSYWRpb0dyb3VwID0gUmFkaW9Hcm91cC5jb21wb3NlKHtcbiAgICBiYXNlTmFtZTogJ3JhZGlvLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG59KTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnQnO1xuaW1wb3J0IHsgZGlzcGxheSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyBiYWRnZUJhY2tncm91bmQsIGJhZGdlRm9yZWdyb3VuZCwgYm9yZGVyV2lkdGgsIGJ1dHRvbkJvcmRlciwgZGVzaWduVW5pdCwgZm9udEZhbWlseSwgdGFnQ29ybmVyUmFkaXVzLCB0eXBlUmFtcE1pbnVzMUZvbnRTaXplLCB0eXBlUmFtcE1pbnVzMUxpbmVIZWlnaHQsIH0gZnJvbSAnLi4vZGVzaWduLXRva2Vucyc7XG5leHBvcnQgY29uc3QgdGFnU3R5bGVzID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGNzcyBgXG5cdCR7ZGlzcGxheSgnaW5saW5lLWJsb2NrJyl9IDpob3N0IHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGZvbnQtZmFtaWx5OiAke2ZvbnRGYW1pbHl9O1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcE1pbnVzMUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcE1pbnVzMUxpbmVIZWlnaHR9O1xuXHR9XG5cdC5jb250cm9sIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke2JhZGdlQmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyOiBjYWxjKCR7Ym9yZGVyV2lkdGh9ICogMXB4KSBzb2xpZCAke2J1dHRvbkJvcmRlcn07XG5cdFx0Ym9yZGVyLXJhZGl1czogJHt0YWdDb3JuZXJSYWRpdXN9O1xuXHRcdGNvbG9yOiAke2JhZGdlRm9yZWdyb3VuZH07XG5cdFx0cGFkZGluZzogY2FsYygke2Rlc2lnblVuaXR9ICogMC41cHgpIGNhbGMoJHtkZXNpZ25Vbml0fSAqIDFweCk7XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgQmFkZ2UgYXMgRm91bmRhdGlvbkJhZGdlLCBiYWRnZVRlbXBsYXRlIGFzIHRlbXBsYXRlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IHRhZ1N0eWxlcyBhcyBzdHlsZXMgfSBmcm9tICcuL3RhZy5zdHlsZXMnO1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIHRhZyBjbGFzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUYWcgZXh0ZW5kcyBGb3VuZGF0aW9uQmFkZ2Uge1xuICAgIC8qKlxuICAgICAqIENvbXBvbmVudCBsaWZlY3ljbGUgbWV0aG9kIHRoYXQgcnVucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5zZXJ0ZWRcbiAgICAgKiBpbnRvIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIG92ZXJyaWRlIGFueSB1c2FnZSBvZiB0aGUgY2lyY3VsYXIgYXR0cmlidXRlXG4gICAgICAgIC8vIGluaGVyaXRlZCBieSB0aGUgRkFTVCBGb3VuZGF0aW9uIEJhZGdlIGNvbXBvbmVudCBzbyB0aGF0XG4gICAgICAgIC8vIFZTQ29kZVRhZ3MgYXJlIG5ldmVyIGNpcmN1bGFyXG4gICAgICAgIGlmICh0aGlzLmNpcmN1bGFyKSB7XG4gICAgICAgICAgICB0aGlzLmNpcmN1bGFyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgdGFnIGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtdGFnPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVUYWcgPSBUYWcuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICd0YWcnLFxuICAgIHRlbXBsYXRlLFxuICAgIHN0eWxlcyxcbn0pO1xuIiwiaW1wb3J0IHsgRm9ybUFzc29jaWF0ZWQgfSBmcm9tIFwiLi4vZm9ybS1hc3NvY2lhdGVkL2Zvcm0tYXNzb2NpYXRlZC5qc1wiO1xuaW1wb3J0IHsgRm91bmRhdGlvbkVsZW1lbnQgfSBmcm9tIFwiLi4vZm91bmRhdGlvbi1lbGVtZW50L2ZvdW5kYXRpb24tZWxlbWVudC5qc1wiO1xuY2xhc3MgX1RleHRGaWVsZCBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbi8qKlxuICogQSBmb3JtLWFzc29jaWF0ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGV4dEZpZWxkOmNsYXNzKX0gY29tcG9uZW50LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgRm9ybUFzc29jaWF0ZWRUZXh0RmllbGQgZXh0ZW5kcyBGb3JtQXNzb2NpYXRlZChfVGV4dEZpZWxkKSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJveHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBUZXh0IGZpZWxkIHN1Yi10eXBlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFRleHRGaWVsZFR5cGU7XG4oZnVuY3Rpb24gKFRleHRGaWVsZFR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBBbiBlbWFpbCBUZXh0RmllbGRcbiAgICAgKi9cbiAgICBUZXh0RmllbGRUeXBlW1wiZW1haWxcIl0gPSBcImVtYWlsXCI7XG4gICAgLyoqXG4gICAgICogQSBwYXNzd29yZCBUZXh0RmllbGRcbiAgICAgKi9cbiAgICBUZXh0RmllbGRUeXBlW1wicGFzc3dvcmRcIl0gPSBcInBhc3N3b3JkXCI7XG4gICAgLyoqXG4gICAgICogQSB0ZWxlcGhvbmUgVGV4dEZpZWxkXG4gICAgICovXG4gICAgVGV4dEZpZWxkVHlwZVtcInRlbFwiXSA9IFwidGVsXCI7XG4gICAgLyoqXG4gICAgICogQSB0ZXh0IFRleHRGaWVsZFxuICAgICAqL1xuICAgIFRleHRGaWVsZFR5cGVbXCJ0ZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgLyoqXG4gICAgICogQSBVUkwgVGV4dEZpZWxkXG4gICAgICovXG4gICAgVGV4dEZpZWxkVHlwZVtcInVybFwiXSA9IFwidXJsXCI7XG59KShUZXh0RmllbGRUeXBlIHx8IChUZXh0RmllbGRUeXBlID0ge30pKTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGF0dHIsIERPTSwgbnVsbGFibGVOdW1iZXJDb252ZXJ0ZXIsIG9ic2VydmFibGUgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzLCBTdGFydEVuZCwgfSBmcm9tIFwiLi4vcGF0dGVybnMvaW5kZXguanNcIjtcbmltcG9ydCB7IGFwcGx5TWl4aW5zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcHBseS1taXhpbnMuanNcIjtcbmltcG9ydCB7IEZvcm1Bc3NvY2lhdGVkVGV4dEZpZWxkIH0gZnJvbSBcIi4vdGV4dC1maWVsZC5mb3JtLWFzc29jaWF0ZWQuanNcIjtcbmltcG9ydCB7IFRleHRGaWVsZFR5cGUgfSBmcm9tIFwiLi90ZXh0LWZpZWxkLm9wdGlvbnMuanNcIjtcbmV4cG9ydCB7IFRleHRGaWVsZFR5cGUgfTtcbi8qKlxuICogQSBUZXh0IEZpZWxkIEN1c3RvbSBIVE1MIEVsZW1lbnQuXG4gKiBCYXNlZCBsYXJnZWx5IG9uIHRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0L3RleHQgfCA8aW5wdXQgdHlwZT1cInRleHRcIiAvPiBlbGVtZW50IH0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgRm9ybUFzc29jaWF0ZWRUZXh0RmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIHNldHRpbmcgYSB0eXBlIG9yIG1vZGUgb2YgdGV4dC5cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gVGV4dEZpZWxkVHlwZS50ZXh0O1xuICAgIH1cbiAgICByZWFkT25seUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5yZWFkT25seSA9IHRoaXMucmVhZE9ubHk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXV0b2ZvY3VzQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LmF1dG9mb2N1cyA9IHRoaXMuYXV0b2ZvY3VzO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBsYWNlaG9sZGVyQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LnBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0eXBlQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGlzdENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5zZXRBdHRyaWJ1dGUoXCJsaXN0XCIsIHRoaXMubGlzdCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWF4bGVuZ3RoQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5Lm1heExlbmd0aCA9IHRoaXMubWF4bGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1pbmxlbmd0aENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5taW5MZW5ndGggPSB0aGlzLm1pbmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXR0ZXJuQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LnBhdHRlcm4gPSB0aGlzLnBhdHRlcm47XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2l6ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5zaXplID0gdGhpcy5zaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwZWxsY2hlY2tDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuc3BlbGxjaGVjayA9IHRoaXMuc3BlbGxjaGVjaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5wcm94eS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHRoaXMudHlwZSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXV0b2ZvY3VzKSB7XG4gICAgICAgICAgICBET00ucXVldWVVcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGludGVybmFsIGNvbnRyb2wncyBgaW5wdXRgIGV2ZW50XG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgaGFuZGxlVGV4dElucHV0KCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5jb250cm9sLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgZXZlbnQgaGFuZGxlciBmb3IgaW5uZXIgY29udHJvbC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFwiQ2hhbmdlXCIgZXZlbnRzIGFyZSBub3QgYGNvbXBvc2FibGVgIHNvIHRoZXkgd2lsbCBub3RcbiAgICAgKiBwZXJtZWF0ZSB0aGUgc2hhZG93IERPTSBib3VuZGFyeS4gVGhpcyBmbiBlZmZlY3RpdmVseSBwcm94aWVzXG4gICAgICogdGhlIGNoYW5nZSBldmVudCwgZW1pdHRpbmcgYSBgY2hhbmdlYCBldmVudCB3aGVuZXZlciB0aGUgaW50ZXJuYWxcbiAgICAgKiBjb250cm9sIGVtaXRzIGEgYGNoYW5nZWAgZXZlbnRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoXCJjaGFuZ2VcIik7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJyZWFkb25seVwiLCBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJyZWFkT25seVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcImF1dG9mb2N1c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJwbGFjZWhvbGRlclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0clxuXSwgVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcImxpc3RcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBjb252ZXJ0ZXI6IG51bGxhYmxlTnVtYmVyQ29udmVydGVyIH0pXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcIm1heGxlbmd0aFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGNvbnZlcnRlcjogbnVsbGFibGVOdW1iZXJDb252ZXJ0ZXIgfSlcbl0sIFRleHRGaWVsZC5wcm90b3R5cGUsIFwibWlubGVuZ3RoXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcInBhdHRlcm5cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBjb252ZXJ0ZXI6IG51bGxhYmxlTnVtYmVyQ29udmVydGVyIH0pXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJzcGVsbGNoZWNrXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBvYnNlcnZhYmxlXG5dLCBUZXh0RmllbGQucHJvdG90eXBlLCBcImRlZmF1bHRTbG90dGVkTm9kZXNcIiwgdm9pZCAwKTtcbi8qKlxuICogSW5jbHVkZXMgQVJJQSBzdGF0ZXMgYW5kIHByb3BlcnRpZXMgcmVsYXRpbmcgdG8gdGhlIEFSSUEgdGV4dGJveCByb2xlXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRGVsZWdhdGVzQVJJQVRleHRib3gge1xufVxuYXBwbHlNaXhpbnMoRGVsZWdhdGVzQVJJQVRleHRib3gsIEFSSUFHbG9iYWxTdGF0ZXNBbmRQcm9wZXJ0aWVzKTtcbmFwcGx5TWl4aW5zKFRleHRGaWVsZCwgU3RhcnRFbmQsIERlbGVnYXRlc0FSSUFUZXh0Ym94KTtcbiIsImltcG9ydCB7IEZvcm1Bc3NvY2lhdGVkIH0gZnJvbSBcIi4uL2Zvcm0tYXNzb2NpYXRlZC9mb3JtLWFzc29jaWF0ZWQuanNcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbmNsYXNzIF9UZXh0QXJlYSBleHRlbmRzIEZvdW5kYXRpb25FbGVtZW50IHtcbn1cbi8qKlxuICogQSBmb3JtLWFzc29jaWF0ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGV4dEFyZWE6Y2xhc3MpfSBjb21wb25lbnQuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3JtQXNzb2NpYXRlZFRleHRBcmVhIGV4dGVuZHMgRm9ybUFzc29jaWF0ZWQoX1RleHRBcmVhKSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucHJveHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBSZXNpemUgbW9kZSBmb3IgYSBUZXh0QXJlYVxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdmFyIFRleHRBcmVhUmVzaXplO1xuKGZ1bmN0aW9uIChUZXh0QXJlYVJlc2l6ZSkge1xuICAgIC8qKlxuICAgICAqIE5vIHJlc2l6ZS5cbiAgICAgKi9cbiAgICBUZXh0QXJlYVJlc2l6ZVtcIm5vbmVcIl0gPSBcIm5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBSZXNpemUgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5LlxuICAgICAqL1xuICAgIFRleHRBcmVhUmVzaXplW1wiYm90aFwiXSA9IFwiYm90aFwiO1xuICAgIC8qKlxuICAgICAqIFJlc2l6ZSBob3Jpem9udGFsbHkuXG4gICAgICovXG4gICAgVGV4dEFyZWFSZXNpemVbXCJob3Jpem9udGFsXCJdID0gXCJob3Jpem9udGFsXCI7XG4gICAgLyoqXG4gICAgICogUmVzaXplIHZlcnRpY2FsbHkuXG4gICAgICovXG4gICAgVGV4dEFyZWFSZXNpemVbXCJ2ZXJ0aWNhbFwiXSA9IFwidmVydGljYWxcIjtcbn0pKFRleHRBcmVhUmVzaXplIHx8IChUZXh0QXJlYVJlc2l6ZSA9IHt9KSk7XG4iLCJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhdHRyLCBudWxsYWJsZU51bWJlckNvbnZlcnRlciwgb2JzZXJ2YWJsZSB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgRGVsZWdhdGVzQVJJQVRleHRib3ggfSBmcm9tIFwiLi4vdGV4dC1maWVsZC90ZXh0LWZpZWxkLmpzXCI7XG5pbXBvcnQgeyBhcHBseU1peGlucyB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXBwbHktbWl4aW5zLmpzXCI7XG5pbXBvcnQgeyBGb3JtQXNzb2NpYXRlZFRleHRBcmVhIH0gZnJvbSBcIi4vdGV4dC1hcmVhLmZvcm0tYXNzb2NpYXRlZC5qc1wiO1xuaW1wb3J0IHsgVGV4dEFyZWFSZXNpemUgfSBmcm9tIFwiLi90ZXh0LWFyZWEub3B0aW9ucy5qc1wiO1xuZXhwb3J0IHsgVGV4dEFyZWFSZXNpemUgfTtcbi8qKlxuICogQSBUZXh0IEFyZWEgQ3VzdG9tIEhUTUwgRWxlbWVudC5cbiAqIEJhc2VkIGxhcmdlbHkgb24gdGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGV4dGFyZWEgfCA8dGV4dGFyZWE+IGVsZW1lbnQgfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0QXJlYSBleHRlbmRzIEZvcm1Bc3NvY2lhdGVkVGV4dEFyZWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlc2l6ZSBtb2RlIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIEhUTUwgQXR0cmlidXRlOiByZXNpemVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzaXplID0gVGV4dEFyZWFSZXNpemUubm9uZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpemVzIHRoZSBlbGVtZW50IGhvcml6b250YWxseSBieSBhIG51bWJlciBvZiBjaGFyYWN0ZXIgY29sdW1ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBIVE1MIEF0dHJpYnV0ZTogY29sc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2xzID0gMjA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGFuZGxlVGV4dElucHV0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY29udHJvbC52YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVhZE9ubHlDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkucmVhZE9ubHkgPSB0aGlzLnJlYWRPbmx5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGF1dG9mb2N1c0NoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3h5IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5hdXRvZm9jdXMgPSB0aGlzLmF1dG9mb2N1cztcbiAgICAgICAgfVxuICAgIH1cbiAgICBsaXN0Q2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LnNldEF0dHJpYnV0ZShcImxpc3RcIiwgdGhpcy5saXN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXhsZW5ndGhDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkubWF4TGVuZ3RoID0gdGhpcy5tYXhsZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWlubGVuZ3RoQ2hhbmdlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHkgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5Lm1pbkxlbmd0aCA9IHRoaXMubWlubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwZWxsY2hlY2tDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm94eSBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuc3BlbGxjaGVjayA9IHRoaXMuc3BlbGxjaGVjaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgZXZlbnQgaGFuZGxlciBmb3IgaW5uZXIgY29udHJvbC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFwiQ2hhbmdlXCIgZXZlbnRzIGFyZSBub3QgYGNvbXBvc2FibGVgIHNvIHRoZXkgd2lsbCBub3RcbiAgICAgKiBwZXJtZWF0ZSB0aGUgc2hhZG93IERPTSBib3VuZGFyeS4gVGhpcyBmbiBlZmZlY3RpdmVseSBwcm94aWVzXG4gICAgICogdGhlIGNoYW5nZSBldmVudCwgZW1pdHRpbmcgYSBgY2hhbmdlYCBldmVudCB3aGVuZXZlciB0aGUgaW50ZXJuYWxcbiAgICAgKiBjb250cm9sIGVtaXRzIGEgYGNoYW5nZWAgZXZlbnRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoXCJjaGFuZ2VcIik7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBUZXh0QXJlYS5wcm90b3R5cGUsIFwicmVhZE9ubHlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJyZXNpemVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBtb2RlOiBcImJvb2xlYW5cIiB9KVxuXSwgVGV4dEFyZWEucHJvdG90eXBlLCBcImF1dG9mb2N1c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGF0dHJpYnV0ZTogXCJmb3JtXCIgfSlcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJmb3JtSWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJsaXN0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgY29udmVydGVyOiBudWxsYWJsZU51bWJlckNvbnZlcnRlciB9KVxuXSwgVGV4dEFyZWEucHJvdG90eXBlLCBcIm1heGxlbmd0aFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IGNvbnZlcnRlcjogbnVsbGFibGVOdW1iZXJDb252ZXJ0ZXIgfSlcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJtaW5sZW5ndGhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHJcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJuYW1lXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyXG5dLCBUZXh0QXJlYS5wcm90b3R5cGUsIFwicGxhY2Vob2xkZXJcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIGF0dHIoeyBjb252ZXJ0ZXI6IG51bGxhYmxlTnVtYmVyQ29udmVydGVyLCBtb2RlOiBcImZyb21WaWV3XCIgfSlcbl0sIFRleHRBcmVhLnByb3RvdHlwZSwgXCJjb2xzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBhdHRyKHsgY29udmVydGVyOiBudWxsYWJsZU51bWJlckNvbnZlcnRlciwgbW9kZTogXCJmcm9tVmlld1wiIH0pXG5dLCBUZXh0QXJlYS5wcm90b3R5cGUsIFwicm93c1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgYXR0cih7IG1vZGU6IFwiYm9vbGVhblwiIH0pXG5dLCBUZXh0QXJlYS5wcm90b3R5cGUsIFwic3BlbGxjaGVja1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgb2JzZXJ2YWJsZVxuXSwgVGV4dEFyZWEucHJvdG90eXBlLCBcImRlZmF1bHRTbG90dGVkTm9kZXNcIiwgdm9pZCAwKTtcbmFwcGx5TWl4aW5zKFRleHRBcmVhLCBEZWxlZ2F0ZXNBUklBVGV4dGJveCk7XG4iLCJpbXBvcnQgeyBodG1sLCByZWYsIHNsb3R0ZWQgfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IFRleHRBcmVhUmVzaXplIH0gZnJvbSBcIi4vdGV4dC1hcmVhLmpzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGV4dEFyZWE6Y2xhc3MpfSBjb21wb25lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB0ZXh0QXJlYVRlbXBsYXRlID0gKGNvbnRleHQsIGRlZmluaXRpb24pID0+IGh0bWwgYFxuICAgIDx0ZW1wbGF0ZVxuICAgICAgICBjbGFzcz1cIlxuICAgICAgICAgICAgJHt4ID0+ICh4LnJlYWRPbmx5ID8gXCJyZWFkb25seVwiIDogXCJcIil9XG4gICAgICAgICAgICAke3ggPT4gKHgucmVzaXplICE9PSBUZXh0QXJlYVJlc2l6ZS5ub25lID8gYHJlc2l6ZS0ke3gucmVzaXplfWAgOiBcIlwiKX1cIlxuICAgID5cbiAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBwYXJ0PVwibGFiZWxcIlxuICAgICAgICAgICAgZm9yPVwiY29udHJvbFwiXG4gICAgICAgICAgICBjbGFzcz1cIiR7eCA9PiB4LmRlZmF1bHRTbG90dGVkTm9kZXMgJiYgeC5kZWZhdWx0U2xvdHRlZE5vZGVzLmxlbmd0aFxuICAgID8gXCJsYWJlbFwiXG4gICAgOiBcImxhYmVsIGxhYmVsX19oaWRkZW5cIn1cIlxuICAgICAgICA+XG4gICAgICAgICAgICA8c2xvdCAke3Nsb3R0ZWQoXCJkZWZhdWx0U2xvdHRlZE5vZGVzXCIpfT48L3Nsb3Q+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgcGFydD1cImNvbnRyb2xcIlxuICAgICAgICAgICAgY2xhc3M9XCJjb250cm9sXCJcbiAgICAgICAgICAgIGlkPVwiY29udHJvbFwiXG4gICAgICAgICAgICA/YXV0b2ZvY3VzPVwiJHt4ID0+IHguYXV0b2ZvY3VzfVwiXG4gICAgICAgICAgICBjb2xzPVwiJHt4ID0+IHguY29sc31cIlxuICAgICAgICAgICAgP2Rpc2FibGVkPVwiJHt4ID0+IHguZGlzYWJsZWR9XCJcbiAgICAgICAgICAgIGZvcm09XCIke3ggPT4geC5mb3JtfVwiXG4gICAgICAgICAgICBsaXN0PVwiJHt4ID0+IHgubGlzdH1cIlxuICAgICAgICAgICAgbWF4bGVuZ3RoPVwiJHt4ID0+IHgubWF4bGVuZ3RofVwiXG4gICAgICAgICAgICBtaW5sZW5ndGg9XCIke3ggPT4geC5taW5sZW5ndGh9XCJcbiAgICAgICAgICAgIG5hbWU9XCIke3ggPT4geC5uYW1lfVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIiR7eCA9PiB4LnBsYWNlaG9sZGVyfVwiXG4gICAgICAgICAgICA/cmVhZG9ubHk9XCIke3ggPT4geC5yZWFkT25seX1cIlxuICAgICAgICAgICAgP3JlcXVpcmVkPVwiJHt4ID0+IHgucmVxdWlyZWR9XCJcbiAgICAgICAgICAgIHJvd3M9XCIke3ggPT4geC5yb3dzfVwiXG4gICAgICAgICAgICA/c3BlbGxjaGVjaz1cIiR7eCA9PiB4LnNwZWxsY2hlY2t9XCJcbiAgICAgICAgICAgIDp2YWx1ZT1cIiR7eCA9PiB4LnZhbHVlfVwiXG4gICAgICAgICAgICBhcmlhLWF0b21pYz1cIiR7eCA9PiB4LmFyaWFBdG9taWN9XCJcbiAgICAgICAgICAgIGFyaWEtYnVzeT1cIiR7eCA9PiB4LmFyaWFCdXN5fVwiXG4gICAgICAgICAgICBhcmlhLWNvbnRyb2xzPVwiJHt4ID0+IHguYXJpYUNvbnRyb2xzfVwiXG4gICAgICAgICAgICBhcmlhLWN1cnJlbnQ9XCIke3ggPT4geC5hcmlhQ3VycmVudH1cIlxuICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cIiR7eCA9PiB4LmFyaWFEZXNjcmliZWRieX1cIlxuICAgICAgICAgICAgYXJpYS1kZXRhaWxzPVwiJHt4ID0+IHguYXJpYURldGFpbHN9XCJcbiAgICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9XCIke3ggPT4geC5hcmlhRGlzYWJsZWR9XCJcbiAgICAgICAgICAgIGFyaWEtZXJyb3JtZXNzYWdlPVwiJHt4ID0+IHguYXJpYUVycm9ybWVzc2FnZX1cIlxuICAgICAgICAgICAgYXJpYS1mbG93dG89XCIke3ggPT4geC5hcmlhRmxvd3RvfVwiXG4gICAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwiJHt4ID0+IHguYXJpYUhhc3BvcHVwfVwiXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cIiR7eCA9PiB4LmFyaWFIaWRkZW59XCJcbiAgICAgICAgICAgIGFyaWEtaW52YWxpZD1cIiR7eCA9PiB4LmFyaWFJbnZhbGlkfVwiXG4gICAgICAgICAgICBhcmlhLWtleXNob3J0Y3V0cz1cIiR7eCA9PiB4LmFyaWFLZXlzaG9ydGN1dHN9XCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCIke3ggPT4geC5hcmlhTGFiZWx9XCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cIiR7eCA9PiB4LmFyaWFMYWJlbGxlZGJ5fVwiXG4gICAgICAgICAgICBhcmlhLWxpdmU9XCIke3ggPT4geC5hcmlhTGl2ZX1cIlxuICAgICAgICAgICAgYXJpYS1vd25zPVwiJHt4ID0+IHguYXJpYU93bnN9XCJcbiAgICAgICAgICAgIGFyaWEtcmVsZXZhbnQ9XCIke3ggPT4geC5hcmlhUmVsZXZhbnR9XCJcbiAgICAgICAgICAgIGFyaWEtcm9sZWRlc2NyaXB0aW9uPVwiJHt4ID0+IHguYXJpYVJvbGVkZXNjcmlwdGlvbn1cIlxuICAgICAgICAgICAgQGlucHV0PVwiJHsoeCwgYykgPT4geC5oYW5kbGVUZXh0SW5wdXQoKX1cIlxuICAgICAgICAgICAgQGNoYW5nZT1cIiR7eCA9PiB4LmhhbmRsZUNoYW5nZSgpfVwiXG4gICAgICAgICAgICAke3JlZihcImNvbnRyb2xcIil9XG4gICAgICAgID48L3RleHRhcmVhPlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjb3JuZXJSYWRpdXMsIGRlc2lnblVuaXQsIGRpc2FibGVkT3BhY2l0eSwgZHJvcGRvd25Cb3JkZXIsIGZvY3VzQm9yZGVyLCBmb250RmFtaWx5LCBmb3JlZ3JvdW5kLCBpbnB1dEJhY2tncm91bmQsIGlucHV0Rm9yZWdyb3VuZCwgaW5wdXRNaW5XaWR0aCwgc2Nyb2xsYmFySGVpZ2h0LCBzY3JvbGxiYXJTbGlkZXJBY3RpdmVCYWNrZ3JvdW5kLCBzY3JvbGxiYXJTbGlkZXJCYWNrZ3JvdW5kLCBzY3JvbGxiYXJTbGlkZXJIb3ZlckJhY2tncm91bmQsIHNjcm9sbGJhcldpZHRoLCB0eXBlUmFtcEJhc2VGb250U2l6ZSwgdHlwZVJhbXBCYXNlTGluZUhlaWdodCwgfSBmcm9tICcuLi9kZXNpZ24tdG9rZW5zJztcbmV4cG9ydCBjb25zdCB0ZXh0QXJlYVN0eWxlcyA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBjc3MgYFxuXHQke2Rpc3BsYXkoJ2lubGluZS1ibG9jaycpfSA6aG9zdCB7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0fVxuXHQuY29udHJvbCB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0Y29sb3I6ICR7aW5wdXRGb3JlZ3JvdW5kfTtcblx0XHRiYWNrZ3JvdW5kOiAke2lucHV0QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLXJhZGl1czogY2FsYygke2Nvcm5lclJhZGl1c30gKiAxcHgpO1xuXHRcdGJvcmRlcjogY2FsYygke2JvcmRlcldpZHRofSAqIDFweCkgc29saWQgJHtkcm9wZG93bkJvcmRlcn07XG5cdFx0Zm9udDogaW5oZXJpdDtcblx0XHRmb250LXNpemU6ICR7dHlwZVJhbXBCYXNlRm9udFNpemV9O1xuXHRcdGxpbmUtaGVpZ2h0OiAke3R5cGVSYW1wQmFzZUxpbmVIZWlnaHR9O1xuXHRcdHBhZGRpbmc6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDJweCArIDFweCk7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0bWluLXdpZHRoOiAke2lucHV0TWluV2lkdGh9O1xuXHRcdHJlc2l6ZTogbm9uZTtcblx0fVxuXHQuY29udHJvbDpob3ZlcjplbmFibGVkIHtcblx0XHRiYWNrZ3JvdW5kOiAke2lucHV0QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2Ryb3Bkb3duQm9yZGVyfTtcblx0fVxuXHQuY29udHJvbDphY3RpdmU6ZW5hYmxlZCB7XG5cdFx0YmFja2dyb3VuZDogJHtpbnB1dEJhY2tncm91bmR9O1xuXHRcdGJvcmRlci1jb2xvcjogJHtmb2N1c0JvcmRlcn07XG5cdH1cblx0LmNvbnRyb2w6aG92ZXIsXG5cdC5jb250cm9sOiR7Zm9jdXNWaXNpYmxlfSxcblx0LmNvbnRyb2w6ZGlzYWJsZWQsXG5cdC5jb250cm9sOmFjdGl2ZSB7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0fVxuXHQuY29udHJvbDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuXHRcdHdpZHRoOiAke3Njcm9sbGJhcldpZHRofTtcblx0XHRoZWlnaHQ6ICR7c2Nyb2xsYmFySGVpZ2h0fTtcblx0fVxuXHQuY29udHJvbDo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcblx0XHRiYWNrZ3JvdW5kOiAke2lucHV0QmFja2dyb3VuZH07XG5cdH1cblx0LmNvbnRyb2w6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcblx0XHRiYWNrZ3JvdW5kOiAke3Njcm9sbGJhclNsaWRlckJhY2tncm91bmR9O1xuXHR9XG5cdC5jb250cm9sOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XG5cdFx0YmFja2dyb3VuZDogJHtzY3JvbGxiYXJTbGlkZXJIb3ZlckJhY2tncm91bmR9O1xuXHR9XG5cdC5jb250cm9sOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6ICR7c2Nyb2xsYmFyU2xpZGVyQWN0aXZlQmFja2dyb3VuZH07XG5cdH1cblx0Omhvc3QoOmZvY3VzLXdpdGhpbjpub3QoW2Rpc2FibGVkXSkpIC5jb250cm9sIHtcblx0XHRib3JkZXItY29sb3I6ICR7Zm9jdXNCb3JkZXJ9O1xuXHR9XG5cdDpob3N0KFtyZXNpemU9J2JvdGgnXSkgLmNvbnRyb2wge1xuXHRcdHJlc2l6ZTogYm90aDtcblx0fVxuXHQ6aG9zdChbcmVzaXplPSdob3Jpem9udGFsJ10pIC5jb250cm9sIHtcblx0XHRyZXNpemU6IGhvcml6b250YWw7XG5cdH1cblx0Omhvc3QoW3Jlc2l6ZT0ndmVydGljYWwnXSkgLmNvbnRyb2wge1xuXHRcdHJlc2l6ZTogdmVydGljYWw7XG5cdH1cblx0LmxhYmVsIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRjb2xvcjogJHtmb3JlZ3JvdW5kfTtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0Zm9udC1zaXplOiAke3R5cGVSYW1wQmFzZUZvbnRTaXplfTtcblx0XHRsaW5lLWhlaWdodDogJHt0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0fTtcblx0XHRtYXJnaW4tYm90dG9tOiAycHg7XG5cdH1cblx0LmxhYmVsX19oaWRkZW4ge1xuXHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0dmlzaWJpbGl0eTogaGlkZGVuO1xuXHR9XG5cdDpob3N0KFtkaXNhYmxlZF0pIC5sYWJlbCxcblx0Omhvc3QoW3JlYWRvbmx5XSkgLmxhYmVsLFxuXHQ6aG9zdChbcmVhZG9ubHldKSAuY29udHJvbCxcblx0Omhvc3QoW2Rpc2FibGVkXSkgLmNvbnRyb2wge1xuXHRcdGN1cnNvcjogJHtkaXNhYmxlZEN1cnNvcn07XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXSkge1xuXHRcdG9wYWNpdHk6ICR7ZGlzYWJsZWRPcGFjaXR5fTtcblx0fVxuXHQ6aG9zdChbZGlzYWJsZWRdKSAuY29udHJvbCB7XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2Ryb3Bkb3duQm9yZGVyfTtcblx0fVxuYDtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgVGV4dEFyZWEgYXMgRm91bmRhdGlvblRleHRBcmVhLCB0ZXh0QXJlYVRlbXBsYXRlIGFzIHRlbXBsYXRlLCBUZXh0QXJlYVJlc2l6ZSwgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbic7XG5pbXBvcnQgeyB0ZXh0QXJlYVN0eWxlcyBhcyBzdHlsZXMgfSBmcm9tICcuL3RleHQtYXJlYS5zdHlsZXMnO1xuZXhwb3J0IHsgVGV4dEFyZWFSZXNpemUgfTtcbi8qKlxuICogVGhlIFZpc3VhbCBTdHVkaW8gQ29kZSB0ZXh0IGFyZWEgY2xhc3MuXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtdGV4dC1hcmVhPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0QXJlYSBleHRlbmRzIEZvdW5kYXRpb25UZXh0QXJlYSB7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IGxpZmVjeWNsZSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbnNlcnRlZFxuICAgICAqIGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aGlzLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIERlc2NyaWJlIHRoZSBnZW5lcmljIGNvbXBvbmVudCBpZiBubyBsYWJlbCBpcyBwcm92aWRlZFxuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnVGV4dCBhcmVhJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoZSBWaXN1YWwgU3R1ZGlvIENvZGUgdGV4dCBhcmVhIGNvbXBvbmVudCByZWdpc3RyYXRpb24uXG4gKlxuICogQHJlbWFya3NcbiAqIEhUTUwgRWxlbWVudDogYDx2c2NvZGUtdGV4dC1hcmVhPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVUZXh0QXJlYSA9IFRleHRBcmVhLmNvbXBvc2Uoe1xuICAgIGJhc2VOYW1lOiAndGV4dC1hcmVhJyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG4gICAgc2hhZG93T3B0aW9uczoge1xuICAgICAgICBkZWxlZ2F0ZXNGb2N1czogdHJ1ZSxcbiAgICB9LFxufSk7XG4iLCIvKipcbiAqIGEgbWV0aG9kIHRvIGZpbHRlciBvdXQgYW55IHdoaXRlc3BhY2UgX29ubHlfIG5vZGVzLCB0byBiZSB1c2VkIGluc2lkZSBhIHRlbXBsYXRlXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgTm9kZSB0aGF0IGlzIGJlaW5nIGluc3BlY3RlZFxuICogQHBhcmFtIGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBub2RlIHdpdGhpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSBhcnJheSAtIFRoZSBOb2RlIGFycmF5IHRoYXQgaXMgYmVpbmcgZmlsdGVyZWRcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlRmlsdGVyKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcbiAgICByZXR1cm4gdmFsdWUubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IHR5cGVvZiB2YWx1ZS5ub2RlVmFsdWUgPT09IFwic3RyaW5nXCIgJiYgISF2YWx1ZS5ub2RlVmFsdWUudHJpbSgpLmxlbmd0aDtcbn1cbiIsImltcG9ydCB7IGh0bWwsIHJlZiwgc2xvdHRlZCB9IGZyb20gXCJAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudFwiO1xuaW1wb3J0IHsgZW5kU2xvdFRlbXBsYXRlLCBzdGFydFNsb3RUZW1wbGF0ZSB9IGZyb20gXCIuLi9wYXR0ZXJucy9zdGFydC1lbmQuanNcIjtcbmltcG9ydCB7IHdoaXRlc3BhY2VGaWx0ZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3doaXRlc3BhY2UtZmlsdGVyLmpzXCI7XG4vKipcbiAqIFRoZSB0ZW1wbGF0ZSBmb3IgdGhlIHtAbGluayBAbWljcm9zb2Z0L2Zhc3QtZm91bmRhdGlvbiMoVGV4dEZpZWxkOmNsYXNzKX0gY29tcG9uZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdGV4dEZpZWxkVGVtcGxhdGUgPSAoY29udGV4dCwgZGVmaW5pdGlvbikgPT4gaHRtbCBgXG4gICAgPHRlbXBsYXRlXG4gICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICAke3ggPT4gKHgucmVhZE9ubHkgPyBcInJlYWRvbmx5XCIgOiBcIlwiKX1cbiAgICAgICAgXCJcbiAgICA+XG4gICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgcGFydD1cImxhYmVsXCJcbiAgICAgICAgICAgIGZvcj1cImNvbnRyb2xcIlxuICAgICAgICAgICAgY2xhc3M9XCIke3ggPT4geC5kZWZhdWx0U2xvdHRlZE5vZGVzICYmIHguZGVmYXVsdFNsb3R0ZWROb2Rlcy5sZW5ndGhcbiAgICA/IFwibGFiZWxcIlxuICAgIDogXCJsYWJlbCBsYWJlbF9faGlkZGVuXCJ9XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPHNsb3RcbiAgICAgICAgICAgICAgICAke3Nsb3R0ZWQoeyBwcm9wZXJ0eTogXCJkZWZhdWx0U2xvdHRlZE5vZGVzXCIsIGZpbHRlcjogd2hpdGVzcGFjZUZpbHRlciB9KX1cbiAgICAgICAgICAgID48L3Nsb3Q+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb290XCIgcGFydD1cInJvb3RcIj5cbiAgICAgICAgICAgICR7c3RhcnRTbG90VGVtcGxhdGUoY29udGV4dCwgZGVmaW5pdGlvbil9XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBjbGFzcz1cImNvbnRyb2xcIlxuICAgICAgICAgICAgICAgIHBhcnQ9XCJjb250cm9sXCJcbiAgICAgICAgICAgICAgICBpZD1cImNvbnRyb2xcIlxuICAgICAgICAgICAgICAgIEBpbnB1dD1cIiR7eCA9PiB4LmhhbmRsZVRleHRJbnB1dCgpfVwiXG4gICAgICAgICAgICAgICAgQGNoYW5nZT1cIiR7eCA9PiB4LmhhbmRsZUNoYW5nZSgpfVwiXG4gICAgICAgICAgICAgICAgP2F1dG9mb2N1cz1cIiR7eCA9PiB4LmF1dG9mb2N1c31cIlxuICAgICAgICAgICAgICAgID9kaXNhYmxlZD1cIiR7eCA9PiB4LmRpc2FibGVkfVwiXG4gICAgICAgICAgICAgICAgbGlzdD1cIiR7eCA9PiB4Lmxpc3R9XCJcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XCIke3ggPT4geC5tYXhsZW5ndGh9XCJcbiAgICAgICAgICAgICAgICBtaW5sZW5ndGg9XCIke3ggPT4geC5taW5sZW5ndGh9XCJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuPVwiJHt4ID0+IHgucGF0dGVybn1cIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJHt4ID0+IHgucGxhY2Vob2xkZXJ9XCJcbiAgICAgICAgICAgICAgICA/cmVhZG9ubHk9XCIke3ggPT4geC5yZWFkT25seX1cIlxuICAgICAgICAgICAgICAgID9yZXF1aXJlZD1cIiR7eCA9PiB4LnJlcXVpcmVkfVwiXG4gICAgICAgICAgICAgICAgc2l6ZT1cIiR7eCA9PiB4LnNpemV9XCJcbiAgICAgICAgICAgICAgICA/c3BlbGxjaGVjaz1cIiR7eCA9PiB4LnNwZWxsY2hlY2t9XCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9XCIke3ggPT4geC52YWx1ZX1cIlxuICAgICAgICAgICAgICAgIHR5cGU9XCIke3ggPT4geC50eXBlfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1hdG9taWM9XCIke3ggPT4geC5hcmlhQXRvbWljfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1idXN5PVwiJHt4ID0+IHguYXJpYUJ1c3l9XCJcbiAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPVwiJHt4ID0+IHguYXJpYUNvbnRyb2xzfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1jdXJyZW50PVwiJHt4ID0+IHguYXJpYUN1cnJlbnR9XCJcbiAgICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiJHt4ID0+IHguYXJpYURlc2NyaWJlZGJ5fVwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXRhaWxzPVwiJHt4ID0+IHguYXJpYURldGFpbHN9XCJcbiAgICAgICAgICAgICAgICBhcmlhLWRpc2FibGVkPVwiJHt4ID0+IHguYXJpYURpc2FibGVkfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1lcnJvcm1lc3NhZ2U9XCIke3ggPT4geC5hcmlhRXJyb3JtZXNzYWdlfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1mbG93dG89XCIke3ggPT4geC5hcmlhRmxvd3RvfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cIiR7eCA9PiB4LmFyaWFIYXNwb3B1cH1cIlxuICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiJHt4ID0+IHguYXJpYUhpZGRlbn1cIlxuICAgICAgICAgICAgICAgIGFyaWEtaW52YWxpZD1cIiR7eCA9PiB4LmFyaWFJbnZhbGlkfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1rZXlzaG9ydGN1dHM9XCIke3ggPT4geC5hcmlhS2V5c2hvcnRjdXRzfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIiR7eCA9PiB4LmFyaWFMYWJlbH1cIlxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cIiR7eCA9PiB4LmFyaWFMYWJlbGxlZGJ5fVwiXG4gICAgICAgICAgICAgICAgYXJpYS1saXZlPVwiJHt4ID0+IHguYXJpYUxpdmV9XCJcbiAgICAgICAgICAgICAgICBhcmlhLW93bnM9XCIke3ggPT4geC5hcmlhT3duc31cIlxuICAgICAgICAgICAgICAgIGFyaWEtcmVsZXZhbnQ9XCIke3ggPT4geC5hcmlhUmVsZXZhbnR9XCJcbiAgICAgICAgICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj1cIiR7eCA9PiB4LmFyaWFSb2xlZGVzY3JpcHRpb259XCJcbiAgICAgICAgICAgICAgICAke3JlZihcImNvbnRyb2xcIil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgJHtlbmRTbG90VGVtcGxhdGUoY29udGV4dCwgZGVmaW5pdGlvbil9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAbWljcm9zb2Z0L2Zhc3QtZWxlbWVudCc7XG5pbXBvcnQgeyBkaXNhYmxlZEN1cnNvciwgZGlzcGxheSwgZm9jdXNWaXNpYmxlLCB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1mb3VuZGF0aW9uJztcbmltcG9ydCB7IGJvcmRlcldpZHRoLCBjb3JuZXJSYWRpdXMsIGRlc2lnblVuaXQsIGRpc2FibGVkT3BhY2l0eSwgZHJvcGRvd25Cb3JkZXIsIGZvY3VzQm9yZGVyLCBmb250RmFtaWx5LCBmb3JlZ3JvdW5kLCBpbnB1dEJhY2tncm91bmQsIGlucHV0Rm9yZWdyb3VuZCwgaW5wdXRIZWlnaHQsIGlucHV0TWluV2lkdGgsIHR5cGVSYW1wQmFzZUZvbnRTaXplLCB0eXBlUmFtcEJhc2VMaW5lSGVpZ2h0LCB9IGZyb20gJy4uL2Rlc2lnbi10b2tlbnMnO1xuZXhwb3J0IGNvbnN0IHRleHRGaWVsZFN0eWxlcyA9IChjb250ZXh0LCBkZWZpbml0aW9uKSA9PiBjc3MgYFxuXHQke2Rpc3BsYXkoJ2lubGluZS1ibG9jaycpfSA6aG9zdCB7XG5cdFx0Zm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX07XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0fVxuXHQucm9vdCB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdGNvbG9yOiAke2lucHV0Rm9yZWdyb3VuZH07XG5cdFx0YmFja2dyb3VuZDogJHtpbnB1dEJhY2tncm91bmR9O1xuXHRcdGJvcmRlci1yYWRpdXM6IGNhbGMoJHtjb3JuZXJSYWRpdXN9ICogMXB4KTtcblx0XHRib3JkZXI6IGNhbGMoJHtib3JkZXJXaWR0aH0gKiAxcHgpIHNvbGlkICR7ZHJvcGRvd25Cb3JkZXJ9O1xuXHRcdGhlaWdodDogY2FsYygke2lucHV0SGVpZ2h0fSAqIDFweCk7XG5cdFx0bWluLXdpZHRoOiAke2lucHV0TWluV2lkdGh9O1xuXHR9XG5cdC5jb250cm9sIHtcblx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0Zm9udDogaW5oZXJpdDtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXI6IDA7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdFx0aGVpZ2h0OiBjYWxjKDEwMCUgLSAoJHtkZXNpZ25Vbml0fSAqIDFweCkpO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdG1hcmdpbi10b3A6IGF1dG87XG5cdFx0bWFyZ2luLWJvdHRvbTogYXV0bztcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0cGFkZGluZzogMCBjYWxjKCR7ZGVzaWduVW5pdH0gKiAycHggKyAxcHgpO1xuXHRcdGZvbnQtc2l6ZTogJHt0eXBlUmFtcEJhc2VGb250U2l6ZX07XG5cdFx0bGluZS1oZWlnaHQ6ICR7dHlwZVJhbXBCYXNlTGluZUhlaWdodH07XG5cdH1cblx0LmNvbnRyb2w6aG92ZXIsXG5cdC5jb250cm9sOiR7Zm9jdXNWaXNpYmxlfSxcblx0LmNvbnRyb2w6ZGlzYWJsZWQsXG5cdC5jb250cm9sOmFjdGl2ZSB7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0fVxuXHQubGFiZWwge1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGNvbG9yOiAke2ZvcmVncm91bmR9O1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRmb250LXNpemU6ICR7dHlwZVJhbXBCYXNlRm9udFNpemV9O1xuXHRcdGxpbmUtaGVpZ2h0OiAke3R5cGVSYW1wQmFzZUxpbmVIZWlnaHR9O1xuXHRcdG1hcmdpbi1ib3R0b206IDJweDtcblx0fVxuXHQubGFiZWxfX2hpZGRlbiB7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0XHR2aXNpYmlsaXR5OiBoaWRkZW47XG5cdH1cblx0LnN0YXJ0LFxuXHQuZW5kIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdG1hcmdpbjogYXV0bztcblx0XHRmaWxsOiBjdXJyZW50Y29sb3I7XG5cdH1cblx0OjpzbG90dGVkKHN2ZyksXG5cdDo6c2xvdHRlZChzcGFuKSB7XG5cdFx0d2lkdGg6IGNhbGMoJHtkZXNpZ25Vbml0fSAqIDRweCk7XG5cdFx0aGVpZ2h0OiBjYWxjKCR7ZGVzaWduVW5pdH0gKiA0cHgpO1xuXHR9XG5cdC5zdGFydCB7XG5cdFx0bWFyZ2luLWlubGluZS1zdGFydDogY2FsYygke2Rlc2lnblVuaXR9ICogMnB4KTtcblx0fVxuXHQuZW5kIHtcblx0XHRtYXJnaW4taW5saW5lLWVuZDogY2FsYygke2Rlc2lnblVuaXR9ICogMnB4KTtcblx0fVxuXHQ6aG9zdCg6aG92ZXI6bm90KFtkaXNhYmxlZF0pKSAucm9vdCB7XG5cdFx0YmFja2dyb3VuZDogJHtpbnB1dEJhY2tncm91bmR9O1xuXHRcdGJvcmRlci1jb2xvcjogJHtkcm9wZG93bkJvcmRlcn07XG5cdH1cblx0Omhvc3QoOmFjdGl2ZTpub3QoW2Rpc2FibGVkXSkpIC5yb290IHtcblx0XHRiYWNrZ3JvdW5kOiAke2lucHV0QmFja2dyb3VuZH07XG5cdFx0Ym9yZGVyLWNvbG9yOiAke2ZvY3VzQm9yZGVyfTtcblx0fVxuXHQ6aG9zdCg6Zm9jdXMtd2l0aGluOm5vdChbZGlzYWJsZWRdKSkgLnJvb3Qge1xuXHRcdGJvcmRlci1jb2xvcjogJHtmb2N1c0JvcmRlcn07XG5cdH1cblx0Omhvc3QoW2Rpc2FibGVkXSkgLmxhYmVsLFxuXHQ6aG9zdChbcmVhZG9ubHldKSAubGFiZWwsXG5cdDpob3N0KFtyZWFkb25seV0pIC5jb250cm9sLFxuXHQ6aG9zdChbZGlzYWJsZWRdKSAuY29udHJvbCB7XG5cdFx0Y3Vyc29yOiAke2Rpc2FibGVkQ3Vyc29yfTtcblx0fVxuXHQ6aG9zdChbZGlzYWJsZWRdKSB7XG5cdFx0b3BhY2l0eTogJHtkaXNhYmxlZE9wYWNpdHl9O1xuXHR9XG5cdDpob3N0KFtkaXNhYmxlZF0pIC5jb250cm9sIHtcblx0XHRib3JkZXItY29sb3I6ICR7ZHJvcGRvd25Cb3JkZXJ9O1xuXHR9XG5gO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBUZXh0RmllbGQgYXMgRm91bmRhdGlvblRleHRGaWVsZCwgdGV4dEZpZWxkVGVtcGxhdGUgYXMgdGVtcGxhdGUsIFRleHRGaWVsZFR5cGUsIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuaW1wb3J0IHsgdGV4dEZpZWxkU3R5bGVzIGFzIHN0eWxlcyB9IGZyb20gJy4vdGV4dC1maWVsZC5zdHlsZXMnO1xuZXhwb3J0IHsgVGV4dEZpZWxkVHlwZSB9O1xuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIHRleHQgZmllbGQgY2xhc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgRm91bmRhdGlvblRleHRGaWVsZCB7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IGxpZmVjeWNsZSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbnNlcnRlZFxuICAgICAqIGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aGlzLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIERlc2NyaWJlIHRoZSBnZW5lcmljIGNvbXBvbmVudCBpZiBubyBsYWJlbCBpcyBwcm92aWRlZFxuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnVGV4dCBmaWVsZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgVmlzdWFsIFN0dWRpbyBDb2RlIHRleHQgZmllbGQgY29tcG9uZW50IHJlZ2lzdHJhdGlvbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogSFRNTCBFbGVtZW50OiBgPHZzY29kZS10ZXh0LWZpZWxkPmBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2c0NvZGVUZXh0RmllbGQgPSBUZXh0RmllbGQuY29tcG9zZSh7XG4gICAgYmFzZU5hbWU6ICd0ZXh0LWZpZWxkJyxcbiAgICB0ZW1wbGF0ZSxcbiAgICBzdHlsZXMsXG4gICAgc2hhZG93T3B0aW9uczoge1xuICAgICAgICBkZWxlZ2F0ZXNGb2N1czogdHJ1ZSxcbiAgICB9LFxufSk7XG4iLCJpbXBvcnQgeyBGQVNURWxlbWVudERlZmluaXRpb24gfSBmcm9tIFwiQG1pY3Jvc29mdC9mYXN0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEZvdW5kYXRpb25FbGVtZW50IH0gZnJvbSBcIi4uL2ZvdW5kYXRpb24tZWxlbWVudC9mb3VuZGF0aW9uLWVsZW1lbnQuanNcIjtcbmltcG9ydCB7IERJLCBSZWdpc3RyYXRpb24gfSBmcm9tIFwiLi4vZGkvZGkuanNcIjtcbmltcG9ydCB7IERlc2lnblRva2VuIH0gZnJvbSBcIi4uL2Rlc2lnbi10b2tlbi9kZXNpZ24tdG9rZW4uanNcIjtcbmltcG9ydCB7IENvbXBvbmVudFByZXNlbnRhdGlvbiB9IGZyb20gXCIuL2NvbXBvbmVudC1wcmVzZW50YXRpb24uanNcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbi8qKlxuICogSW5kaWNhdGVzIHdoYXQgdG8gZG8gd2l0aCBhbiBhbWJpZ3VvdXMgKGR1cGxpY2F0ZSkgZWxlbWVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEVsZW1lbnREaXNhbWJpZ3VhdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIFNraXAgZGVmaW5pbmcgdGhlIGVsZW1lbnQgYnV0IHN0aWxsIGNhbGwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIHBhc3NlZFxuICAgICAqIHRvIERlc2lnblN5c3RlbVJlZ2lzdHJhdGlvbkNvbnRleHQudHJ5RGVmaW5lRWxlbWVudFxuICAgICAqL1xuICAgIGRlZmluaXRpb25DYWxsYmFja09ubHk6IG51bGwsXG4gICAgLyoqXG4gICAgICogSWdub3JlIHRoZSBkdXBsaWNhdGUgZWxlbWVudCBlbnRpcmVseS5cbiAgICAgKi9cbiAgICBpZ25vcmVEdXBsaWNhdGU6IFN5bWJvbCgpLFxufSk7XG5jb25zdCBlbGVtZW50VHlwZXNCeVRhZyA9IG5ldyBNYXAoKTtcbmNvbnN0IGVsZW1lbnRUYWdzQnlUeXBlID0gbmV3IE1hcCgpO1xubGV0IHJvb3REZXNpZ25TeXN0ZW0gPSBudWxsO1xuY29uc3QgZGVzaWduU3lzdGVtS2V5ID0gREkuY3JlYXRlSW50ZXJmYWNlKHggPT4geC5jYWNoZWRDYWxsYmFjayhoYW5kbGVyID0+IHtcbiAgICBpZiAocm9vdERlc2lnblN5c3RlbSA9PT0gbnVsbCkge1xuICAgICAgICByb290RGVzaWduU3lzdGVtID0gbmV3IERlZmF1bHREZXNpZ25TeXN0ZW0obnVsbCwgaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiByb290RGVzaWduU3lzdGVtO1xufSkpO1xuLyoqXG4gKiBBbiBBUEkgZ2F0ZXdheSB0byBkZXNpZ24gc3lzdGVtIGZlYXR1cmVzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRGVzaWduU3lzdGVtID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSFRNTCBlbGVtZW50IG5hbWUgdGhhdCB0aGUgdHlwZSBpcyBkZWZpbmVkIGFzLlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdG8gbG9va3VwLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB0YWdGb3IodHlwZSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudFRhZ3NCeVR5cGUuZ2V0KHR5cGUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgdGhlIERPTSBoaWVyYXJjaHkgZm9yIHRoZSBkZXNpZ24gc3lzdGVtIHRoYXQgaXMgcmVzcG9uc2libGVcbiAgICAgKiBmb3IgdGhlIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBsb2NhdGUgdGhlIGRlc2lnbiBzeXN0ZW0gZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBsb2NhdGVkIGRlc2lnbiBzeXN0ZW0uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHJlc3BvbnNpYmxlRm9yKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgb3duZWQgPSBlbGVtZW50LiQkZGVzaWduU3lzdGVtJCQ7XG4gICAgICAgIGlmIChvd25lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG93bmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IERJLmZpbmRSZXNwb25zaWJsZUNvbnRhaW5lcihlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXQoZGVzaWduU3lzdGVtS2V5KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIERlc2lnblN5c3RlbSBpZiBvbmUgaXMgZXhwbGljaXRseSBkZWZpbmVkIG9uIHRoZSBwcm92aWRlZCBlbGVtZW50O1xuICAgICAqIG90aGVyd2lzZSBjcmVhdGVzIGEgZGVzaWduIHN5c3RlbSBkZWZpbmVkIGRpcmVjdGx5IG9uIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gZ2V0IG9yIGNyZWF0ZSBhIGRlc2lnbiBzeXN0ZW0gZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBkZXNpZ24gc3lzdGVtLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRPckNyZWF0ZShub2RlKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgaWYgKHJvb3REZXNpZ25TeXN0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByb290RGVzaWduU3lzdGVtID0gREkuZ2V0T3JDcmVhdGVET01Db250YWluZXIoKS5nZXQoZGVzaWduU3lzdGVtS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByb290RGVzaWduU3lzdGVtO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG93bmVkID0gbm9kZS4kJGRlc2lnblN5c3RlbSQkO1xuICAgICAgICBpZiAob3duZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvd25lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBESS5nZXRPckNyZWF0ZURPTUNvbnRhaW5lcihub2RlKTtcbiAgICAgICAgaWYgKGNvbnRhaW5lci5oYXMoZGVzaWduU3lzdGVtS2V5LCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuZ2V0KGRlc2lnblN5c3RlbUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzeXN0ZW0gPSBuZXcgRGVmYXVsdERlc2lnblN5c3RlbShub2RlLCBjb250YWluZXIpO1xuICAgICAgICAgICAgY29udGFpbmVyLnJlZ2lzdGVyKFJlZ2lzdHJhdGlvbi5pbnN0YW5jZShkZXNpZ25TeXN0ZW1LZXksIHN5c3RlbSkpO1xuICAgICAgICAgICAgcmV0dXJuIHN5c3RlbTtcbiAgICAgICAgfVxuICAgIH0sXG59KTtcbmZ1bmN0aW9uIGV4dHJhY3RUcnlEZWZpbmVFbGVtZW50UGFyYW1zKHBhcmFtcywgZWxlbWVudERlZmluaXRpb25UeXBlLCBlbGVtZW50RGVmaW5pdGlvbkNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHBhcmFtcyxcbiAgICAgICAgICAgIHR5cGU6IGVsZW1lbnREZWZpbml0aW9uVHlwZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBlbGVtZW50RGVmaW5pdGlvbkNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG59XG5jbGFzcyBEZWZhdWx0RGVzaWduU3lzdGVtIHtcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZGVzaWduVG9rZW5zSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmVmaXggPSBcImZhc3RcIjtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290TW9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kaXNhbWJpZ3VhdGUgPSAoKSA9PiBFbGVtZW50RGlzYW1iaWd1YXRpb24uZGVmaW5pdGlvbkNhbGxiYWNrT25seTtcbiAgICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvd25lci4kJGRlc2lnblN5c3RlbSQkID0gdGhpcztcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aXRoUHJlZml4KHByZWZpeCkge1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHdpdGhTaGFkb3dSb290TW9kZShtb2RlKSB7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdE1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgd2l0aEVsZW1lbnREaXNhbWJpZ3VhdGlvbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmRpc2FtYmlndWF0ZSA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgd2l0aERlc2lnblRva2VuUm9vdChyb290KSB7XG4gICAgICAgIHRoaXMuZGVzaWduVG9rZW5Sb290ID0gcm9vdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlZ2lzdGVyKC4uLnJlZ2lzdHJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IGVsZW1lbnREZWZpbml0aW9uRW50cmllcyA9IFtdO1xuICAgICAgICBjb25zdCBkaXNhbWJpZ3VhdGUgPSB0aGlzLmRpc2FtYmlndWF0ZTtcbiAgICAgICAgY29uc3Qgc2hhZG93Um9vdE1vZGUgPSB0aGlzLnNoYWRvd1Jvb3RNb2RlO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAgICAgZWxlbWVudFByZWZpeDogdGhpcy5wcmVmaXgsXG4gICAgICAgICAgICB0cnlEZWZpbmVFbGVtZW50KHBhcmFtcywgZWxlbWVudERlZmluaXRpb25UeXBlLCBlbGVtZW50RGVmaW5pdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFjdGVkUGFyYW1zID0gZXh0cmFjdFRyeURlZmluZUVsZW1lbnRQYXJhbXMocGFyYW1zLCBlbGVtZW50RGVmaW5pdGlvblR5cGUsIGVsZW1lbnREZWZpbml0aW9uQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgY2FsbGJhY2ssIGJhc2VDbGFzcyB9ID0gZXh0cmFjdGVkUGFyYW1zO1xuICAgICAgICAgICAgICAgIGxldCB7IHR5cGUgfSA9IGV4dHJhY3RlZFBhcmFtcztcbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudE5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIGxldCB0eXBlRm91bmRCeU5hbWUgPSBlbGVtZW50VHlwZXNCeVRhZy5nZXQoZWxlbWVudE5hbWUpO1xuICAgICAgICAgICAgICAgIGxldCBuZWVkc0RlZmluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHR5cGVGb3VuZEJ5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBkaXNhbWJpZ3VhdGUoZWxlbWVudE5hbWUsIHR5cGUsIHR5cGVGb3VuZEJ5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVsZW1lbnREaXNhbWJpZ3VhdGlvbi5pZ25vcmVEdXBsaWNhdGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFbGVtZW50RGlzYW1iaWd1YXRpb24uZGVmaW5pdGlvbkNhbGxiYWNrT25seTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc0RlZmluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVGb3VuZEJ5TmFtZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudE5hbWUgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUZvdW5kQnlOYW1lID0gZWxlbWVudFR5cGVzQnlUYWcuZ2V0KGVsZW1lbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNEZWZpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRUYWdzQnlUeXBlLmhhcyh0eXBlKSB8fCB0eXBlID09PSBGb3VuZGF0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGNsYXNzIGV4dGVuZHMgdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlc0J5VGFnLnNldChlbGVtZW50TmFtZSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRUYWdzQnlUeXBlLnNldCh0eXBlLCBlbGVtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRUYWdzQnlUeXBlLnNldChiYXNlQ2xhc3MsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50RGVmaW5pdGlvbkVudHJpZXMucHVzaChuZXcgRWxlbWVudERlZmluaXRpb25FbnRyeShjb250YWluZXIsIGVsZW1lbnROYW1lLCB0eXBlLCBzaGFkb3dSb290TW9kZSwgY2FsbGJhY2ssIG5lZWRzRGVmaW5lKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXMuZGVzaWduVG9rZW5zSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzaWduVG9rZW5zSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVzaWduVG9rZW5Sb290ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgRGVzaWduVG9rZW4ucmVnaXN0ZXJSb290KHRoaXMuZGVzaWduVG9rZW5Sb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIucmVnaXN0ZXJXaXRoQ29udGV4dChjb250ZXh0LCAuLi5yZWdpc3RyYXRpb25zKTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbGVtZW50RGVmaW5pdGlvbkVudHJpZXMpIHtcbiAgICAgICAgICAgIGVudHJ5LmNhbGxiYWNrKGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChlbnRyeS53aWxsRGVmaW5lICYmIGVudHJ5LmRlZmluaXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5kZWZpbml0aW9uLmRlZmluZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmNsYXNzIEVsZW1lbnREZWZpbml0aW9uRW50cnkge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgbmFtZSwgdHlwZSwgc2hhZG93Um9vdE1vZGUsIGNhbGxiYWNrLCB3aWxsRGVmaW5lKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3RNb2RlID0gc2hhZG93Um9vdE1vZGU7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy53aWxsRGVmaW5lID0gd2lsbERlZmluZTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgZGVmaW5lUHJlc2VudGF0aW9uKHByZXNlbnRhdGlvbikge1xuICAgICAgICBDb21wb25lbnRQcmVzZW50YXRpb24uZGVmaW5lKHRoaXMubmFtZSwgcHJlc2VudGF0aW9uLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgfVxuICAgIGRlZmluZUVsZW1lbnQoZGVmaW5pdGlvbikge1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBuZXcgRkFTVEVsZW1lbnREZWZpbml0aW9uKHRoaXMudHlwZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZpbml0aW9uKSwgeyBuYW1lOiB0aGlzLm5hbWUgfSkpO1xuICAgIH1cbiAgICB0YWdGb3IodHlwZSkge1xuICAgICAgICByZXR1cm4gRGVzaWduU3lzdGVtLnRhZ0Zvcih0eXBlKTtcbiAgICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgRGVzaWduU3lzdGVtIH0gZnJvbSAnQG1pY3Jvc29mdC9mYXN0LWZvdW5kYXRpb24nO1xuLyoqXG4gKiBQcm92aWRlcyBhIGRlc2lnbiBzeXN0ZW0gZm9yIHRoZSBzcGVjaWZpZWQgZWxlbWVudCBlaXRoZXIgYnkgcmV0dXJuaW5nIG9uZSB0aGF0IHdhc1xuICogYWxyZWFkeSBjcmVhdGVkIGZvciB0aGF0IGVsZW1lbnQgb3IgY3JlYXRpbmcgb25lLlxuICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byByb290IHRoZSBkZXNpZ24gc3lzdGVtIGF0LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSBib2R5LlxuICogQHJldHVybnMgQSBWU0NvZGUgRGVzaWduIFN5c3RlbVxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVZTQ29kZURlc2lnblN5c3RlbShlbGVtZW50KSB7XG4gICAgcmV0dXJuIERlc2lnblN5c3RlbS5nZXRPckNyZWF0ZShlbGVtZW50KS53aXRoUHJlZml4KCd2c2NvZGUnKTtcbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgcHJvdmlkZVJlYWN0V3JhcHBlciB9IGZyb20gJ0BtaWNyb3NvZnQvZmFzdC1yZWFjdC13cmFwcGVyJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB2c0NvZGVCYWRnZSwgdnNDb2RlQnV0dG9uLCB2c0NvZGVDaGVja2JveCwgdnNDb2RlRGF0YUdyaWQsIHZzQ29kZURhdGFHcmlkQ2VsbCwgdnNDb2RlRGF0YUdyaWRSb3csIHZzQ29kZURpdmlkZXIsIHZzQ29kZURyb3Bkb3duLCB2c0NvZGVMaW5rLCB2c0NvZGVPcHRpb24sIHZzQ29kZVBhbmVscywgdnNDb2RlUGFuZWxUYWIsIHZzQ29kZVBhbmVsVmlldywgdnNDb2RlUHJvZ3Jlc3NSaW5nLCB2c0NvZGVSYWRpbywgdnNDb2RlUmFkaW9Hcm91cCwgdnNDb2RlVGFnLCB2c0NvZGVUZXh0QXJlYSwgdnNDb2RlVGV4dEZpZWxkLCB9IGZyb20gJy4uL2Rpc3QvaW5kZXgnO1xuaW1wb3J0IHsgcHJvdmlkZVZTQ29kZURlc2lnblN5c3RlbSB9IGZyb20gJy4uL2Rpc3QvdnNjb2RlLWRlc2lnbi1zeXN0ZW0nO1xuY29uc3QgeyB3cmFwIH0gPSBwcm92aWRlUmVhY3RXcmFwcGVyKFJlYWN0LCBwcm92aWRlVlNDb2RlRGVzaWduU3lzdGVtKCkpO1xuLyoqXG4gKiBWUyBDb2RlIEJhZGdlIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVCYWRnZSA9IHdyYXAodnNDb2RlQmFkZ2UoKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtYmFkZ2UnLFxufSk7XG4vKipcbiAqIFZTIENvZGUgQnV0dG9uIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVCdXR0b24gPSB3cmFwKHZzQ29kZUJ1dHRvbigpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1idXR0b24nLFxufSk7XG4vKipcbiAqIFZTIENvZGUgQ2hlY2tib3ggUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZUNoZWNrYm94ID0gd3JhcCh2c0NvZGVDaGVja2JveCgpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1jaGVja2JveCcsXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIG9uQ2hhbmdlOiAnY2hhbmdlJyxcbiAgICB9LFxufSk7XG4vKipcbiAqIFZTIENvZGUgRGF0YSBHcmlkIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVEYXRhR3JpZCA9IHdyYXAodnNDb2RlRGF0YUdyaWQoKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtZGF0YS1ncmlkJyxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIERhdGEgR3JpZCBDZWxsIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVEYXRhR3JpZENlbGwgPSB3cmFwKHZzQ29kZURhdGFHcmlkQ2VsbCgpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1kYXRhLWdyaWQtY2VsbCcsXG59KTtcbi8qKlxuICogVlMgQ29kZSBEYXRhIEdyaWQgUm93IFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVEYXRhR3JpZFJvdyA9IHdyYXAodnNDb2RlRGF0YUdyaWRSb3coKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtZGF0YS1ncmlkLXJvdycsXG59KTtcbi8qKlxuICogVlMgQ29kZSBEaXZpZGVyIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVEaXZpZGVyID0gd3JhcCh2c0NvZGVEaXZpZGVyKCksIHtcbiAgICBuYW1lOiAndnNjb2RlLWRpdmlkZXInLFxufSk7XG4vKipcbiAqIFZTIENvZGUgRHJvcGRvd24gUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZURyb3Bkb3duID0gd3JhcCh2c0NvZGVEcm9wZG93bigpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1kcm9wZG93bicsXG4gICAgZXZlbnRzOiB7XG4gICAgICAgIG9uQ2hhbmdlOiAnY2hhbmdlJyxcbiAgICB9LFxufSk7XG4vKipcbiAqIFZTIENvZGUgTGluayBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgVlNDb2RlTGluayA9IHdyYXAodnNDb2RlTGluaygpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1saW5rJyxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIE9wdGlvbiBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgVlNDb2RlT3B0aW9uID0gd3JhcCh2c0NvZGVPcHRpb24oKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtb3B0aW9uJyxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIFBhbmVscyBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgVlNDb2RlUGFuZWxzID0gd3JhcCh2c0NvZGVQYW5lbHMoKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtcGFuZWxzJyxcbiAgICBldmVudHM6IHtcbiAgICAgICAgb25DaGFuZ2U6ICdjaGFuZ2UnLFxuICAgIH0sXG59KTtcbi8qKlxuICogVlMgQ29kZSBQYW5lbCBUYWIgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZVBhbmVsVGFiID0gd3JhcCh2c0NvZGVQYW5lbFRhYigpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1wYW5lbC10YWInLFxufSk7XG4vKipcbiAqIFZTIENvZGUgUGFuZWwgVmlldyBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgVlNDb2RlUGFuZWxWaWV3ID0gd3JhcCh2c0NvZGVQYW5lbFZpZXcoKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtcGFuZWwtdmlldycsXG59KTtcbi8qKlxuICogVlMgQ29kZSBQcm9ncmVzcyBSaW5nIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVQcm9ncmVzc1JpbmcgPSB3cmFwKHZzQ29kZVByb2dyZXNzUmluZygpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS1wcm9ncmVzcy1yaW5nJyxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIFJhZGlvIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVSYWRpbyA9IHdyYXAodnNDb2RlUmFkaW8oKSwge1xuICAgIG5hbWU6ICd2c2NvZGUtcmFkaW8nLFxuICAgIGV2ZW50czoge1xuICAgICAgICBvbkNoYW5nZTogJ2NoYW5nZScsXG4gICAgfSxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIFJhZGlvIEdyb3VwIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBWU0NvZGVSYWRpb0dyb3VwID0gd3JhcCh2c0NvZGVSYWRpb0dyb3VwKCksIHtcbiAgICBuYW1lOiAndnNjb2RlLXJhZGlvLWdyb3VwJyxcbiAgICBldmVudHM6IHtcbiAgICAgICAgb25DaGFuZ2U6ICdjaGFuZ2UnLFxuICAgIH0sXG59KTtcbi8qKlxuICogVlMgQ29kZSBUYWcgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZVRhZyA9IHdyYXAodnNDb2RlVGFnKCksIHtcbiAgICBuYW1lOiAndnNjb2RlLXRhZycsXG59KTtcbi8qKlxuICogVlMgQ29kZSBUZXh0IEFyZWEgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZVRleHRBcmVhID0gd3JhcCh2c0NvZGVUZXh0QXJlYSgpLCB7XG4gICAgbmFtZTogJ3ZzY29kZS10ZXh0LWFyZWEnLFxuICAgIGV2ZW50czoge1xuICAgICAgICBvbkNoYW5nZTogJ2NoYW5nZScsXG4gICAgICAgIG9uSW5wdXQ6ICdpbnB1dCcsXG4gICAgfSxcbn0pO1xuLyoqXG4gKiBWUyBDb2RlIFRleHQgRmllbGQgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFZTQ29kZVRleHRGaWVsZCA9IHdyYXAodnNDb2RlVGV4dEZpZWxkKCksIHtcbiAgICBuYW1lOiAndnNjb2RlLXRleHQtZmllbGQnLFxuICAgIGV2ZW50czoge1xuICAgICAgICBvbkNoYW5nZTogJ2NoYW5nZScsXG4gICAgICAgIG9uSW5wdXQ6ICdpbnB1dCcsXG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1ZTQ29kZUFQSX0gZnJvbSAnLi4vVlNDb2RlQVBJJztcbmltcG9ydCB7dXNlU3RvcmV9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCB7VnNjV2FybmluZywgVnNjVGh1bWJzZG93biwgVnNjVGh1bWJzdXB9IGZyb20gJ3JlYWN0LWljb25zL3ZzYyc7XG5pbXBvcnQge0ZlZWRiYWNrTWVzc2FnZX0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3NyYy93ZWJ2aWV3cy9tZXNzYWdlJztcbmltcG9ydCB7VlNDb2RlQnV0dG9ufSBmcm9tICdAdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9yZWFjdCc7XG5cbnR5cGUgT3B0aW9uID0ge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgaWNvbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIHNsdWc6IHN0cmluZztcbn07XG5cbmNvbnN0IG9wdGlvbnM6IE9wdGlvbltdID0gW1xuICAgIHtcbiAgICAgICAgaWNvbjogPFZzY1dhcm5pbmcgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbFwiIC8+LFxuICAgICAgICBsYWJlbDogJ0luY29ycmVjdCcsXG4gICAgICAgIHNsdWc6ICdpbmNvcnJlY3QnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpY29uOiA8VnNjVGh1bWJzZG93biBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz4sXG4gICAgICAgIGxhYmVsOiAnVW5oZWxwZnVsJyxcbiAgICAgICAgc2x1ZzogJ3VuaGVscGZ1bCcsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGljb246IDxWc2NUaHVtYnN1cCBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz4sXG4gICAgICAgIGxhYmVsOiAnR3JlYXQnLFxuICAgICAgICBzbHVnOiAnZ3JlYXQnLFxuICAgIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgRmVlZGJhY2sgPSAoe3Jlc3BvbnNlSXRlcmF0aW9ufToge3Jlc3BvbnNlSXRlcmF0aW9uOiBudW1iZXJ9KSA9PiB7XG4gICAgY29uc3QgW2hhc1Jlc3BvbmRlZCwgc2V0SGFzUmVzcG9uZGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IHtzZWxlY3RlZFRleHQsIHByb21wdCwgc3RvcCwgbW9kZWxSZXNwb25zZX0gPSB1c2VTdG9yZSgpO1xuXG4gICAgY29uc3Qgb25SZXNwb25kID0gKG9wdGlvbjogT3B0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IEZlZWRiYWNrTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdmZWVkYmFjaycsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uOiBvcHRpb24uc2x1ZyxcbiAgICAgICAgICAgICAgICBwcm9tcHQ6IHByb21wdCxcbiAgICAgICAgICAgICAgICBzdG9wOiBzdG9wLFxuICAgICAgICAgICAgICAgIGNvZGU6IHNlbGVjdGVkVGV4dCxcbiAgICAgICAgICAgICAgICBtb2RlbFJlc3BvbnNlOiBtb2RlbFJlc3BvbnNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgVlNDb2RlQVBJLnBvc3RXZWJWaWV3TWVzc2FnZShtZXNzYWdlKTtcblxuICAgICAgICBzZXRIYXNSZXNwb25kZWQodHJ1ZSk7XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldEhhc1Jlc3BvbmRlZChmYWxzZSk7XG4gICAgfSwgW3Jlc3BvbnNlSXRlcmF0aW9uXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlwiPlxuICAgICAgICAgICAgeyFoYXNSZXNwb25kZWQgPyAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZXN0IHRleHQtdnNjb2RlLWZvcmVncm91bmRcIj5UaGlzIHJlc3VsdCBpcy4uLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBmbGV4LXdyYXAgZ2FwLTQgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZTQ29kZUJ1dHRvbiBrZXk9e29wdGlvbi5zbHVnfSBhcHBlYXJhbmNlPVwic2Vjb25kYXJ5XCIgb25DbGljaz17KCkgPT4gb25SZXNwb25kKG9wdGlvbil9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzbG90PVwic3RhcnRcIj57b3B0aW9uLmljb259PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVlNDb2RlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtdC02IGl0YWxpY1wiPlRoYW5rcyBmb3IgeW91ciBmZWVkYmFjayE8L3A+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBDb2xsYXBzZVByb3BzIHtcbiAgICBjb2xsYXBzZWQ/OiBib29sZWFuO1xuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xsYXBzZSh7Y29sbGFwc2VkID0gdHJ1ZSwgY2hpbGRyZW59OiBDb2xsYXBzZVByb3BzKSB7XG4gICAgY29uc3QgW2lzQ29sbGFwc2VkLCBzZXRJc0NvbGxhcHNlZF0gPSBSZWFjdC51c2VTdGF0ZShjb2xsYXBzZWQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidy1mdWxsIGJsb2NrIHRleHQtbGVmdFwiIG9uQ2xpY2s9eygpID0+IHNldElzQ29sbGFwc2VkKCFpc0NvbGxhcHNlZCl9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCByb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxleCBtci0xIHctMSBoLTEgY29sbGFwc2UtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRyYW5zaXRpb24gZHVyYXRpb24tMzAwIGVhc2UtaW4tb3V0IHRyYW5zZm9ybSAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbGxhcHNlZCA/ICdyb3RhdGUtMCcgOiAncm90YXRlLTkwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiOFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiMTRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgOCAxNFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNNy4xNDY0NSA3LjM1MzU2TDEuMzUzNTUgMTMuMTQ2NUMxLjAzODU3IDEzLjQ2MTQgMC41IDEzLjIzODMgMC41IDEyLjc5MjlMMC41IDEuMjA3MTFDMC41IDAuNzYxNjU4IDEuMDM4NTcgMC41Mzg1NzMgMS4zNTM1NSAwLjg1MzU1Nkw3LjE0NjQ1IDYuNjQ2NDVDNy4zNDE3MSA2Ljg0MTcxIDcuMzQxNzEgNy4xNTgyOSA3LjE0NjQ1IDcuMzUzNTZaXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIEFkdmFuY2VkXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29sbGFwc2UtY29udGVudCAke2lzQ29sbGFwc2VkID8gJ2hpZGRlbicgOiAnYmxvY2snfSBtdC0yYH0gYXJpYS1leHBhbmRlZD17aXNDb2xsYXBzZWR9PlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8Lz5cbiAgICApO1xufVxuIiwiLy8gU29tZSBvZiB0aGlzIGNvZGUgaXMgY29waWVkIG92ZXIgZnJvbSB0aGUgQGNvcGlsb3QvcHJvbXB0bGliIHBhY2thZ2Ugc28gTGFicyBoYXMgZnVsbCBjb250cm9sXG4vLyBvdmVyIGxhbmd1YWdlIHN1cHBvcnQgYW5kIHNpbmdsZSB2cy4gbXVsdGlsaW5lIGNvbW1lbnRzXG5cbi8qIFRoZSBwcm9jZXNzIGZvciBhZGRpbmcgYSBsYW5ndWFnZSBpcyB0bzpcbiAqIDEuIEFkZCBzaW5nbGUgYW5kIG11bHRpIGxpbmUgY29tbWVudCBtYXJrZXJzXG4gKiAyLiBTZWUgaWYgVlNDb2RlIGhhcyBhIGxhbmd1YWdlIGlkZW50aWZpZXIgZm9yIGl0IGFuZCBpZiBub3QgYWRkIHRvIGZpbGVFeHRlbnNpb25Ub0xhbmd1YWdlTWFwXG4gKiBodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2xhbmd1YWdlcy9pZGVudGlmaWVycyNfa25vd24tbGFuZ3VhZ2UtaWRlbnRpZmllcnNcbiAqIDMuIFNlZSBpZiBoaWdobGlnaHRKUyBzdXBwb3J0cyBsYW5ndWFnZSBvdXQgb2YgdGhlIGJveCBhbmQgaWYgbm90IGFkZCB0aGUgYmVzdCBtYXRjaCB0byBsYW5ndWFnZVRvSGlnaGxpZ2h0SlNNYXBcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9oaWdobGlnaHRqcy9oaWdobGlnaHQuanMvYmxvYi9tYWluL1NVUFBPUlRFRF9MQU5HVUFHRVMubWRcbiAqL1xuXG5pbnRlcmZhY2UgQ29tbWVudE1hcmtlciB7XG4gICAgc3RhcnQ6IHN0cmluZztcbiAgICBlbmQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBTaW5nbGUgbGluZSBjb21tZW50IG1hcmtlcnMuXG4gKiBBbGwgdGhlc2UgbGFuZ3VhZ2VzIHNob3cgdXAgaW4gdGhlIFRyYW5zbGF0ZSBwYW5lbFxuICogMSB0byAxIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBtdWx0aUxpbmVDb21tZW50TWFya2VycyBtYXAgYmVsb3dcbiAqXG4gKiBNaXNzaW5nIGJlbG93IGZyb20gdGhpcyBsaXN0IGFyZTpcbiAqIERpZmYgZGlmZlxuICogR2l0XHRnaXQtY29tbWl0IGFuZCBnaXQtcmViYXNlXG4gKiBKU09OXHRqc29uXG4gKi9cbmV4cG9ydCBjb25zdCBsYW5ndWFnZUNvbW1lbnRNYXJrZXJzOiB7W2xhbmd1YWdlOiBzdHJpbmddOiBDb21tZW50TWFya2VyfSA9IHtcbiAgICBhYmFwOiB7c3RhcnQ6ICdcIicsIGVuZDogJyd9LFxuICAgIGJhdDoge3N0YXJ0OiAnUkVNJywgZW5kOiAnJ30sXG4gICAgYmlidGV4OiB7c3RhcnQ6ICclJywgZW5kOiAnJ30sXG4gICAgYmxhZGU6IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICBjOiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIGNsb2p1cmU6IHtzdGFydDogJzsnLCBlbmQ6ICcnfSxcbiAgICBjb2JvbDoge3N0YXJ0OiAnKicsIGVuZDogJyd9LCAvLyBhZGRlZCB1bmlxdWVseSBpbiBsYWJzXG4gICAgY29mZmVlc2NyaXB0OiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIGNwcDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBjc2hhcnA6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgY3NzOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgZGFydDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBkb2NrZXJmaWxlOiB7c3RhcnQ6ICcjJywgZW5kOiAnJ30sXG4gICAgZWxpeGlyOiB7c3RhcnQ6ICcjJywgZW5kOiAnJ30sXG4gICAgZXJiOiB7c3RhcnQ6ICc8JSMnLCBlbmQ6ICclPid9LFxuICAgIGZvcnRyYW46IHtzdGFydDogJ0MnLCBlbmQ6ICcnfSwgLy8gYWRkZWQgdW5pcXVlbHkgaW4gbGFic1xuICAgIGZzaGFycDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBnbzoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBncm9vdnk6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgaGFtbDoge3N0YXJ0OiAnLSMnLCBlbmQ6ICcnfSxcbiAgICBoYW5kbGViYXJzOiB7c3RhcnQ6ICd7eyEnLCBlbmQ6ICd9fSd9LFxuICAgIGh0bWw6IHtzdGFydDogJzwhLS0nLCBlbmQ6ICctLT4nfSxcbiAgICBpbmk6IHtzdGFydDogJzsnLCBlbmQ6ICcnfSxcbiAgICBqYXZhOiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIGphdmFzY3JpcHQ6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgamF2YXNjcmlwdHJlYWN0OiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIGpzb25jOiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIGpzeDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBqdWxpYToge3N0YXJ0OiAnIycsIGVuZDogJyd9LFxuICAgIGtvdGxpbjoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSwgLy8gYWRkZWQgdW5pcXVlbHkgaW4gbGFic1xuICAgIGxhdGV4OiB7c3RhcnQ6ICclJywgZW5kOiAnJ30sXG4gICAgbGVzczoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBsdWE6IHtzdGFydDogJy0tJywgZW5kOiAnJ30sXG4gICAgbWFrZWZpbGU6IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICBtYXJrZG93bjoge3N0YXJ0OiAnW106ICMnLCBlbmQ6ICcnfSxcbiAgICBtZHg6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgJ29iamVjdGl2ZS1jJzoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICAnb2JqZWN0aXZlLWNwcCc6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgcGVybDoge3N0YXJ0OiAnIycsIGVuZDogJyd9LFxuICAgIHBocDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICAvLyBpbXBvcnRhbnQgdG8ga2VlcCBpbiBmb3IgaGlnaGxpZ2h0anMgYW5kIGFzIGZhbGxiYWNrXG4gICAgcGxhaW50ZXh0OiB7c3RhcnQ6ICcnLCBlbmQ6ICcnfSxcbiAgICBwdWc6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgcHl0aG9uOiB7c3RhcnQ6ICcjJywgZW5kOiAnJ30sXG4gICAgcG93ZXJzaGVsbDoge3N0YXJ0OiAnJywgZW5kOiAnIyd9LFxuICAgIHI6IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICByYXpvcjoge3N0YXJ0OiAnPCEtLScsIGVuZDogJy0tPid9LFxuICAgIHJ1Ynk6IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICBydXN0OiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIHNhc3M6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgc2Nzczoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBzaGFkZXJsYWI6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgc2hlbGxzY3JpcHQ6IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICBzbGltOiB7c3RhcnQ6ICcvJywgZW5kOiAnJ30sXG4gICAgc29saWRpdHk6IHtzdGFydDogJy8vJywgZW5kOiAnJ30sXG4gICAgc3FsOiB7c3RhcnQ6ICctLScsIGVuZDogJyd9LFxuICAgIHN0eWx1czoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICBzdmVsdGU6IHtzdGFydDogJzwhLS0nLCBlbmQ6ICctLT4nfSxcbiAgICBzd2lmdDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICB0ZXJyYWZvcm06IHtzdGFydDogJyMnLCBlbmQ6ICcnfSxcbiAgICB0ZXg6IHtzdGFydDogJyUnLCBlbmQ6ICcnfSxcbiAgICB0eXBlc2NyaXB0OiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LFxuICAgIHR5cGVzY3JpcHRyZWFjdDoge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICB2Yjoge3N0YXJ0OiBcIidcIiwgZW5kOiAnJ30sXG4gICAgJ3Z1ZS1odG1sJzoge3N0YXJ0OiAnPCEtLScsIGVuZDogJy0tPid9LFxuICAgIHZ1ZToge3N0YXJ0OiAnLy8nLCBlbmQ6ICcnfSxcbiAgICB4bWw6IHtzdGFydDogJzwhLS0nLCBlbmQ6ICctLT4nfSxcbiAgICB4c2w6IHtzdGFydDogJzwhLS0nLCBlbmQ6ICctLT4nfSxcbiAgICB5YW1sOiB7c3RhcnQ6ICcjJywgZW5kOiAnJ30sXG4gICAgemlnOiB7c3RhcnQ6ICcvLycsIGVuZDogJyd9LCAvLyBhZGRlZCB1bmlxdWVseSBpbiBsYWJzXG59O1xuXG4vKipcbiAqIE11bHRpbGluZSBjb21tZW50IG1hcmtlcnMuXG4gKiBVc2VkIGZvciB0aGUgUHJvbXB0RWRpdG9yIGNvbXBvbmVudCBpbiB0aGUgZnJvbnQtZW5kIHdlYnZpZXdcbiAqIFRoaXMgY29tcG9uZW50IG1pZ2h0IGVuZCB1cCBnb2luZyBhd2F5IHdpdGggdGhlIHVzZSBvZiB0aGUgRWRpdCBtb2RlbHNcbiAqIFBsZWFzZSBub3RlIHNvbWUgbGFuZ3VhZ2VzIGxpa2UgRm9ydHJhbiBhbmQgWmlnIGRvbid0ICpyZWFsbHkqIGhhdmVcbiAqIG11bHRpLWxpbmUgY29tbWVudCBzdXBwb3J0XG4gKlxuICogTWlzc2luZyBiZWxvdyBmcm9tIHRoaXMgbGlzdCBhcmU6XG4gKiBEaWZmIGRpZmZcbiAqIEdpdFx0Z2l0LWNvbW1pdCBhbmQgZ2l0LXJlYmFzZVxuICogSlNPTlx0anNvblxuICovXG5leHBvcnQgY29uc3QgbXVsdGlMaW5lTGFuZ3VhZ2VDb21tZW50TWFya2Vyczoge1tsYW5ndWFnZTogc3RyaW5nXTogQ29tbWVudE1hcmtlcn0gPSB7XG4gICAgYWJhcDoge3N0YXJ0OiAnKicsIGVuZDogJyonfSxcbiAgICBiYXQ6IHtzdGFydDogJzo6JywgZW5kOiAnOjonfSxcbiAgICBiaWJ0ZXg6IHtzdGFydDogJyUnLCBlbmQ6ICclJ30sXG4gICAgYmxhZGU6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBjOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgY2xvanVyZToge3N0YXJ0OiAnOzsnLCBlbmQ6ICc7Oyd9LFxuICAgIGNvYm9sOiB7c3RhcnQ6ICcqJywgZW5kOiAnKid9LCAvLyBhZGRlZCB1bmlxdWVseSBpbiBsYWJzXG4gICAgY29mZmVlc2NyaXB0OiB7c3RhcnQ6ICcjIyMnLCBlbmQ6ICcjIyMnfSxcbiAgICBjcHA6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBjc2hhcnA6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBjc3M6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBkYXJ0OiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgZG9ja2VyZmlsZToge3N0YXJ0OiAnIycsIGVuZDogJyMnfSxcbiAgICBlbGl4aXI6IHtzdGFydDogJ1wiXCJcIicsIGVuZDogJ1wiXCJcIid9LFxuICAgIGVyYjoge3N0YXJ0OiAnPCUgaWYgZmFsc2UgJT4nLCBlbmQ6ICc8JSBlbmQgJT4nfSxcbiAgICBmb3J0cmFuOiB7c3RhcnQ6ICdDJywgZW5kOiAnQyd9LCAvLyBhZGRlZCB1bmlxdWVseSBpbiBsYWJzXG4gICAgZnNoYXJwOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgZ286IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBncm9vdnk6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBoYW1sOiB7c3RhcnQ6ICctIycsIGVuZDogJyMtJ30sXG4gICAgaGFuZGxlYmFyczoge3N0YXJ0OiAne3shJywgZW5kOiAnfX0nfSxcbiAgICBodG1sOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgaW5pOiB7c3RhcnQ6ICc7JywgZW5kOiAnOyd9LFxuICAgIGphdmE6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBqYXZhc2NyaXB0OiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgamF2YXNjcmlwdHJlYWN0OiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAganNvbmM6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBqc3g6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBqdWxpYToge3N0YXJ0OiAnIz0nLCBlbmQ6ICc9Iyd9LFxuICAgIGtvdGxpbjoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LCAvLyBhZGRlZCB1bmlxdWVseSBpbiBsYWJzXG4gICAgbGF0ZXg6IHtzdGFydDogJyUnLCBlbmQ6ICclJ30sXG4gICAgbGVzczoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIGx1YToge3N0YXJ0OiAnLS0nLCBlbmQ6ICctLSd9LFxuICAgIG1ha2VmaWxlOiB7c3RhcnQ6ICcjJywgZW5kOiAnIyd9LFxuICAgIG1hcmtkb3duOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgbWR4OiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgJ29iamVjdGl2ZS1jJzoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgICdvYmplY3RpdmUtY3BwJzoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIHBlcmw6IHtzdGFydDogJyMnLCBlbmQ6ICcjJ30sXG4gICAgcGhwOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgLy8gaW1wb3J0YW50IHRvIGtlZXAgaW4gZm9yIGhpZ2hsaWdodGpzIGFuZCBhcyBmYWxsYmFja1xuICAgIHBsYWludGV4dDoge3N0YXJ0OiAnJywgZW5kOiAnJ30sXG4gICAgcHVnOiB7c3RhcnQ6ICctIycsIGVuZDogJyMtJ30sXG4gICAgcHl0aG9uOiB7c3RhcnQ6ICdcIlwiXCInLCBlbmQ6ICdcIlwiXCInfSxcbiAgICBwb3dlcnNoZWxsOiB7c3RhcnQ6ICc8IycsIGVuZDogJyM+J30sXG4gICAgcjoge3N0YXJ0OiAnIycsIGVuZDogJyMnfSxcbiAgICByYXpvcjoge3N0YXJ0OiAnPCEtLScsIGVuZDogJy0tPid9LFxuICAgIHJ1Ynk6IHtzdGFydDogJyMnLCBlbmQ6ICcjJ30sXG4gICAgcnVzdDoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIHNhc3M6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICBzY3NzOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgc2hhZGVybGFiOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgc2hlbGxzY3JpcHQ6IHtzdGFydDogJyMnLCBlbmQ6ICcjJ30sXG4gICAgc2xpbToge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIHNvbGlkaXR5OiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgc3FsOiB7c3RhcnQ6ICctLScsIGVuZDogJy0tJ30sXG4gICAgc3R5bHVzOiB7c3RhcnQ6ICcvKicsIGVuZDogJyovJ30sXG4gICAgc3ZlbHRlOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgc3dpZnQ6IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICB0ZXJyYWZvcm06IHtzdGFydDogJy8qJywgZW5kOiAnKi8nfSxcbiAgICB0ZXg6IHtzdGFydDogJyUnLCBlbmQ6ICclJ30sXG4gICAgdHlwZXNjcmlwdDoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIHR5cGVzY3JpcHRyZWFjdDoge3N0YXJ0OiAnLyonLCBlbmQ6ICcqLyd9LFxuICAgIHZiOiB7c3RhcnQ6ICcnLCBlbmQ6ICcnfSxcbiAgICAndnVlLWh0bWwnOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgdnVlOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgeG1sOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgeHNsOiB7c3RhcnQ6ICc8IS0tJywgZW5kOiAnLS0+J30sXG4gICAgeWFtbDoge3N0YXJ0OiAnIycsIGVuZDogJyMnfSxcbiAgICB6aWc6IHtzdGFydDogJy8vJywgZW5kOiAnLy8nfSwgLy8gYWRkZWQgdW5pcXVlbHkgaW4gbGFic1xufTtcblxuLyoqXG4gKiBDb21tZW50IGEgc2luZ2xlIGxpbmUgb2YgdGV4dCBpbiBhIGdpdmVuIGxhbmd1YWdlLlxuICogRS5nLiBmb3IgcHl0aG9uLCB0dXJuIFwiaGVsbG8gdGhlcmVcIiBpbnRvIFwiIyBoZWxsbyB0aGVyZVwiXG4gKiBPcmlnaW5hbGx5IGZyb20gdGhlIHByb21wdGxpYiBsaWJyYXJ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCh0ZXh0OiBzdHJpbmcsIGxhbmd1YWdlSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG1hcmtlcnMgPSBsYW5ndWFnZUNvbW1lbnRNYXJrZXJzW2xhbmd1YWdlSWRdO1xuICAgIGlmIChtYXJrZXJzKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IG1hcmtlcnMuZW5kID09ICcnID8gJycgOiAnICcgKyBtYXJrZXJzLmVuZDtcbiAgICAgICAgcmV0dXJuIGAke21hcmtlcnMuc3RhcnR9ICR7dGV4dH0ke2VuZH1gO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQSBtYXBwaW5nIG9mIGFsbCB0aGUgbGFuZ3VhZ2VzIHRoYXQgYXJlIGluIG91ciBzaW5nbGUgb3IgbXVsdGktbGluZSBjb21tZW50cyBsaXN0XG4gKiBhYm92ZSB0aGF0IGRvIE5PVCBoYXZlIGEgbWF0Y2hpbmcgSGlnaGxpZ2h0IEpTIGlkZW50aWZpZXIuXG4gKiBXZSB1c2UgSGlnaGxpZ2h0IEpTIHRvIHJldHVybiBoaWdobGlnaHRlZCBIVE1MIHRvIHdlYnZpZXcgc28gbmVlZCB0byBtYXRjaCBBTExcbiAqIGxhbmd1YWdlcyB3ZSdyZSBzdXBwb3J0aW5nXG4gKiBTdXBwb3J0ZWQgbGFuZ3VhZ2UgYXJlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9oaWdobGlnaHRqcy9oaWdobGlnaHQuanMvYmxvYi9tYWluL1NVUFBPUlRFRF9MQU5HVUFHRVMubWRcbiAqL1xuZXhwb3J0IGNvbnN0IGxhbmd1YWdlVG9IaWdobGlnaHRKU01hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICBhYmFwOiAncGxhaW50ZXh0JyxcbiAgICBiaWJ0ZXg6ICdwbGFpbnRleHQnLFxuICAgIGJsYWRlOiAncGhwJyxcbiAgICBjb2JvbDogJ3BsYWludGV4dCcsXG4gICAgZXJiOiAncnVieScsXG4gICAgJ2dpdC1jb21taXQnOiAncGxhaW50ZXh0JyxcbiAgICAnZ2l0LXJlYmFzZSc6ICdwbGFpbnRleHQnLFxuICAgIGphdmFzY3JpcHRyZWFjdDogJ2pzeCcsXG4gICAganNvbmM6ICdqc29uJyxcbiAgICBsYXRleDogJ3RleCcsXG4gICAgbWR4OiAnbWFya2Rvd24nLFxuICAgICdvYmplY3RpdmUtYyc6ICdvYmplY3RpdmVjJyxcbiAgICAnb2JqZWN0aXZlLWNwcCc6ICdvYmplY3RpdmVjJyxcbiAgICBwZXJsNjogJ3BlcmwnLFxuICAgIGphZGU6ICdwbGFpbnRleHQnLFxuICAgIHB1ZzogJ3BsYWludGV4dCcsXG4gICAgcmF6b3I6ICdwbGFpbnRleHQnLFxuICAgIHNhc3M6ICdzY3NzJyxcbiAgICBzaGFkZXJsYWI6ICdwbGFpbnRleHQnLFxuICAgIHNoZWxsc2NyaXB0OiAnc2hlbGwnLFxuICAgIHNsaW06ICdwbGFpbnRleHQnLFxuICAgIHNvbGlkaXR5OiAncGxhaW50ZXh0JyxcbiAgICBzdmVsdGU6ICdwbGFpbnRleHQnLFxuICAgIHRlcnJhZm9ybTogJ3BsYWludGV4dCcsXG4gICAgdHlwZXNjcmlwdHJlYWN0OiAndHlwZXNjcmlwdCcsXG4gICAgJ3Z1ZS1odG1sJzogJ2h0bWwnLFxuICAgIHZ1ZTogJ2phdmFzY3JpcHQnLFxuICAgIHppZzogJ2MnLFxufTtcblxuLyogVG8gc3VwcG9ydCBtb3JlIGxhbmd1YWdlcyBjb3JyZWN0bHkgd2l0aGluIGV4cGxhaW4gYW5kIHRyYW5zbGF0ZVxuICogd2UgZXh0ZW5kIHRoZSBsYW5ndWFnZSBJRHMgc3VwcG9ydGVkIGRlZmF1bHQgYnkgZnJvbSBWU0NvZGVcbiAqIGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvbGFuZ3VhZ2VzL2lkZW50aWZpZXJzI19rbm93bi1sYW5ndWFnZS1pZGVudGlmaWVyc1xuICovXG5leHBvcnQgY29uc3QgZmlsZUV4dGVuc2lvblRvTGFuZ3VhZ2VNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgYmxhZGU6ICdibGFkZScsXG4gICAgZGFydDogJ2RhcnQnLFxuICAgIGVsaXhpcjogJ2VsaXhpcicsXG4gICAgZXJiOiAnZXJiJyxcbiAgICBmOiAnZm9ydHJhbicsXG4gICAgZm9yOiAnZm9ydHJhbicsXG4gICAgZjkwOiAnZm9ydHJhbicsXG4gICAgZjk1OiAnZm9ydHJhbicsXG4gICAganN4OiAnanN4JyxcbiAgICBqbDogJ2p1bGlhJyxcbiAgICBrdDogJ2tvdGxpbicsXG4gICAga3RzOiAna290bGluJyxcbiAgICBrdG06ICdrb3RsaW4nLFxuICAgIG1keDogJ21keCcsXG4gICAgc29saWRpdHk6ICdzb2xpZGl0eScsXG4gICAgc29sOiAnc29saWRpdHknLFxuICAgIHN2ZWx0ZTogJ3N2ZWx0ZScsXG4gICAgdGVycmFmb3JtOiAndGVycmFmb3JtJyxcbiAgICB0ZjogJ3RlcnJhZm9ybScsXG4gICAgaGNsOiAndGVycmFmb3JtJyxcbiAgICBjYmw6ICdjb2JvbCcsXG4gICAgY29iOiAnY29ib2wnLFxuICAgIGNweTogJ2NvYm9sJyxcbiAgICB6aWc6ICd6aWcnLFxufTtcbiIsImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7VlNDb2RlRHJvcGRvd24sIFZTQ29kZU9wdGlvbiwgVlNDb2RlVGV4dEFyZWEsIFZTQ29kZVRleHRGaWVsZH0gZnJvbSAnQHZzY29kZS93ZWJ2aWV3LXVpLXRvb2xraXQvcmVhY3QnO1xuaW1wb3J0IHt1c2VTdG9yZX0gZnJvbSAnLi8uLi9zdG9yZSc7XG5pbXBvcnQge0NvbGxhcHNlfSBmcm9tICcuL0NvbGxhcHNlJztcbmltcG9ydCB7bXVsdGlMaW5lTGFuZ3VhZ2VDb21tZW50TWFya2Vyc30gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3NyYy93ZWJ2aWV3cy9sYW5ndWFnZXMnO1xuXG5leHBvcnQgY29uc3QgUHJvbXB0RWRpdG9yID0gKCkgPT4ge1xuICAgIGNvbnN0IHtwcm9tcHQsIGxhbmd1YWdlLCBzdG9wLCB1cGRhdGV9ID0gdXNlU3RvcmUoKTtcblxuICAgIGNvbnN0IFtzZWxlY3RlZFByZXNldE5hbWUsIHNldFNlbGVjdGVkUHJlc2V0TmFtZV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgICBjb25zdCBbc3RvcElucHV0VmFsdWUsIHNldFN0b3BJbnB1dFZhbHVlXSA9IHVzZVN0YXRlKHN0b3Auam9pbignLCAnKSk7XG5cbiAgICBjb25zdCBbdGlwLCBzZXRUaXBdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICAvLyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBsYW5ndWFnZSBpbiBvdXIgbGlzdCBkZWZhdWx0IHRvIHBsYWludGV4dFxuICAgIGNvbnN0IGxhbmd1YWdlQ29tbWVudE1hcmtlcnMgPVxuICAgICAgICBtdWx0aUxpbmVMYW5ndWFnZUNvbW1lbnRNYXJrZXJzW2xhbmd1YWdlXSB8fCBtdWx0aUxpbmVMYW5ndWFnZUNvbW1lbnRNYXJrZXJzWydwbGFpbnRleHQnXTtcbiAgICBjb25zdCBsYW5ndWFnZVNwZWNpZmljUHJlc2V0cyA9IHByb21wdFByZXNldHMubWFwKHByZXNldCA9PiAoe1xuICAgICAgICAuLi5wcmVzZXQsXG4gICAgICAgIHRleHQ6IHByZXNldC50ZXh0LnJlcGxhY2UoJ3tjb21tZW50U3RhcnR9JywgbGFuZ3VhZ2VDb21tZW50TWFya2Vycy5zdGFydCB8fCAnJykucmVwbGFjZSgne2xhbmd1YWdlfScsIGxhbmd1YWdlKSxcbiAgICAgICAgc3RvcDogcHJlc2V0LnN0b3AubWFwKHN0b3AgPT4gc3RvcC5yZXBsYWNlKCd7Y29tbWVudEVuZH0nLCBsYW5ndWFnZUNvbW1lbnRNYXJrZXJzLmVuZCB8fCAnJykpLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHNldFByb21wdCA9IChuZXdQcm9tcHQ6IHN0cmluZykgPT4ge1xuICAgICAgICB1cGRhdGUoZHJhZnQgPT4ge1xuICAgICAgICAgICAgZHJhZnQucHJvbXB0ID0gbmV3UHJvbXB0O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlUHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaGluZ1ByZXNldCA9IGxhbmd1YWdlU3BlY2lmaWNQcmVzZXRzLmZpbmQoXG4gICAgICAgICAgICBwcmVzZXQgPT4gcHJlc2V0LnRleHQgPT09IHByb21wdCAmJiBwcmVzZXQuc3RvcC5qb2luKCcsICcpID09PSBzdG9wLmpvaW4oJywgJylcbiAgICAgICAgKTtcbiAgICAgICAgc2V0U2VsZWN0ZWRQcmVzZXROYW1lKG1hdGNoaW5nUHJlc2V0Py5uYW1lIHx8ICcnKTtcbiAgICAgICAgc2V0VGlwKG1hdGNoaW5nUHJlc2V0Py50aXAgfHwgbnVsbCk7XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVByZXNldCgpO1xuICAgIH0sIFtzdG9wLCBwcm9tcHQsIGxhbmd1YWdlXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRTdG9wKHN0b3BJbnB1dFZhbHVlKTtcbiAgICB9LCBbc3RvcElucHV0VmFsdWVdKTtcblxuICAgIGNvbnN0IHNldFN0b3AgPSAobmV3U3RvcDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHVwZGF0ZShkcmFmdCA9PiB7XG4gICAgICAgICAgICBkcmFmdC5zdG9wID0gbmV3U3RvcFxuICAgICAgICAgICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgICAgLm1hcChzID0+IHMudHJpbSgpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVUb1VzZVByZXNldCA9IHByZXNldE5hbWUgPT4ge1xuICAgICAgICBjb25zdCBwcmVzZXQgPSBsYW5ndWFnZVNwZWNpZmljUHJlc2V0cy5maW5kKHAgPT4gcC5uYW1lID09PSBwcmVzZXROYW1lKTtcbiAgICAgICAgaWYgKCFwcmVzZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0b3BTdHJpbmcgPSBwcmVzZXQuc3RvcC5qb2luKCcsICcpO1xuICAgICAgICAgICAgc2V0U3RvcChzdG9wU3RyaW5nKTtcbiAgICAgICAgICAgIHNldFN0b3BJbnB1dFZhbHVlKHN0b3BTdHJpbmcpO1xuICAgICAgICAgICAgc2V0UHJvbXB0KHByZXNldC50ZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzZXQgdmVyeSBmaXJzdCBwcmVzZXRcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB1cGRhdGVUb1VzZVByZXNldCgnRXhwbGFpbiBjb2RlJyk7XG4gICAgfSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHNlbGVjdGVkUHJlc2V0TmFtZSkge1xuICAgICAgICAgICAgdXBkYXRlVG9Vc2VQcmVzZXQoc2VsZWN0ZWRQcmVzZXROYW1lKTtcbiAgICAgICAgfVxuICAgIH0sIFtsYW5ndWFnZV0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTQgdGV4dC14c1wiPlxuICAgICAgICAgICAgPFZTQ29kZURyb3Bkb3duXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRQcmVzZXROYW1lIHx8ICcnfVxuICAgICAgICAgICAgICAgIG9uSW5wdXQ9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgbW9kZWwgcmVzcG9uc2Ugd2hlbiBhIG5ldyBwcmVzZXQgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxSZXNwb25zZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGV2ZW50IGlzbid0IHR5cGVkIGNvcnJlY3RseSBkdWUgdG8gYW4gdXBzdHJlYW0gaXNzdWUgaW4gdGhlIHdlYnZpZXctdWktdG9vbGtpdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFByZXNldCA9IGxhbmd1YWdlU3BlY2lmaWNQcmVzZXRzLmZpbmQocHJlc2V0ID0+IHByZXNldC5uYW1lID09PSBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFByb21wdChzZWxlY3RlZFByZXNldD8udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFN0b3Aoc2VsZWN0ZWRQcmVzZXQ/LnN0b3A/LmpvaW4oJywgJykpO1xuICAgICAgICAgICAgICAgICAgICBzZXRTdG9wSW5wdXRWYWx1ZShzZWxlY3RlZFByZXNldD8uc3RvcD8uam9pbignLCAnKSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VlNDb2RlT3B0aW9uIHZhbHVlPVwiXCI+Q3VzdG9tPC9WU0NvZGVPcHRpb24+XG4gICAgICAgICAgICAgICAge2xhbmd1YWdlU3BlY2lmaWNQcmVzZXRzLm1hcChwcmVzZXQgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8VlNDb2RlT3B0aW9uIGtleT17cHJlc2V0Lm5hbWV9IHZhbHVlPXtwcmVzZXQubmFtZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJlc2V0Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIDwvVlNDb2RlT3B0aW9uPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9WU0NvZGVEcm9wZG93bj5cblxuICAgICAgICAgICAgPENvbGxhcHNlPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxWU0NvZGVUZXh0QXJlYVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M9ezR9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvbXB0fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25JbnB1dD17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJvbXB0KGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21wdFxuICAgICAgICAgICAgICAgICAgICA8L1ZTQ29kZVRleHRBcmVhPlxuXG4gICAgICAgICAgICAgICAgICAgIDxWU0NvZGVUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdG9wSW5wdXRWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdG9wSW5wdXRWYWx1ZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgU3RvcHM6XG4gICAgICAgICAgICAgICAgICAgIDwvVlNDb2RlVGV4dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICB7dGlwID8gPHA+VGlwOiB7dGlwfTwvcD4gOiBudWxsfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9Db2xsYXBzZT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmludGVyZmFjZSBwcm9tcHRQcmVzZXQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgc3RvcDogc3RyaW5nW107XG4gICAgdGlwPzogc3RyaW5nO1xufVxuXG5jb25zdCBwcm9tcHRQcmVzZXRzOiBwcm9tcHRQcmVzZXRbXSA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICdFeHBsYWluIGNvZGUnLFxuICAgICAgICB0ZXh0OiAne2NvbW1lbnRTdGFydH0gSGVyZSBpcyB0aGUgZXhwbGFuYXRpb24gZm9yIHRoZSBjb2RlIGFib3ZlOlxcbjEuJyxcbiAgICAgICAgc3RvcDogWyd7Y29tbWVudEVuZH0nXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0NvZGUgZG9lcyBmb2xsb3dpbmcnLFxuICAgICAgICB0ZXh0OiAne2NvbW1lbnRTdGFydH0gVGhlIGNvZGUgYWJvdmUgZG9lcyB0aGUgZm9sbG93aW5nOlxcbjEuJyxcbiAgICAgICAgc3RvcDogWyd7Y29tbWVudEVuZH0nXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0NvZGUgZG9lcyBmb2xsb3dpbmcgKEVuZ2xpc2gpJyxcbiAgICAgICAgdGV4dDogJ3tjb21tZW50U3RhcnR9IFRoZSBjb2RlIGFib3ZlIGRvZXMgdGhlIGZvbGxvd2luZywgZXhwbGFpbmVkIGluIEVuZ2xpc2g6XFxuMS4nLFxuICAgICAgICBzdG9wOiBbJ3tjb21tZW50RW5kfSddLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnU2hvdyBleGFtcGxlIGNvZGUnLFxuICAgICAgICB0ZXh0OiAne2NvbW1lbnRTdGFydH0gVGhpcyBpcyBhbiBleGFtcGxlIGZvciBjYWxsaW5nIHRoaXMgZnVuY3Rpb246JyxcbiAgICAgICAgc3RvcDogWyd7Y29tbWVudEVuZH0nXSxcbiAgICB9LFxuXTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBMb2dvID0gKCkgPT4gKFxuICAgIDxzdmcgaGVpZ2h0PVwiMS4zZW1cIiB2aWV3Qm94PVwiMCAwIDYzIDU5XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgZD1cIk00Ny4wMDE1IDMwLjI3MDVDNDYuOTM1NSAyOS4wMDg5IDQ1LjkxMSAyOC41MTM3IDQ0Ljg0NTEgMjguMTYzNUM0My43MjEzIDI4Ljg2ODYgNDIuMzQ5IDI5LjE0NiA0MS4wMzU5IDI5LjE0NkMzOS42Mzk1IDI5LjE0NiAzNy4wMzUxIDI4LjgxMjMgMzQuODY5NCAyNi42NDk3QzM0LjMyMjYgMjYuMTA2IDMzLjk0ODggMjUuMjUzMyAzMy42OTU1IDI0LjMwOEMzMy4wMzg1IDI0LjI0MTEgMzIuMzc4NiAyNC4yMDYxIDMxLjcxODMgMjQuMjAyOUMzMS4xMzEzIDI0LjIwMjkgMzAuNDU0NyAyNC4yMzY5IDI5LjczNDkgMjQuMzA4QzI5LjQ4MTUgMjUuMjUzMyAyOS4xMDc3IDI2LjEwNiAyOC41NjA5IDI2LjY0OTdDMjYuMzk4MyAyOC44MTIzIDIzLjc5MDkgMjkuMTQ2IDIyLjM5NDUgMjkuMTQ2QzIxLjA4MTEgMjkuMTQ2IDE5LjcwNTMgMjguODcxNyAxOC41ODIxIDI4LjE2MzVDMTcuNTE5NyAyOC41MTI2IDE2LjQ5OTUgMjkuMDE2MSAxNi40MzE5IDMwLjI3MDVDMTYuMjYyIDMzLjgzMTggMTYuMzI1MSAzNy4zODggMTYuMjcxMyA0MC45NTA1QzE2LjI3NjEgNDEuNjQxNiAxNi42OTI2IDQyLjI4MzUgMTcuMzIxNyA0Mi41Njk0QzIyLjQzNDYgNDQuODk4OCAyNy4yNjk1IDQ2LjA3MjggMzEuNzE4MyA0Ni4wNzI4QzM2LjE2MDggNDYuMDcyOCA0MC45OTU3IDQ0Ljg5ODggNDYuMTA1NiA0Mi41Njk0QzQ2LjczNDcgNDIuMjgzNSA0Ny4xNTEyIDQxLjY0MTYgNDcuMTU2IDQwLjk1MDVDNDcuMjE3MyAzNy4zOTQyIDQ3LjE2NzkgMzMuODIzNCA0Ni45OTg0IDMwLjI3MDVINDcuMDAxNVpNMTcuMzgwNCAyNS4zMTJDMTguMjE0NSAyNi4xNDYyIDE5Ljc5MDEgMjYuNzAyMiAyMS40ODkzIDI2LjcwMjJDMjIuNzg2OCAyNi43MDIyIDI1LjI1ODMgMjYuNDI0MiAyNy4yOTczIDI0LjM1NDNDMjguMTkzMyAyMy40ODkzIDI4Ljc0OTQgMjEuMzI2NyAyOC42ODc2IDE5LjEzMzJDMjguNjI1OCAxNy4zNzIzIDI4LjEzMTUgMTUuOTIwMiAyNy4zOSAxNS4zMDI0QzI2LjU4NjggMTQuNTkxOCAyNC43NjQgMTQuMjgyOSAyMi43MjUgMTQuNDY4MkMyMC41NjI1IDE0LjY4NDUgMTguNzM5NyAxNS4zOTUxIDE3LjgxMjkgMTYuMzgzN0MxNS44MDQ4IDE4LjU3NzEgMTYuMjM3MyAyNC4xMzggMTcuMzgwNCAyNS4zMTJaTTI5Ljk4NTEgMTkuOTA1NkMzMC4wNDY5IDIwLjI0NTQgMzAuMDc3OCAyMC42MTYxIDMwLjEwODcgMjEuMDE3OEMzMC4xMDg3IDIxLjI5NTggMzAuMTA4NyAyMS41NzM4IDMwLjA3NzggMjEuODgyOEMzMC42OTU3IDIxLjgyMSAzMS4yMjA5IDIxLjgyMSAzMS43MTUyIDIxLjgyMUMzMi4yMDk1IDIxLjgyMSAzMi43MzQ3IDIxLjgyMSAzMy4zNTI2IDIxLjg4MjhDMzMuMzIxNyAyMS41NzM4IDMzLjMyMTcgMjEuMjk1OCAzMy4zMjE3IDIxLjAxNzhDMzMuMzUyNiAyMC42MTYxIDMzLjM4MzQgMjAuMjQ1NCAzMy40NDUyIDE5LjkwNTZDMzIuNzk2NSAxOS44NDM4IDMyLjIwOTUgMTkuODEyOSAzMS43MTUyIDE5LjgxMjlDMzEuMjIwOSAxOS44MTI5IDMwLjYzMzkgMTkuODQzOCAyOS45ODUxIDE5LjkwNTZaTTM0Ljc0MjggMTkuMTMzMkMzNC42ODEgMjEuMzI2NyAzNS4yMzcxIDIzLjQ4OTMgMzYuMTMzIDI0LjM1NDNDMzguMTcyIDI2LjQyNDIgNDAuNjQzNSAyNi43MDIyIDQxLjk0MTEgMjYuNzAyMkM0My42NDAyIDI2LjcwMjIgNDUuMjE1OCAyNi4xNDYyIDQ2LjA1IDI1LjMxMkM0Ny4xOTMxIDI0LjEzOCA0Ny42MjU2IDE4LjU3NzEgNDUuNjE3NSAxNi4zODM3QzQ0LjY5MDYgMTUuMzk1MSA0Mi44Njc5IDE0LjY4NDUgNDAuNzA1MyAxNC40NjgyQzM4LjY2NjMgMTQuMjgyOSAzNi44NDM2IDE0LjU5MTggMzYuMDQwMyAxNS4zMDI0QzM1LjI5ODkgMTUuOTIwMiAzNC44MDQ2IDE3LjM3MjMgMzQuNzQyOCAxOS4xMzMyWk01Ni40MzAzIDMyLjc4ODRWMzguMzI3NkM1Ni40MjkgMzkuMDQyOSA1Ni4wNzQ0IDM5Ljc0MDIgNTUuNDk3MyA0MC4xNjI3QzQ4LjY4NDcgNDUuMTUwMiA0MC4yNzg1IDQ5LjE2MjIgMzEuNzE1MiA0OS4xNjIyQzIyLjI0MTIgNDkuMTYyMiAxMi43NTU5IDQzLjcwMjkgNy45MzMgNDAuMTYyN0M3LjM1NTkyIDM5Ljc0MDIgNy4wMDE0IDM5LjA0MjkgNyAzOC4zMjc2VjMyLjc4ODRDNyAzMi4wNTkzIDcuMjMxNyAzMS4zNTQ5IDcuNjYxMTMgMzAuNzY3OUw5LjE2NTY3IDI4LjczMkM5Ljk3MTQ1IDI3LjYzOTYgMTEuMTY5OCAyNy4zNTEgMTIuNDQ2NiAyNy4zNTFDMTIuOTI4NiAyMS44NTE5IDE0LjA2ODUgMTcuOTI4NCAxNi43OTM0IDE1LjA1NTJDMjEuOTgzNiA5LjU1NjA5IDI4Ljg3MjkgOSAzMS43MTUyIDlDMzQuNTU3NCA5IDQxLjQ0NjggOS41NTYwOSA0Ni42MzcgMTUuMDU1MkM0OS4zNTg3IDE3LjkyODQgNTAuNTAxOCAyMS44NTE5IDUwLjk4MzcgMjcuMzUxQzUyLjI2MzEgMjcuMzUxIDUzLjQ1NjIgMjcuNjM0NyA1NC4yNjE2IDI4LjczMkw1NS43NjYxIDMwLjc3MUM1Ni4xOTg2IDMxLjM1OCA1Ni40MzAzIDMyLjA1OTMgNTYuNDMwMyAzMi43ODg0WlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjQuNTA2NiAzNC42OTUxQzI0LjUwNjYgMzMuNTg1MSAyNS40MDY0IDMyLjY4NTQgMjYuNTE2MyAzMi42ODU0QzI3LjYyNjIgMzIuNjg1NCAyOC41MjYgMzMuNTg1MSAyOC41MjYgMzQuNjk1MVYzOC4zOTkyQzI4LjUyNiAzOS41MDkxIDI3LjYyNjIgNDAuNDA4OSAyNi41MTYzIDQwLjQwODlDMjUuNDA2NCA0MC40MDg5IDI0LjUwNjYgMzkuNTA5MSAyNC41MDY2IDM4LjM5OTJWMzQuNjk1MVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTM0LjgwNDYgMzQuNjk1MUMzNC44MDQ2IDMzLjU4NTEgMzUuNzA0MyAzMi42ODU0IDM2LjgxNDMgMzIuNjg1NEMzNy45MjQyIDMyLjY4NTQgMzguODI0IDMzLjU4NTEgMzguODI0IDM0LjY5NTFWMzguMzk5MkMzOC44MjQgMzkuNTA5MSAzNy45MjQyIDQwLjQwODkgMzYuODE0MyA0MC40MDg5QzM1LjcwNDMgNDAuNDA4OSAzNC44MDQ2IDM5LjUwOTEgMzQuODA0NiAzOC4zOTkyVjM0LjY5NTFaXCIgLz5cbiAgICA8L3N2Zz5cbik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMb2dvfSBmcm9tICcuLi9jb21wb25lbnRzL0xvZ28nO1xuaW1wb3J0IHtWU0NvZGVCdXR0b259IGZyb20gJ0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFza0NvcGlsb3RCdXR0b24ocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3Qge29uQ2xpY2ssIGRpc2FibGVkfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxWU0NvZGVCdXR0b24gY2xhc3NOYW1lPVwidy1mdWxsXCIgb25DbGljaz17b25DbGlja30gZGlzYWJsZWQ9e2Rpc2FibGVkfT5cbiAgICAgICAgICAgIDxzcGFuIHNsb3Q9XCJzdGFydFwiPlxuICAgICAgICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICBBc2sgQ29waWxvdFxuICAgICAgICA8L1ZTQ29kZUJ1dHRvbj5cbiAgICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZVN0b3JlfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7VlNDb2RlQVBJfSBmcm9tICcuL1ZTQ29kZUFQSSc7XG5pbXBvcnQge0NvZGVTeW50YXh9IGZyb20gJy4vY29tcG9uZW50cy9Db2RlU3ludGF4JztcbmltcG9ydCB7UmVzcG9uc2VUZXh0fSBmcm9tICcuL2NvbXBvbmVudHMvUmVzcG9uc2VUZXh0JztcbmltcG9ydCB7RmVlZGJhY2t9IGZyb20gJy4vY29tcG9uZW50cy9GZWVkYmFjayc7XG5pbXBvcnQge1Byb21wdEVkaXRvcn0gZnJvbSAnLi9jb21wb25lbnRzL1Byb21wdEVkaXRvcic7XG5pbXBvcnQge0V4cGxhaW5NZXNzYWdlfSBmcm9tICcuLi8uLi8uLi9saWIvc3JjL3dlYnZpZXdzL21lc3NhZ2UnO1xuaW1wb3J0IHtBc2tDb3BpbG90QnV0dG9ufSBmcm9tICcuL2NvbXBvbmVudHMvYXNrLWNvcGlsb3QtYnV0dG9uJztcbmltcG9ydCB7VlNDb2RlUHJvZ3Jlc3NSaW5nfSBmcm9tICdAdnNjb2RlL3dlYnZpZXctdWktdG9vbGtpdC9yZWFjdCc7XG5cbmNvbnN0IFBhbmVsRXhwbGFpbiA9ICgpID0+IHtcbiAgICBjb25zdCB7c2VsZWN0ZWRUZXh0LCBoaWdobGlnaHRUZXh0LCBwcm9tcHQsIGxhbmd1YWdlLCBzdG9wLCBtb2RlbFJlc3BvbnNlLCBlcnJvciwgaXNBbmFseXppbmd9ID0gdXNlU3RvcmUoKTtcbiAgICBjb25zdCBbcmVzcG9uc2VJdGVyYXRpb24sIHNldFJlc3BvbnNlSXRlcmF0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gICAgY29uc3Qgb25IYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNBbmFseXppbmc6IHRydWUsXG4gICAgICAgICAgICBtb2RlbFJlc3BvbnNlOiBudWxsLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICBhbmFseXplQ29kZSgpO1xuICAgICAgICBzZXRSZXNwb25zZUl0ZXJhdGlvbihpdGVyYXRpb24gPT4gaXRlcmF0aW9uICsgMSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFuYWx5emVDb2RlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBFeHBsYWluTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdleHBsYWluJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICBwcm9tcHQ6IGAvLyBMYW5ndWFnZTogJHtsYW5ndWFnZX1cXG4ke3NlbGVjdGVkVGV4dH1cXG5cXG4ke3Byb21wdH1gLFxuICAgICAgICAgICAgICAgIHN0b3A6IHN0b3AsXG4gICAgICAgICAgICAgICAgY29kZTogc2VsZWN0ZWRUZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgVlNDb2RlQVBJLnBvc3RXZWJWaWV3TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgLy8gd2hlbiBzZWxlY3RlZCB0ZXh0IGNoYW5nZXMsIGNsZWFyIHRoZSBhbnN3ZXJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB1c2VTdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBtb2RlbFJlc3BvbnNlOiBudWxsLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH0pO1xuICAgIH0sIFtzZWxlY3RlZFRleHRdKTtcblxuICAgIGNvbnN0IHJlbmRlclJlc3VsdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZnVsbFByb21wdCA9IGAke3Byb21wdH0gJHttb2RlbFJlc3BvbnNlfSAke3N0b3BbMF0gfHwgJyd9YDtcbiAgICAgICAgcmV0dXJuIDxSZXNwb25zZVRleHQgdGV4dD17ZnVsbFByb21wdH0gLz47XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgdGV4dC1zbSBvdXRsaW5lLW5vbmUgcHQtMiBwYi0xNiBzcGFjZS15LTRcIiB0YWJJbmRleD17MH0+XG4gICAgICAgICAgICB7c2VsZWN0ZWRUZXh0ID8gKFxuICAgICAgICAgICAgICAgIDxDb2RlU3ludGF4IGh0bWxUZXh0PXtoaWdobGlnaHRUZXh0fSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJpdGFsaWNcIj5IaWdobGlnaHQgYSBibG9jayBvZiBjb2RlIHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gZXhwbG9yZS48L3A+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3NlbGVjdGVkVGV4dCA/IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICA8UHJvbXB0RWRpdG9yIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc2tDb3BpbG90QnV0dG9uIGRpc2FibGVkPXtpc0FuYWx5emluZ30gb25DbGljaz17b25IYW5kbGVDbGlja30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtpc0FuYWx5emluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgbXktOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VlNDb2RlUHJvZ3Jlc3NSaW5nIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApIDogbnVsbH1cblxuICAgICAgICAgICAge21vZGVsUmVzcG9uc2UgIT09IG51bGwgPyAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAge3JlbmRlclJlc3VsdCgpfVxuICAgICAgICAgICAgICAgICAgICA8RmVlZGJhY2sgcmVzcG9uc2VJdGVyYXRpb249e3Jlc3BvbnNlSXRlcmF0aW9ufSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICB7ZXJyb3IgJiYgPFJlc3BvbnNlVGV4dCB0ZXh0PXtlcnJvcn0gaXNFcnJvciAvPn1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmVsRXhwbGFpbjtcbiIsImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VTdG9yZX0gZnJvbSAnLi9zdG9yZSc7XG5pbXBvcnQge1ZTQ29kZUFQSX0gZnJvbSAnLi9WU0NvZGVBUEknO1xuaW1wb3J0IHtDb2RlU3ludGF4fSBmcm9tICcuL2NvbXBvbmVudHMvQ29kZVN5bnRheCc7XG5pbXBvcnQge1Jlc3BvbnNlVGV4dH0gZnJvbSAnLi9jb21wb25lbnRzL1Jlc3BvbnNlVGV4dCc7XG5pbXBvcnQge0ZlZWRiYWNrfSBmcm9tICcuL2NvbXBvbmVudHMvRmVlZGJhY2snO1xuaW1wb3J0IHtUcmFuc2xhdGVNZXNzYWdlfSBmcm9tICcuLi8uLi8uLi9saWIvc3JjL3dlYnZpZXdzL21lc3NhZ2UnO1xuaW1wb3J0IHtsYW5ndWFnZUNvbW1lbnRNYXJrZXJzfSBmcm9tICcuLi8uLi8uLi9saWIvc3JjL3dlYnZpZXdzL2xhbmd1YWdlcyc7XG5pbXBvcnQge0Fza0NvcGlsb3RCdXR0b259IGZyb20gJy4vY29tcG9uZW50cy9hc2stY29waWxvdC1idXR0b24nO1xuaW1wb3J0IHtWU0NvZGVEcm9wZG93biwgVlNDb2RlT3B0aW9uLCBWU0NvZGVQcm9ncmVzc1Jpbmd9IGZyb20gJ0B2c2NvZGUvd2Vidmlldy11aS10b29sa2l0L3JlYWN0JztcblxuLy8gdXRpbGl0eSBmdW5jdGlvbiB0byByZW1vdmUgbGFuZ3VhZ2VzIHdlIGRlZW0gZG9uJ3QgbWFrZSBzZW5zZSB0byB0cmFuc2xhdGUgdG9cbmNvbnN0IGdldExhbmd1YWdlcyA9ICgpID0+IHtcbiAgICBjb25zdCBsYW5ndWFnZXMgPSB7Li4ubGFuZ3VhZ2VDb21tZW50TWFya2Vyc307XG4gICAgLy8gdGhlIGZvbGxvd2luZyBsYW5ndWFnZXMgZG9uJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gdHJhbnNsYXRlIHRvXG4gICAgZGVsZXRlIGxhbmd1YWdlc1sncGxhaW50ZXh0J107XG5cbiAgICByZXR1cm4gbGFuZ3VhZ2VzO1xufTtcblxuY29uc3QgbGFuZ3VhZ2VzID0gZ2V0TGFuZ3VhZ2VzKCk7XG5cbmNvbnN0IFBhbmVsVHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtzZWxlY3RlZFRleHQsIGhpZ2hsaWdodFRleHQsIGxhbmd1YWdlLCBtb2RlbFJlc3BvbnNlLCBlcnJvciwgaXNBbmFseXppbmd9ID0gdXNlU3RvcmUoKTtcbiAgICBjb25zdCBbcmVzcG9uc2VJdGVyYXRpb24sIHNldFJlc3BvbnNlSXRlcmF0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gICAgLy8gZGVmYXVsdCB2YWx1ZSBpbiB0aGUgZHJvcGRvd24gd2hlbiBjb21wb25lbnQgZmlyc3QgaW5zdGFudGlhdGVkXG4gICAgY29uc3QgW291dHB1dExhbmd1YWdlLCBzZXRPdXRwdXRMYW5ndWFnZV0gPSBSZWFjdC51c2VTdGF0ZSgncHl0aG9uJyk7XG5cbiAgICBjb25zdCBoYW5kbGVPbkNoYW5nZSA9IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldE91dHB1dExhbmd1YWdlKG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25IYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNBbmFseXppbmc6IHRydWUsXG4gICAgICAgICAgICBtb2RlbFJlc3BvbnNlOiBudWxsLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICBhbmFseXplQ29kZSgpO1xuICAgICAgICBzZXRSZXNwb25zZUl0ZXJhdGlvbihpdGVyYXRpb24gPT4gaXRlcmF0aW9uICsgMSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFuYWx5emVDb2RlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBUcmFuc2xhdGVNZXNzYWdlID0ge1xuICAgICAgICAgICAgY29tbWFuZDogJ3RyYW5zbGF0ZScsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgY29kZTogc2VsZWN0ZWRUZXh0LFxuICAgICAgICAgICAgICAgIGlucHV0TGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIG91dHB1dExhbmd1YWdlOiBvdXRwdXRMYW5ndWFnZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIFZTQ29kZUFQSS5wb3N0V2ViVmlld01lc3NhZ2UobWVzc2FnZSk7XG4gICAgfTtcblxuICAgIC8vIHdoZW4gc2VsZWN0ZWQgdGV4dCBjaGFuZ2VzLCBjbGVhciB0aGUgYW5zd2VyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbW9kZWxSZXNwb25zZTogbnVsbCxcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9KTtcbiAgICB9LCBbc2VsZWN0ZWRUZXh0XSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHRleHQtc20gb3V0bGluZS1ub25lIHB0LTIgcGItMTYgc3BhY2UteS00XCIgdGFiSW5kZXg9ezB9PlxuICAgICAgICAgICAge3NlbGVjdGVkVGV4dCA/IChcbiAgICAgICAgICAgICAgICA8Q29kZVN5bnRheCBodG1sVGV4dD17aGlnaGxpZ2h0VGV4dH0gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaXRhbGljXCI+SGlnaGxpZ2h0IGEgYmxvY2sgb2YgY29kZSB0aGF0IHlvdSB3b3VsZCBsaWtlIHRyYW5zbGF0ZSBpbnRvIGFub3RoZXIgbGFuZ3VhZ2UuPC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtzZWxlY3RlZFRleHQgPyAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgbWItMVwiPlRyYW5zbGF0ZSBjb2RlIGludG88L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VlNDb2RlRHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbklucHV0PXtlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVPbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtvdXRwdXRMYW5ndWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMobGFuZ3VhZ2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09IGxhbmd1YWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGxhbmcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VlNDb2RlT3B0aW9uIGtleT17bGFuZ30gdmFsdWU9e2xhbmd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFuZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZTQ29kZU9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9WU0NvZGVEcm9wZG93bj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc2tDb3BpbG90QnV0dG9uIGRpc2FibGVkPXtpc0FuYWx5emluZ30gb25DbGljaz17b25IYW5kbGVDbGlja30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtpc0FuYWx5emluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgbXktOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VlNDb2RlUHJvZ3Jlc3NSaW5nIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgIHttb2RlbFJlc3BvbnNlICE9PSBudWxsID8gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgICAgICAgIDxDb2RlU3ludGF4IGh0bWxUZXh0PXttb2RlbFJlc3BvbnNlfSAvPlxuICAgICAgICAgICAgICAgICAgICA8RmVlZGJhY2sgcmVzcG9uc2VJdGVyYXRpb249e3Jlc3BvbnNlSXRlcmF0aW9ufSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICB7ZXJyb3IgJiYgPFJlc3BvbnNlVGV4dCB0ZXh0PXtlcnJvcn0gaXNFcnJvciAvPn1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmVsVHJhbnNsYXRlO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFBhbmVsRXhwbGFpbiBmcm9tICcuL1BhbmVsRXhwbGFpbic7XG5pbXBvcnQgUGFuZWxUcmFuc2xhdGUgZnJvbSAnLi9QYW5lbFRyYW5zbGF0ZSc7XG5pbXBvcnQge3VzZVN0b3JlfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7RXh0ZW5zaW9uTWVzc2FnZSwgV2Vidmlld1R5cGV9IGZyb20gJy4uLy4uLy4uL2xpYi9zcmMvd2Vidmlld3MvbWVzc2FnZSc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuXG4vLyB0eXBlIG9mIHdlYnZpZXcgcGFzc2VkIGZyb20gdGhlIGV4dGVuc2lvblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgfVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGUgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2U6IEV4dGVuc2lvbk1lc3NhZ2UgPSBlLmRhdGE7XG4gICAgaWYgKG1lc3NhZ2UuY29tbWFuZCA9PT0gJ3NldExvYWRpbmdTdGF0ZScpIHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe2lzTG9hZGluZzogbWVzc2FnZS5pc0xvYWRpbmd9KTtcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuY29tbWFuZCA9PT0gJ3NldFN0YXJ0aW5nTGluZScpIHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe3N0YXJ0aW5nTGluZTogbWVzc2FnZS5zdGFydGluZ0xpbmV9KTtcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuY29tbWFuZCA9PT0gJ3NldFNlbGVjdGVkVGV4dCcpIHtcbiAgICAgICAgdXNlU3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdGVkVGV4dDogbWVzc2FnZS5zZWxlY3RlZFRleHQsXG4gICAgICAgICAgICBoaWdobGlnaHRUZXh0OiBtZXNzYWdlLmhpZ2hsaWdodFRleHQsXG4gICAgICAgICAgICBsYW5ndWFnZTogbWVzc2FnZS5sYW5ndWFnZSxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlLmNvbW1hbmQgPT09ICdzZXRNb2RlbFJlc3BvbnNlJykge1xuICAgICAgICB1c2VTdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0FuYWx5emluZzogZmFsc2UsXG4gICAgICAgICAgICBtb2RlbFJlc3BvbnNlOiBtZXNzYWdlLnJlc3BvbnNlLnRyaW0oKSwgLy8gdHJpbSB3aGl0ZXNwYWNlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5jb21tYW5kID09PSAnc2V0RXJyb3InKSB7XG4gICAgICAgIHVzZVN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzQW5hbHl6aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBtZXNzYWdlLmVycm9yLFxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuY29uc3QgcGFuZWxzOiB7W2tleSBpbiBXZWJ2aWV3VHlwZV06IEpTWC5FbGVtZW50fSA9IHtcbiAgICBleHBsYWluOiA8UGFuZWxFeHBsYWluIC8+LFxuICAgIHRyYW5zbGF0ZTogPFBhbmVsVHJhbnNsYXRlIC8+LFxufTtcblxuUmVhY3RET00ucmVuZGVyKDxSZWFjdC5TdHJpY3RNb2RlPntwYW5lbHNbd2luZG93LnR5cGVdfTwvUmVhY3QuU3RyaWN0TW9kZT4sIHJvb3QpO1xuIl0sIm5hbWVzIjpbInByb2R1Y2UiLCJjcmVhdGUiLCJpbW1lciIsImNvbmZpZyIsInNldCIsImdldCIsImFwaSIsImZuIiwidXNlU3RvcmUiLCJpc0xvYWRpbmciLCJzdGFydGluZ0xpbmUiLCJzZWxlY3RlZFRleHQiLCJoaWdobGlnaHRUZXh0IiwibGFuZ3VhZ2UiLCJwcm9tcHQiLCJzdG9wIiwiaXNBbmFseXppbmciLCJtb2RlbFJlc3BvbnNlIiwiZXJyb3IiLCJ1cGRhdGUiLCJWU0NvZGVXcmFwcGVyIiwiYWNxdWlyZVZzQ29kZUFwaSIsIm1lc3NhZ2UiLCJ2c2NvZGVBcGkiLCJwb3N0TWVzc2FnZSIsImNhbGxiYWNrIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJWU0NvZGVBUEkiLCJSZWFjdCIsIkNvZGVTeW50YXgiLCJwcm9wcyIsImNsYXNzTmFtZSIsInN0eWxlIiwibWF4SGVpZ2h0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJodG1sVGV4dCIsIlJlc3BvbnNlVGV4dCIsInRleHQiLCJpc0Vycm9yIiwidXNlRWZmZWN0IiwiVnNjV2FybmluZyIsIlZzY1RodW1ic2Rvd24iLCJWc2NUaHVtYnN1cCIsIlZTQ29kZUJ1dHRvbiIsIm9wdGlvbnMiLCJpY29uIiwibGFiZWwiLCJzbHVnIiwiRmVlZGJhY2siLCJyZXNwb25zZUl0ZXJhdGlvbiIsInVzZVN0YXRlIiwiaGFzUmVzcG9uZGVkIiwic2V0SGFzUmVzcG9uZGVkIiwib25SZXNwb25kIiwib3B0aW9uIiwiY29tbWFuZCIsInBheWxvYWQiLCJjb2RlIiwicG9zdFdlYlZpZXdNZXNzYWdlIiwibWFwIiwia2V5IiwiYXBwZWFyYW5jZSIsIm9uQ2xpY2siLCJzbG90IiwiQ29sbGFwc2UiLCJjb2xsYXBzZWQiLCJjaGlsZHJlbiIsImlzQ29sbGFwc2VkIiwic2V0SXNDb2xsYXBzZWQiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJmaWxsIiwieG1sbnMiLCJkIiwibGFuZ3VhZ2VDb21tZW50TWFya2VycyIsImFiYXAiLCJzdGFydCIsImVuZCIsImJhdCIsImJpYnRleCIsImJsYWRlIiwiYyIsImNsb2p1cmUiLCJjb2JvbCIsImNvZmZlZXNjcmlwdCIsImNwcCIsImNzaGFycCIsImNzcyIsImRhcnQiLCJkb2NrZXJmaWxlIiwiZWxpeGlyIiwiZXJiIiwiZm9ydHJhbiIsImZzaGFycCIsImdvIiwiZ3Jvb3Z5IiwiaGFtbCIsImhhbmRsZWJhcnMiLCJodG1sIiwiaW5pIiwiamF2YSIsImphdmFzY3JpcHQiLCJqYXZhc2NyaXB0cmVhY3QiLCJqc29uYyIsImpzeCIsImp1bGlhIiwia290bGluIiwibGF0ZXgiLCJsZXNzIiwibHVhIiwibWFrZWZpbGUiLCJtYXJrZG93biIsIm1keCIsInBlcmwiLCJwaHAiLCJwbGFpbnRleHQiLCJwdWciLCJweXRob24iLCJwb3dlcnNoZWxsIiwiciIsInJhem9yIiwicnVieSIsInJ1c3QiLCJzYXNzIiwic2NzcyIsInNoYWRlcmxhYiIsInNoZWxsc2NyaXB0Iiwic2xpbSIsInNvbGlkaXR5Iiwic3FsIiwic3R5bHVzIiwic3ZlbHRlIiwic3dpZnQiLCJ0ZXJyYWZvcm0iLCJ0ZXgiLCJ0eXBlc2NyaXB0IiwidHlwZXNjcmlwdHJlYWN0IiwidmIiLCJ2dWUiLCJ4bWwiLCJ4c2wiLCJ5YW1sIiwiemlnIiwibXVsdGlMaW5lTGFuZ3VhZ2VDb21tZW50TWFya2VycyIsImNvbW1lbnQiLCJsYW5ndWFnZUlkIiwibWFya2VycyIsImxhbmd1YWdlVG9IaWdobGlnaHRKU01hcCIsInBlcmw2IiwiamFkZSIsImZpbGVFeHRlbnNpb25Ub0xhbmd1YWdlTWFwIiwiZiIsImZvciIsImY5MCIsImY5NSIsImpsIiwia3QiLCJrdHMiLCJrdG0iLCJzb2wiLCJ0ZiIsImhjbCIsImNibCIsImNvYiIsImNweSIsIlZTQ29kZURyb3Bkb3duIiwiVlNDb2RlT3B0aW9uIiwiVlNDb2RlVGV4dEFyZWEiLCJWU0NvZGVUZXh0RmllbGQiLCJQcm9tcHRFZGl0b3IiLCJzZWxlY3RlZFByZXNldE5hbWUiLCJzZXRTZWxlY3RlZFByZXNldE5hbWUiLCJqb2luIiwic3RvcElucHV0VmFsdWUiLCJzZXRTdG9wSW5wdXRWYWx1ZSIsInRpcCIsInNldFRpcCIsImxhbmd1YWdlU3BlY2lmaWNQcmVzZXRzIiwicHJvbXB0UHJlc2V0cyIsIk9iamVjdCIsInByZXNldCIsInJlcGxhY2UiLCJzZXRQcm9tcHQiLCJuZXdQcm9tcHQiLCJkcmFmdCIsInVwZGF0ZVByZXNldCIsIm1hdGNoaW5nUHJlc2V0IiwiZmluZCIsIm5hbWUiLCJzZXRTdG9wIiwibmV3U3RvcCIsInNwbGl0IiwicyIsInRyaW0iLCJmaWx0ZXIiLCJCb29sZWFuIiwidXBkYXRlVG9Vc2VQcmVzZXQiLCJwIiwicHJlc2V0TmFtZSIsInN0b3BTdHJpbmciLCJ2YWx1ZSIsIm9uSW5wdXQiLCJzZXRTdGF0ZSIsInNlbGVjdGVkUHJlc2V0IiwiZSIsInRhcmdldCIsIl9hIiwiX2IiLCJyb3dzIiwib25DaGFuZ2UiLCJ0eXBlIiwiTG9nbyIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJBc2tDb3BpbG90QnV0dG9uIiwiZGlzYWJsZWQiLCJWU0NvZGVQcm9ncmVzc1JpbmciLCJQYW5lbEV4cGxhaW4iLCJzZXRSZXNwb25zZUl0ZXJhdGlvbiIsIm9uSGFuZGxlQ2xpY2siLCJhbmFseXplQ29kZSIsIml0ZXJhdGlvbiIsInJlbmRlclJlc3VsdCIsImZ1bGxQcm9tcHQiLCJ0YWJJbmRleCIsImdldExhbmd1YWdlcyIsImxhbmd1YWdlcyIsIlBhbmVsVHJhbnNsYXRlIiwib3V0cHV0TGFuZ3VhZ2UiLCJzZXRPdXRwdXRMYW5ndWFnZSIsImhhbmRsZU9uQ2hhbmdlIiwibmV3VmFsdWUiLCJpbnB1dExhbmd1YWdlIiwia2V5cyIsImxhbmciLCJSZWFjdERPTSIsInJvb3QiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGF0YSIsInJlc3BvbnNlIiwicGFuZWxzIiwiZXhwbGFpbiIsInRyYW5zbGF0ZSIsInJlbmRlciIsIlN0cmljdE1vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///701\n')},40:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(537);\n/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "/*\\n * Visual Studio 2015 dark style\\n * Author: Nicolas LLOBERA <nllobera@gmail.com>\\n */\\n\\n.hljs {\\n  display: block;\\n  overflow-x: auto;\\n  padding: 0.5em;\\n  background: #1E1E1E;\\n  color: #DCDCDC;\\n}\\n\\n.hljs-keyword,\\n.hljs-literal,\\n.hljs-symbol,\\n.hljs-name {\\n  color: #569CD6;\\n}\\n.hljs-link {\\n  color: #569CD6;\\n  text-decoration: underline;\\n}\\n\\n.hljs-built_in,\\n.hljs-type {\\n  color: #4EC9B0;\\n}\\n\\n.hljs-number,\\n.hljs-class {\\n  color: #B8D7A3;\\n}\\n\\n.hljs-string,\\n.hljs-meta-string {\\n  color: #D69D85;\\n}\\n\\n.hljs-regexp,\\n.hljs-template-tag {\\n  color: #9A5334;\\n}\\n\\n.hljs-subst,\\n.hljs-function,\\n.hljs-title,\\n.hljs-params,\\n.hljs-formula {\\n  color: #DCDCDC;\\n}\\n\\n.hljs-comment,\\n.hljs-quote {\\n  color: #57A64A;\\n  font-style: italic;\\n}\\n\\n.hljs-doctag {\\n  color: #608B4E;\\n}\\n\\n.hljs-meta,\\n.hljs-meta-keyword,\\n.hljs-tag {\\n  color: #9B9B9B;\\n}\\n\\n.hljs-variable,\\n.hljs-template-variable {\\n  color: #BD63C5;\\n}\\n\\n.hljs-attr,\\n.hljs-attribute,\\n.hljs-builtin-name {\\n  color: #9CDCFE;\\n}\\n\\n.hljs-section {\\n  color: gold;\\n}\\n\\n.hljs-emphasis {\\n  font-style: italic;\\n}\\n\\n.hljs-strong {\\n  font-weight: bold;\\n}\\n\\n/*.hljs-code {\\n  font-family:\'Monospace\';\\n}*/\\n\\n.hljs-bullet,\\n.hljs-selector-tag,\\n.hljs-selector-id,\\n.hljs-selector-class,\\n.hljs-selector-attr,\\n.hljs-selector-pseudo {\\n  color: #D7BA7D;\\n}\\n\\n.hljs-addition {\\n  background-color: #144212;\\n  display: inline-block;\\n  width: 100%;\\n}\\n\\n.hljs-deletion {\\n  background-color: #600;\\n  display: inline-block;\\n  width: 100%;\\n}\\n", "",{"version":3,"sources":["webpack://./node_modules/highlight.js/styles/vs2015.css"],"names":[],"mappings":"AAAA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;EAChB,cAAc;EACd,mBAAmB;EACnB,cAAc;AAChB;;AAEA;;;;EAIE,cAAc;AAChB;AACA;EACE,cAAc;EACd,0BAA0B;AAC5B;;AAEA;;EAEE,cAAc;AAChB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;;;;;EAKE,cAAc;AAChB;;AAEA;;EAEE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;;;EAGE,cAAc;AAChB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;;;EAGE,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE;;AAEF;;;;;;EAME,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,qBAAqB;EACrB,WAAW;AACb","sourcesContent":["/*\\n * Visual Studio 2015 dark style\\n * Author: Nicolas LLOBERA <nllobera@gmail.com>\\n */\\n\\n.hljs {\\n  display: block;\\n  overflow-x: auto;\\n  padding: 0.5em;\\n  background: #1E1E1E;\\n  color: #DCDCDC;\\n}\\n\\n.hljs-keyword,\\n.hljs-literal,\\n.hljs-symbol,\\n.hljs-name {\\n  color: #569CD6;\\n}\\n.hljs-link {\\n  color: #569CD6;\\n  text-decoration: underline;\\n}\\n\\n.hljs-built_in,\\n.hljs-type {\\n  color: #4EC9B0;\\n}\\n\\n.hljs-number,\\n.hljs-class {\\n  color: #B8D7A3;\\n}\\n\\n.hljs-string,\\n.hljs-meta-string {\\n  color: #D69D85;\\n}\\n\\n.hljs-regexp,\\n.hljs-template-tag {\\n  color: #9A5334;\\n}\\n\\n.hljs-subst,\\n.hljs-function,\\n.hljs-title,\\n.hljs-params,\\n.hljs-formula {\\n  color: #DCDCDC;\\n}\\n\\n.hljs-comment,\\n.hljs-quote {\\n  color: #57A64A;\\n  font-style: italic;\\n}\\n\\n.hljs-doctag {\\n  color: #608B4E;\\n}\\n\\n.hljs-meta,\\n.hljs-meta-keyword,\\n.hljs-tag {\\n  color: #9B9B9B;\\n}\\n\\n.hljs-variable,\\n.hljs-template-variable {\\n  color: #BD63C5;\\n}\\n\\n.hljs-attr,\\n.hljs-attribute,\\n.hljs-builtin-name {\\n  color: #9CDCFE;\\n}\\n\\n.hljs-section {\\n  color: gold;\\n}\\n\\n.hljs-emphasis {\\n  font-style: italic;\\n}\\n\\n.hljs-strong {\\n  font-weight: bold;\\n}\\n\\n/*.hljs-code {\\n  font-family:\'Monospace\';\\n}*/\\n\\n.hljs-bullet,\\n.hljs-selector-tag,\\n.hljs-selector-id,\\n.hljs-selector-class,\\n.hljs-selector-attr,\\n.hljs-selector-pseudo {\\n  color: #D7BA7D;\\n}\\n\\n.hljs-addition {\\n  background-color: #144212;\\n  display: inline-block;\\n  width: 100%;\\n}\\n\\n.hljs-deletion {\\n  background-color: #600;\\n  display: inline-block;\\n  width: 100%;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ2dHO0FBQ2pCO0FBQy9FLDhCQUE4QixzRUFBMkIsQ0FBQywrRUFBcUM7QUFDL0Y7QUFDQSwrSUFBK0ksbUJBQW1CLHFCQUFxQixtQkFBbUIsd0JBQXdCLG1CQUFtQixHQUFHLCtEQUErRCxtQkFBbUIsR0FBRyxjQUFjLG1CQUFtQiwrQkFBK0IsR0FBRyxpQ0FBaUMsbUJBQW1CLEdBQUcsZ0NBQWdDLG1CQUFtQixHQUFHLHNDQUFzQyxtQkFBbUIsR0FBRyx1Q0FBdUMsbUJBQW1CLEdBQUcsK0VBQStFLG1CQUFtQixHQUFHLGlDQUFpQyxtQkFBbUIsdUJBQXVCLEdBQUcsa0JBQWtCLG1CQUFtQixHQUFHLGlEQUFpRCxtQkFBbUIsR0FBRyw4Q0FBOEMsbUJBQW1CLEdBQUcsdURBQXVELG1CQUFtQixHQUFHLG1CQUFtQixnQkFBZ0IsR0FBRyxvQkFBb0IsdUJBQXVCLEdBQUcsa0JBQWtCLHNCQUFzQixHQUFHLGtCQUFrQiw0QkFBNEIsR0FBRyxrSUFBa0ksbUJBQW1CLEdBQUcsb0JBQW9CLDhCQUE4QiwwQkFBMEIsZ0JBQWdCLEdBQUcsb0JBQW9CLDJCQUEyQiwwQkFBMEIsZ0JBQWdCLEdBQUcsU0FBUyxnSEFBZ0gsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLFlBQVksV0FBVyxPQUFPLFFBQVEsVUFBVSxNQUFNLEtBQUssVUFBVSxZQUFZLE9BQU8sTUFBTSxVQUFVLE9BQU8sTUFBTSxVQUFVLE9BQU8sTUFBTSxVQUFVLE9BQU8sTUFBTSxVQUFVLE9BQU8sU0FBUyxVQUFVLE9BQU8sTUFBTSxVQUFVLFlBQVksT0FBTyxLQUFLLFVBQVUsT0FBTyxPQUFPLFVBQVUsT0FBTyxNQUFNLFVBQVUsT0FBTyxPQUFPLFVBQVUsT0FBTyxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxNQUFNLE1BQU0sVUFBVSxVQUFVLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsOEhBQThILG1CQUFtQixxQkFBcUIsbUJBQW1CLHdCQUF3QixtQkFBbUIsR0FBRywrREFBK0QsbUJBQW1CLEdBQUcsY0FBYyxtQkFBbUIsK0JBQStCLEdBQUcsaUNBQWlDLG1CQUFtQixHQUFHLGdDQUFnQyxtQkFBbUIsR0FBRyxzQ0FBc0MsbUJBQW1CLEdBQUcsdUNBQXVDLG1CQUFtQixHQUFHLCtFQUErRSxtQkFBbUIsR0FBRyxpQ0FBaUMsbUJBQW1CLHVCQUF1QixHQUFHLGtCQUFrQixtQkFBbUIsR0FBRyxpREFBaUQsbUJBQW1CLEdBQUcsOENBQThDLG1CQUFtQixHQUFHLHVEQUF1RCxtQkFBbUIsR0FBRyxtQkFBbUIsZ0JBQWdCLEdBQUcsb0JBQW9CLHVCQUF1QixHQUFHLGtCQUFrQixzQkFBc0IsR0FBRyxrQkFBa0IsNEJBQTRCLEdBQUcsa0lBQWtJLG1CQUFtQixHQUFHLG9CQUFvQiw4QkFBOEIsMEJBQTBCLGdCQUFnQixHQUFHLG9CQUFvQiwyQkFBMkIsMEJBQTBCLGdCQUFnQixHQUFHLHFCQUFxQjtBQUNueEg7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvc3R5bGVzL3ZzMjAxNS5jc3M/ODBlZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKlxcbiAqIFZpc3VhbCBTdHVkaW8gMjAxNSBkYXJrIHN0eWxlXFxuICogQXV0aG9yOiBOaWNvbGFzIExMT0JFUkEgPG5sbG9iZXJhQGdtYWlsLmNvbT5cXG4gKi9cXG5cXG4uaGxqcyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG92ZXJmbG93LXg6IGF1dG87XFxuICBwYWRkaW5nOiAwLjVlbTtcXG4gIGJhY2tncm91bmQ6ICMxRTFFMUU7XFxuICBjb2xvcjogI0RDRENEQztcXG59XFxuXFxuLmhsanMta2V5d29yZCxcXG4uaGxqcy1saXRlcmFsLFxcbi5obGpzLXN5bWJvbCxcXG4uaGxqcy1uYW1lIHtcXG4gIGNvbG9yOiAjNTY5Q0Q2O1xcbn1cXG4uaGxqcy1saW5rIHtcXG4gIGNvbG9yOiAjNTY5Q0Q2O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbi5obGpzLWJ1aWx0X2luLFxcbi5obGpzLXR5cGUge1xcbiAgY29sb3I6ICM0RUM5QjA7XFxufVxcblxcbi5obGpzLW51bWJlcixcXG4uaGxqcy1jbGFzcyB7XFxuICBjb2xvcjogI0I4RDdBMztcXG59XFxuXFxuLmhsanMtc3RyaW5nLFxcbi5obGpzLW1ldGEtc3RyaW5nIHtcXG4gIGNvbG9yOiAjRDY5RDg1O1xcbn1cXG5cXG4uaGxqcy1yZWdleHAsXFxuLmhsanMtdGVtcGxhdGUtdGFnIHtcXG4gIGNvbG9yOiAjOUE1MzM0O1xcbn1cXG5cXG4uaGxqcy1zdWJzdCxcXG4uaGxqcy1mdW5jdGlvbixcXG4uaGxqcy10aXRsZSxcXG4uaGxqcy1wYXJhbXMsXFxuLmhsanMtZm9ybXVsYSB7XFxuICBjb2xvcjogI0RDRENEQztcXG59XFxuXFxuLmhsanMtY29tbWVudCxcXG4uaGxqcy1xdW90ZSB7XFxuICBjb2xvcjogIzU3QTY0QTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLmhsanMtZG9jdGFnIHtcXG4gIGNvbG9yOiAjNjA4QjRFO1xcbn1cXG5cXG4uaGxqcy1tZXRhLFxcbi5obGpzLW1ldGEta2V5d29yZCxcXG4uaGxqcy10YWcge1xcbiAgY29sb3I6ICM5QjlCOUI7XFxufVxcblxcbi5obGpzLXZhcmlhYmxlLFxcbi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlIHtcXG4gIGNvbG9yOiAjQkQ2M0M1O1xcbn1cXG5cXG4uaGxqcy1hdHRyLFxcbi5obGpzLWF0dHJpYnV0ZSxcXG4uaGxqcy1idWlsdGluLW5hbWUge1xcbiAgY29sb3I6ICM5Q0RDRkU7XFxufVxcblxcbi5obGpzLXNlY3Rpb24ge1xcbiAgY29sb3I6IGdvbGQ7XFxufVxcblxcbi5obGpzLWVtcGhhc2lzIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLmhsanMtc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4vKi5obGpzLWNvZGUge1xcbiAgZm9udC1mYW1pbHk6J01vbm9zcGFjZSc7XFxufSovXFxuXFxuLmhsanMtYnVsbGV0LFxcbi5obGpzLXNlbGVjdG9yLXRhZyxcXG4uaGxqcy1zZWxlY3Rvci1pZCxcXG4uaGxqcy1zZWxlY3Rvci1jbGFzcyxcXG4uaGxqcy1zZWxlY3Rvci1hdHRyLFxcbi5obGpzLXNlbGVjdG9yLXBzZXVkbyB7XFxuICBjb2xvcjogI0Q3QkE3RDtcXG59XFxuXFxuLmhsanMtYWRkaXRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE0NDIxMjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uaGxqcy1kZWxldGlvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjAwO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvc3R5bGVzL3ZzMjAxNS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztFQUdFOztBQUVGO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2QsbUJBQW1CO0VBQ25CLGNBQWM7QUFDaEI7O0FBRUE7Ozs7RUFJRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsMEJBQTBCO0FBQzVCOztBQUVBOztFQUVFLGNBQWM7QUFDaEI7O0FBRUE7O0VBRUUsY0FBYztBQUNoQjs7QUFFQTs7RUFFRSxjQUFjO0FBQ2hCOztBQUVBOztFQUVFLGNBQWM7QUFDaEI7O0FBRUE7Ozs7O0VBS0UsY0FBYztBQUNoQjs7QUFFQTs7RUFFRSxjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTs7O0VBR0UsY0FBYztBQUNoQjs7QUFFQTs7RUFFRSxjQUFjO0FBQ2hCOztBQUVBOzs7RUFHRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBOztFQUVFOztBQUVGOzs7Ozs7RUFNRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHFCQUFxQjtFQUNyQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKlxcbiAqIFZpc3VhbCBTdHVkaW8gMjAxNSBkYXJrIHN0eWxlXFxuICogQXV0aG9yOiBOaWNvbGFzIExMT0JFUkEgPG5sbG9iZXJhQGdtYWlsLmNvbT5cXG4gKi9cXG5cXG4uaGxqcyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG92ZXJmbG93LXg6IGF1dG87XFxuICBwYWRkaW5nOiAwLjVlbTtcXG4gIGJhY2tncm91bmQ6ICMxRTFFMUU7XFxuICBjb2xvcjogI0RDRENEQztcXG59XFxuXFxuLmhsanMta2V5d29yZCxcXG4uaGxqcy1saXRlcmFsLFxcbi5obGpzLXN5bWJvbCxcXG4uaGxqcy1uYW1lIHtcXG4gIGNvbG9yOiAjNTY5Q0Q2O1xcbn1cXG4uaGxqcy1saW5rIHtcXG4gIGNvbG9yOiAjNTY5Q0Q2O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbi5obGpzLWJ1aWx0X2luLFxcbi5obGpzLXR5cGUge1xcbiAgY29sb3I6ICM0RUM5QjA7XFxufVxcblxcbi5obGpzLW51bWJlcixcXG4uaGxqcy1jbGFzcyB7XFxuICBjb2xvcjogI0I4RDdBMztcXG59XFxuXFxuLmhsanMtc3RyaW5nLFxcbi5obGpzLW1ldGEtc3RyaW5nIHtcXG4gIGNvbG9yOiAjRDY5RDg1O1xcbn1cXG5cXG4uaGxqcy1yZWdleHAsXFxuLmhsanMtdGVtcGxhdGUtdGFnIHtcXG4gIGNvbG9yOiAjOUE1MzM0O1xcbn1cXG5cXG4uaGxqcy1zdWJzdCxcXG4uaGxqcy1mdW5jdGlvbixcXG4uaGxqcy10aXRsZSxcXG4uaGxqcy1wYXJhbXMsXFxuLmhsanMtZm9ybXVsYSB7XFxuICBjb2xvcjogI0RDRENEQztcXG59XFxuXFxuLmhsanMtY29tbWVudCxcXG4uaGxqcy1xdW90ZSB7XFxuICBjb2xvcjogIzU3QTY0QTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLmhsanMtZG9jdGFnIHtcXG4gIGNvbG9yOiAjNjA4QjRFO1xcbn1cXG5cXG4uaGxqcy1tZXRhLFxcbi5obGpzLW1ldGEta2V5d29yZCxcXG4uaGxqcy10YWcge1xcbiAgY29sb3I6ICM5QjlCOUI7XFxufVxcblxcbi5obGpzLXZhcmlhYmxlLFxcbi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlIHtcXG4gIGNvbG9yOiAjQkQ2M0M1O1xcbn1cXG5cXG4uaGxqcy1hdHRyLFxcbi5obGpzLWF0dHJpYnV0ZSxcXG4uaGxqcy1idWlsdGluLW5hbWUge1xcbiAgY29sb3I6ICM5Q0RDRkU7XFxufVxcblxcbi5obGpzLXNlY3Rpb24ge1xcbiAgY29sb3I6IGdvbGQ7XFxufVxcblxcbi5obGpzLWVtcGhhc2lzIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLmhsanMtc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4vKi5obGpzLWNvZGUge1xcbiAgZm9udC1mYW1pbHk6J01vbm9zcGFjZSc7XFxufSovXFxuXFxuLmhsanMtYnVsbGV0LFxcbi5obGpzLXNlbGVjdG9yLXRhZyxcXG4uaGxqcy1zZWxlY3Rvci1pZCxcXG4uaGxqcy1zZWxlY3Rvci1jbGFzcyxcXG4uaGxqcy1zZWxlY3Rvci1hdHRyLFxcbi5obGpzLXNlbGVjdG9yLXBzZXVkbyB7XFxuICBjb2xvcjogI0Q3QkE3RDtcXG59XFxuXFxuLmhsanMtYWRkaXRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE0NDIxMjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uaGxqcy1kZWxldGlvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjAwO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n')},69:(module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*! tailwindcss v2.2.19 | MIT License | https://tailwindcss.com *//*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\\n\\n/*\\nDocument\\n========\\n*/\\n\\n/**\\nUse a better box model (opinionated).\\n*/\\n\\n*,\\n::before,\\n::after {\\n\\tbox-sizing: border-box;\\n}\\n\\n/**\\nUse a more readable tab size (opinionated).\\n*/\\n\\nhtml {\\n\\t-moz-tab-size: 4;\\n\\t-o-tab-size: 4;\\n\\t   tab-size: 4;\\n}\\n\\n/**\\n1. Correct the line height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n*/\\n\\nhtml {\\n\\tline-height: 1.15; /* 1 */\\n\\t-webkit-text-size-adjust: 100%; /* 2 */\\n}\\n\\n/*\\nSections\\n========\\n*/\\n\\n/**\\nRemove the margin in all browsers.\\n*/\\n\\nbody {\\n\\tmargin: 0;\\n}\\n\\n/**\\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n*/\\n\\nbody {\\n\\tfont-family:\\n\\t\\tsystem-ui,\\n\\t\\t-apple-system, /* Firefox supports this but not yet `system-ui` */\\n\\t\\t'Segoe UI',\\n\\t\\tRoboto,\\n\\t\\tHelvetica,\\n\\t\\tArial,\\n\\t\\tsans-serif,\\n\\t\\t'Apple Color Emoji',\\n\\t\\t'Segoe UI Emoji';\\n}\\n\\n/*\\nGrouping content\\n================\\n*/\\n\\n/**\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n*/\\n\\nhr {\\n\\theight: 0; /* 1 */\\n\\tcolor: inherit; /* 2 */\\n}\\n\\n/*\\nText-level semantics\\n====================\\n*/\\n\\n/**\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr[title] {\\n\\t-webkit-text-decoration: underline dotted;\\n\\t        text-decoration: underline dotted;\\n}\\n\\n/**\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n\\tfont-weight: bolder;\\n}\\n\\n/**\\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n2. Correct the odd 'em' font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n\\tfont-family:\\n\\t\\tui-monospace,\\n\\t\\tSFMono-Regular,\\n\\t\\tConsolas,\\n\\t\\t'Liberation Mono',\\n\\t\\tMenlo,\\n\\t\\tmonospace; /* 1 */\\n\\tfont-size: 1em; /* 2 */\\n}\\n\\n/**\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n\\tfont-size: 80%;\\n}\\n\\n/**\\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n\\tfont-size: 75%;\\n\\tline-height: 0;\\n\\tposition: relative;\\n\\tvertical-align: baseline;\\n}\\n\\nsub {\\n\\tbottom: -0.25em;\\n}\\n\\nsup {\\n\\ttop: -0.5em;\\n}\\n\\n/*\\nTabular data\\n============\\n*/\\n\\n/**\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n*/\\n\\ntable {\\n\\ttext-indent: 0; /* 1 */\\n\\tborder-color: inherit; /* 2 */\\n}\\n\\n/*\\nForms\\n=====\\n*/\\n\\n/**\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n\\tfont-family: inherit; /* 1 */\\n\\tfont-size: 100%; /* 1 */\\n\\tline-height: 1.15; /* 1 */\\n\\tmargin: 0; /* 2 */\\n}\\n\\n/**\\nRemove the inheritance of text transform in Edge and Firefox.\\n1. Remove the inheritance of text transform in Firefox.\\n*/\\n\\nbutton,\\nselect { /* 1 */\\n\\ttext-transform: none;\\n}\\n\\n/**\\nCorrect the inability to style clickable types in iOS and Safari.\\n*/\\n\\nbutton,\\n[type='button'],\\n[type='reset'],\\n[type='submit'] {\\n\\t-webkit-appearance: button;\\n}\\n\\n/**\\nRemove the inner border and padding in Firefox.\\n*/\\n\\n::-moz-focus-inner {\\n\\tborder-style: none;\\n\\tpadding: 0;\\n}\\n\\n/**\\nRestore the focus styles unset by the previous rule.\\n*/\\n\\n:-moz-focusring {\\n\\toutline: 1px dotted ButtonText;\\n}\\n\\n/**\\nRemove the additional ':invalid' styles in Firefox.\\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\\n*/\\n\\n:-moz-ui-invalid {\\n\\tbox-shadow: none;\\n}\\n\\n/**\\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\\n*/\\n\\nlegend {\\n\\tpadding: 0;\\n}\\n\\n/**\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n\\tvertical-align: baseline;\\n}\\n\\n/**\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n\\theight: auto;\\n}\\n\\n/**\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type='search'] {\\n\\t-webkit-appearance: textfield; /* 1 */\\n\\toutline-offset: -2px; /* 2 */\\n}\\n\\n/**\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n\\t-webkit-appearance: none;\\n}\\n\\n/**\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to 'inherit' in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n\\t-webkit-appearance: button; /* 1 */\\n\\tfont: inherit; /* 2 */\\n}\\n\\n/*\\nInteractive\\n===========\\n*/\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n\\tdisplay: list-item;\\n}/**\\n * Manually forked from SUIT CSS Base: https://github.com/suitcss/base\\n * A thin layer on top of normalize.css that provides a starting point more\\n * suitable for web applications.\\n */\\n\\n/**\\n * Removes the default spacing and border for appropriate elements.\\n */\\n\\nblockquote,\\ndl,\\ndd,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\nhr,\\nfigure,\\np,\\npre {\\n  margin: 0;\\n}\\n\\nbutton {\\n  background-color: transparent;\\n  background-image: none;\\n}\\n\\nfieldset {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nol,\\nul {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/**\\n * Tailwind custom reset styles\\n */\\n\\n/**\\n * 1. Use the user's configured `sans` font-family (with Tailwind's default\\n *    sans-serif font stack as a fallback) as a sane default.\\n * 2. Use Tailwind's default \\\"normal\\\" line-height so the user isn't forced\\n *    to override it to ensure consistency even when using the default theme.\\n */\\n\\nhtml {\\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, \\\"Noto Sans\\\", sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\"; /* 1 */\\n  line-height: 1.5; /* 2 */\\n}\\n\\n\\n/**\\n * Inherit font-family and line-height from `html` so users can set them as\\n * a class directly on the `html` element.\\n */\\n\\nbody {\\n  font-family: inherit;\\n  line-height: inherit;\\n}\\n\\n/**\\n * 1. Prevent padding and border from affecting element width.\\n *\\n *    We used to set this in the html element and inherit from\\n *    the parent element for everything else. This caused issues\\n *    in shadow-dom-enhanced elements like <details> where the content\\n *    is wrapped by a div with box-sizing set to `content-box`.\\n *\\n *    https://github.com/mozdevs/cssremedy/issues/4\\n *\\n *\\n * 2. Allow adding a border to an element by just adding a border-width.\\n *\\n *    By default, the way the browser specifies that an element should have no\\n *    border is by setting it's border-style to `none` in the user-agent\\n *    stylesheet.\\n *\\n *    In order to easily add borders to elements by just setting the `border-width`\\n *    property, we change the default border-style for all elements to `solid`, and\\n *    use border-width to hide them instead. This way our `border` utilities only\\n *    need to set the `border-width` property instead of the entire `border`\\n *    shorthand, making our border utilities much more straightforward to compose.\\n *\\n *    https://github.com/tailwindcss/tailwindcss/pull/116\\n */\\n\\n*,\\n::before,\\n::after {\\n  box-sizing: border-box; /* 1 */\\n  border-width: 0; /* 2 */\\n  border-style: solid; /* 2 */\\n  border-color: currentColor; /* 2 */\\n}\\n\\n/*\\n * Ensure horizontal rules are visible by default\\n */\\n\\nhr {\\n  border-top-width: 1px;\\n}\\n\\n/**\\n * Undo the `border-style: none` reset that Normalize applies to images so that\\n * our `border-{width}` utilities have the expected effect.\\n *\\n * The Normalize reset is unnecessary for us since we default the border-width\\n * to 0 on all elements.\\n *\\n * https://github.com/tailwindcss/tailwindcss/issues/362\\n */\\n\\nimg {\\n  border-style: solid;\\n}\\n\\ntextarea {\\n  resize: vertical;\\n}\\n\\ninput::-moz-placeholder, textarea::-moz-placeholder {\\n  opacity: 1;\\n  color: #9ca3af;\\n}\\n\\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder {\\n  opacity: 1;\\n  color: #9ca3af;\\n}\\n\\ninput::placeholder,\\ntextarea::placeholder {\\n  opacity: 1;\\n  color: #9ca3af;\\n}\\n\\nbutton,\\n[role=\\\"button\\\"] {\\n  cursor: pointer;\\n}\\n\\n/**\\n * Override legacy focus reset from Normalize with modern Firefox focus styles.\\n *\\n * This is actually an improvement over the new defaults in Firefox in our testing,\\n * as it triggers the better focus styles even for links, which still use a dotted\\n * outline in Firefox by default.\\n */\\n \\n:-moz-focusring {\\n\\toutline: auto;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n}\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: inherit;\\n  font-weight: inherit;\\n}\\n\\n/**\\n * Reset links to optimize for opt-in styling instead of\\n * opt-out.\\n */\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit;\\n}\\n\\n/**\\n * Reset form element properties that are easy to forget to\\n * style explicitly so you don't inadvertently introduce\\n * styles that deviate from your design system. These styles\\n * supplement a partial reset that is already applied by\\n * normalize.css.\\n */\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  padding: 0;\\n  line-height: inherit;\\n  color: inherit;\\n}\\n\\n/**\\n * Use the configured 'mono' font family for elements that\\n * are expected to be rendered with a monospace font, falling\\n * back to the system monospace stack if there is no configured\\n * 'mono' font family.\\n */\\n\\npre,\\ncode,\\nkbd,\\nsamp {\\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace;\\n}\\n\\n/**\\n * 1. Make replaced elements `display: block` by default as that's\\n *    the behavior you want almost all of the time. Inspired by\\n *    CSS Remedy, with `svg` added as well.\\n *\\n *    https://github.com/mozdevs/cssremedy/issues/14\\n * \\n * 2. Add `vertical-align: middle` to align replaced elements more\\n *    sensibly by default when overriding `display` by adding a\\n *    utility like `inline`.\\n *\\n *    This can trigger a poorly considered linting error in some\\n *    tools but is included by design.\\n * \\n *    https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210\\n */\\n\\nimg,\\nsvg,\\nvideo,\\ncanvas,\\naudio,\\niframe,\\nembed,\\nobject {\\n  display: block; /* 1 */\\n  vertical-align: middle; /* 2 */\\n}\\n\\n/**\\n * Constrain images and videos to the parent width and preserve\\n * their intrinsic aspect ratio.\\n *\\n * https://github.com/mozdevs/cssremedy/issues/14\\n */\\n\\nimg,\\nvideo {\\n  max-width: 100%;\\n  height: auto;\\n}\\n\\n/**\\n * Ensure the default browser behavior of the `hidden` attribute.\\n */\\n\\n[hidden] {\\n  display: none;\\n}\\n\\n*, ::before, ::after {\\n\\t--tw-translate-x: 0;\\n\\t--tw-translate-y: 0;\\n\\t--tw-rotate: 0;\\n\\t--tw-skew-x: 0;\\n\\t--tw-skew-y: 0;\\n\\t--tw-scale-x: 1;\\n\\t--tw-scale-y: 1;\\n\\t--tw-transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\n\\t--tw-blur: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-brightness: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-contrast: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-grayscale: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-hue-rotate: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-invert: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-saturate: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-sepia: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-drop-shadow: var(--tw-empty,/*!*/ /*!*/);\\n\\t--tw-filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.relative {\\n\\tposition: relative;\\n}\\n.my-8 {\\n\\tmargin-top: 2rem;\\n\\tmargin-bottom: 2rem;\\n}\\n.mb-1 {\\n\\tmargin-bottom: 0.25rem;\\n}\\n.mr-1 {\\n\\tmargin-right: 0.25rem;\\n}\\n.mt-2 {\\n\\tmargin-top: 0.5rem;\\n}\\n.mt-6 {\\n\\tmargin-top: 1.5rem;\\n}\\n.mb-4 {\\n\\tmargin-bottom: 1rem;\\n}\\n.block {\\n\\tdisplay: block;\\n}\\n.flex {\\n\\tdisplay: flex;\\n}\\n.hidden {\\n\\tdisplay: none;\\n}\\n.h-1 {\\n\\theight: 0.25rem;\\n}\\n.h-full {\\n\\theight: 100%;\\n}\\n.w-full {\\n\\twidth: 100%;\\n}\\n.w-1 {\\n\\twidth: 0.25rem;\\n}\\n.rotate-0 {\\n\\t--tw-rotate: 0deg;\\n\\ttransform: var(--tw-transform);\\n}\\n.rotate-90 {\\n\\t--tw-rotate: 90deg;\\n\\ttransform: var(--tw-transform);\\n}\\n.transform {\\n\\ttransform: var(--tw-transform);\\n}\\n.flex-wrap {\\n\\tflex-wrap: wrap;\\n}\\n.items-center {\\n\\talign-items: center;\\n}\\n.justify-center {\\n\\tjustify-content: center;\\n}\\n.gap-4 {\\n\\tgap: 1rem;\\n}\\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\\n\\t--tw-space-y-reverse: 0;\\n\\tmargin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\\n\\tmargin-bottom: calc(1rem * var(--tw-space-y-reverse));\\n}\\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\\n\\t--tw-space-y-reverse: 0;\\n\\tmargin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\\n\\tmargin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\\n}\\n.overflow-hidden {\\n\\toverflow: hidden;\\n}\\n.overflow-y-auto {\\n\\toverflow-y: auto;\\n}\\n.whitespace-pre {\\n\\twhite-space: pre;\\n}\\n.whitespace-pre-wrap {\\n\\twhite-space: pre-wrap;\\n}\\n.bg-vscode-input-background {\\n\\tbackground-color: var(--vscode-input-background);\\n}\\n.p-4 {\\n\\tpadding: 1rem;\\n}\\n.pt-2 {\\n\\tpadding-top: 0.5rem;\\n}\\n.pb-16 {\\n\\tpadding-bottom: 4rem;\\n}\\n.pb-4 {\\n\\tpadding-bottom: 1rem;\\n}\\n.text-left {\\n\\ttext-align: left;\\n}\\n.text-center {\\n\\ttext-align: center;\\n}\\n.font-mono {\\n\\tfont-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace;\\n}\\n.text-sm {\\n\\tfont-size: 0.875rem;\\n\\tline-height: 1.25rem;\\n}\\n.text-xs {\\n\\tfont-size: 0.75rem;\\n\\tline-height: 1rem;\\n}\\n.text-base {\\n\\tfont-size: 1rem;\\n\\tline-height: 1.5rem;\\n}\\n.uppercase {\\n\\ttext-transform: uppercase;\\n}\\n.italic {\\n\\tfont-style: italic;\\n}\\n.tracking-widest {\\n\\tletter-spacing: 0.1em;\\n}\\n.text-vscode-foreground {\\n\\tcolor: var(--vscode-foreground);\\n}\\n.text-vscode-debugConsole-errorForeground {\\n\\tcolor: var(--vscode-debugConsole-errorForeground);\\n}\\n.opacity-50 {\\n\\topacity: 0.5;\\n}\\n.outline-none {\\n\\toutline: 2px solid transparent;\\n\\toutline-offset: 2px;\\n}\\n.filter {\\n\\tfilter: var(--tw-filter);\\n}\\n.transition {\\n\\ttransition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\\n\\ttransition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\\n\\ttransition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\\n\\ttransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n\\ttransition-duration: 150ms;\\n}\\n.duration-300 {\\n\\ttransition-duration: 300ms;\\n}\\n.ease-in-out {\\n\\ttransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n}\\n\\n.collapse-icon > svg > path {\\n    fill: var(--text-vscode-input-foreground);\\n    fill: white;\\n}\\n\\n/*\\n    Hack, but necessary to override a particular style in VSCode UI Toolkit\\n    which restricts button width to 300px.\\n*/\\nvscode-button::part(control) {\\n    max-width: 100%;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/sidebar/index.css\",\"webpack://./src/sidebar/%3Cinput%20css%20mjwdus%3E\",\"webpack://./src/sidebar/%3Cinput%20css%20JORsKx%3E\",\"<no source>\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n.collapse-icon > svg > path {\\n    fill: var(--text-vscode-input-foreground);\\n    fill: white;\\n}\\n\\n/*\\n    Hack, but necessary to override a particular style in VSCode UI Toolkit\\n    which restricts button width to 300px.\\n*/\\nvscode-button::part(control) {\\n    max-width: 100%;\\n}\\n\",\"/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\\n\\n/*\\nDocument\\n========\\n*/\\n\\n/**\\nUse a better box model (opinionated).\\n*/\\n\\n*,\\n::before,\\n::after {\\n\\tbox-sizing: border-box;\\n}\\n\\n/**\\nUse a more readable tab size (opinionated).\\n*/\\n\\nhtml {\\n\\t-moz-tab-size: 4;\\n\\ttab-size: 4;\\n}\\n\\n/**\\n1. Correct the line height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n*/\\n\\nhtml {\\n\\tline-height: 1.15; /* 1 */\\n\\t-webkit-text-size-adjust: 100%; /* 2 */\\n}\\n\\n/*\\nSections\\n========\\n*/\\n\\n/**\\nRemove the margin in all browsers.\\n*/\\n\\nbody {\\n\\tmargin: 0;\\n}\\n\\n/**\\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n*/\\n\\nbody {\\n\\tfont-family:\\n\\t\\tsystem-ui,\\n\\t\\t-apple-system, /* Firefox supports this but not yet `system-ui` */\\n\\t\\t'Segoe UI',\\n\\t\\tRoboto,\\n\\t\\tHelvetica,\\n\\t\\tArial,\\n\\t\\tsans-serif,\\n\\t\\t'Apple Color Emoji',\\n\\t\\t'Segoe UI Emoji';\\n}\\n\\n/*\\nGrouping content\\n================\\n*/\\n\\n/**\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n*/\\n\\nhr {\\n\\theight: 0; /* 1 */\\n\\tcolor: inherit; /* 2 */\\n}\\n\\n/*\\nText-level semantics\\n====================\\n*/\\n\\n/**\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr[title] {\\n\\ttext-decoration: underline dotted;\\n}\\n\\n/**\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n\\tfont-weight: bolder;\\n}\\n\\n/**\\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n2. Correct the odd 'em' font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n\\tfont-family:\\n\\t\\tui-monospace,\\n\\t\\tSFMono-Regular,\\n\\t\\tConsolas,\\n\\t\\t'Liberation Mono',\\n\\t\\tMenlo,\\n\\t\\tmonospace; /* 1 */\\n\\tfont-size: 1em; /* 2 */\\n}\\n\\n/**\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n\\tfont-size: 80%;\\n}\\n\\n/**\\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n\\tfont-size: 75%;\\n\\tline-height: 0;\\n\\tposition: relative;\\n\\tvertical-align: baseline;\\n}\\n\\nsub {\\n\\tbottom: -0.25em;\\n}\\n\\nsup {\\n\\ttop: -0.5em;\\n}\\n\\n/*\\nTabular data\\n============\\n*/\\n\\n/**\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n*/\\n\\ntable {\\n\\ttext-indent: 0; /* 1 */\\n\\tborder-color: inherit; /* 2 */\\n}\\n\\n/*\\nForms\\n=====\\n*/\\n\\n/**\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n\\tfont-family: inherit; /* 1 */\\n\\tfont-size: 100%; /* 1 */\\n\\tline-height: 1.15; /* 1 */\\n\\tmargin: 0; /* 2 */\\n}\\n\\n/**\\nRemove the inheritance of text transform in Edge and Firefox.\\n1. Remove the inheritance of text transform in Firefox.\\n*/\\n\\nbutton,\\nselect { /* 1 */\\n\\ttext-transform: none;\\n}\\n\\n/**\\nCorrect the inability to style clickable types in iOS and Safari.\\n*/\\n\\nbutton,\\n[type='button'],\\n[type='reset'],\\n[type='submit'] {\\n\\t-webkit-appearance: button;\\n}\\n\\n/**\\nRemove the inner border and padding in Firefox.\\n*/\\n\\n::-moz-focus-inner {\\n\\tborder-style: none;\\n\\tpadding: 0;\\n}\\n\\n/**\\nRestore the focus styles unset by the previous rule.\\n*/\\n\\n:-moz-focusring {\\n\\toutline: 1px dotted ButtonText;\\n}\\n\\n/**\\nRemove the additional ':invalid' styles in Firefox.\\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\\n*/\\n\\n:-moz-ui-invalid {\\n\\tbox-shadow: none;\\n}\\n\\n/**\\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\\n*/\\n\\nlegend {\\n\\tpadding: 0;\\n}\\n\\n/**\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n\\tvertical-align: baseline;\\n}\\n\\n/**\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n\\theight: auto;\\n}\\n\\n/**\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type='search'] {\\n\\t-webkit-appearance: textfield; /* 1 */\\n\\toutline-offset: -2px; /* 2 */\\n}\\n\\n/**\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n\\t-webkit-appearance: none;\\n}\\n\\n/**\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to 'inherit' in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n\\t-webkit-appearance: button; /* 1 */\\n\\tfont: inherit; /* 2 */\\n}\\n\\n/*\\nInteractive\\n===========\\n*/\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n\\tdisplay: list-item;\\n}\\n\",\"/**\\n * Manually forked from SUIT CSS Base: https://github.com/suitcss/base\\n * A thin layer on top of normalize.css that provides a starting point more\\n * suitable for web applications.\\n */\\n\\n/**\\n * Removes the default spacing and border for appropriate elements.\\n */\\n\\nblockquote,\\ndl,\\ndd,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\nhr,\\nfigure,\\np,\\npre {\\n  margin: 0;\\n}\\n\\nbutton {\\n  background-color: transparent;\\n  background-image: none;\\n}\\n\\nfieldset {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nol,\\nul {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/**\\n * Tailwind custom reset styles\\n */\\n\\n/**\\n * 1. Use the user's configured `sans` font-family (with Tailwind's default\\n *    sans-serif font stack as a fallback) as a sane default.\\n * 2. Use Tailwind's default \\\"normal\\\" line-height so the user isn't forced\\n *    to override it to ensure consistency even when using the default theme.\\n */\\n\\nhtml {\\n  font-family: theme('fontFamily.sans', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, \\\"Noto Sans\\\", sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\"); /* 1 */\\n  line-height: 1.5; /* 2 */\\n}\\n\\n\\n/**\\n * Inherit font-family and line-height from `html` so users can set them as\\n * a class directly on the `html` element.\\n */\\n\\nbody {\\n  font-family: inherit;\\n  line-height: inherit;\\n}\\n\\n/**\\n * 1. Prevent padding and border from affecting element width.\\n *\\n *    We used to set this in the html element and inherit from\\n *    the parent element for everything else. This caused issues\\n *    in shadow-dom-enhanced elements like <details> where the content\\n *    is wrapped by a div with box-sizing set to `content-box`.\\n *\\n *    https://github.com/mozdevs/cssremedy/issues/4\\n *\\n *\\n * 2. Allow adding a border to an element by just adding a border-width.\\n *\\n *    By default, the way the browser specifies that an element should have no\\n *    border is by setting it's border-style to `none` in the user-agent\\n *    stylesheet.\\n *\\n *    In order to easily add borders to elements by just setting the `border-width`\\n *    property, we change the default border-style for all elements to `solid`, and\\n *    use border-width to hide them instead. This way our `border` utilities only\\n *    need to set the `border-width` property instead of the entire `border`\\n *    shorthand, making our border utilities much more straightforward to compose.\\n *\\n *    https://github.com/tailwindcss/tailwindcss/pull/116\\n */\\n\\n*,\\n::before,\\n::after {\\n  box-sizing: border-box; /* 1 */\\n  border-width: 0; /* 2 */\\n  border-style: solid; /* 2 */\\n  border-color: currentColor; /* 2 */\\n}\\n\\n/*\\n * Ensure horizontal rules are visible by default\\n */\\n\\nhr {\\n  border-top-width: 1px;\\n}\\n\\n/**\\n * Undo the `border-style: none` reset that Normalize applies to images so that\\n * our `border-{width}` utilities have the expected effect.\\n *\\n * The Normalize reset is unnecessary for us since we default the border-width\\n * to 0 on all elements.\\n *\\n * https://github.com/tailwindcss/tailwindcss/issues/362\\n */\\n\\nimg {\\n  border-style: solid;\\n}\\n\\ntextarea {\\n  resize: vertical;\\n}\\n\\ninput::placeholder,\\ntextarea::placeholder {\\n  opacity: 1;\\n  color: theme('colors.gray.400', #a1a1aa);\\n}\\n\\nbutton,\\n[role=\\\"button\\\"] {\\n  cursor: pointer;\\n}\\n\\n/**\\n * Override legacy focus reset from Normalize with modern Firefox focus styles.\\n *\\n * This is actually an improvement over the new defaults in Firefox in our testing,\\n * as it triggers the better focus styles even for links, which still use a dotted\\n * outline in Firefox by default.\\n */\\n \\n:-moz-focusring {\\n\\toutline: auto;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n}\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: inherit;\\n  font-weight: inherit;\\n}\\n\\n/**\\n * Reset links to optimize for opt-in styling instead of\\n * opt-out.\\n */\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit;\\n}\\n\\n/**\\n * Reset form element properties that are easy to forget to\\n * style explicitly so you don't inadvertently introduce\\n * styles that deviate from your design system. These styles\\n * supplement a partial reset that is already applied by\\n * normalize.css.\\n */\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  padding: 0;\\n  line-height: inherit;\\n  color: inherit;\\n}\\n\\n/**\\n * Use the configured 'mono' font family for elements that\\n * are expected to be rendered with a monospace font, falling\\n * back to the system monospace stack if there is no configured\\n * 'mono' font family.\\n */\\n\\npre,\\ncode,\\nkbd,\\nsamp {\\n  font-family: theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace);\\n}\\n\\n/**\\n * 1. Make replaced elements `display: block` by default as that's\\n *    the behavior you want almost all of the time. Inspired by\\n *    CSS Remedy, with `svg` added as well.\\n *\\n *    https://github.com/mozdevs/cssremedy/issues/14\\n * \\n * 2. Add `vertical-align: middle` to align replaced elements more\\n *    sensibly by default when overriding `display` by adding a\\n *    utility like `inline`.\\n *\\n *    This can trigger a poorly considered linting error in some\\n *    tools but is included by design.\\n * \\n *    https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210\\n */\\n\\nimg,\\nsvg,\\nvideo,\\ncanvas,\\naudio,\\niframe,\\nembed,\\nobject {\\n  display: block; /* 1 */\\n  vertical-align: middle; /* 2 */\\n}\\n\\n/**\\n * Constrain images and videos to the parent width and preserve\\n * their intrinsic aspect ratio.\\n *\\n * https://github.com/mozdevs/cssremedy/issues/14\\n */\\n\\nimg,\\nvideo {\\n  max-width: 100%;\\n  height: auto;\\n}\\n\\n/**\\n * Ensure the default browser behavior of the `hidden` attribute.\\n */\\n\\n[hidden] {\\n  display: none;\\n}\\n\",null],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69\n")},645:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += "}";\n      }\n\n      if (item[2]) {\n        content += "}";\n      }\n\n      if (item[4]) {\n        content += "}";\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0EsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0EscUZBQXFGO0FBQ3JGOztBQUVBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0EsS0FBSztBQUNMLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0JBQXNCLGlCQUFpQjtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixxQkFBcUI7QUFDMUM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsaURBQWlELHFCQUFxQjtBQUN0RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHNEQUFzRCxxQkFBcUI7QUFDM0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///645\n')},537:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join("\\n");\n  }\n\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///537\n')},418:module=>{eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzPzMyMGMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///418\n")},448:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(294),m=__webpack_require__(418),r=__webpack_require__(840);function y(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+"Capture",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||"undefined"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n["checked","multiple","muted","selected"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});["capture","download"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});["cols","rows","size","span"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});["rowSpan","start"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif("function"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E("react.element");ta=E("react.portal");ua=E("react.fragment");wa=E("react.strict_mode");xa=E("react.profiler");ya=E("react.provider");za=E("react.context");Aa=E("react.forward_ref");Ba=E("react.suspense");Ca=E("react.suspense_list");Da=E("react.memo");Ea=E("react.lazy");Fa=E("react.block");E("react.scope");Ga=E("react.opaque.id");Ha=E("react.debug_trace_mode");Ia=E("react.offscreen");Ja=E("react.legacy_hidden")}\nvar Ka="function"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||"object"!==typeof a)return null;a=Ka&&a[Ka]||a["@@iterator"];return"function"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||""}return"\\n"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return"";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\\n"),\nf=d.stack.split("\\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return"\\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:"")?Na(a):""}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na("Lazy");case 13:return Na("Suspense");case 19:return Na("SuspenseList");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return""}}\nfunction Ra(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua:return"Fragment";case ta:return"Portal";case xa:return"Profiler";case wa:return"StrictMode";case Ba:return"Suspense";case Ca:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za:return(a.displayName||"Context")+".Consumer";case ya:return(a._context.displayName||"Context")+".Provider";case Aa:var b=a.render;b=b.displayName||b.name||"";\nreturn a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function Ta(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}\nfunction Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,"checked",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}\nfunction bb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function db(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};\nfunction lb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function mb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}\nvar nb,ob=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else{nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(""+b).trim():b+"px"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case "focusin":case "focusout":kc=null;break;case "dragenter":case "dragleave":lc=null;break;case "mouseover":case "mouseout":mc=null;break;case "pointerover":case "pointerout":nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case "focusin":return kc=tc(kc,a,b,c,d,e),!0;case "dragenter":return lc=tc(lc,a,b,c,d,e),!0;case "mouseover":return mc=tc(mc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};\nfa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",\n"lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in\na)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return"movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",\nSpacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",\n119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return"keypress"===a.type?od(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===\na.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&"CompositionEvent"in window,be=null;fa&&"documentMode"in document&&(be=document.documentMode);var ce=fa&&"TextEvent"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case "keyup":return-1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return!0;default:return!1}}function he(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return"compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if("change"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null)}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae()}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}\nvar Pe=fa&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),\n0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);\nea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+"__bubble";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if("scroll"!==a)return;e|=2;f=d}var g=$e(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":x="focus";k=Fd;break;case "focusout":x="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=\nDd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&\nK.controlled&&"number"===h.type&&bb(h,"number",h.value)}K=d?ue(d):window;switch(a){case "focusin":if(me(K)||"true"===K.contentEditable)Qe=K,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;\ncase "compositionupdate":L="onCompositionUpdate";break b}L=void 0}else ie?ge(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie&&(Q=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),0<d.length&&(e=new Ld("onBeforeInput",\n"beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}\nfunction nf(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--}else"/$"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||"Unknown",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||\n(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if("textarea"!==a.type)throw Error(y(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||\nnull,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if("function"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else"$"!==c&&"$!"!==c&&"$?"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return"function"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36))},\nvoid 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&\n"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===\ntypeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||\n"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case "together":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="")}else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else"dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push("style",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G("cancel",d);G("close",d);break;case "iframe":case "object":case "embed":G("load",d);break;case "video":case "audio":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case "source":G("error",d);break;case "img":case "image":case "link":G("error",d);G("load",d);break;case "details":G("toggle",d);break;case "input":Za(d,f);G("invalid",d);break;case "select":d._wrapperState=\n{wasMultiple:!!f.multiple};G("invalid",d);break;case "textarea":hb(d,f),G("invalid",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G("scroll",d));switch(c){case "input":Va(d);cb(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case "dialog":G("cancel",a);G("close",a);\ne=d;break;case "iframe":case "object":case "embed":G("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case "source":G("error",a);e=d;break;case "img":case "image":case "link":G("error",a);G("load",a);e=d;break;case "details":G("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);G("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G("invalid",a);break;case "textarea":hb(a,d);e=\ngb(a,d);G("invalid",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb(a,k):"number"===typeof k&&pb(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G("scroll",a):null!=k&&qa(a,f,k,g))}switch(c){case "input":Va(a);cb(a,d,!1);\nbreak;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c="",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e="\\nError generating stack: "+f.message+"\\n"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi="function"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}var Ui="function"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb("display",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];"style"===g?tb(c,h):"dangerouslySetInnerHTML"===g?ob(c,h):"children"===g?pb(c,h):qa(c,g,h,b)}switch(a){case "input":ab(c,d);break;case "textarea":ib(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,"");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}"function"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===\ntypeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if("function"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if("object"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case "input":ab(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+\'][type="radio"]\');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}__webpack_unused_export__=vk;__webpack_unused_export__=uk;\n__webpack_unused_export__=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};__webpack_unused_export__=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};__webpack_unused_export__=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};__webpack_unused_export__=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};__webpack_unused_export__=Wj;__webpack_unused_export__=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\n__webpack_unused_export__=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};__webpack_unused_export__="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///448\n')},935:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(448);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFTMUM7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLEVBQUUseUNBQTZEO0FBQy9ELEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcz84YmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///935\n")},408:(__unused_webpack_module,exports,__webpack_require__)=>{eval('/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar l=__webpack_require__(418),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif("function"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w("react.element");p=w("react.portal");exports.Fragment=w("react.fragment");exports.StrictMode=w("react.strict_mode");exports.Profiler=w("react.profiler");q=w("react.provider");r=w("react.context");t=w("react.forward_ref");exports.Suspense=w("react.suspense");u=w("react.memo");v=w("react.lazy")}var x="function"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||"object"!==typeof a)return null;a=x&&a[x]||a["@@iterator"];return"function"===typeof a?a:null}function z(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,"setState")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return"object"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={"=":"=0",":":"=2"};return"$"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=""===e?"."+N(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M,"$&/")+"/"),O(d,b,c,"",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,"","",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///408\n')},294:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nif (true) {\n  module.exports = __webpack_require__(408);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBeUQ7QUFDM0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanM/YWI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///294\n")},53:(__unused_webpack_module,exports)=>{eval('/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=\nwindow.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhLFlBQVksdUVBQXVFLGtCQUFrQixvQkFBb0IsWUFBWSxnQkFBZ0IsS0FBSyxxQkFBcUIsb0JBQW9CLFlBQVk7QUFDNU4sb0VBQW9FLCtCQUErQixnQkFBZ0IsNkJBQTZCLFFBQVEsT0FBTyxTQUFTLDJCQUEyQixjQUFjLGtEQUFrRCxnQkFBZ0IsbUJBQW1CLGFBQWEsaUJBQWlCLDRCQUE0QixZQUFZLFVBQVUsRUFBRSwrQkFBK0IsY0FBYyxLQUFLLDhDQUE4QyxpQ0FBaUM7QUFDemYsNEJBQTRCLHNOQUFzTiwwTEFBMEwsNkJBQTZCLDRCQUE0QixZQUFZO0FBQ2pmLEdBQUcsZUFBZSwrQkFBK0IsYUFBYSx1S0FBdUssbUNBQW1DLDZCQUE2QixhQUFhLDZCQUE2QixNQUFNLElBQUksMENBQTBDLFNBQVMsOEJBQThCLFdBQVcsY0FBYyxJQUFJLCtCQUErQixnQkFBZ0I7QUFDdGYsYUFBYSwwQkFBMEIsS0FBSyxhQUFhLEtBQUssTUFBTSxnQkFBZ0IsZUFBZSxVQUFVLFFBQVEsRUFBRSxxQkFBcUIsMENBQTBDLGNBQWMsY0FBYyxPQUFPO0FBQ3pOLGNBQWMsV0FBVyxlQUFlLGNBQWMsVUFBVSxPQUFPLHlCQUF5QixJQUFJLEVBQUUsb0NBQW9DLHFGQUFxRiwrQ0FBK0MsY0FBYyxTQUFTLFlBQVksZ0JBQWdCLDhCQUE4Qix5QkFBeUI7QUFDeFgsY0FBYyxlQUFlLFNBQVMsRUFBRSwwQkFBMEIsZ0VBQWdFLFdBQVcsUUFBUSxjQUFjLEtBQUssS0FBSywrQkFBK0IsS0FBSyxXQUFXO0FBQzVOLGdCQUFnQixLQUFLLGNBQWMsS0FBSyxRQUFRLElBQUksS0FBSyxXQUFXLHNFQUFzRSxFQUFFLGlCQUFpQiwwQkFBMEIsZ0JBQWdCLGtCQUFrQiw2QkFBNkIseUJBQXlCLGtEQUFrRCxLQUFLLFVBQVUsT0FBTyxxQkFBcUIsS0FBSyxXQUFXLDZCQUE2QixLQUFLLFNBQVMsUUFBUSxpQkFBaUIsUUFBUSw2QkFBNkI7QUFDcmUsa0NBQWtDLEdBQUcsNEJBQTRCLEdBQUcsK0JBQStCLEdBQUcsMEJBQTBCLE1BQU0scUNBQXFDLEdBQUcsK0JBQStCLGFBQWEsaUJBQWlCLGtDQUFrQyxZQUFZLG1CQUFtQix3Q0FBd0MsWUFBWSxVQUFVLHFDQUFxQyxZQUFZO0FBQzNaLHFCQUFxQixhQUFhLFVBQVUsNkJBQTZCLE1BQU0sWUFBWSxRQUFRLElBQUksSUFBSSxXQUFXLFFBQVEsTUFBTSwrQkFBK0IsY0FBYyw2QkFBNkIsR0FBRyxnQ0FBZ0MsZUFBZSxVQUFVLHlDQUF5QyxZQUFZLFFBQVEsSUFBSSxJQUFJLFdBQVcsUUFBUTtBQUNsVyxpQ0FBaUMsaUJBQWlCLDZCQUE2QiwrRUFBK0UsVUFBVSxnQkFBZ0IsTUFBTSxhQUFhLE1BQU0sb0JBQW9CLE1BQU0sYUFBYSxNQUFNLGNBQWMsTUFBTSxHQUFHLDZFQUE2RSxpSEFBaUg7QUFDbmQsNkJBQTZCLGFBQWEsUUFBUSxrQkFBa0IsUUFBUSxJQUFJLElBQUksK0JBQStCLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanM/ZmIwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n')},840:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nif (true) {\n  module.exports = __webpack_require__(53);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx3Q0FBNkQ7QUFDL0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzQwMjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///840\n")},379:module=>{eval('\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUJBQXFCLDZCQUE2QjtBQUNsRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///379\n')},569:module=>{eval('\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///569\n')},216:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzP2RlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///216\n')},565:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxjQUFjLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///565\n')},795:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n\n  var needLayer = typeof obj.layer !== "undefined";\n\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += "}";\n  }\n\n  if (obj.media) {\n    css += "}";\n  }\n\n  if (obj.supports) {\n    css += "}";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRDs7QUFFQTtBQUNBLDBDQUEwQztBQUMxQzs7QUFFQTs7QUFFQTtBQUNBLGlGQUFpRjtBQUNqRjs7QUFFQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTtBQUNBLHlEQUF5RDtBQUN6RCxJQUFJOztBQUVKOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcz9lNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///795\n')},589:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///589\n")}},__webpack_module_cache__={};function __webpack_require__(I){var t=__webpack_module_cache__[I];if(void 0!==t)return t.exports;var g=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](g,g.exports,__webpack_require__),g.exports}__webpack_require__.n=I=>{var t=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(I,t)=>{for(var g in t)__webpack_require__.o(t,g)&&!__webpack_require__.o(I,g)&&Object.defineProperty(I,g,{enumerable:!0,get:t[g]})},__webpack_require__.o=(I,t)=>Object.prototype.hasOwnProperty.call(I,t);var __webpack_exports__=__webpack_require__(701)})();